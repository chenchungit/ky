//#define ONLINE_TEST1 //是否打开压力测试代码1 用于测试新手场景压力
#define ___CC___FUCK___YOU___BB___
#define OldGrid2
#define TestGrid
using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;
using System.Windows;
using System.Threading;
using Server.Data;
using GameServer.Server;
using Server.TCP;
using Server.Protocol;
using Server.Tools;
using System.Net.Sockets;
using HSGameEngine.Tools.AStarEx;
//using System.Windows.Forms;
using System.Text;
using GameServer.Interface;
//using Lua511;
//using LuaInterface;
using System.IO;
//using SharpLua;
using GameServer.Core.GameEvent;
using GameServer.Core.Executor;
using GameServer.Core.GameEvent.EventOjectImpl;
using GameServer.Logic.LiXianBaiTan;
using GameServer.Logic.MUWings;
using GameServer.Logic.JingJiChang;
using GameServer.Logic.Copy;
using System.Net;
using System.Collections.Specialized;
using Neo.IronLua;
using GameServer.Logic.Damon;
using GameServer.Logic.YueKa;
//using GameServer.Logic.Judge;
using GameServer.Logic.UserReturn;
using GameServer.Logic.Goods;
using Tmsk.Contract;
using GameServer.Logic.WanMota;
using GameServer.Logic.FluorescentGem;
using GameServer.Logic.ActivityNew;
using GameServer.Logic.ActivityNew.SevenDay;
using GameServer.Logic.Spread;
using GameServer.Logic.OnePiece;
using GameServer.Logic.CheatGuard;
using System.Collections;
using GameServer.Logic.Video;
using GameServer.Logic.UnionAlly;
using System.Reflection;
using ProtoBuf;
using CC;

namespace GameServer.Logic
{
    public class Global
    {
        static Global()
        {
            XmlInfo = new Dictionary<string, XElement>();
        }

        #region 静态变量

        /// <summary>
        /// PK的最小等级
        /// </summary>
        public const int ConstPKNeedLevel = 60;

        /// <summary>
        /// 组队副本配置的copytype(目前定位1,与以前的组队副本相同)
        /// </summary>
        public const int ConstTeamCopyType = 1;

        /// <summary>
        /// 限时抢购列表物品个数
        /// </summary>
        public const int ConstQiangGouListCount = 4;

        /// <summary>
        /// 限时合服抢购列表物品个数
        /// </summary>
        public const int ConstHeFuQiangGouListCount = 4;

        /// <summary>
        /// 限时节日抢购列表物品个数
        /// </summary>
        public const int ConstJieRiQiangGouListCount = 4;

        /// <summary>
        /// 最大冥想时间
        /// </summary>
        public const int ConstMaxMeditateTime = 12 * 60 * 60 * 1000;

        /// <summary>
        /// 最大购买的离线摆摊时间
        /// </summary>
        public const int ConstMaxLiXianBaiTanTicks = 48 * 12 * 3600 * 1000;

        /// <summary>
        /// 离线摆摊时间限制
        /// </summary>
        public const int ConstLiXianBaiTanTicks = 12 * 3600 * 1000; // 3 * 60 * 1000; //

        /// <summary>
        /// 是否打开MU交易所功能
        /// </summary>
        public const bool Flag_MUSale = true;

        /// <summary>
        /// 是否启用名字服务器
        /// </summary>
        public static bool Flag_NameServer = false;

        /// <summary>
        /// 是否启用新手场景
        /// </summary>
        public static bool Flag_EnabelNewPlayerScene = false;

        /// <summary>
        /// 广播成就称号的最小级别
        /// </summary>
        public const int ConstBroadcastMinChengJiuLevel = 4;

        /// <summary>
        /// 广播军衔称号的最小级别
        /// </summary>
        public const int ConstBroadcastMinJunXianLevel = 4;

        public const int Max_Role_YinLiang = 1000000000;

        public const int Max_Role_Money = 1000000000;

        /// <summary>
        /// 代码检查
        /// </summary>
        public static void CheckCodes()
        {
            bool result = true;
            result &= CheckDuplicateEnum(typeof(MagicActionIDs));
            result &= CheckDuplicateEnum(typeof(GongNengIDs));
            result &= CheckDuplicateEnum(typeof(SceneUIClasses));
            result &= CheckDuplicateEnum(typeof(ExtPropIndexes));
            result &= CheckDuplicateEnum(typeof(ItemCategories));
            result &= CheckDuplicateEnum(typeof(ActivityTypes));
            result &= CheckDuplicateFieldValue(typeof(RoleParamName));
        }

        public static string[] DontCheckEnumNames = new string[] { "Max", "Max_Configed", };

        /// <summary>
        /// 枚举常量定义重复性检查
        /// </summary>
        /// <param name="type"></param>
        /// <returns></returns>
        public static bool CheckDuplicateEnum(Type type)
        {
            bool result = true;
            Array array;
            HashSet<int> hashSet = new HashSet<int>();

            array = type.GetEnumValues();
            foreach (var v0 in array)
            {
                int v = (int)v0;
                if (!hashSet.Add(v) && !DontCheckEnumNames.Contains(v0.ToString()))
                {
                    LogManager.WriteLog(LogTypes.Fatal, string.Format("枚举类型[{0}]定义常量值[{1}]重复", type.ToString(), v));
                    result = false;
                }
            }

            return result;
        }

        /// <summary>
        /// 静态类常量定义重复性检查
        /// </summary>
        /// <param name="type"></param>
        /// <returns></returns>
        public static bool CheckDuplicateFieldValue(Type type)
        {
            bool result = true;
            HashSet<string> hashSet = new HashSet<string>();

            FieldInfo[] fields = type.GetFields();
            foreach (var field in fields)
            {
                string v = field.GetValue(null).ToString();
                if (!hashSet.Add(v))
                {
                    LogManager.WriteLog(LogTypes.Fatal, string.Format("类型[{0}]定义常量值[{1}]重复", type.ToString(), v));
                    result = false;
                }
            }

            return result;
        }

        #endregion

        #region 移动的帧率

        public static int MovingFrameRate = 50;

        #endregion 移动的帧率

        #region 每个格子移动的时间(毫秒)

        public static int MovingNeedTicksPerGrid = 400;
        /// <summary>
        /// 一次移动的格子步长
        /// </summary>
        public static int MovingNeedStepPerGrid = 3;

        #endregion 每个格子移动的时间(毫秒)

        #region 资源名称定义

        /// <summary>
        /// 游戏的基本数据, 需要预先下载到本地
        /// </summary>
        public const string GAME_RES_FILE = "GameRes.zip";
        public const string GAME_RES_NAME = "GameRes";

        /// <summary>
        /// 游戏的配置文件
        /// </summary>
        public const string GAME_CONFIG_SETTINGS_FILE = "Config/Settings.xml";
        public const string GAME_CONFIG_SETTINGS_NAME = "ConfigSettings";

        /// <summary>
        /// 游戏的升级经验值配置文件
        /// </summary>
        public const string GAME_CONFIG_LEVELUP_FILE = "Config/LevelUp.xml";
        public const string GAME_CONFIG_LEVELUP_NAME = "ConfigLevelUp";

        /// <summary>
        /// 游戏的装备和物品配置文件
        /// </summary>
        public const string GAME_CONFIG_GOODS_FILE = "Config/Goods.xml";
        public const string GAME_CONFIG_GOODS_NAME = "Configgoods";

        /// <summary>
        /// 游戏的中要掉落的装备和物品配置文件
        /// </summary>
        public const string GAME_CONFIG_MONSTERGOODSLIST_FILE = "Config/MonsterGoodsList.xml";
        public const string GAME_CONFIG_MONSTERGOODSLIST_NAME = "ConfigMonsterGoodsList";

        /// <summary>
        /// 游戏的中要掉落的物品品质ID配置文件
        /// </summary>
        public const string GAME_CONFIG_GOODSQUALITY_FILE = "Config/GoodsQuality.xml";
        public const string GAME_CONFIG_GOODSQUALITY_NAME = "ConfigGoodsQuality";

        /// <summary>
        /// 游戏的中 经脉ID配置文件
        /// </summary>
        public const string GAME_CONFIG_JINGMAI_FILE = "Config/JingMai.xml";
        public const string GAME_CONFIG_JINGMAI_NAME = "ConfigJingMai";
        #endregion //资源名称定义

        #region 全局的对象

        /// <summary>
        /// 通讯管理对象
        /// </summary>
        public static TCPManager _TCPManager = null;

        /// <summary>
        /// 发送缓存列表对象
        /// </summary>
        public static SendBufferManager _SendBufferManager = null;

        /// <summary>
        /// 内存缓冲对象
        /// </summary>
        public static MemoryManager _MemoryManager = null;

        /// <summary>
        /// 发送缓冲区发送错误管理对象
        /// </summary>
        public static FullBufferManager _FullBufferManager = null;

        #endregion //全局的对象

        #region 数据对象缓存

        /// <summary>
        /// 保存从服务器端获取XML流节点
        /// </summary>
        public static Dictionary<string, XElement> XmlInfo;

        #endregion //数据对象缓存

        #region 相对路径

        /// <summary>
        /// 游戏资源的存放位置
        /// </summary>
        public static string AbsoluteGameResPath = "";

        /// <summary>
        // 真实路径 [2/21/2014 LiaoWei]
        /// </summary>
        public static string RealAbsoluteGameResPath = "";

        /// <summary>
        // 默认技能数组 [3/15/2014 LiaoWei]
        /// </summary>
        public static int[] DefaultSkill1 = { 100, 187, 188, 189, 190 }; // 战士
        public static int[] DefaultSkill2 = { 1, 2, 3, 0, 0 }; // 法师
        public static int[] DefaultSkill3 = { 300, 388, 389, 390, 391 };  // 弓箭手
        //public static int[] DefaultSkill4 = { 300, 388, 389, 390, 391 }; // 魔剑士 [4/15/2015 chdeng] 因魔剑士初始已给全部技能 不需要默认技能 [XSea 2015/5/20]

        /// <summary>
        /// 配置文件路径结构配置
        /// 0：服务器和客户端使用不同的目录结构
        /// 1：服务器使用客户端的目录结构
        /// </summary>
        private static int ConfigPathStructType = 0;

        /// <summary>
        /// 检查目录结构类型，优先使用类型1
        /// 注意，1.7.x及更早的版本还不支持类型1，传奇项目只支持类型1
        /// </summary>
        public static void CheckConfigPathType()
        {
            ConfigPathStructType = 1;
            if (Directory.Exists(Global.GameResPath("Config")) && Directory.Exists(Global.ResPath("Map"))
                && Directory.Exists(Global.ResPath("MapConfig")) && Directory.Exists(Global.IsolateResPath("Config")))
            {
                return;
            }

            ConfigPathStructType = 0;
            if (Directory.Exists(Global.GameResPath("Config")) && Directory.Exists(Global.ResPath("Map"))
                && Directory.Exists(Global.ResPath("MapConfig")) && Directory.Exists(Global.IsolateResPath("Config")))
            {
                return;
            }

            LogManager.WriteLog(LogTypes.Fatal, "配置文件目录结构不正确");
        }

        /// <summary>
        /// 获取游戏资源的绝对路径
        /// </summary>
        /// <param name="uri">相对路径</param>
        /// <returns>游戏资源路径</returns>
        public static string GameResPath(string uri)
        {
            if (ConfigPathStructType == 1)
            {
                return string.Format("{0}/GameRes/{1}", Global.AbsoluteGameResPath, uri);
            }
            else
            {
                return string.Format("{0}/GameRes/GameRes/{1}", Global.AbsoluteGameResPath, uri);
            }
        }

        public static string ResPath(string uri)
        {
            if (ConfigPathStructType == 1)
            {
                return string.Format("{0}/{1}", Global.AbsoluteGameResPath, uri);
            }
            else
            {
                return string.Format("{0}/GameRes/GameRes/{1}", Global.AbsoluteGameResPath, uri);
            }
        }

        /// <summary>
        /// 获取分区独立资源的绝对路径
        /// </summary>
        /// <param name="uri">相对路径</param>
        /// <returns>游戏资源路径</returns>
        public static string IsolateResPath(string uri)
        {
            if (ConfigPathStructType == 1)
            {
                return string.Format("{0}/ServerRes/{1}/IsolateRes/{2}", Global.AbsoluteGameResPath, /*GameManager.ServerLineID*/1, uri);
            }
            else
            {
                return string.Format("{0}/GameRes/IsolateRes/{1}", Global.AbsoluteGameResPath, uri);
            }
        }

        #endregion //相对路径

        #region XML操作相关

        /// <summary>
        /// 从游戏资源获取XML
        /// </summary>
        /// <param name="uri">XML文件的相对的路径</param>
        /// <returns>XML对象</returns>
        public static XElement GetGameResXml(string uri)
        {
            return XElement.Load(GameResPath(uri));
        }

        public static XElement GetResXml(string uri)
        {
            return XElement.Load(ResPath(uri));
        }

        /// <summary>
        /// 加载XElement类型系统参数及设置并缓存
        /// </summary>
        /// <param name="key">字典中的键名</param>
        /// <param name="element">XElement</param>
        public static void AddXElement(string key, XElement element)
        {
            if (!XmlInfo.ContainsKey(key))
            {
                XmlInfo.Add(key, element);
            }
        }

        /// <summary>
        /// 获取指定的xml节点的节点路径
        /// </summary>
        /// <param name="element"></param>
        public static string GetXElementNodePath(XElement element)
        {
            try
            {
                string path = element.Name.ToString();
                element = element.Parent;
                while (null != element)
                {
                    path = element.Name.ToString() + "/" + path;
                    element = element.Parent;
                }

                return path;
            }
            catch (Exception)
            {
                return "";
            }
        }

        /// <summary>
        /// 获取XML文件树节点段XElement
        /// </summary>
        /// <param name="XML">XML文件载体</param>
        /// <param name="newroot">要查找的独立节点</param>
        /// <returns>独立节点XElement</returns>
        public static XElement GetXElement(XElement XML, string newroot)
        {
            return XML.DescendantsAndSelf(newroot).Single();
        }

        /// <summary>
        /// 获取XML文件树节点段XElement
        /// </summary>
        /// <param name="XML">XML文件载体</param>
        /// <param name="newroot">要查找的独立节点</param>
        /// <returns>独立节点XElement</returns>
        public static XElement GetSafeXElement(XElement XML, string newroot)
        {
            try
            {
                return XML.DescendantsAndSelf(newroot).Single();
            }
            catch (Exception)
            {
                throw new Exception(string.Format("读取: {0} 失败, xml节点名: {1}", newroot, GetXElementNodePath(XML)));
            }
        }

        /// <summary>
        /// 获取XML文件树节点段XElement
        /// </summary>
        /// <param name="xml">XML文件载体</param>
        /// <param name="mainnode">要查找的主节点</param>
        /// <param name="attribute">主节点条件属性名</param>
        /// <param name="value">主节点条件属性值</param>
        /// <returns>以该主节点为根的XElement</returns>
        public static XElement GetXElement(XElement XML, string newroot, string attribute, string value)
        {
            return XML.DescendantsAndSelf(newroot).Single(X => X.Attribute(attribute).Value == value);
        }

        /// <summary>
        /// 获取XML文件树节点段XElement
        /// </summary>
        /// <param name="xml">XML文件载体</param>
        /// <param name="mainnode">要查找的主节点</param>
        /// <param name="attribute">主节点条件属性名</param>
        /// <param name="value">主节点条件属性值</param>
        /// <returns>以该主节点为根的XElement</returns>
        public static XElement GetSafeXElement(XElement XML, string newroot, string attribute, string value)
        {
            try
            {
                return XML.DescendantsAndSelf(newroot).Single(X => X.Attribute(attribute).Value == value);
            }
            catch (Exception ex)
            {
                throw new Exception(string.Format("读取: {0}/{1}={2} 失败, xml节点名: {3} ", newroot, attribute, value, GetXElementNodePath(XML)) + ex.Message);
            }
        }

        /// <summary>
        /// 获取属性值
        /// </summary>
        /// <param name="XML"></param>
        /// <param name="attribute"></param>
        /// <returns></returns>
        public static XAttribute GetSafeAttribute(XElement XML, string attribute)
        {
            try
            {
                XAttribute attrib = XML.Attribute(attribute);
                if (null == attrib)
                {
                    throw new Exception(string.Format("读取属性: {0} 失败, xml节点名: {1}", attribute, GetXElementNodePath(XML)));
                }

                return attrib;
            }
            catch (Exception)
            {
                throw new Exception(string.Format("读取属性: {0} 失败, xml节点名: {1}", attribute, GetXElementNodePath(XML)));
            }
        }

        /// <summary>
        /// 获取属性值(字符串)
        /// </summary>
        /// <param name="XML"></param>
        /// <param name="attribute"></param>
        /// <returns></returns>
        public static string GetSafeAttributeStr(XElement XML, string attribute)
        {
            XAttribute attrib = GetSafeAttribute(XML, attribute);
            return (string)attrib;
        }

        /// <summary>
        /// 获取属性值(字符串) 如果取不到返回默认值
        /// </summary>
        /// <param name="XML"></param>
        /// <param name="attribute"></param>
        /// <returns></returns>
        public static string GetDefAttributeStr(XElement XML, string attribute, string strdef)
        {
            XAttribute attrib = XML.Attribute(attribute);
            if (null == attrib)
                return strdef;

            return (string)attrib;
        }

        /// <summary>
        /// 获取属性值(整型)
        /// </summary>
        /// <param name="XML"></param>
        /// <param name="attribute"></param>
        /// <returns></returns>
        public static long GetSafeAttributeLong(XElement XML, string attribute)
        {
            XAttribute attrib = GetSafeAttribute(XML, attribute);
            string str = (string)attrib;
            if (null == str || str == "") return -1;

            try
            {
                return (long)Convert.ToDouble(str);
            }
            catch (Exception)
            {
                throw new Exception(string.Format("读取属性: {0} 失败, xml节点名: {1}", attribute, GetXElementNodePath(XML)));
            }
        }
        /// <summary>
        ///获取属性的32位整型数组
        /// </summary>
        /// <param name="XML"></param>
        /// <param name="attribute"></param>
        /// <param name="length"></param>
        /// <returns></returns>
        public static int[] GetSafeAttributeIntArray(XElement XML, string attribute, int length = -1)
        {
            XAttribute attrib = GetSafeAttribute(XML, attribute);
            string str = (string)attrib;
            if (null == str || str == "") return null;
            try
            {
                string[] args = str.Split(',');
                if (length > args.Length && length != args.Length)
                {
                    return null;
                }
                return StringArray2IntArray(args);
            }
            catch (Exception)
            {
                throw new Exception(string.Format("读取属性: {0} 失败, xml节点名: {1}", attribute, GetXElementNodePath(XML)));
            }
        }
        /// <summary>
        /// 获取属性值(整型数组)
        /// </summary>
        /// <param name="XML"></param>
        /// <param name="attribute"></param>
        /// <returns></returns>
        public static long[] GetSafeAttributeLongArray(XElement XML, string attribute, int length = -1)
        {
            XAttribute attrib = GetSafeAttribute(XML, attribute);
            string str = (string)attrib;
            if (null == str || str == "") return null;

            try
            {
                string[] args = str.Split(',');
                if (length > args.Length && length != args.Length)
                {
                    return null;
                }
                long[] result = new long[args.Length];
                for (int i = 0; i < args.Length; i++)
                {
                    result[i] = Global.SafeConvertToInt64(args[i]);
                }
                return result;
            }
            catch (Exception)
            {
                throw new Exception(string.Format("读取属性: {0} 失败, xml节点名: {1}", attribute, GetXElementNodePath(XML)));
            }
        }

        /// <summary>
        /// 获取属性值(整型数组)
        /// </summary>
        /// <param name="XML"></param>
        /// <param name="attribute"></param>
        /// <returns></returns>
        public static double[] GetSafeAttributeDoubleArray(XElement XML, string attribute, int length = -1)
        {
            XAttribute attrib = GetSafeAttribute(XML, attribute);
            string str = (string)attrib;
            if (null == str || str == "") return null;

            try
            {
                string[] args = str.Split(',');
                if (length > args.Length && length != args.Length)
                {
                    return null;
                }
                double[] result = new double[args.Length];
                for (int i = 0; i < args.Length; i++)
                {
                    result[i] = Global.SafeConvertToDouble(args[i]);
                }
                return result;
            }
            catch (Exception)
            {
                throw new Exception(string.Format("读取属性: {0} 失败, xml节点名: {1}", attribute, GetXElementNodePath(XML)));
            }
        }

        /// <summary>
        /// 获取属性值(浮点)
        /// </summary>
        /// <param name="XML"></param>
        /// <param name="attribute"></param>
        /// <returns></returns>
        public static double GetSafeAttributeDouble(XElement XML, string attribute)
        {
            XAttribute attrib = GetSafeAttribute(XML, attribute);
            string str = (string)attrib;
            if (null == str || str == "") return 0.0;

            try
            {
                return Convert.ToDouble(str);
            }
            catch (Exception)
            {
                throw new Exception(string.Format("读取属性: {0} 失败, xml节点名: {1}", attribute, GetXElementNodePath(XML)));
            }
        }

        /// <summary>
        /// 取得xml的属性值
        /// </summary>
        /// <param name="XML"></param>
        /// <param name="root"></param>
        /// <param name="attribute"></param>
        /// <returns></returns>
        public static XAttribute GetSafeAttribute(XElement XML, string root, string attribute)
        {
            try
            {
                XAttribute attrib = XML.Element(root).Attribute(attribute);
                if (null == attrib)
                {
                    throw new Exception(string.Format("读取属性: {0}/{1} 失败, xml节点名: {2}", root, attribute, GetXElementNodePath(XML)));
                }

                return attrib;
            }
            catch (Exception)
            {
                throw new Exception(string.Format("读取属性: {0}/{1} 失败, xml节点名: {2}", root, attribute, GetXElementNodePath(XML)));
            }
        }

        /// <summary>
        /// 取得xml的属性值(字符串)
        /// </summary>
        /// <param name="XML"></param>
        /// <param name="root"></param>
        /// <param name="attribute"></param>
        /// <returns></returns>
        public static string GetSafeAttributeStr(XElement XML, string root, string attribute)
        {
            XAttribute attrib = GetSafeAttribute(XML, root, attribute);
            return (string)attrib;
        }

        /// <summary>
        /// 取得xml的属性值(整型值)
        /// </summary>
        /// <param name="XML"></param>
        /// <param name="root"></param>
        /// <param name="attribute"></param>
        /// <returns></returns>
        public static long GetSafeAttributeLong(XElement XML, string root, string attribute)
        {
            XAttribute attrib = GetSafeAttribute(XML, root, attribute);
            string str = (string)attrib;
            if (null == str || str == "") return -1;

            try
            {
                return (long)Convert.ToDouble(str);
            }
            catch (Exception)
            {
                throw new Exception(string.Format("读取属性: {0}/{1} 失败, xml节点名: {2}", root, attribute, GetXElementNodePath(XML)));
            }
        }

        /// <summary>
        /// 取得xml的属性值(浮点型)
        /// </summary>
        /// <param name="XML"></param>
        /// <param name="root"></param>
        /// <param name="attribute"></param>
        /// <returns></returns>
        public static double GetSafeAttributeDouble(XElement XML, string root, string attribute)
        {
            XAttribute attrib = GetSafeAttribute(XML, root, attribute);
            string str = (string)attrib;
            if (null == str || str == "") return -1;

            try
            {
                return Convert.ToDouble(str);
            }
            catch (Exception)
            {
                throw new Exception(string.Format("读取属性: {0}/{1} 失败, xml节点名: {2}", root, attribute, GetXElementNodePath(XML)));
            }
        }

        #endregion //XML操作相关

        #region 移动和距离

        /// <summary>
        /// 通过正切值获取精灵的朝向代号
        /// </summary>
        /// <param name="targetX">目标点的X值</param>
        /// <param name="targetY">目标点的Y值</param>
        /// <param name="currentX">当前点的X值</param>
        /// <param name="currentY">当前点的Y值</param>
        /// <returns>精灵朝向代号(以北为0顺时针依次1,2,3,4,5,6,7)</returns>
        public static double GetDirectionByTan(double targetX, double targetY, double currentX, double currentY)
        {
            //double tan = (targetY - currentY) / (targetX - currentX);
            //if (Math.Abs(tan) >= Math.Tan(Math.PI * 3 / 8) && targetY <= currentY)
            //{
            //    return 0;
            //}
            //else if (Math.Abs(tan) > Math.Tan(Math.PI / 8) && Math.Abs(tan) < Math.Tan(Math.PI * 3 / 8) && targetX > currentX && targetY < currentY)
            //{
            //    return 1;
            //}
            //else if (Math.Abs(tan) <= Math.Tan(Math.PI / 8) && targetX >= currentX)
            //{
            //    return 2;
            //}
            //else if (Math.Abs(tan) > Math.Tan(Math.PI / 8) && Math.Abs(tan) < Math.Tan(Math.PI * 3 / 8) && targetX > currentX && targetY > currentY)
            //{
            //    return 3;
            //}
            //else if (Math.Abs(tan) >= Math.Tan(Math.PI * 3 / 8) && targetY >= currentY)
            //{
            //    return 4;
            //}
            //else if (Math.Abs(tan) > Math.Tan(Math.PI / 8) && Math.Abs(tan) < Math.Tan(Math.PI * 3 / 8) && targetX < currentX && targetY > currentY)
            //{
            //    return 5;
            //}
            //else if (Math.Abs(tan) <= Math.Tan(Math.PI / 8) && targetX <= currentX)
            //{
            //    return 6;
            //}
            //else if (Math.Abs(tan) > Math.Tan(Math.PI / 8) && Math.Abs(tan) < Math.Tan(Math.PI * 3 / 8) && targetX < currentX && targetY < currentY)
            //{
            //    return 7;
            //}
            //else
            //{
            //    return 0;
            //}
            return Global.GetDirectionByAspect((int)targetX, (int)targetY, (int)currentX, (int)currentY);
        }

        /// <summary>
        /// 寻路模式中根据单元格方向来判断精灵朝向
        /// </summary>
        /// <param name="targetX">目标点的X值</param>
        /// <param name="targetY">目标点的Y值</param>
        /// <param name="currentX">当前点的X值</param>
        /// <param name="currentY">当前点的Y值</param>
        /// <returns>精灵朝向代号(以北为0顺时针依次1,2,3,4,5,6,7)</returns>
        public static double GetDirectionByAspect(int targetX, int targetY, int currentX, int currentY)
        {
            int direction = 0;
            if (targetX < currentX)
            {
                if (targetY < currentY)
                {
                    direction = 5;
                }
                else if (targetY == currentY)
                {
                    direction = 6;
                }
                else if (targetY > currentY)
                {
                    direction = 7;
                }
            }
            else if (targetX == currentX)
            {
                if (targetY < currentY)
                {
                    direction = 4;
                }
                else if (targetY > currentY)
                {
                    direction = 0;
                }
            }
            else if (targetX > currentX)
            {
                if (targetY < currentY)
                {
                    direction = 3;
                }
                else if (targetY == currentY)
                {
                    direction = 2;
                }
                else if (targetY > currentY)
                {
                    direction = 1;
                }
            }
            return direction;
        }

        /// <summary>
        /// 根据点商值计算角度
        /// </summary>
        /// <param name="y">y2-y1值</param>
        /// <param name="x">x2-x1值</param>
        /// <returns>直角坐标系角度</returns>
        public static double GetAngle(double y, double x)
        {
            return Math.Atan2(y, x) / Math.PI * 180;
        }

        /// <summary>
        /// 根据两点间的方向和限定角度，求360度范围内的夹角
        /// </summary>
        /// <param name="targetX"></param>
        /// <param name="targetY"></param>
        /// <param name="currentX"></param>
        /// <param name="currentY"></param>
        /// <param name="angleLimit"></param>
        /// <param name="loAngle"></param>
        /// <param name="hiAngle"></param>
        public static void GetAngleRangeByDirection(int direction, double angleLimit, out double loAngle, out double hiAngle)
        {
            loAngle = 0.0;
            hiAngle = 0.0;

            if (angleLimit <= 0 || angleLimit >= 360.0)
            {
                loAngle = 0.0;
                hiAngle = 360.0;
                return;
            }

            double centerAngle = 45.0 * direction;

            hiAngle = centerAngle + (angleLimit / 2.0);
            if (hiAngle >= 360.0) hiAngle = hiAngle - 360.0;

            loAngle = centerAngle - (angleLimit / 2.0);
            if (loAngle < 0.0) loAngle = 360.0 + loAngle;
        }

        /// <summary>
        /// 射线p0->p1相对于Y轴负向顺时针旋转角度
        /// </summary>
        /// <param name="pt1"></param>
        /// <param name="pt2"></param>
        /// <returns></returns>
        public static double GetCircleAngle(Point p0, Point p1)
        {
            if (p0 == p1) return 0.0;

            double rotateDegree = Math.Atan2(Math.Abs(p1.Y - p0.Y), Math.Abs(p1.X - p0.X)) * 180.0 / Math.PI;

            if (p1.X >= p0.X && p0.Y < p1.Y) //第一象限
            {
                rotateDegree = 90.0 - rotateDegree;
            }
            else if (p1.X >= p0.X && p0.Y >= p1.Y) //第二象限
            {
                rotateDegree = 90.0 + rotateDegree;
            }
            else if (p1.X < p0.X && p0.Y >= p1.Y) //第三象限
            {
                rotateDegree = 270.0 - rotateDegree;
            }
            else if (p1.X < p0.X && p0.Y < p1.Y) //第四象限
            {
                rotateDegree = 270.0 + rotateDegree;
            }

            return rotateDegree;
        }

        /// <summary>
        /// 求角度是否在某个角度范围内
        /// </summary>
        /// <param name="angle"></param>
        /// <param name="loAngle"></param>
        /// <param name="hiAngle"></param>
        /// <returns></returns>
        public static bool InAngleRange(double angle, double loAngle, double hiAngle)
        {
            if (hiAngle > loAngle)
            {
                return (angle >= loAngle && angle <= hiAngle);
            }

            return (angle >= loAngle && angle < 360.0) || (angle >= 0.0 && angle <= hiAngle);
        }

        /// <summary>
        /// 判断点是否在圆内(非常适合计算扇形攻击内的目标), 这个是以中心点的面向作为y轴正方向？？？
        /// </summary>
        /// <param name="target">目标点坐标</param>
        /// <param name="center">圆心坐标</param>
        /// <param name="radius">圆半径</param>
        /// <returns></returns>
        public static bool InCircleByAngle(Point target, Point center, double radius, double loAngle, double hiAngle)
        {
            if (target.X == center.X && target.Y == center.Y)
            {
                return true;
            }

            double angle = GetCircleAngle(center, target);
            if (!InAngleRange(angle, loAngle, hiAngle)) return false;
            return Math.Pow(target.X - center.X, 2) + Math.Pow(target.Y - center.Y, 2) <= Math.Pow(radius, 2) ? true : false;
        }

        /// <summary>
        /// 判断点是否在圆内
        /// </summary>
        /// <param name="target">目标点坐标</param>
        /// <param name="center">圆心坐标</param>
        /// <param name="radius">圆半径</param>
        /// <returns></returns>
        public static bool InCircle(Point target, Point center, double radius)
        {
            double lenght1 = Math.Pow(target.X - center.X, 2) + Math.Pow(target.Y - center.Y, 2);
            double lenght2 = Math.Pow(radius, 2);
            return lenght1 <= lenght2 ? true : false;
        }

        /// <summary>
        /// 判断点是否在圆内
        /// </summary>
        /// <param name="target">目标点坐标</param>
        /// <param name="center">圆心坐标</param>
        /// <param name="radius">圆半径</param>
        /// <returns></returns>
        public static bool InCircleByGridNum(int mapCode, Point target, Point center, double radiusGridNum)
        {
            GameMap gameMap = GameManager.MapMgr.DictMaps[mapCode];
            int gridX = (int)(center.X / gameMap.MapGridWidth);
            int gridY = (int)(center.Y / gameMap.MapGridHeight);

            int gridX1 = (int)(target.X / gameMap.MapGridWidth);
            int gridY1 = (int)(target.Y / gameMap.MapGridHeight);
            /*if (gridX1 >= gridX && gridX1 >= (gridX + radiusGridNum))
            {
                return false;
            }

            if (gridY1 >= gridY && gridY1 >= (gridY + radiusGridNum))
            {
                return false;
            }*/
            if (gridX1 >= gridX && gridX1 <= (gridX + radiusGridNum))
            {
                if (gridY1 >= gridY && gridY1 <= (gridY + radiusGridNum))
                {
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// 判断点是否在多边形内(射线法)
        /// </summary>
        /// <param name="target">目标点</param>
        /// <param name="range">多边形各顶点</param>
        /// <returns></returns>
        public static bool InPolygon(Point target, Point[] range)
        {
            int n = 0, count = 0;
            for (int i = 0; i < range.Length; i++)
            {
                n = (i == range.Length - 1) ? 0 : n + 1;
                if ((range[i].Y != range[n].Y) && (((target.Y >= range[i].Y) && (target.Y < range[n].Y)) || ((target.Y >= range[n].Y) && (target.Y < range[i].Y))) && (target.X < (range[n].X - range[i].X) * (target.Y - range[i].Y) / (range[n].Y - range[i].Y) + range[i].X))
                {
                    count++;
                }
            }
            return (count % 2 > 0) ? true : false;
        }

        /// <summary>
        /// 根据两点及延伸长度获取延伸后的点
        /// </summary>
        /// <param name="start">起点</param>
        /// <param name="end">旧终点</param>
        /// <param name="Lenght">延伸后的最终长度</param>
        /// <returns>延伸后的终点</returns>
        public static Point GetExtensionPoint(Point start, Point end, int Lenght)
        {
            double scale = Math.Sqrt(Math.Pow(end.Y - start.Y, 2) + Math.Pow(end.X - start.X, 2)) / Lenght;
            return new Point(start.X + (end.X - start.X) / scale, start.Y + (end.Y - start.Y) / scale);
        }

        /// <summary>
        /// 求两点间的距离
        /// </summary>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <returns></returns>
        public static double GetTwoPointDistance(Point start, Point end)
        {
            return Math.Sqrt(Math.Pow((end.X - start.X), 2) + Math.Pow((end.Y - start.Y), 2));
        }

        /// <summary>
        /// 求两点间的距离的平方【一般用于距离比较】
        /// </summary>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <returns></returns>
        public static double GetTwoPointDistanceSquare(Point start, Point end)
        {
            return Math.Pow((end.X - start.X), 2) + Math.Pow((end.Y - start.Y), 2);
        }

        /// <summary>
        /// 根据45度四象限获取矩形四个顶点(直线穿梭魔法用)
        /// </summary>
        /// <param name="angle">旋转角度</param>
        /// <param name="start">矩形中线起点</param>
        /// <param name="end">矩形中线终点</param>
        /// <param name="radius">矩形中线与边距离</param>
        /// <returns>四个顶点</returns>
        public static Point[] GetRectRange(double angle, Point start, Point end, int radius)
        {
            if ((angle >= 45 && angle <= 135) || (angle >= -135 && angle <= -45))
            {
                return new Point[]{
                    new Point(start.X - radius, start.Y),
                    new Point(start.X + radius, start.Y),
                    new Point(end.X + radius, end.Y),
                    new Point(end.X - radius, end.Y),
                };
            }
            else
            {
                return new Point[]{
                    new Point(start.X, start.Y - radius),
                    new Point(start.X, start.Y + radius),
                    new Point(end.X, end.Y + radius),
                    new Point(end.X, end.Y - radius),
                };
            }
        }

        /// <summary>
        /// 计算出动画时间花费
        /// </summary>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <param name="zoomX"></param>
        /// <param name="zoomY"></param>
        /// <param name="unitCost"></param>
        /// <returns></returns>
        public static double GetAnimationTimeConsuming(Point start, Point end, int zoomX, int zoomY, double unitCost)
        {
            return Math.Sqrt(Math.Pow((end.X - start.X) / zoomX, 2) + Math.Pow((end.Y - start.Y) / zoomY, 2)) * unitCost;
        }

        /// <summary>
        /// 算两个各自之间的近似直线的块的算法
        /// </summary>
        /// <param name="s"></param>
        /// <param name="x1"></param>
        /// <param name="y1"></param>
        /// <param name="x2"></param>
        /// <param name="y2"></param>
        public static bool Bresenham(List<ANode> s, int x1, int y1, int x2, int y2, NodeGrid nodeGrid)
        {
            int t, x, y, dx, dy, error;
            bool flag = Math.Abs(y2 - y1) > Math.Abs(x2 - x1);
            if (flag)
            {
                t = x1; x1 = y1; y1 = t;
                t = x2; x2 = y2; y2 = t;
            }

            bool reverse = false;
            if (x1 > x2)
            {
                t = x1; x1 = x2; x2 = t;
                t = y1; y1 = y2; y2 = t;
                reverse = true;
            }
            dx = x2 - x1;
            dy = Math.Abs(y2 - y1);
            error = dx / 2;
            for (x = x1, y = y1; x <= x2; ++x)
            {
                if (flag)
                {
                    if (null != s)
                    {
                        s.Add(new ANode(y, x));
                    }
                }
                else
                {
                    if (null != s)
                    {
                        s.Add(new ANode(x, y));
                    }
                }

                error -= dy;
                if (error < 0)
                {
                    if (y1 < y2)
                        ++y;
                    else
                        --y;
                    error += dx;
                }
            }

            if (reverse)
            {
                s.Reverse();
            }

            List<ANode> s1 = GetLinearPath(s, nodeGrid);
            bool res = (s1.Count == s.Count);

            s.Clear();
            for (int i = 0; i < s1.Count; i++)
            {
                s.Add(s1[i]);
            }

            return res;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="s"></param>
        /// <returns></returns>
        private static List<ANode> GetLinearPath(List<ANode> s, NodeGrid nodeGrid)
        {
            List<ANode> s1 = new List<ANode>();
            for (int i = 0; i < s.Count; i++)
            {
                //不可移动点
                if (!nodeGrid.isWalkable(s[i].x, s[i].y))
                {
                    break;
                }

                s1.Add(s[i]);
            }

            return s1;
        }

        /// <summary>
        /// 根据两点及延伸长度获取延伸后的点(在有障碍物判断的情况下)
        /// </summary>
        /// <param name="start">起点</param>
        /// <param name="end">旧终点</param>
        /// <param name="Lenght">延伸后的最终长度</param>
        /// <returns>延伸后的终点</returns>
        public static Point GetExtensionPointByObs(GameClient client, Point start, Point end, int Lenght)
        {
            GameMap gameMap = GameManager.MapMgr.DictMaps[client.ClientData.MapCode];
            if (start.X >= gameMap.MapWidth || start.X < 0 || start.Y >= gameMap.MapHeight || start.Y < 0)
            {
                return new Point(-1, -1);
            }

            Point targetPos = Global.GetExtensionPoint(start, end, Lenght);
            List<ANode> s = new List<ANode>();
            Global.Bresenham(s, (int)(end.X / gameMap.MapGridWidth), (int)(end.Y / gameMap.MapGridHeight),
                (int)(targetPos.X / gameMap.MapGridWidth), (int)(targetPos.Y / gameMap.MapGridHeight),
                gameMap.MyNodeGrid);
            if (s.Count <= 0)
            {
                return new Point(-1, -1);
            }

            targetPos = new Point(s[s.Count - 1].x * gameMap.MapGridWidth, s[s.Count - 1].y * gameMap.MapGridHeight);
            return targetPos;
        }

        /// <summary>
        /// 从距离一个点的固定距离的4个方向中，选择一个没有障碍物的点
        /// </summary>
        /// <param name="p"></param>
        /// <param name="obs"></param>
        /// <returns></returns>
        public static Point GetAPointIn4Direction(Point p, int offset, NodeGrid nodeGrd, int mapWidth, int mapHeight, int gridWidth, int gridHeight)
        {
            int x = (int)p.X;
            int y = (int)p.Y;

            x = Global.GMax(0, x);
            y = Global.GMax(0, y);
            x = Global.GMin(mapWidth, x);
            y = Global.GMin(mapHeight, y);

            if (nodeGrd.isWalkable(x / gridWidth, y / gridHeight))
            {
                return new Point(x, y);
            }

            x = (int)p.X - offset;
            y = (int)p.Y;

            x = Global.GMax(0, x);
            y = Global.GMax(0, y);
            x = Global.GMin(mapWidth, x);
            y = Global.GMin(mapHeight, y);

            if (nodeGrd.isWalkable(x / gridWidth, y / gridHeight))
            {
                return new Point(x, y);
            }

            x = (int)p.X + offset;
            y = (int)p.Y;

            x = Global.GMax(0, x);
            y = Global.GMax(0, y);
            x = Global.GMin(mapWidth, x);
            y = Global.GMin(mapHeight, y);

            if (nodeGrd.isWalkable(x / gridWidth, y / gridHeight))
            {
                return new Point(x, y);
            }

            x = (int)p.X;
            y = (int)p.Y - offset;

            x = Global.GMax(0, x);
            y = Global.GMax(0, y);
            x = Global.GMin(mapWidth, x);
            y = Global.GMin(mapHeight, y);

            if (nodeGrd.isWalkable(x / gridWidth, y / gridHeight))
            {
                return new Point(x, y);
            }

            x = (int)p.X;
            y = (int)p.Y + offset;

            x = Global.GMax(0, x);
            y = Global.GMax(0, y);
            x = Global.GMin(mapWidth, x);
            y = Global.GMin(mapHeight, y);

            if (nodeGrd.isWalkable(x / gridWidth, y / gridHeight))
            {
                return new Point(x, y);
            }

            return p;
        }

        // 判断对象是否在矩形内 [11/27/2013 LiaoWei]
        /// <summary>
        /// 判断点是否在矩形内
        /// </summary>
        /// <param name="target"></param>
        /// <param name="center"></param>
        /// <param name="radius"></param>
        /// <returns></returns>
        public static bool InSquare(Point center, Point target, int radius, int Width, int DirectionX, int DirectionY)
        {
            double tarDirX = target.X - center.X;
            double tarDirY = target.Y - center.Y;

            int disLength = (int)Global.GetTwoPointDistance(center, target);

            int DirectionLength = (int)Math.Sqrt(DirectionX * DirectionX + DirectionY * DirectionY);//(int)Global.GetTwoPointDistance(point1, point1);
            if (DirectionLength <= 0)
                return false;

            int nDisObjLength = (int)(tarDirX * DirectionX + tarDirY * DirectionY) / DirectionLength;
            int nValue = (int)(disLength * disLength - (double)(nDisObjLength * nDisObjLength));
            if (nValue < 0)
                nValue = 0;

            int nDisObjWidth = (int)Math.Sqrt(nValue) - 30; // 调整下数值

            if ((-radius / 2 <= nDisObjLength && nDisObjLength <= radius / 2) && (-Width / 2 <= nDisObjWidth && nDisObjWidth <= Width / 2))
                return true;

            return false;
        }

        /// <summary>
        /// 知道圆心坐标，知道半径，知道角度，求任意一点的坐标
        /// </summary>
        /// <param name="center"></param>
        /// <param name="radius"></param>
        /// <param name="angle"></param>
        /// <returns></returns>
        public static Point GetAPointInCircle(Point center, int r, int ao)
        {
            if (ao > 180)
            {
                ao = ao - 360;
            }

            double x0 = center.X;
            double y0 = center.Y;

            double x1 = x0 + r * Math.Sin(ao * Math.PI / 180);
            double y1 = y0 + r * Math.Cos(ao * Math.PI / 180);
            return new Point(x1, y1);
        }

        #endregion //移动和距离

        #region 精灵相关

        /// <summary>
        /// 查找指定的装备代号
        /// </summary>
        /// <param name="goodsList"></param>
        /// <returns></returns>
        public static int FindEquipCode(List<GoodsData> goodsList, int category)
        {
            if (goodsList == null) return -1;
            lock (goodsList)
            {
                for (int i = 0; i < goodsList.Count; i++)
                {
                    if (goodsList[i].Using <= 0)
                    {
                        continue;
                    }

                    SystemXmlItem systemGoods = null;
                    if (GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsList[i].GoodsID, out systemGoods))
                    {
                        /*if ((int)ItemCategories.Weapon == category)
                        {
                            if ((int)ItemCategories.Weapon == systemGoods.GetIntValue("Categoriy") || (int)ItemCategories.ShenBing == systemGoods.GetIntValue("Categoriy"))
                            {
                                return systemGoods.GetIntValue("EquipCode");
                            }
                        }
                        else if ((int)ItemCategories.Clothes == category)
                        {
                            if ((int)ItemCategories.Clothes == systemGoods.GetIntValue("Categoriy") || (int)ItemCategories.ShenJia == systemGoods.GetIntValue("Categoriy"))
                            {
                                return systemGoods.GetIntValue("EquipCode");
                            }
                        }*/
                        // 逻辑平移--之前只有Weapon(又分Weapon和ShenBing)和Clothes(又分Clothes和ShenJia) 要去取EquipCode [10/28/2013 LiaoWei]
                        if ((category >= (int)ItemCategories.TouKui && category <= (int)ItemCategories.XueZi) ||
                                (category >= (int)ItemCategories.ZuoJi && category <= (int)ItemCategories.WuQi_NuJianTong))
                            return systemGoods.GetIntValue("EquipCode");

                    }
                }
            }

            return -1;
        }

        /// <summary>
        /// 从本地或者数据库中获取角色的详细信息
        /// </summary>
        /// <param name="roleID"></param>
        /// <returns></returns>
        public static SafeClientData GetSafeClientDataFromLocalOrDB(int otherRoleID)
        {
            SafeClientData clientData = null;

            //查看用户是否在本服务器上，如果没有，则查询从其他服务器查询，并且转发给自己的用户
            GameClient otherClient = GameManager.ClientMgr.FindClient(otherRoleID);
            if (null == otherClient)
            {
                byte[] bytesData = null;
                if (TCPProcessCmdResults.RESULT_FAILED != Global.RequestToDBServer3(TCPClientPool.getInstance(), TCPOutPacketPool.getInstance(), (int)TCPGameServerCmds.CMD_SPR_GETOTHERATTRIB2, string.Format("{0}:{1}", -1, otherRoleID), out bytesData, GameManager.LocalServerId))
                {
                    Int32 length = BitConverter.ToInt32(bytesData, 0);

                    /// 将字节数据转为对象
                    RoleDataEx roleDataEx = DataHelper.BytesToObject<RoleDataEx>(bytesData, 6, length - 2);
                    if (roleDataEx.RoleID < 0) //没有找到角色
                    {
                        return null;
                    }

                    //保存客户端数据的线程安全对象
                    clientData = new SafeClientData();
                    clientData.RoleData = roleDataEx;
                }
            }
            else
            {
                clientData = otherClient.ClientData;
            }

            return clientData;
        }

        /// <summary>
        /// 将client的ClientData 类型转换为 RoleData类型(本角色专用)
        /// </summary>
        /// <param name="roleDataEx"></param>
        /// <returns></returns>
        public static RoleData ClientToRoleData1(GameClient client)
        {
            RoleData roleData = ClientDataToRoleData1(client.ClientData);
            roleData.GMAuth = Global.GetAuth(client);
            roleData.FluorescentGemData.GemBagDict = GameManager.FluorescentGemMgr.GetBagDict(client);
            roleData.FluorescentGemData.GemEquipDict = GameManager.FluorescentGemMgr.GetEquipDict(client);
            roleData.SettingBitFlags = Global.GetRoleParamsInt64FromDB(client, RoleParamName.SettingBitFlags);
            return roleData;
        }

        /// <summary>
        /// 将ClientData 类型转换为 RoleData类型(本角色专用)
        /// </summary>
        /// <param name="roleDataEx"></param>
        /// <returns></returns>
        public static RoleData ClientDataToRoleData1(SafeClientData clientData)
        {
            RoleData roleData = new RoleData()
            {
                RoleID = clientData.RoleID,
                RoleName = clientData.RoleName,
                RoleSex = clientData.RoleSex,
                Occupation = clientData.Occupation,
                Level = clientData.Level,
                Faction = clientData.Faction,
                Money1 = clientData.Money1,
                Money2 = clientData.Money2,
                Experience = clientData.Experience,
                PKMode = clientData.PKMode,
                PKValue = clientData.PKValue,
                MapCode = clientData.MapCode,
                RoleDirection = clientData.RoleDirection,
                PosX = clientData.PosX,
                PosY = clientData.PosY,
                MaxLifeV = clientData.LifeV,
                LifeV = clientData.CurrentLifeV,
                MaxMagicV = clientData.MagicV,
                MagicV = clientData.CurrentMagicV,
                TaskDataList = clientData.TaskDataList,
                RolePic = clientData.RolePic,
                BagNum = clientData.BagNum,
                GoodsDataList = clientData.GoodsDataList,
                BodyCode = Global.FindEquipCode(clientData.GoodsDataList, 1),
                WeaponCode = Global.FindEquipCode(clientData.GoodsDataList, 0),
                OtherName = clientData.OtherName,
                MainQuickBarKeys = clientData.MainQuickBarKeys,
                OtherQuickBarKeys = clientData.OtherQuickBarKeys,
                LoginNum = clientData.LoginNum,
                UserMoney = clientData.UserMoney,
                //StallName = (null == clientData.StallDataItem) ? "" : clientData.StallDataItem.StallName,
                StallName = clientData.MarketName,
                TeamID = clientData.TeamID,
                LeftFightSeconds = clientData.LeftFightSeconds,
                TotalHorseCount = (null == clientData.HorsesDataList) ? 0 : clientData.HorsesDataList.Count,
                HorseDbID = -1, //会单独命令通知
                TotalPetCount = (null == clientData.PetsDataList) ? 0 : clientData.PetsDataList.Count,
                PetDbID = clientData.PetDbID,
                InterPower = clientData.InterPower,
                TeamLeaderRoleID = Global.GetGameClientTeamLeaderID(clientData),
                YinLiang = clientData.YinLiang,
                SkillDataList = clientData.SkillDataList,
                JingMaiBodyLevel = clientData.JingMaiBodyLevel,
                JingMaiXueWeiNum = clientData.RoleXueWeiNum,
                LastHorseID = clientData.LastHorseID,
                DefaultSkillID = clientData.DefaultSkillID,
                AutoLifeV = clientData.AutoLifeV,
                AutoMagicV = clientData.AutoMagicV,
                BufferDataList = clientData.BufferDataList,
                MyDailyTaskDataList = clientData.MyDailyTaskDataList,
                JingMaiOkNum = Global.CalcJingMaiOkNum(clientData),
                MyDailyJingMaiData = clientData.MyDailyJingMaiData,
                NumSkillID = clientData.NumSkillID,
                MyPortableBagData = clientData.MyPortableBagData,
                NewStep = clientData.MyHuodongData.NewStep,
                StepTime = clientData.MyHuodongData.StepTime,
                BigAwardID = GameManager.GameConfigMgr.GetGameConfigItemInt("big_award_id", 0),
                SongLiID = GameManager.GameConfigMgr.GetGameConfigItemInt("songli_id", 0),
                FuBenDataList = clientData.FuBenDataList,
                TotalLearnedSkillLevelCount = clientData.TotalLearnedSkillLevelCount,
                CompletedMainTaskID = clientData.MainTaskID,
                PKPoint = clientData.PKPoint,
                LianZhan = clientData.LianZhan,
                StartPurpleNameTicks = clientData.StartPurpleNameTicks,
                MyYaBiaoData = clientData.MyYaBiaoData,
                BattleNameStart = clientData.BattleNameStart,
                BattleNameIndex = clientData.BattleNameIndex,
                CZTaskID = clientData.CZTaskID,
                HeroIndex = clientData.HeroIndex,
                AllQualityIndex = clientData.AllQualityIndex,
                AllForgeLevelIndex = clientData.AllForgeLevelIndex,
                AllJewelLevelIndex = clientData.AllJewelLevelIndex,
                AllZhuoYueNum = clientData.AllZhuoYueNum,
                HalfYinLiangPeriod = GameManager.GameConfigMgr.GetGameConfigItemInt("half_yinliang_period", 0),
                ZoneID = clientData.ZoneID,
                BHName = clientData.BHName,
                BHVerify = clientData.BHVerify,
                BHZhiWu = clientData.BHZhiWu,
                BangGong = clientData.BangGong,
                BangHuiLingDiItemsDict = JunQiManager.GetBangHuiLingDiItemsDict(),
                HuangDiRoleID = HuangChengManager.GetHuangDiRoleID(),
                HuangHou = clientData.HuangHou,
                PaiHangPosDict = clientData.PaiHangPosDict,
                AutoFightingProtect = clientData.AutoFightingProctect,
                FSHuDunStart = clientData.FSHuDunStart,
                BattleWhichSide = clientData.BattleWhichSide,
                LastMailID = clientData.LastMailID,
                OnceAwardFlag = clientData.OnceAwardFlag,
                Gold = clientData.Gold,
                DSHideStart = clientData.DSHideStart,
                FSHuDunSeconds = clientData.FSHuDunSeconds,
                ZhongDuStart = clientData.ZhongDuStart,
                ZhongDuSeconds = clientData.ZhongDuSeconds,
                KaiFuStartDay = Global.GetKaiFuTime().ToString("yyyy-MM-dd HH:mm:ss"),
                RegTime = Global.GetRegTime(clientData).ToString("yyyy-MM-dd HH:mm:ss"),
                JieriStartDay = Global.GetJieriStartDay().ToString("yyyy-MM-dd HH:mm:ss"),
                JieriDaysNum = Global.GetJieriDaysNum(),
                HefuStartDay = Global.GetHefuStartDay().ToString("yyyy-MM-dd HH:mm:ss"),
                JieriChengHao = clientData.JieriChengHao,
                BuChangStartDay = Global.GetBuChangStartDay().ToString("yyyy-MM-dd HH:mm:ss"),
                DongJieStart = clientData.DongJieStart,
                DongJieSeconds = clientData.DongJieSeconds,
                YueduDazhunpanStartDay = Global.GetYueDuChouJiangStartDay().ToString("yyyy-MM-dd HH:mm:ss"),
                YueduDazhunpanStartDayNum = Global.GetYueDuChouJiangDaysNum(),
                ChangeLifeCount = clientData.ChangeLifeCount,
                TotalPropPoint = clientData.TotalPropPoint,
                IsFlashPlayer = clientData.IsFlashPlayer,
                AdmiredCount = clientData.AdmiredCount,
                CombatForce = clientData.CombatForce,
                AdorationCount = clientData.AdorationCount,
                DayOnlineSecond = clientData.DayOnlineSecond,
                SeriesLoginNum = Global.GMin(clientData.SeriesLoginNum, 7),
                AutoAssignPropertyPoint = clientData.AutoAssignPropertyPoint,
                OnLineTotalTime = clientData.TotalOnlineSecs,
                VIPLevel = clientData.VipLevel,
                OpenGridTime = clientData.OpenGridTime,
                OpenPortableGridTime = clientData.OpenPortableGridTime,
                MyWingData = clientData.MyWingData,
                PictureJudgeReferInfo = clientData.PictureJudgeReferInfo,
                StarSoulValue = clientData.StarSoul,
                StoreYinLiang = clientData.StoreYinLiang,
                StoreMoney = clientData.StoreMoney,
                UserReturnTimeBegin = UserReturnManager.getInstance()._returnActivityInfo.TimeBegin.ToString("yyyy-MM-dd HH-mm-ss"),
                UserReturnTimeEnd = UserReturnManager.getInstance()._returnActivityInfo.TimeEnd.ToString("yyyy-MM-dd HH-mm-ss"),
                MyTalentData = clientData.MyTalentData,
                TianTiRongYao = clientData.TianTiData.RongYao,
                FluorescentGemData = new FluorescentGemData(),
                SoulStoneData = new SoulStoneData() { StonesInBag = clientData.SoulStoneInBag, StonesInUsing = clientData.SoulStoneInUsing },
                SpouseId = clientData.MyMarriageData != null ? clientData.MyMarriageData.nSpouseID : -1
            };

            roleData.IsVIP = Global.GetVipType(clientData.BufferDataList); //Global.CanUseVipPriority(clientData.BufferDataList)? 1: 0;
            roleData.BodyCode = Global.GMax(roleData.RoleSex, roleData.BodyCode);
            roleData.WeaponCode = Global.GMax(0, roleData.WeaponCode);
            roleData.RoleCommonUseIntPamams = Global.GetRoleCommonUseIntPamamValueList(clientData.RoleID);

            return roleData;
        }

        /// <summary>
        /// 判断帐号是否具有GM权限，为测试方便，排除内网测试的GM类型
        /// </summary>
        /// <param name="userName"></param>
        /// <param name="socket"></param>
        /// <returns></returns>
        public static bool IsGM(string userName, TMSKSocket socket)
        {
            return socket.session.IsGM = (Global.GetAuth(userName, socket) > (int)GMPrioritys.IntranetGM);
        }

        /// <summary>
        /// 将ClientData 类型转换为 RoleData类型(本角色专用)
        /// </summary>
        /// <param name="roleDataEx"></param>
        /// <returns></returns>
        public static int GetAuth(GameClient client)
        {
            return client.ClientSocket.session.gmPriority;
        }

        /// <summary>
        /// 将ClientData 类型转换为 RoleData类型(本角色专用)
        /// </summary>
        /// <param name="roleDataEx"></param>
        /// <returns></returns>
        public static int GetAuth(string userName, TMSKSocket socket)
        {
            int priority = -1;
            if (!GameManager.systemGMCommands.IsSuperGMUser(userName))
            {
                if (!GameManager.systemGMCommands.IsGMUser(userName)) //不是GM
                {
                    //是否是授权用户
                    priority = GameManager.systemGMCommands.IsPriorityUser(userName);
                    if (priority < 0)
                    {
                        return priority;
                    }
                }
                else
                {
                    priority = (int)GMPrioritys.IntranetGM;
                }

                if (!GameManager.systemGMCommands.IsValidIP(socket)) //不是合法的IP
                {
                    return -1;
                }
            }
            else //超级GM不检查IP限制
            {
                //是否是超级GM账户
                priority = (int)GMPrioritys.SuperGM;
            }

            socket.session.gmPriority = priority;
            return priority;
        }

        /// <summary>
        /// 返回角色常用参数列表 依次对应 枚举变量 RoleCommonUseIntParamsIndexs 中的各个值
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static List<int> GetRoleCommonUseIntPamamValueList(int roleId)
        {
            GameClient client = GameManager.ClientMgr.FindClient(roleId);

            if (null == client)
            {
                return null;
            }

            //long startTicks = TimeUtil.NOW();
            List<int> listInts = GetRoleCommonUseIntPamamValueList(client);
            //System.Diagnostics.Debug.WriteLine("GetRoleCommonUseIntPamamValueList 消耗:" + ((TimeUtil.NOW()) - startTicks).ToString());
            return listInts;
        }

        /// <summary>
        /// 返回角色常用参数列表 依次对应 枚举变量 RoleCommonUseIntParamsIndexs 中的各个值
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static List<int> GetRoleCommonUseIntPamamValueList(GameClient client)
        {
            int tickCount = Environment.TickCount;
            if (Math.Abs(tickCount - client.ClientData.LastRoleCommonUseIntParamValueListTickCount) < 500)
            {
                return client.ClientData.RoleCommonUseIntPamams;
            }
            client.ClientData.LastRoleCommonUseIntParamValueListTickCount = tickCount;

            List<int> lsValues = new List<int>();

            lsValues.Add(GameManager.ClientMgr.GetChengJiuPointsValue(client));//成就
            lsValues.Add(GameManager.ClientMgr.GetZhuangBeiJiFenValue(client));//装备积分
            lsValues.Add(GameManager.ClientMgr.GetLieShaValue(client));//猎杀值
            lsValues.Add(GameManager.ClientMgr.GetWuXingValue(client));//悟性值
            lsValues.Add(GameManager.ClientMgr.GetZhenQiValue(client));//真气值
            lsValues.Add(GameManager.ClientMgr.GetTianDiJingYuanValue(client));//天地精元值
            lsValues.Add(GameManager.ClientMgr.GetShiLianLingValue(client));//试炼令值===>通天令值
            lsValues.Add(GameManager.ClientMgr.GetJingMaiLevelValue(client));//经脉等级
            lsValues.Add(GameManager.ClientMgr.GetWuXueLevelValue(client));//经脉等级
            lsValues.Add(GameManager.ClientMgr.GetZuanHuangLevelValue(client));//钻皇等级
            lsValues.Add(GameManager.ClientMgr.GetSystemOpenValue(client));//系统激活项
            lsValues.Add(GameManager.ClientMgr.GetJunGongValue(client));//军功值
            lsValues.Add(GameManager.ClientMgr.GetKaiFuOnlineDayID(client));//开服在线奖励DayID
            lsValues.Add(GameManager.ClientMgr.GetTo60or100ID(client));//达到60或者100级的记忆
            lsValues.Add(GameManager.ClientMgr.GetZhanHunValue(client));//战魂值
            lsValues.Add(GameManager.ClientMgr.GetRongYuValue(client));//荣誉值
            lsValues.Add(GameManager.ClientMgr.GetZhanHunLevelValue(client));//战魂等级值
            lsValues.Add(GameManager.ClientMgr.GetRongYuLevelValue(client));//荣誉等级值
            lsValues.Add(GameManager.ClientMgr.GetShengWangValue(client));//声望值
            lsValues.Add(GameManager.ClientMgr.GetShengWangLevelValue(client));//军衔等级值
            lsValues.Add(GameManager.ClientMgr.GetWanMoTaPassLayerValue(client));//万魔塔通关层数
            lsValues.Add(client.ClientData.StarSoul);// 星魂值 [8/6/2014 LiaoWei]
            lsValues.Add(client.ClientData.ChengJiuLevel);// 星魂值 [8/6/2014 LiaoWei]

            int nElementPowder = Global.GetRoleParamsInt32FromDB(client, RoleParamName.ElementPowderCount);
            lsValues.Add(nElementPowder);

            int nPetJiFen = Convert.ToInt32(Global.GetRoleParamByName(client, RoleParamName.PetJiFen));
            lsValues.Add(nPetJiFen);

            lsValues.Add(GameManager.ClientMgr.GetMUMoHeValue(client));//魔核
            lsValues.Add(FashionManager.getInstance().GetFashionWingsID(client));//26.时装翅膀ID
            lsValues.Add(GameManager.ClientMgr.GetZaiZaoValue(client));//再造点 27
            //lsValues.Add(client.ClientData.YKDetail.HasYueKa); //月卡

            // modify by chenjingui. 20150624 月卡改为通知剩余天数，上线的时候
            lsValues.Add(client.ClientData.YKDetail.RemainDayOfYueKa()); // 改为通知月卡剩余天数，=0表示木有月卡 28

            // 拥有的守护点数
            int totalGuardPoint = 0;
            if (client.ClientData.MyGuardStatueDetail != null && client.ClientData.MyGuardStatueDetail.GuardStatue != null)
            {
                totalGuardPoint = client.ClientData.MyGuardStatueDetail.GuardStatue.HasGuardPoint;
            }
            lsValues.Add(totalGuardPoint);

            lsValues.Add(FashionManager.getInstance().GetFashionTitleID(client));//时装称号id panghui

            lsValues.Add(client.ClientData.FluorescentPoint); // 加荧光粉末 [XSea 2015/8/19]

            lsValues.Add(GameManager.ClientMgr.GetTreasureJiFen(client));
            lsValues.Add(GameManager.ClientMgr.GetTreasureXueZuan(client));
            lsValues.Add(Global.GetRoleParamsInt32FromDB(client, RoleParamName.LangHunFenMo)); // 狼魂粉末
            lsValues.Add(Global.GetRoleParamsInt32FromDB(client, RoleParamName.ZhengBaPoint));  // 再造点
            lsValues.Add(VideoLogic.GetOrSendPlayerVideoStatus(client, new List<int>()));  //视频聊天室按钮开启标识
            lsValues.Add(Global.GetRoleParamsInt32FromDB(client, RoleParamName.KingOfBattlePoint));  // 王者点
            client.ClientData.RoleCommonUseIntPamams = lsValues;

            return lsValues;
        }

        /// <summary>
        /// 将client的ClientData 类型转换为 RoleData类型(通知其他角色使用)
        /// </summary>
        /// <param name="roleDataEx"></param>
        /// <returns></returns>
        public static RoleData ClientToRoleData2(GameClient client)
        {
            RoleData roleData = ClientDataToRoleData2(client.ClientData);
            roleData.GMAuth = Global.GetAuth(client);
            roleData.SettingBitFlags = Global.GetRoleParamsInt64FromDB(client, RoleParamName.SettingBitFlags);
            return roleData;
        }

        /// <summary>
        /// 将ClientData 类型转换为 RoleData类型(通知其他角色使用)
        /// </summary>
        /// <param name="roleDataEx"></param>
        /// <returns></returns>
        public static RoleData ClientDataToRoleData2(SafeClientData clientData)
        {
            List<GoodsData> goodsDataList = null;
            if (clientData.GoodsDataList != null)
            {
                goodsDataList = new List<GoodsData>();
                lock (clientData.GoodsDataList)
                {
                    for (int i = 0; i < clientData.GoodsDataList.Count; i++)
                    {
                        if (clientData.GoodsDataList[i].GCount <= 0 || 0 == clientData.GoodsDataList[i].Using)
                        {
                            continue;
                        }

                        goodsDataList.Add(clientData.GoodsDataList[i]);
                    }
                }

                // 精灵
                if (null != clientData.DamonGoodsDataList)
                {
                    lock (clientData.DamonGoodsDataList)
                    {
                        for (int i = 0; i < clientData.DamonGoodsDataList.Count; i++)
                        {
                            if (clientData.DamonGoodsDataList[i].GCount <= 0 || 0 == clientData.DamonGoodsDataList[i].Using)
                            {
                                continue;
                            }

                            goodsDataList.Add(clientData.DamonGoodsDataList[i]);
                        }
                    }
                }

                // 时装衣橱
                if (null != clientData.FashionGoodsDataList)
                {
                    lock (clientData.FashionGoodsDataList)
                    {
                        for (int i = 0; i < clientData.FashionGoodsDataList.Count; i++)
                        {
                            if (clientData.FashionGoodsDataList[i].GCount <= 0 || 0 == clientData.FashionGoodsDataList[i].Using
                                || clientData.FashionGoodsDataList[i].Site != (int)SaleGoodsConsts.FashionGoods)
                            {
                                continue;
                            }

                            goodsDataList.Add(clientData.FashionGoodsDataList[i]);
                        }
                    }
                }
            }

            RoleData roleData = new RoleData()
            {
                RoleID = clientData.RoleID,
                RoleName = clientData.RoleName,
                RoleSex = clientData.RoleSex,
                Occupation = clientData.Occupation,
                Level = clientData.Level,
                Faction = clientData.Faction,
                Money1 = clientData.Money1,
                Money2 = clientData.Money2,
                Experience = clientData.Experience,
                PKMode = clientData.PKMode,
                PKValue = clientData.PKValue,
                MapCode = clientData.MapCode,
                RoleDirection = clientData.RoleDirection,
                PosX = clientData.PosX,
                PosY = clientData.PosY,
                MaxLifeV = clientData.LifeV,
                LifeV = clientData.CurrentLifeV,
                MaxMagicV = clientData.MagicV,
                MagicV = clientData.CurrentMagicV,
                TaskDataList = null,
                RolePic = clientData.RolePic,
                BagNum = clientData.BagNum,
                GoodsDataList = goodsDataList,
                BodyCode = Global.FindEquipCode(clientData.GoodsDataList, 1),
                WeaponCode = Global.FindEquipCode(clientData.GoodsDataList, 0),
                OtherName = clientData.OtherName,
                MainQuickBarKeys = null,
                OtherQuickBarKeys = null,
                LoginNum = 0,
                UserMoney = 0,
                //StallName = (null == clientData.StallDataItem) ? "" : clientData.StallDataItem.StallName,
                StallName = clientData.MarketName,
                TeamID = clientData.TeamID,
                LeftFightSeconds = 0,
                TotalHorseCount = 0,
                HorseDbID = -1,
                TotalPetCount = 0,
                PetDbID = -1,
                InterPower = clientData.InterPower,
                TeamLeaderRoleID = Global.GetGameClientTeamLeaderID(clientData),
                YinLiang = 0,
                SkillDataList = null,
                JingMaiBodyLevel = clientData.JingMaiBodyLevel,
                JingMaiXueWeiNum = clientData.RoleXueWeiNum,
                LastHorseID = -1,
                DefaultSkillID = -1,
                AutoLifeV = 0,
                AutoMagicV = 0,
                BufferDataList = null,
                MyDailyTaskDataList = null,
                JingMaiOkNum = Global.CalcJingMaiOkNum(clientData),
                MyDailyJingMaiData = clientData.MyDailyJingMaiData,
                NumSkillID = 0,
                MyPortableBagData = null,
                NewStep = 0,
                StepTime = 0,
                BigAwardID = 0,
                SongLiID = 0,
                FuBenDataList = null,
                TotalLearnedSkillLevelCount = clientData.TotalLearnedSkillLevelCount,
                CompletedMainTaskID = 0,
                PKPoint = clientData.PKPoint,
                LianZhan = 0,
                StartPurpleNameTicks = clientData.StartPurpleNameTicks,
                MyYaBiaoData = null,
                BattleNameStart = clientData.BattleNameStart,
                BattleNameIndex = clientData.BattleNameIndex,
                CZTaskID = 0,
                HeroIndex = clientData.HeroIndex,
                AllQualityIndex = clientData.AllQualityIndex,
                AllForgeLevelIndex = clientData.AllForgeLevelIndex,
                AllJewelLevelIndex = clientData.AllJewelLevelIndex,
                AllZhuoYueNum = clientData.AllZhuoYueNum,
                HalfYinLiangPeriod = 0,
                ZoneID = clientData.ZoneID,
                BHName = clientData.BHName,
                BHVerify = clientData.BHVerify,
                BHZhiWu = clientData.BHZhiWu,
                BangGong = 0,
                BangHuiLingDiItemsDict = null,
                HuangDiRoleID = 0,
                HuangHou = clientData.HuangHou,
                PaiHangPosDict = clientData.PaiHangPosDict,
                AutoFightingProtect = clientData.AutoFightingProctect,
                FSHuDunStart = clientData.FSHuDunStart,
                BattleWhichSide = clientData.BattleWhichSide,
                LastMailID = clientData.LastMailID,
                OnceAwardFlag = clientData.OnceAwardFlag, //这个值附带着64个标志位，传递给其他客户端，会存在隐私问题，但如果将来扩展某些信息需要告诉其他客户端，这样写也方便
                Gold = 0,
                DSHideStart = clientData.DSHideStart,
                FSHuDunSeconds = clientData.FSHuDunSeconds,
                ZhongDuStart = clientData.ZhongDuStart,
                ZhongDuSeconds = clientData.ZhongDuSeconds,
                KaiFuStartDay = "",
                RegTime = "",
                JieriStartDay = "",
                JieriDaysNum = 0,
                HefuStartDay = "",
                JieriChengHao = clientData.JieriChengHao,
                BuChangStartDay = "",
                DongJieStart = clientData.DongJieStart,
                DongJieSeconds = clientData.DongJieSeconds,
                YueduDazhunpanStartDay = "",
                YueduDazhunpanStartDayNum = 0,
                MyWingData = clientData.MyWingData,
                VIPLevel = clientData.VipLevel,
                UserReturnTimeBegin = "",
                UserReturnTimeEnd = "",
                SpouseId = clientData.MyMarriageData != null ? clientData.MyMarriageData.nSpouseID : -1
            };

            roleData.IsVIP = Global.GetVipType(clientData.BufferDataList);//Global.CanUseVipPriority(clientData.BufferDataList) ? 1 : 0;
            roleData.BodyCode = Global.GMax(roleData.RoleSex, roleData.BodyCode);
            roleData.WeaponCode = Global.GMax(0, roleData.WeaponCode);
            roleData.RoleCommonUseIntPamams = Global.GetRoleCommonUseIntPamamValueList(clientData.RoleID);

            return roleData;
        }

        /// <summary>
        /// 将client的ClientData 类型转换为 RoleDataMini类型(通知其他角色使用)
        /// </summary>
        /// <param name="roleDataEx"></param>
        /// <returns></returns>
        public static RoleDataMini ClientToRoleDataMini(GameClient client)
        {
            RoleDataMini roleData = ClientDataToRoleDataMini(client.ClientData);
            roleData.GMAuth = Global.GetAuth(client);
            roleData.SettingBitFlags = Global.GetRoleParamsInt64FromDB(client, RoleParamName.SettingBitFlags);
            return roleData;
        }

        /// <summary>
        /// 将ClientData 类型转换为 RoleDataMini类型(通知其他角色使用)
        /// </summary>
        /// <param name="roleDataEx"></param>
        /// <returns></returns>
        public static RoleDataMini ClientDataToRoleDataMini(SafeClientData clientData)
        {
            RoleDataMini roleData = new RoleDataMini()
            {
                RoleID = clientData.RoleID,
                RoleName = clientData.RoleName,
                RoleSex = clientData.RoleSex,
                Occupation = clientData.Occupation,
                Level = clientData.Level,
                Faction = clientData.Faction,
                PKMode = clientData.PKMode,
                PKValue = clientData.PKValue,
                MapCode = clientData.MapCode,
                RoleDirection = clientData.RoleDirection,
                PosX = clientData.PosX,
                PosY = clientData.PosY,
                MaxLifeV = clientData.LifeV,
                LifeV = clientData.CurrentLifeV,
                MaxMagicV = clientData.MagicV,
                MagicV = clientData.CurrentMagicV,
                BodyCode = Global.FindEquipCode(clientData.GoodsDataList, 1),
                WeaponCode = Global.FindEquipCode(clientData.GoodsDataList, 0),
                OtherName = clientData.OtherName,
                TeamID = clientData.TeamID,
                TeamLeaderRoleID = Global.GetGameClientTeamLeaderID(clientData),
                PKPoint = clientData.PKPoint,
                StartPurpleNameTicks = clientData.StartPurpleNameTicks,
                BattleNameStart = clientData.BattleNameStart,
                BattleNameIndex = clientData.BattleNameIndex,
                ZoneID = clientData.ZoneID,
                BHName = clientData.BHName,
                BHVerify = clientData.BHVerify,
                BHZhiWu = clientData.BHZhiWu,
                FSHuDunStart = clientData.FSHuDunStart,
                BattleWhichSide = clientData.BattleWhichSide,
                DSHideStart = clientData.DSHideStart,
                FSHuDunSeconds = clientData.FSHuDunSeconds,
                ZhongDuStart = clientData.ZhongDuStart,
                ZhongDuSeconds = clientData.ZhongDuSeconds,
                JieriChengHao = clientData.JieriChengHao,
                DongJieStart = clientData.DongJieStart,
                DongJieSeconds = clientData.DongJieSeconds,
                GoodsDataList = Global.GetUsingGoodsList(clientData),
                ChangeLifeLev = clientData.ChangeLifeCount,
                ChangeLifeCount = clientData.ChangeLifeCount,
                StallName = clientData.MarketName,
                MyWingData = clientData.MyWingData,
                VIPLevel = clientData.VipLevel,
                SpouseId = clientData.MyMarriageData != null ? clientData.MyMarriageData.nSpouseID : 0
            };

            // 精灵
            if (null != clientData.DamonGoodsDataList && null != roleData.GoodsDataList)
            {
                lock (clientData.DamonGoodsDataList)
                {
                    for (int i = 0; i < clientData.DamonGoodsDataList.Count; i++)
                    {
                        if (clientData.DamonGoodsDataList[i].GCount <= 0 || 0 == clientData.DamonGoodsDataList[i].Using)
                        {
                            continue;
                        }

                        roleData.GoodsDataList.Add(clientData.DamonGoodsDataList[i]);
                    }
                }
            }

            // 时装衣橱
            if (null != clientData.FashionGoodsDataList && null != roleData.GoodsDataList)
            {
                lock (clientData.FashionGoodsDataList)
                {
                    for (int i = 0; i < clientData.FashionGoodsDataList.Count; i++)
                    {
                        if (clientData.FashionGoodsDataList[i].GCount <= 0 || 0 == clientData.FashionGoodsDataList[i].Using
                            || clientData.FashionGoodsDataList[i].Site != (int)SaleGoodsConsts.FashionGoods)
                        {
                            continue;
                        }

                        roleData.GoodsDataList.Add(clientData.FashionGoodsDataList[i]);
                    }
                }
            }

            roleData.IsVIP = Global.GetVipType(clientData.BufferDataList);//Global.CanUseVipPriority(clientData.BufferDataList) ? 1 : 0;
            roleData.BodyCode = Global.GMax(roleData.RoleSex, roleData.BodyCode);
            roleData.WeaponCode = Global.GMax(0, roleData.WeaponCode);
            roleData.RoleCommonUseIntPamams = Global.GetRoleCommonUseIntPamamValueList(clientData.RoleID);

            if (clientData.RoleParamsDict != null)
            {
                lock (clientData.RoleParamsDict)
                {
                    RoleParamsData pd = null;
                    if (clientData.RoleParamsDict.TryGetValue(RoleParamName.SettingBitFlags, out pd)
                        && pd != null
                        && !string.IsNullOrEmpty(pd.ParamValue))
                    {
                        long.TryParse(pd.ParamValue, out roleData.SettingBitFlags);
                    }
                }
            }

            return roleData;
        }

        /// <summary>
        /// 将RoleDataEx 类型转换为 RoleData类型(通知其他角色使用)
        /// </summary>
        /// <param name="roleDataEx"></param>
        /// <returns></returns>
        public static RoleData RoleDataExToRoleData(RoleDataEx roleDataEx)
        {
            List<GoodsData> goodsDataList = null;
            if (roleDataEx.GoodsDataList != null)
            {
                goodsDataList = new List<GoodsData>();
                for (int i = 0; i < roleDataEx.GoodsDataList.Count; i++)
                {
                    if (roleDataEx.GoodsDataList[i].GCount <= 0 || 0 == roleDataEx.GoodsDataList[i].Using)
                    {
                        continue;
                    }

                    goodsDataList.Add(roleDataEx.GoodsDataList[i]);
                }
            }

            //计算其他玩家原始数据的套装计算值
            AllThingsCalcItem allThingsCalcItem = Global.CalcGoodsDataListAllThingsItem(goodsDataList);

            int allQualityIndex = 0;
            int allForgeLevelIndex = 0;
            int allJewelLevelIndex = 0;
            int allZhuoYueNum = 0;

            //根据装备中的计数器获取加成属性值
            Global.CalcAllThingsCalcItem(allThingsCalcItem, out allQualityIndex, out allForgeLevelIndex, out allJewelLevelIndex, out allZhuoYueNum);

            RoleData roleData = new RoleData()
            {
                RoleID = roleDataEx.RoleID,
                RoleName = roleDataEx.RoleName,
                RoleSex = roleDataEx.RoleSex,
                Occupation = roleDataEx.Occupation,
                Level = roleDataEx.Level,
                Faction = roleDataEx.Faction,
                Money1 = roleDataEx.Money1,
                Money2 = roleDataEx.Money2,
                Experience = roleDataEx.Experience,
                PKMode = roleDataEx.PKMode,
                PKValue = roleDataEx.PKValue,
                MapCode = roleDataEx.MapCode,
                RoleDirection = roleDataEx.RoleDirection,
                PosX = roleDataEx.PosX,
                PosY = roleDataEx.PosY,
                MaxLifeV = roleDataEx.LifeV,
                LifeV = roleDataEx.LifeV,
                MaxMagicV = roleDataEx.MagicV,
                MagicV = roleDataEx.MagicV,
                TaskDataList = null,
                RolePic = roleDataEx.RolePic,
                BagNum = roleDataEx.BagNum,
                GoodsDataList = goodsDataList,
                BodyCode = Global.FindEquipCode(roleDataEx.GoodsDataList, 1),
                WeaponCode = Global.FindEquipCode(roleDataEx.GoodsDataList, 0),
                OtherName = roleDataEx.OtherName,
                MainQuickBarKeys = null,
                OtherQuickBarKeys = null,
                LoginNum = 0,
                UserMoney = 0,
                StallName = "",
                TeamID = 0,
                LeftFightSeconds = 0,
                TotalHorseCount = 0,
                HorseDbID = -1,
                TotalPetCount = 0,
                PetDbID = -1,
                InterPower = roleDataEx.InterPower,
                TeamLeaderRoleID = 0,
                YinLiang = 0,
                SkillDataList = null,
                JingMaiBodyLevel = 0,
                JingMaiXueWeiNum = 0,
                LastHorseID = -1,
                DefaultSkillID = -1,
                AutoLifeV = 0,
                AutoMagicV = 0,
                BufferDataList = null,
                MyDailyTaskDataList = null,
                JingMaiOkNum = 0,
                MyDailyJingMaiData = null,
                NumSkillID = 0,
                MyPortableBagData = null,
                NewStep = 0,
                StepTime = 0,
                BigAwardID = 0,
                SongLiID = 0,
                FuBenDataList = null,
                TotalLearnedSkillLevelCount = 0,
                CompletedMainTaskID = 0,
                PKPoint = roleDataEx.PKPoint,
                LianZhan = 0,
                StartPurpleNameTicks = 0,
                MyYaBiaoData = null,
                BattleNameStart = 0,
                BattleNameIndex = 0,
                CZTaskID = 0,
                HeroIndex = 0,
                AllQualityIndex = allQualityIndex,
                AllForgeLevelIndex = allForgeLevelIndex,
                AllJewelLevelIndex = allJewelLevelIndex,
                AllZhuoYueNum = allZhuoYueNum,
                HalfYinLiangPeriod = 0,
                ZoneID = roleDataEx.ZoneID,
                BHName = roleDataEx.BHName,
                BHVerify = roleDataEx.BHVerify,
                BHZhiWu = roleDataEx.BHZhiWu,
                BangGong = 0,
                BangHuiLingDiItemsDict = null,
                HuangDiRoleID = 0,
                HuangHou = roleDataEx.HuangHou,
                PaiHangPosDict = roleDataEx.PaiHangPosDict,
                AutoFightingProtect = 0,
                FSHuDunStart = 0,
                BattleWhichSide = 0,
                LastMailID = roleDataEx.LastMailID,
                OnceAwardFlag = roleDataEx.OnceAwardFlag,
                Gold = 0,
                DSHideStart = 0,
                FSHuDunSeconds = 0,
                ZhongDuStart = 0,
                ZhongDuSeconds = 0,
                KaiFuStartDay = "",
                RegTime = "",
                JieriStartDay = "",
                JieriDaysNum = 0,
                HefuStartDay = "",
                JieriChengHao = 0,
                BuChangStartDay = "",
                DongJieStart = 0,
                DongJieSeconds = 0,
                YueduDazhunpanStartDay = "",
                YueduDazhunpanStartDayNum = 0,
                CombatForce = roleDataEx.CombatForce,
                ChangeLifeCount = roleDataEx.ChangeLifeCount,
                VIPLevel = roleDataEx.VIPLevel,
                UserReturnTimeBegin = "",
                UserReturnTimeEnd = "",
            };

            roleData.IsVIP = Global.GetVipType(roleDataEx.BufferDataList);//Global.CanUseVipPriority(roleDataEx.BufferDataList) ? 1 : 0;
            roleData.BodyCode = Global.GMax(roleData.RoleSex, roleData.BodyCode);
            roleData.WeaponCode = Global.GMax(0, roleData.WeaponCode);
            roleData.RoleCommonUseIntPamams = Global.GetRoleCommonUseIntPamamValueList(roleDataEx.RoleID);

            return roleData;
        }

        /// <summary>
        /// 根据精灵类型获取衣服代号
        /// </summary>
        /// <returns></returns>
        public static int GetSpriteBodyCode(GSpriteTypes spriteType)
        {
            int n = -1;
            switch (spriteType)
            {
                case GSpriteTypes.Leader:
                case GSpriteTypes.Other:
                    n = 0;
                    break;
                case GSpriteTypes.Monster:
                    n = 1;
                    break;
                case GSpriteTypes.NPC:
                    n = 2;
                    break;
                case GSpriteTypes.Pet:
                    n = 3;
                    break;
                case GSpriteTypes.BiaoChe:
                    n = 4;
                    break;
                case GSpriteTypes.JunQi:
                    n = 5;
                    break;
                default:
                    break;
            }

            return n;
        }

        /// <summary>
        /// 创建新的精灵Storyboard移动动画板
        /// </summary>
        /// <param name="key">精灵名</param>
        public static StoryBoardEx NewStoryboard(string key)
        {
            StoryBoardEx.RemoveStoryBoard(key);
            StoryBoardEx sb = new StoryBoardEx(key);
            sb.Binding();
            return sb;
        }

        /// <summary>
        /// 暂停精灵Storyboard移动动画板
        /// </summary>
        /// <param name="sprite">对象精灵</param>
        public static void RemoveStoryboard(string key)
        {
            if (StoryBoardEx.ContainStoryBoard(key))
            {
                StoryBoardEx.RemoveStoryBoard(key);
            }
        }

        /// <summary>
        /// 是否存在故事板
        /// </summary>
        /// <param name="key"></param>
        /// <returns></returns>
        public static bool ExistStoryboard(string key)
        {
            return StoryBoardEx.ContainStoryBoard(key);
        }

        /// <summary>
        /// 获取对象
        /// </summary>
        /// <param name="objectID"></param>
        /// <returns></returns>
        public static IObject GetTargetObject(int mapCode, int enemy)
        {
            //根据敌人ID判断对方是系统爆的怪还是其他玩家
            GSpriteTypes st = Global.GetSpriteType((UInt32)enemy);
            IObject obj = null;
            if (st == GSpriteTypes.Monster)
            {
                //通知敌人自己开始攻击他，并造成了伤害
                obj = GameManager.MonsterMgr.FindMonster(mapCode, enemy);
            }
            else if (st == GSpriteTypes.BiaoChe) //如果是镖车
            {
                obj = BiaoCheManager.FindBiaoCheByID(enemy);
            }
            else if (st == GSpriteTypes.JunQi) //如果是帮旗
            {
                obj = JunQiManager.FindJunQiByID(enemy);
            }
            else if (st == GSpriteTypes.FakeRole) //如果是假人
            {
                obj = JunQiManager.FindJunQiByID(enemy);
            }
            else
            {
                obj = GameManager.ClientMgr.FindClient(enemy);
            }

            return obj;
        }

        /// <summary>
        /// 计算对象的真正位置
        /// </summary>
        /// <param name="objectID"></param>
        /// <returns></returns>
        public static Point CalcTargetObjectRealPos(int mapCode, int enemy, Point targetPos)
        {
            Point realPos = targetPos;

            //获取对象
            IObject obj = Global.GetTargetObject(mapCode, enemy);

            if (null != obj)
            {
                realPos = obj.CurrentPos;
            }

            return realPos;
        }

        /// <summary>
        /// 精灵物理攻击并产生伤害
        /// </summary>
        /// <param name="attacker">发起攻击精灵</param>
        /// <param name="attacker">被攻击的gl精灵</param>
        public static void DoInjure(Monster attacker, int enemy, Point targetPos)
        {
            //System.Diagnostics.Debug.WriteLine(string.Format("怪物:{0}, 攻击:{1}, 位置:{2}, 时间:{3}", attacker.RoleID, enemy, targetPos, TimeUtil.NowDateTime().Second));

            // 昏迷(冻结！) [5/7/2014 LiaoWei]
            if (attacker.IsMonsterDongJie())
                return;

            // 怪物添加地图BUFF没有开始执行，不允许进行他们攻击
            if (GameManager.GridMagicHelperMgrEx.GetObjectAddMapBuffer(attacker.RoleID) > 0)
            {
                return;
            }

            //计算对象的真正位置
            Point realPos = Global.CalcTargetObjectRealPos(attacker.MonsterZoneNode.MapCode, enemy, targetPos);
            if (GameManager.FlagManyAttack)
            {
                if (!(attacker.CurrentMagic > 0 && attacker.MagicFinish == 1))
                {
                    SpriteAttack.ProcessAttackByMonster(attacker, enemy, (int)targetPos.X, (int)targetPos.Y, (int)realPos.X, (int)realPos.Y, attacker.CurrentMagic);
                }
            }
            else
            {
                SpriteAttack.ProcessAttackByMonster(attacker, enemy, (int)targetPos.X, (int)targetPos.Y, (int)realPos.X, (int)realPos.Y, attacker.CurrentMagic, 0);
            }

            if (-1 != attacker.LockObject)
            {
                int autoUseSkillID = attacker.GetAutoUseSkillID();
                if (autoUseSkillID != attacker.CurrentMagic)
                {
                    if (autoUseSkillID > 0)
                    {
                        GameManager.MonsterMgr.DoMagicAttack(attacker, autoUseSkillID, attacker.LockObject);
                    }
                    else //要通知客户端
                    {
                        ////设置技能
                        //attacker.CurrentMagic = -1;

                        //// 通知其他人，自己开始准备攻击要准备的技能
                        //GameManager.ClientMgr.NotifyOthersMagicCode(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                        //    attacker, attacker.RoleID, attacker.MonsterZoneNode.MapCode, -1, (int)TCPGameServerCmds.CMD_SPR_MAGICCODE);
                    }
                }
            }
        }

        /// <summary>
        /// 获取指定动作的数字顺序号
        /// </summary>
        /// <returns></returns>
        public static int GetActionIndex(GActions action)
        {
            int n = -1;
            switch (action)
            {
                case GActions.Stand:
                    n = 0;
                    break;
                case GActions.Walk:
                    n = 1;
                    break;
                case GActions.Run:
                    n = 2;
                    break;
                case GActions.Attack:
                    n = 3;
                    break;
                case GActions.Magic:
                    n = 4;
                    break;
                case GActions.Bow:
                    n = 5;
                    break;
                case GActions.Death:
                    n = 6;
                    break;
                case GActions.HorseStand:
                    n = 7;
                    break;
                case GActions.HorseRun:
                    n = 8;
                    break;
                case GActions.HorseDead:
                    n = 9;
                    break;
                case GActions.Sit:
                    n = 10;
                    break;
                case GActions.PreAttack:
                    n = 11;
                    break;
                //case GActions.IdleStand:
                //    n = 0; //废弃
                //    break;
                case GActions.Injured:
                    n = 12;
                    break;
            }
            return n;
        }

        /// <summary>
        /// 获取动作的速度/频率
        /// </summary>
        /// <param name="action"></param>
        /// <returns></returns>
        public static int GetActionTick(GActions action, int[] speedTickList)
        {
            int n = GetActionIndex(action);
            if (n >= speedTickList.Length)
            {
                return 300;
            }

            return (int)(speedTickList[n] * 0.74);
        }

        /// <summary>
        /// 获取指定怪物类型的数字顺序号
        /// </summary>
        /// <returns></returns>
        public static int GetMonsterTypeIndex(MonsterTypes monsterType)
        {
            int n = 0;
            switch (monsterType)
            {
                case MonsterTypes.None:
                    n = 0;
                    break;
                case MonsterTypes.Noraml:
                    n = 1;
                    break;
                
                case MonsterTypes.BOSS:
                    n = 2;
                    break;
               
                case MonsterTypes.CaiJi:
                    n = 3;
                    break;
                case MonsterTypes.Pet:
                    n = 4;
                    break;
                case MonsterTypes.CityGuard:
                    n = 5;
                    break;
                case MonsterTypes.Trap:
                    n = 6;
                    break;
                  
            }
           
            return n;
        }

        /// <summary>
        /// 指定怪物类型的攻击待机时间数组
        /// </summary>
        private static int[] MonsterPreAttackTicks = null;

        /// <summary>
        /// 获取指定怪物类型的攻击待机时间
        /// </summary>
        /// <returns></returns>
        public static int GetPreAttackTicksByMonsterType(MonsterTypes monsterType)
        {
            if (null == MonsterPreAttackTicks)
            {
                MonsterPreAttackTicks = GameManager.systemParamsList.GetParamValueIntArrayByName("MonsterPreAttackTicks");
            }

            int n = Global.GetMonsterTypeIndex(monsterType);
            if (n >= 0 && n < MonsterPreAttackTicks.Length)
            {
                return MonsterPreAttackTicks[n];
            }

            return 2000; //缺省值
        }

        /// <summary>
        /// 判断怪与目标是否敌对关系--IsOpposition 这个系列的函数，主要用于判断第一个参数是否可以攻击第二个参数对应的对象，先后顺序很重要
        /// </summary>
        /// <param name="me">自身精灵</param>
        /// <param name="obj">对象精灵</param>
        /// <returns>是/否</returns>
        public static bool IsOpposition(Monster monster, IObject targetObj)
        {
            //统一处理 采集怪不能攻击敌人
            if ((int)MonsterTypes.CaiJi == monster.MonsterType)
            {
                return false;
            }

            //目标是玩家，则采用玩家 和 怪的规则判断
            if (targetObj is GameClient)
            {
                return IsOpposition(monster, targetObj as GameClient);
            }
            else if (targetObj is Monster)  //目标是怪，则按照怪与怪的规则判断
            {
                Monster targetMonster = targetObj as Monster;

                return IsOpposition(monster, targetMonster);
            }
            else if (targetObj is BiaoCheItem)  //目标是镖车
            {
                BiaoCheItem biaoCheItem = targetObj as BiaoCheItem;
                return IsOpposition(monster, biaoCheItem);
            }
            else if (targetObj is BiaoCheItem)  //目标是帮旗
            {
                JunQiItem junQiItem = targetObj as JunQiItem;
                return IsOpposition(monster, junQiItem);
            }

            //默认返回false 这主要涉及镖车等的判断
            return false;
        }

        /// <summary>
        /// 判断怪与玩家是否敌对关系
        /// </summary>
        /// <param name="me">怪</param>
        /// <param name="obj">怪</param>
        /// <returns>是/否</returns>
        public static bool IsOpposition(Monster monster, GameClient client)
        {
            //玩家自己召唤的怪不打玩家自己
            if (monster.OwnerClient == client)
            {
                return false;
            }

            if (!monster.IsAttackRole) return false;//狼魂要塞

            //有主人,则判断主人的关系
            if (monster.OwnerClient != null)
            {
                return Global.IsOpposition(monster.OwnerClient, client);
            }

            GameMap gameMap = null;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(client.ClientData.MapCode, out gameMap))
            {
                return false;
            }

            if (null == gameMap)
            {
                return false;
            }

            //bool safeRegion = obj.ClientData.InSafeRegion;
            bool safeRegion = gameMap.InSafeRegionList(client.CurrentGrid);

            //如果对方在安全区
            if (safeRegion)
            {
                return false;
            }

            //不用判断地图，既然出现了，那么肯定是在某个特定地图
            //魔玩家 不能攻击 魔阵营守卫===>他们不是敌人
            if ((int)BattleWhichSides.Mo == client.ClientData.BattleWhichSide)
            {
                return false;
            }

            //[仙]玩家 不能攻击 仙阵营守卫===>他们不是敌人
            if ((int)BattleWhichSides.Xian == client.ClientData.BattleWhichSide)
            {
                return false;
            }

            //采集怪 和 平民怪 不能被攻击===>这儿的概念是，他们对玩家而言，不是敌人
            if ((int)MonsterTypes.CaiJi == monster.MonsterType
               )
            {
                return false;
            }

            //否则 可以攻击
            return true;
        }

        /// <summary>
        /// 判断怪与怪是否敌对关系
        /// </summary>
        /// <param name="me">怪</param>
        /// <param name="obj">怪</param>
        /// <returns>是/否</returns>
        public static bool IsOpposition(Monster monster, Monster targetMonster)
        {
            //采集怪不能被攻击,对怪而言，采集怪永远不是敌人
            if ((int)MonsterTypes.CaiJi == targetMonster.MonsterType)
            {
                return false;
            }

            //玩家召唤的monster怪能否攻击怪物由玩家自己决定
            if (monster.OwnerClient != null)
            {
                return Global.IsOpposition(monster.OwnerClient, targetMonster);
            }

            //如被攻击者是玩家召唤的怪，则由玩家决定是否可以被攻击，比如 玩家未红名，则它的召唤怪也不能被卫士或者平民攻击
            if (targetMonster.OwnerClient != null)
            {
                return Global.IsOpposition(monster, targetMonster.OwnerClient);
            }

            //不是玩家召唤的monster怪，走阵营判断,同阵营的怪不能相互攻击
            if (monster.Camp == targetMonster.Camp)
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// 判断怪与镖车是否敌对关系
        /// </summary>
        /// <param name="me">怪</param>
        /// <param name="obj">怪</param>
        /// <returns>是/否</returns>
        public static bool IsOpposition(Monster monster, BiaoCheItem biaoCheItem)
        {
            //是护卫则通过主人的攻击规则来判断
            if (null != monster.OwnerClient)
            {
                return Global.IsOpposition(monster.OwnerClient, biaoCheItem);
            }

            //如果不是 除自己外攻击任意敌人的怪物 则不立刻返回false，不攻击镖车

            return true;
        }

        /// <summary>
        /// 判断怪与帮旗是否敌对关系
        /// </summary>
        /// <param name="me">怪</param>
        /// <param name="obj">怪</param>
        /// <returns>是/否</returns>
        public static bool IsOpposition(Monster monster, JunQiItem junQiItem)
        {
            //是护卫则通过主人的攻击规则来判断
            if (null != monster.OwnerClient)
            {
                return Global.IsOpposition(monster.OwnerClient, junQiItem);
            }

            //如果不是 除自己外攻击任意敌人的怪物 则不立刻返回false，不攻击帮旗

            return true;
        }

        /// <summary>
        /// 判断精灵是否与对象敌对
        /// </summary>
        /// <param name="me">自身精灵</param>
        /// <param name="obj">对象精灵</param>
        /// <returns>是/否</returns>
        public static bool IsOpposition(GameClient me, Monster obj)
        {
            if (GameManager.CheckMismatchMapCode && me.CheckCheatData.MismatchingMapCode)
            {
                return false;
            }

            if (obj.VLife <= 0)
            {
                return false;
            }

            //自己不能攻击自己的宠物怪，自己的宠物怪一样不能攻击自己
            if (me == obj.OwnerClient)
            {
                return false;
            }

            //怪有主人，则判断主人是否敌对
            if (obj.OwnerClient != null)
            {
                return IsOpposition(me, obj.OwnerClient);
            }

            //采集怪 和 平民怪 不能被攻击===>这儿的概念是，他们对玩家而言，不是敌人
            if ((int)MonsterTypes.CaiJi == obj.MonsterType)
            {
                return false;
            }

         

           

            return true;
        }

        /// <summary>
        /// 判断精灵是否与对象敌对
        /// </summary>
        /// <param name="me">自身精灵</param>
        /// <param name="obj">对象精灵</param>
        /// <returns>是/否</returns>
        public static bool IsOpposition(GameClient me, BiaoCheItem obj)
        {
            if (GameManager.CheckMismatchMapCode && me.CheckCheatData.MismatchingMapCode)
            {
                return false;
            }

            if (obj.CurrentLifeV <= 0)
            {
                return false;
            }

            //判断镖车是否能够被攻击
            if (!BiaoCheManager.CanAttack(me, obj))
            {
                return false;
            }

            //20 级以下不允许砍镖车
            if (me.ClientData.Level <= 20)
            {
                return false;
            }

            if (obj.OwnerRoleID == me.ClientData.RoleID)
            {
                return false;
            }

            GameMap gameMap = null;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(me.ClientData.MapCode, out gameMap))
            {
                return false;
            }

            int mapPKMode = gameMap.PKMode;

            //判断地图的PK模式
            //PKMode, 0普通地图表示由用户的pk模式决定(加PK值), 1战斗地图表示强制PK模式(不加PK值), 2安全地图表示不允许PK;

            switch ((MapPKModes)mapPKMode)
            {
                case MapPKModes.Normal:
                case MapPKModes.Liberty:
                    break;
                case MapPKModes.NoPK:
                    return false;
                case MapPKModes.Whole:
                    return true;
                case MapPKModes.Faction:
                    {
                        GameClient owner = GameManager.ClientMgr.FindClient(obj.OwnerRoleID);
                        if (null != owner)
                        {
                            return me.ClientData.Faction != owner.ClientData.Faction;
                        }

                        return false;
                    }
                case MapPKModes.Team:
                    {
                        GameClient owner = GameManager.ClientMgr.FindClient(obj.OwnerRoleID);
                        if (null != owner)
                        {
                            return me.ClientData.TeamID != owner.ClientData.TeamID;
                        }

                        return false;
                    }
                case MapPKModes.Battle:
                    {
                        GameClient owner = GameManager.ClientMgr.FindClient(obj.OwnerRoleID);
                        if (null != owner)
                        {
                            return me.ClientData.BattleWhichSide != owner.ClientData.BattleWhichSide;
                        }

                        return false;
                    }
            }

            return (me.ClientData.PKMode != (int)GPKModes.Normal);
        }

        /// <summary>
        /// 判断精灵是否与对象敌对
        /// </summary>
        /// <param name="me">自身精灵</param>
        /// <param name="obj">对象精灵</param>
        /// <returns>是/否</returns>
        public static bool IsOpposition(GameClient me, JunQiItem obj)
        {
            if (GameManager.CheckMismatchMapCode && me.CheckCheatData.MismatchingMapCode)
            {
                return false;
            }

            if (obj.CurrentLifeV <= 0)
            {
                return false;
            }

            if (obj.ManagerType == SceneUIClasses.LuoLanChengZhan)
            {
                if (!LuoLanChengZhanManager.getInstance().IsInBattling())
                {
                    return false;
                }
            }
            else
            {
                //判断帮旗是否能够被攻击
                if (!JunQiManager.CanAttack(obj))
                {
                    return false;
                }

                //40 级以下不允许砍帮旗
                if (me.ClientData.Level <= 40)
                {
                    return false;
                }
            }


            if (obj.BHID == me.ClientData.Faction) //如果是同一个帮派，则不能砍帮旗
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// 判断精灵是否与对象敌对
        /// </summary>
        /// <param name="me">自身精灵</param>
        /// <param name="obj">对象精灵</param>
        /// <returns>是/否</returns>
        public static bool IsOpposition(GameClient me, FakeRoleItem obj)
        {
            if (obj.CurrentLifeV <= 0)
            {
                return false;
            }

            //判断假人是否能够被攻击
            if (!FakeRoleManager.CanAttack(obj))
            {
                return false;
            }

            if (me.ClientData.Level <= 20)
            {
                return false;
            }

            if (obj.MyRoleDataMini.RoleID == me.ClientData.RoleID)
            {
                return false;
            }

            GameMap gameMap = null;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(me.ClientData.MapCode, out gameMap))
            {
                return false;
            }

            int mapPKMode = gameMap.PKMode;

            //判断地图的PK模式
            //PKMode, 0普通地图表示由用户的pk模式决定(加PK值), 1战斗地图表示强制PK模式(不加PK值), 2安全地图表示不允许PK;
            switch ((MapPKModes)mapPKMode)
            {
                case MapPKModes.Normal:
                case MapPKModes.Liberty:
                    break;
                case MapPKModes.NoPK:
                    return false;
                case MapPKModes.Whole:
                    return true;
                case MapPKModes.Faction:
                    return me.ClientData.Faction != obj.MyRoleDataMini.Faction ;
                case MapPKModes.Team:
                    return me.ClientData.TeamID != obj.MyRoleDataMini.TeamID;
                case MapPKModes.Battle:
                    return me.ClientData.BattleWhichSide != obj.MyRoleDataMini.BattleWhichSide;
            }

            //根据自身的PK模式与对方的PK模式进行比较进行相应返回
            switch ((GPKModes)me.ClientData.PKMode)
            {
                case GPKModes.Normal:
                    {
                        //判断地图的PK模式
                        //PKMode, 0普通地图表示由用户的pk模式决定(加PK值), 1战斗地图表示强制PK模式(不加PK值), 2安全地图表示不允许PK;
                        if (mapPKMode <= 1)
                        {
                            return false;
                        }

                        return true;
                    }
                case GPKModes.Whole:
                    {
                        return true;
                    }
                case GPKModes.Faction:
                    {
                        return false;
                    }
                case GPKModes.Team:
                    {
                        return false;
                    }
                case GPKModes.Kind: // 善恶模式 [5/20/2014 LiaoWei]
                    {
                        // 被攻击者是否是红名
                        return (Global.GetNameColorIndexByPKPoints(obj.MyRoleDataMini.PKPoint) >= 2) ? true : false;
                    }
                default:
                    break;
            }

            return false;
        }

        /// <summary>
        /// 判断精灵是否与对象敌对
        /// </summary>
        /// <param name="me">自身精灵</param>
        /// <param name="obj">对象精灵</param>
        /// <returns>是/否</returns>
        public static bool IsOpposition(GameClient me, GameClient obj)
        {
            if (GameManager.CheckMismatchMapCode && me.CheckCheatData.MismatchingMapCode)
            {
                return false;
            }

            //判断是否在主城，如果是在主城，则不能PK
            //if (me.ClientData.MapCode == GameManager.MainMapCode)
            //{
            //    return false;
            //}

            // 新手保护 -- 0转80级 [4/10/2014 LiaoWei]
            if (me.ClientData.ChangeLifeCount == 0 && me.ClientData.Level < Global.ConstPKNeedLevel)
                return false;

            if (obj.ClientData.ChangeLifeCount == 0 && obj.ClientData.Level < Global.ConstPKNeedLevel)
                return false;

            //判断是否在炎黄战场地图上, 如果是则特殊处理
            if (me.ClientData.MapCode == GameManager.BattleMgr.BattleMapCode)
            {
                if (me.ClientData.BattleWhichSide != obj.ClientData.BattleWhichSide)
                {
                    return GameManager.BattleMgr.AllowAttack;
                }
                else
                {
                    return false;
                }
            }

            //判断是否在角斗场上
            if (me.ClientData.MapCode == GameManager.ArenaBattleMgr.BattleMapCode)
            {
                return GameManager.ArenaBattleMgr.AllowAttack;
            }

            //如果自己是处于挂机保护状态，则不能攻击别人
            if (Global.IsAutoFightingProtectState(me))
            {
                return false;
            }

            //如果自己是处于挂机保护状态，则不能被别人攻击
            if (Global.IsAutoFightingProtectState(obj))
            {
                return false;
            }

            /*
            //如果是在皇城中
            if (me.ClientData.MapCode == Global.GetHuangChengMapCode())
            {
                if (!Global.CanHuangChengAttack(me))
                {
                    return false;
                }
            }
            */

            if (me.ClientData.DJRoomID > 0 && obj.ClientData.DJRoomID == me.ClientData.DJRoomID)
            {
                if (0 >= me.ClientData.DJRoomTeamID) //自己是观众
                {
                    return false;
                }

                if (0 >= obj.ClientData.DJRoomTeamID) //对方是观众
                {
                    return false;
                }

                if (me.ClientData.DJRoomTeamID == obj.ClientData.DJRoomTeamID)
                {
                    return false;
                }

                DJRoomData djRoomData = GameManager.DJRoomMgr.FindRoomData(me.ClientData.DJRoomID);
                if (null != djRoomData)
                {
                    lock (djRoomData)
                    {
                        //判断是否过了交战等待时间
                        if (djRoomData.PKState <= 1 || djRoomData.PKState >= 3)
                        {
                            return false;
                        }
                    }
                }
            }

            return _IsOpposition(me, obj);
        }

        /// <summary>
        /// 判断精灵是否与对象敌对
        /// </summary>
        /// <param name="me">自身精灵</param>
        /// <param name="obj">对象精灵</param>
        /// <returns>是/否</returns>
        public static bool _IsOpposition(GameClient me, GameClient obj)
        {
            //假如对象为自己则返回否, 如果对象血已经为0也返回，如果对方是功能性NPC也返回
            if (me == obj)
            {
                return false;
            }

            //如果对方和自己所在的地图不同，则不能攻击
            if (me.CurrentMapCode != obj.CurrentMapCode)
            {
                return false;
            }

            //如果对方已经死亡
            if (obj.ClientData.CurrentLifeV <= 0)
            {
                return false;
            }

            GameMap gameMap = null;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(me.ClientData.MapCode, out gameMap))
            {
                return false;
            }

            //bool safeRegion = obj.ClientData.InSafeRegion;
            bool safeRegion = gameMap.InSafeRegionList(me.CurrentGrid);

            //如果自己在安全区
            if (safeRegion)
            {
                return false;
            }

            // 注释掉 之前就判断过了 [5/8/2014 LiaoWei]
            //如果自己的等级低于20级
            //if (me.ClientData.Level <= 20)
            //{
            //    return false;
            //}

            //bool safeRegion = obj.ClientData.InSafeRegion;
            safeRegion = gameMap.InSafeRegionList(obj.CurrentGrid);

            //如果对方在安全区
            if (safeRegion)
            {
                return false;
            }

            //判断地图的PK模式
            //PKMode, 0普通地图表示由用户的pk模式决定(加PK值), 1战斗地图表示强制PK模式(不加PK值), 2安全地图表示不允许PK;
            int mapPKMode = gameMap.PKMode;
            switch ((MapPKModes)mapPKMode)
            {
                case MapPKModes.Normal:
                case MapPKModes.Liberty:
                    break;
                case MapPKModes.NoPK:
                    return false;
                case MapPKModes.Whole:
                    return true;
                case MapPKModes.Faction:
                    return me.ClientData.Faction != obj.ClientData.Faction;
                case MapPKModes.Team:
                    return me.ClientData.TeamID != obj.ClientData.TeamID;
                case MapPKModes.Battle:
                    return me.ClientData.BattleWhichSide != obj.ClientData.BattleWhichSide;
            }

            //如果对方是安全模式
            /*if (obj.ClientData.PKMode == (int)GPKModes.Normal)
            {
                if (forcePK <= 0)
                {
                    return false;
                }
            }*/

            //如果对方的等级低于20级 // 注释掉 [5/8/2014 LiaoWei]
            if ((obj.ClientData.ChangeLifeCount == 0 && obj.ClientData.Level < Global.ConstPKNeedLevel) && 1 == obj.ClientData.MapCode)
            {
                if (1 != mapPKMode)
                {
                    return false;
                }
            }

            //如果是隋唐争霸--炎黄战场，判断双方阵营
            if (Global.IsBattleMap(me))
            {
                return (me.ClientData.BattleWhichSide != obj.ClientData.BattleWhichSide);
            }

            //如果是角斗赛-武林争霸，则强行返回true 随意pk
            //竞技场地图，且在战斗时间
            if (GameManager.ArenaBattleMgr.IsInArenaBattle(me))
            {
                return true;
            }

            //如果是 决战沙城-王城争霸，则根据帮派判断
            //在沙城，且在战斗时间 不用管，由玩家自行选择pk模式
            /*
            if (Global.IsInShaChengBattle(me))
            {
                return obj.ClientData.Faction != me.ClientData.Faction;
            }
            */

            //根据自身的PK模式与对方的PK模式进行比较进行相应返回
            switch ((GPKModes)me.ClientData.PKMode)
            {
                case GPKModes.Normal:
                    {
                        //判断地图的PK模式
                        //PKMode, 0普通地图表示由用户的pk模式决定(加PK值), 1战斗地图表示强制PK模式(不加PK值), 2安全地图表示不允许PK;
                        if (mapPKMode <= 1)
                        {
                            return false;
                        }

                        return true;
                    }
                case GPKModes.Whole:
                    {
                        return true;
                    }
                case GPKModes.Faction:
                    {
                        if (me.ClientData.Faction == 0 || obj.ClientData.Faction == 0) return true;
                        if (me.ClientData.Faction == obj.ClientData.Faction) return false;

                        return !AllyManager.getInstance().UnionIsAlly(me, obj.ClientData.Faction);
                        //return (0 == me.ClientData.Faction || me.ClientData.Faction != obj.ClientData.Faction) ? true : false;
                    }
                case GPKModes.Team:
                    {
                        //判断是否是队友，是则false，否则true
                        return (0 == me.ClientData.TeamID || me.ClientData.TeamID != obj.ClientData.TeamID) ? true : false;
                    }
                case GPKModes.Kind: // 善恶模式 [5/20/2014 LiaoWei]
                    {
                        // 被攻击者是否是红名 或者 灰名
                        if (Global.GetNameColorIndexByPKPoints(obj.ClientData.PKPoint) >= 2 || Global.IsPurpleName(obj))
                            return true;
                        else
                            return false;
                    }
                default:
                    break;
            }

            return false;
        }

        /// <summary>
        /// 判断二者是否处于交战状态
        /// </summary>
        /// <param name="client"></param>
        /// <param name="roleID"></param>
        /// <returns></returns>
        public static bool IsInBattle(GameClient client, IObject obj)
        {
            //目标角色ID，对于怪物 和 玩家有效
            int targetRoleID = -1;

            //返回目标角色ID===这儿只需要考虑玩家 和 怪物，对于NPC 镖车 帮旗等其它现在不提供攻击
            if (obj is GameClient)
            {
                targetRoleID = (obj as GameClient).ClientData.RoleID;
            }
            else if (obj is Monster)
            {
                targetRoleID = (obj as Monster).RoleID;
            }

            //判断主角的攻击对象 和 攻击主角的对象id 是否和 对方一致
            if (targetRoleID > 0 && (client.ClientData.RoleIDAttackebByMyself == targetRoleID
                || client.ClientData.RoleIDAttackMe == targetRoleID))
            {
                return true;
            }

            //目标是人
            if (obj is GameClient)
            {
                GameClient targetClient = obj as GameClient;

                int roleID = client.ClientData.RoleID;
                if (roleID > 0 && (targetClient.ClientData.RoleIDAttackebByMyself == roleID
                || targetClient.ClientData.RoleIDAttackMe == roleID))
                {
                    return true;
                }
            }

            //目标怪 正在被攻击
            if (obj is Monster)
            {
                if ((obj as Monster).IsAttackedBy(client.ClientData.RoleID))
                {
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// 判断是否将要向锁定对象发起攻击
        /// </summary>
        //public static bool WillAttack(Monster attacker, GameClient defenser)
        //{
        //    if (defenser == null) return false;
        //    if (attacker.MonsterZoneNode.MapCode != defenser.ClientData.MapCode) return false; //如果不在同一个地图, 不能再攻击
        //    return (Global.InCircle(attacker.SafeCoordinate, new Point(defenser.ClientData.PosX, defenser.ClientData.PosY), attacker.AttackRange + 30));
        //}

        /// <summary>
        /// 获取职业ID的职业名称
        /// </summary>
        /// <param name="occupation"></param>
        /// <returns></returns>
        public static string GetOccupationStr(int occupation)
        {
            if ((int)EOccupationType.EOT_Warrior == occupation)
            {
                return Global.GetLang("战士");
            }
            else if ((int)EOccupationType.EOT_SD == occupation)
            {
                return Global.GetLang("双刀");
            }
            else if ((int)EOccupationType.EOT_QZ == occupation)
            {
                return Global.GetLang("枪战 ");
            }
            else if ((int)EOccupationType.EOT_DZ == occupation)
            {
                return Global.GetLang("盾战");
            }
            else if ((int)EOccupationType.EOT_SS == occupation) //  增加魔剑士最大生命值[4/15/2015 chdeng]
            {
                return Global.GetLang("术士");
            }
            else if ((int)EOccupationType.EOT_GS == occupation)
            {
                return Global.GetLang("弓手");
            }

            return Global.GetLang("未知职业");
        }

        /// <summary>
        /// 怪物是否能看见角色
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool RoleIsVisible(GameClient client)
        {
            if (client.ClientData.MoveAndActionNum <= 0)
            {
                return false;
            }

            if (client.ClientData.DSHideStart <= 0)
            {
                return true;
            }

            long nowTicks = TimeUtil.NOW();
            return (nowTicks >= client.ClientData.DSHideStart);
        }

        #endregion //精灵相关

        #region 地图点/障碍物

        /// <summary>
        /// 强制将点校正为格子的中心点
        /// </summary>
        /// <param name="mapCode"></param>
        /// <param name="p"></param>
        public static Point ForceCorrectPoint(int mapCode, Point p)
        {
            GameMap gameMap = null;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(mapCode, out gameMap))
            {
                return p;
            }

            return new Point((int)(p.X / gameMap.MapGridWidth) * gameMap.MapGridWidth + gameMap.MapGridWidth / 2, (int)(p.Y / gameMap.MapGridHeight) * gameMap.MapGridHeight + gameMap.MapGridHeight / 2);
        }

        /// <summary>
        /// 获取一个指定中心点半径内的空闲点
        /// </summary>
        /// <param name="mapCode"></param>
        /// <param name="toX"></param>
        /// <param name="toY"></param>
        /// <param name="radius"></param>
        /// <returns></returns>
        public static Point GetMapPoint(ObjectTypes objType, int mapCode, int toX, int toY, int radius)
        {
            Point p = new Point(toX, toY);
            GameMap gameMap = null;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(mapCode, out gameMap))
            {
                return p;
            }

            int minX = Math.Max(0, toX - radius);
            int maxX = Math.Min(gameMap.MapWidth - 1, toX + radius);
            int minY = Math.Max(0, toY - radius);
            int maxY = Math.Min(gameMap.MapHeight - 1, toY + radius);

            Point randPoint = new Point(Global.GetRandomNumber(minX, maxX), Global.GetRandomNumber(minY, maxY));
            if (!Global.InObs(objType, mapCode, (int)randPoint.X, (int)randPoint.Y))
            {
                return Global.ForceCorrectPoint(mapCode, randPoint);
            }

            Point gridPoint = new Point((int)(randPoint.X / gameMap.MapGridWidth), (int)(randPoint.Y / gameMap.MapGridHeight));

            //从距离一个格子的4个方向中，选择一个没有障碍物的格子
            gridPoint = Global.GetAGridPointIn4Direction(objType, gridPoint, mapCode);

            // 再做一次保障判断 [5/7/2014 LiaoWei]
            if (Global.InObsByGridXY(objType, mapCode, (int)gridPoint.X, (int)gridPoint.Y))
            {
                return p;
            }

            return new Point(gridPoint.X * gameMap.MapGridWidth + gameMap.MapGridWidth / 2, gridPoint.Y * gameMap.MapGridHeight + gameMap.MapGridHeight / 2);
        }

        /// <summary>
        /// 获取一个指定中心点半径内的空闲点
        /// </summary>
        /// <param name="mapCode"></param>
        /// <param name="toX"></param>
        /// <param name="toY"></param>
        /// <param name="radius"></param>
        /// <returns></returns>
        public static Point GetMapPointByGridXY(ObjectTypes objType, int mapCode, int gridX, int gridY, int radiusNum, int holdGridNum = 0, bool bCanNotInSafeArea = false)
        {
            Point p = new Point(gridX, gridY);
            GameMap gameMap = null;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(mapCode, out gameMap))
            {
                return new Point(p.X * gameMap.MapGridWidth + gameMap.MapGridWidth / 2, p.Y * gameMap.MapGridHeight + gameMap.MapGridHeight / 2);
            }

            int minX = Math.Max(0, gridX - radiusNum);
            int maxX = Math.Min(gameMap.MapGridColsNum - 1, gridX + radiusNum);
            int minY = Math.Max(0, gridY - radiusNum);
            int maxY = Math.Min(gameMap.MapGridRowsNum - 1, gridY + radiusNum);

            Point randPoint = new Point(Global.GetRandomNumber(minX, maxX), Global.GetRandomNumber(minY, maxY));
            if (!Global.InObsByGridXY(objType, mapCode, (int)randPoint.X, (int)randPoint.Y, holdGridNum))// && !gameMap.InSafeRegionList((int)randPoint.X, (int)randPoint.Y))  // 是否在安全区判断 [4/14/2014 LiaoWei]
            {
                return new Point(randPoint.X * gameMap.MapGridWidth + gameMap.MapGridWidth / 2, randPoint.Y * gameMap.MapGridHeight + gameMap.MapGridHeight / 2);
            }

            //return new Point(gridX * gameMap.MapGridWidth + gameMap.MapGridWidth / 2, gridY * gameMap.MapGridHeight + gameMap.MapGridHeight / 2);

            Point gridPoint = new Point((int)randPoint.X, (int)randPoint.Y);

            //从距离一个格子的4个方向中，选择一个没有障碍物的格子
            gridPoint = Global.GetAGridPointIn4Direction(objType, gridPoint, mapCode, holdGridNum, false);
            if (Global.InObsByGridXY(objType, mapCode, (int)gridPoint.X, (int)gridPoint.Y, holdGridNum))// && !gameMap.InSafeRegionList((int)randPoint.X, (int)randPoint.Y))  // 是否在安全区判断 [4/14/2014 LiaoWei]
            {
                return new Point(gridX * gameMap.MapGridWidth + gameMap.MapGridWidth / 2, gridY * gameMap.MapGridHeight + gameMap.MapGridHeight / 2);
            }

            return new Point(gridPoint.X * gameMap.MapGridWidth + gameMap.MapGridWidth / 2, gridPoint.Y * gameMap.MapGridHeight + gameMap.MapGridHeight / 2);
        }

        /// <summary>
        /// 获取一个随机的不是障碍物的点
        /// </summary>
        /// <param name="mapCode"></param>
        /// <returns></returns>
        public static Point GetRandomPoint(ObjectTypes objType, int mapCode)
        {
            GameMap gameMap = GameManager.MapMgr.DictMaps[mapCode];
            Point randPoint = new Point(Global.GetRandomNumber(0, gameMap.MapWidth), Global.GetRandomNumber(0, gameMap.MapHeight));
            if (!Global.InObs(objType, mapCode, (int)randPoint.X, (int)randPoint.Y))
            {
                return Global.ForceCorrectPoint(mapCode, randPoint);
            }

            Point gridPoint = new Point((int)(randPoint.X / gameMap.MapGridWidth), (int)(randPoint.Y / gameMap.MapGridHeight));

            //从距离一个格子的4个方向中，选择一个没有障碍物的格子
            gridPoint = Global.GetAGridPointIn4Direction(objType, gridPoint, mapCode);
            return new Point(gridPoint.X * gameMap.MapGridWidth + gameMap.MapGridWidth / 2, gridPoint.Y * gameMap.MapGridHeight + gameMap.MapGridHeight / 2);
        }

        /// <summary>
        /// 从距离一个格子的4个方向中，选择一个没有障碍物的格子
        /// </summary>
        /// <param name="p"></param>
        /// <param name="obs"></param>
        /// <returns></returns>
        public static Point GetAGridPointIn4Direction(ObjectTypes objType, Point gridPoint, int mapCode, int holdGridNum = 0, bool bCanNotInSafeArea = false)   // 增加一个参数--是否不能在安全区内 [4/14/2014 LiaoWei]
        {
            GameMap gameMap = null;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(mapCode, out gameMap))
            {
                return gridPoint;
            }

            MapGrid mapGrid = GameManager.MapGridMgr.DictGrids[mapCode];

            int gridX = (int)gridPoint.X;
            int gridY = (int)gridPoint.Y;
            if (gameMap.MyNodeGrid.isWalkable(gridX, gridY) && mapGrid.CanMove(objType, gridX, gridY, holdGridNum))
            {
                return gridPoint;
            }

            Point p = gridPoint;
            int maxGridX = gameMap.MapGridColsNum - 1;
            int maxGridY = gameMap.MapGridRowsNum - 1;
            int added = 1, newX1 = 0, newY1 = 0, newX2 = 0, newY2 = 0;
            while (true)
            {
                newX1 = gridX + added;
                newY1 = gridY + added;
                newX2 = gridX - added;
                newY2 = gridY - added;

                int total = 8;

                if ((0 <= newX1 && newX1 < maxGridX) && (0 <= newY1 && newY1 < maxGridY))
                {
                    // 新增不在安全区逻辑判断 -- 代码可能加的不好看 但逻辑平移  [4/14/2014 LiaoWei]

                    total--;
                    if (gameMap.MyNodeGrid.isWalkable(newX1, newY1) && mapGrid.CanMove(objType, newX1, newY1, holdGridNum))
                    {
                        if (bCanNotInSafeArea)
                        {
                            if (!gameMap.InSafeRegionList(newX1, newY1))
                            {
                                p = new Point(newX1, newY1);
                                break;
                            }
                        }
                        else
                        {
                            p = new Point(newX1, newY1);
                            break;
                        }

                    }
                }

                if ((0 <= newX1 && newX1 < maxGridX) && (0 <= newY2 && newY2 < maxGridY))
                {
                    total--;
                    if (gameMap.MyNodeGrid.isWalkable(newX1, newY2) && mapGrid.CanMove(objType, newX1, newY2, holdGridNum))
                    {
                        if (bCanNotInSafeArea)
                        {
                            if (!gameMap.InSafeRegionList(newX1, newY1))
                            {
                                p = new Point(newX1, newY1);
                                break;
                            }
                        }
                        else
                        {
                            p = new Point(newX1, newY1);
                            break;
                        }
                    }
                }

                if ((0 <= newX2 && newX2 < maxGridX) && (0 <= newY1 && newY1 < maxGridY))
                {
                    total--;
                    if (gameMap.MyNodeGrid.isWalkable(newX2, newY1) && mapGrid.CanMove(objType, newX2, newY1, holdGridNum))
                    {
                        if (bCanNotInSafeArea)
                        {
                            if (!gameMap.InSafeRegionList(newX1, newY1))
                            {
                                p = new Point(newX1, newY1);
                                break;
                            }
                        }
                        else
                        {
                            p = new Point(newX1, newY1);
                            break;
                        }
                    }
                }

                if ((0 <= newX2 && newX2 < maxGridX) && (0 <= newY2 && newY2 < maxGridY))
                {
                    total--;
                    if (gameMap.MyNodeGrid.isWalkable(newX2, newY2) && mapGrid.CanMove(objType, newX2, newY2, holdGridNum))
                    {
                        if (bCanNotInSafeArea)
                        {
                            if (!gameMap.InSafeRegionList(newX1, newY1))
                            {
                                p = new Point(newX1, newY1);
                                break;
                            }
                        }
                        else
                        {
                            p = new Point(newX1, newY1);
                            break;
                        }
                    }
                }

                if ((0 <= newX1 && newX1 < maxGridX))
                {
                    total--;
                    if (gameMap.MyNodeGrid.isWalkable(newX1, gridY) && mapGrid.CanMove(objType, newX1, gridY, holdGridNum))
                    {
                        if (bCanNotInSafeArea)
                        {
                            if (!gameMap.InSafeRegionList(newX1, newY1))
                            {
                                p = new Point(newX1, newY1);
                                break;
                            }
                        }
                        else
                        {
                            p = new Point(newX1, newY1);
                            break;
                        }
                    }
                }

                if ((0 <= newY1 && newY1 < maxGridY))
                {
                    total--;
                    if (gameMap.MyNodeGrid.isWalkable(gridX, newY1) && mapGrid.CanMove(objType, gridX, newY1, holdGridNum))
                    {
                        if (bCanNotInSafeArea)
                        {
                            if (!gameMap.InSafeRegionList(newX1, newY1))
                            {
                                p = new Point(newX1, newY1);
                                break;
                            }
                        }
                        else
                        {
                            p = new Point(newX1, newY1);
                            break;
                        }
                    }
                }

                if ((0 <= newX2 && newX2 < maxGridX))
                {
                    total--;
                    if (gameMap.MyNodeGrid.isWalkable(newX2, gridY) && mapGrid.CanMove(objType, newX2, gridY, holdGridNum))
                    {
                        if (bCanNotInSafeArea)
                        {
                            if (!gameMap.InSafeRegionList(newX1, newY1))
                            {
                                p = new Point(newX1, newY1);
                                break;
                            }
                        }
                        else
                        {
                            p = new Point(newX1, newY1);
                            break;
                        }
                    }
                }

                if ((0 <= newY2 && newY2 < maxGridY))
                {
                    total--;
                    if (gameMap.MyNodeGrid.isWalkable(gridX, newY2) && mapGrid.CanMove(objType, gridX, newY2, holdGridNum))
                    {
                        if (bCanNotInSafeArea)
                        {
                            if (!gameMap.InSafeRegionList(newX1, newY1))
                            {
                                p = new Point(newX1, newY1);
                                break;
                            }
                        }
                        else
                        {
                            p = new Point(newX1, newY1);
                            break;
                        }
                    }
                }

                if (total >= 8)
                {
                    break;
                }

                added++;
            }

            return p;
        }

        /// <summary>
        /// 是否不小心掉到了障碍物中
        /// </summary>
        /// <param name="mapCode"></param>
        /// <param name="toX"></param>
        /// <param name="toY"></param>
        /// <returns></returns>
        public static bool InOnlyObs(ObjectTypes objType, int mapCode, int gridX, int gridY)
        {
            GameMap gameMap = GameManager.MapMgr.DictMaps[mapCode];
            if (gridX >= gameMap.MapGridColsNum || gridX < 0 || gridY >= gameMap.MapGridRowsNum || gridY < 0)
            {
                return true;
            }

            if (!gameMap.MyNodeGrid.isWalkable(gridX, gridY)) //障碍物
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 是否不小心掉到了障碍物中
        /// </summary>
        /// <param name="mapCode"></param>
        /// <param name="toX"></param>
        /// <param name="toY"></param>
        /// <returns></returns>
        public static bool InOnlyObsByXY(ObjectTypes objType, int mapCode, int toX, int toY)
        {
            GameMap gameMap = GameManager.MapMgr.DictMaps[mapCode];
            if (toX >= gameMap.MapWidth || toX < 0 || toY >= gameMap.MapHeight || toY < 0)
            {
                return true;
            }

            int gridX = (int)(toX / gameMap.MapGridWidth);
            int gridY = (int)(toY / gameMap.MapGridHeight);
            if (gridX >= gameMap.MapGridColsNum || gridX < 0 || gridY >= gameMap.MapGridRowsNum || gridY < 0)
            {
                return true;
            }

            if (!gameMap.MyNodeGrid.isWalkable(gridX, gridY)) //障碍物
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 是否不小心掉到了障碍物中
        /// </summary>
        /// <param name="mapCode"></param>
        /// <param name="toX"></param>
        /// <param name="toY"></param>
        /// <returns></returns>
        public static bool InObs(ObjectTypes objType, int mapCode, int toX, int toY, int holdGridNum = 0, byte holdBitSet = 0)
        {
            GameMap gameMap = GameManager.MapMgr.DictMaps[mapCode];
            if (toX >= gameMap.MapWidth || toX < 0 || toY >= gameMap.MapHeight || toY < 0)
            {
                return true;
            }

            return Global.InObsByGridXY(objType, mapCode, (int)(toX / gameMap.MapGridWidth), (int)(toY / gameMap.MapGridHeight), holdGridNum, holdBitSet);
        }

        /// <summary>
        /// 是否不小心掉到了障碍物中
        /// </summary>
        /// <param name="mapCode"></param>
        /// <param name="toX"></param>
        /// <param name="toY"></param>
        /// <returns></returns>
        public static bool InObsByGridXY(ObjectTypes objType, int mapCode, int gridX, int gridY, int holdGridNum = 0, byte holdBitSet = 0)
        {
            GameMap gameMap = GameManager.MapMgr.DictMaps[mapCode];
            if (gridX >= gameMap.MapGridColsNum || gridX < 0 || gridY >= gameMap.MapGridRowsNum || gridY < 0)
            {
                return true;
            }

            if (!gameMap.MyNodeGrid.isWalkable(gridX, gridY)) //障碍物
            {
                return true;
            }

            MapGrid mapGrid = GameManager.MapGridMgr.DictGrids[mapCode];
            return !mapGrid.CanMove(objType, gridX, gridY, holdGridNum, holdBitSet);
        }

        /// <summary>
        /// 目标点是否可以到达
        /// </summary>
        public static bool IsPosReachable(int mapCode, int toX, int toY)
        {
            bool nCanMove = false;
            GameMap gameMap = GameManager.MapMgr.GetGameMap(mapCode);

            int gridX = toX / gameMap.MapGridWidth;
            int gridY = toY / gameMap.MapGridHeight;

            if (null != gameMap)
            {
                nCanMove = nCanMove | (gameMap.CanMove(gridX, gridY) ? true : false);
                //上下左右四个点
                nCanMove = nCanMove | (gameMap.CanMove(gridX, gridY + 1) ? true : false);
                nCanMove = nCanMove | (gameMap.CanMove(gridX, gridY - 1) ? true : false);
                nCanMove = nCanMove | (gameMap.CanMove(gridX + 1, gridY) ? true : false);
                nCanMove = nCanMove | (gameMap.CanMove(gridX - 1, gridY) ? true : false);
            }

            return nCanMove;
        }

        /// <summary>
        /// 目标点是否可以到达
        /// </summary>
        public static bool IsGridReachable(int mapCode, int gridX, int gridY)
        {
            bool nCanMove = false;
            GameMap gameMap = GameManager.MapMgr.GetGameMap(mapCode);
            if (null != gameMap)
            {
                nCanMove = nCanMove | (gameMap.CanMove(gridX, gridY) ? true : false);
                //上下左右四个点
                nCanMove = nCanMove | (gameMap.CanMove(gridX, gridY + 1) ? true : false);
                nCanMove = nCanMove | (gameMap.CanMove(gridX, gridY - 1) ? true : false);
                nCanMove = nCanMove | (gameMap.CanMove(gridX + 1, gridY) ? true : false);
                nCanMove = nCanMove | (gameMap.CanMove(gridX - 1, gridY) ? true : false);
            }

            return nCanMove;
        }

        #endregion 地图点/障碍物

        #region 地图格子操作相关

        /// <summary>
        /// 是否在区域中
        /// </summary>
        /// <param name="sprite"></param>
        /// <returns></returns>
        public static bool InArea(int centerGridX, int centerGridY, int radius, Point grid)
        {
            int absGridX = (int)Math.Abs(grid.X - centerGridX);
            int absGridY = (int)Math.Abs(grid.Y - centerGridY);
            if (absGridX > radius || absGridY > radius)
            {
                return false;
            }

            absGridY = (int)radius - absGridX;
            int gridY1 = (int)centerGridY - absGridY;
            int gridY2 = (int)centerGridY + absGridY;
            if (grid.Y >= gridY1 && grid.Y <= gridY2)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 比较两个点的格子坐标是否相同
        /// </summary>
        /// <param name="p1"></param>
        /// <param name="p2"></param>
        /// <returns></returns>
        public static bool CompareTwoPointGridXY(int mapCode, Point p1, Point p2)
        {
            GameMap gameMap = GameManager.MapMgr.DictMaps[mapCode];
            if ((int)(p1.X / gameMap.MapGridWidth) == (int)(p2.X / gameMap.MapGridWidth) &&
                (int)(p1.Y / gameMap.MapGridHeight) == (int)(p2.Y / gameMap.MapGridHeight))
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 根据传入的格子坐标和方向返回指定方向的格子坐标
        /// </summary>
        /// <param name="mapCode"></param>
        /// <param name="gridX"></param>
        /// <param name="gridY"></param>
        /// <returns></returns>
        public static Point GetGridPointByDirection(int direction, int gridX, int gridY)
        {
            int nCurrX = (int)gridX;
            int nCurrY = (int)gridY;

            int nX = nCurrX;
            int nY = nCurrY;

            switch ((Dircetions)direction)
            {
                case Dircetions.DR_UP:
                    nX = nCurrX;
                    nY = nCurrY + 1;
                    break;
                case Dircetions.DR_UPRIGHT:
                    nX = nCurrX + 1;
                    nY = nCurrY + 1;
                    break;
                case Dircetions.DR_RIGHT:
                    nX = nCurrX + 1;
                    nY = nCurrY;
                    break;
                case Dircetions.DR_DOWNRIGHT:
                    nX = nCurrX + 1;
                    nY = nCurrY - 1;
                    break;
                case Dircetions.DR_DOWN:
                    nX = nCurrX;
                    nY = nCurrY - 1;
                    break;
                case Dircetions.DR_DOWNLEFT:
                    nX = nCurrX - 1;
                    nY = nCurrY - 1;
                    break;
                case Dircetions.DR_LEFT:
                    nX = nCurrX - 1;
                    nY = nCurrY;
                    break;
                case Dircetions.DR_UPLEFT:
                    nX = nCurrX - 1;
                    nY = nCurrY + 1;
                    break;
            }

            return new Point(nX, nY);
        }

        /// <summary>
        /// 根据传入的格子坐标和方向返回指定方向的格子列表
        /// </summary>
        /// <param name="mapCode"></param>
        /// <param name="gridX"></param>
        /// <param name="gridY"></param>
        /// <returns></returns>
        public static List<Point> GetGridPointByDirection(int direction, int gridX, int gridY, int nNum)
        {
            List<Point> list = new List<Point>();

            int nCurrX = (int)gridX;
            int nCurrY = (int)gridY;

            int nX = nCurrX;
            int nY = nCurrY;

            //不考虑坐骑速度
            for (int i = 0; i < nNum; i++)
            {
                switch ((Dircetions)direction)
                {
                    case Dircetions.DR_UP:
                        nY++;
                        break;
                    case Dircetions.DR_UPRIGHT:
                        nX++;
                        nY++;
                        break;
                    case Dircetions.DR_RIGHT:
                        nX++;
                        break;
                    case Dircetions.DR_DOWNRIGHT:
                        nX++;
                        nY--;
                        break;
                    case Dircetions.DR_DOWN:
                        nY--;
                        break;
                    case Dircetions.DR_DOWNLEFT:
                        nX--;
                        nY--;
                        break;
                    case Dircetions.DR_LEFT:
                        nX--;
                        break;
                    case Dircetions.DR_UPLEFT:
                        nX--;
                        nY++;
                        break;

                }

                list.Add(new Point(nX, nY));
            }

            return list;
        }

        /// <summary>
        /// 判断是否在障碍物上(单纯障碍物)或者超出了地图边缘
        /// </summary>
        /// <param name="direction"></param>
        /// <param name="gridX"></param>
        /// <param name="gridY"></param>
        /// <returns></returns>
        public static bool JugeOnObsOrOverMap(GameClient client, int gridX, int gridY)
        {
            GameMap gameMap = GameManager.MapMgr.DictMaps[client.ClientData.MapCode];
            if (gridX >= gameMap.MapGridColsNum || gridX < 0 || gridY >= gameMap.MapGridRowsNum || gridY < 0)
            {
                return true;
            }

            return !gameMap.MyNodeGrid.isWalkable(gridX, gridY);
        }

        /// <summary>
        /// 根据传入的格子坐标和方向返回指定方向的格子列表(遇到空闲格子才终止, 如果遇到障碍物或者地图边缘，则返回null)
        /// </summary>
        /// <param name="mapCode"></param>
        /// <param name="gridX"></param>
        /// <param name="gridY"></param>
        /// <returns></returns>
        public static List<Point> SearchIdleGridPointByDirection(GameClient client, int direction, int gridX, int gridY, int maxSearchNum, int moveNum, byte holdBitSet)
        {
            List<Point> list = new List<Point>();

            int nCurrX = (int)gridX;
            int nCurrY = (int)gridY;

            int nX = nCurrX;
            int nY = nCurrY;

            int idleNum = 0;
            for (int i = 0; i < maxSearchNum; i++)
            {
                switch ((Dircetions)direction)
                {
                    case Dircetions.DR_UP:
                        nY++;
                        break;
                    case Dircetions.DR_UPRIGHT:
                        nX++;
                        nY++;
                        break;
                    case Dircetions.DR_RIGHT:
                        nX++;
                        break;
                    case Dircetions.DR_DOWNRIGHT:
                        nX++;
                        nY--;
                        break;
                    case Dircetions.DR_DOWN:
                        nY--;
                        break;
                    case Dircetions.DR_DOWNLEFT:
                        nX--;
                        nY--;
                        break;
                    case Dircetions.DR_LEFT:
                        nX--;
                        break;
                    case Dircetions.DR_UPLEFT:
                        nX--;
                        nY++;
                        break;

                }

                //判断是否在障碍物上(单纯障碍物)或者超出了地图边缘
                if (Global.JugeOnObsOrOverMap(client, nX, nY))
                {
                    list = null;
                    break;
                }

                list.Add(new Point(nX, nY));
                if (!Global.InObsByGridXY(client.ObjectType, client.ClientData.MapCode, nX, nY, 0, holdBitSet))
                {
                    idleNum++;
                }
                else
                {
                    idleNum = 0;
                }

                if (idleNum >= moveNum)
                {
                    break;
                }
            }

            if (null == list)
            {
                return null;
            }

            return list.Count >= maxSearchNum ? null : list;
        }

        /// <summary>
        /// 根据传入的格子坐标和方向返回指定方向的格子列表
        /// </summary>
        /// <param name="mapCode"></param>
        /// <param name="gridX"></param>
        /// <param name="gridY"></param>
        /// <returns></returns>
        public static List<Point> GetGridPointByDirection(int direction, int gridX, int gridY, string rangeMode, bool includeCenter = true)
        {
            List<Point> list = null;
            rangeMode = rangeMode.ToLower();
            if ("front2" == rangeMode) //攻击前边两个格
            {
                return Global.GetGridPointByDirection(direction, gridX, gridY, 2);
            }
            else if ("front3" == rangeMode) //攻击前边3个品字格
            {
                list = new List<Point>();
                Point p = GetGridPointByDirection(direction, gridX, gridY);
                list.Add(p);

                int direction1 = (direction + 1) % 8;
                p = GetGridPointByDirection(direction1, gridX, gridY);
                list.Add(p);

                int direction2 = direction - 1;
                if (direction2 < 0)
                {
                    direction2 = 7;
                }

                p = GetGridPointByDirection(direction2, gridX, gridY);
                list.Add(p);
            }
            else if ("front5" == rangeMode) //攻击前边5个品字格
            {
                return Global.GetGridPointByDirection(direction, gridX, gridY, 5);
            }
            else if ("1x1" == rangeMode) //3x3格子不包括中心
            {
                list = new List<Point>();
                list.Add(new Point(gridX, gridY));
            }
            else if ("3x3" == rangeMode) //3x3格子不包括中心
            {
                list = new List<Point>();
                for (int nX = gridX - 1; nX <= gridX + 1; nX++)
                {
                    for (int nY = gridY - 1; nY <= gridY + 1; nY++)
                    {
                        if (!includeCenter)
                        {
                            if (nX == gridX && nY == gridY)
                            {
                                continue;
                            }
                        }

                        list.Add(new Point(nX, nY));
                    }
                }
            }
            else if ("5x5" == rangeMode) //3x3格子不包括中心
            {
                list = new List<Point>();
                for (int nX = gridX - 2; nX <= gridX + 2; nX++)
                {
                    for (int nY = gridY - 2; nY <= gridY + 2; nY++)
                    {
                        if (!includeCenter)
                        {
                            if (nX == gridX && nY == gridY)
                            {
                                continue;
                            }
                        }

                        list.Add(new Point(nX, nY));
                    }
                }
            }
            else
            {
                int radius;
                list = new List<Point>();
                if (int.TryParse(rangeMode, out radius) && radius >= 0)
                {
                    radius = (radius - 1) / 100; //转换单位
                    for (int nX = gridX - radius; nX <= gridX + radius; nX++)
                    {
                        for (int nY = gridY - radius; nY <= gridY + radius; nY++)
                        {
                            list.Add(new Point(nX, nY));
                        }
                    }

                }
            }

            return list;
        }

        /// <summary>
        /// 根据传入的格子坐标和半径返回格子列表
        /// </summary>
        /// <param name="mapCode"></param>
        /// <param name="gridX"></param>
        /// <param name="gridY"></param>
        /// <returns></returns>
        public static List<Point> GetGridPointByRadius(int gridX, int gridY, int gridWidthNum, int gridHeightNum)
        {
            List<Point> list = new List<Point>();
            for (int nX = gridX - gridWidthNum; nX < gridX + gridWidthNum; nX++)
            {
                for (int nY = gridY - gridHeightNum; nY < gridY + gridHeightNum; nY++)
                {
                    list.Add(new Point(nX, nY));
                }
            }

            return list;
        }

        public static List<GameClient> GetMapAliveClientsEx(IEnumerable<object> lsObjects, int mapCode, bool writeLog = true)
        {
            List<GameClient> lsAliveClient = new List<GameClient>();

            GameClient client = null;
            if (null == lsObjects)
            {
                return lsAliveClient;
            }

            for (int n = 0; n < lsObjects.Count(); n++)
            {
                client = lsObjects.ElementAt(n) as GameClient;
                bool valid = false;
                if (null != client && client.ClientData.CurrentLifeV > 0)
                {
                    if (!client.ClientData.WaitingNotifyChangeMap && !client.ClientData.WaitingForChangeMap)
                    {
                        if (client.ClientData.MapCode == mapCode && Global.IsPosReachable(mapCode, client.ClientData.PosX, client.ClientData.PosY))
                        {
                            valid = true;
                            lsAliveClient.Add(client);
                        }
                    }
                }

                if (writeLog && !valid)
                {
                    EventLogManager.AddGameEvent(LogRecordType.RoleGameMapPosOrStateInvalid, mapCode, client.ClientData.MapCode, client.ClientData.WaitingNotifyChangeMap, client.ClientData.WaitingForChangeMap, client.ClientData.PosX, client.ClientData.PosY, client.ClientData.RoleID, client.ClientData.CurrentLifeV, "存活玩家判定为不在本地图存活");
                }
            }

            return lsAliveClient;
        }

        #endregion 地图格子操作相关

        #region 按照格子顺序平推对象

        /// <summary>
        /// 是否能推动对象
        /// </summary>
        /// <param name="client"></param>
        /// <param name="obj"></param>
        public static bool CanPushObject(GameClient client, Object obj)
        {
            if (obj is GameClient)
            {
                if (!Global.IsOpposition(client, obj as GameClient))
                {
                    return true;
                }

                if ((obj as GameClient).ClientData.RoleID != client.ClientData.RoleID)
                {
                    if ((obj as GameClient).ClientData.Level >= client.ClientData.Level)
                    {
                        return false;
                    }
                }
            }
            else
            {
                if (!Global.IsOpposition(client, obj as Monster))
                {
                    return true;
                }
#if ___CC___FUCK___YOU___BB___
                if ((obj as Monster).XMonsterInfo.Level >= client.ClientData.Level)
                {
                    return false;
                }
#else
                 if ((obj as Monster).MonsterInfo.VLevel >= client.ClientData.Level)
                {
                    return false;
                }
#endif

            }

            return true;
        }

        /// <summary>
        /// 是否能够顺序移动
        /// </summary>
        /// <param name="client"></param>
        /// <param name="direction"></param>
        /// <param name="gridX"></param>
        /// <param name="gridY"></param>
        /// <param name="maxSearchNum"></param>
        /// <param name="addInjured"></param>
        /// <param name="addSelf"></param>
        /// <returns></returns>
        public static bool CanQueueMoveObject(GameClient client, int direction, int gridX, int gridY, int maxSearchNum, int moveNum, byte holdBitSet, out Point gridPoint, bool addSelf = false)
        {
            gridPoint = new Point(gridX, gridY);

            //根据传入的格子坐标和方向返回指定方向的格子列表(遇到空闲格子才终止, 如果遇到障碍物或者地图边缘，则返回null)
            List<Point> gridList = Global.SearchIdleGridPointByDirection(client, direction, gridX, gridY, maxSearchNum, moveNum, holdBitSet);
            if (null == gridList)
            {
                return false;
            }

            if (addSelf)
            {
                gridList.Insert(0, new Point(gridX, gridY));
            }

            //先检查一遍能够推动整个格子列的对象
            for (int i = 0; i < gridList.Count; i++)
            {
                // 查找指定圆周范围内的敌人
                List<Object> enemiesList = new List<Object>();
                GameManager.ClientMgr.LookupEnemiesAtGridXY(client, (int)gridList[i].X, (int)gridList[i].Y, enemiesList);
                GameManager.MonsterMgr.LookupEnemiesAtGridXY(client, (int)gridList[i].X, (int)gridList[i].Y, enemiesList);
                for (int j = 0; j < enemiesList.Count; j++)
                {
                    //是否能推动对象
                    if (!Global.CanPushObject(client, enemiesList[j]))
                    {
                        if (i > 0)
                        {
                            gridPoint = new Point(gridList[i - 1].X, gridList[i - 1].Y);
                        }
                        return false;
                    }
                }

                // 查找指定圆周范围内的敌人
                List<Object> enemiesList2 = new List<Object>();
                BiaoCheManager.LookupEnemiesAtGridXY(client, (int)gridList[i].X, (int)gridList[i].Y, enemiesList2);
                JunQiManager.LookupEnemiesAtGridXY(client, (int)gridList[i].X, (int)gridList[i].Y, enemiesList2);
                FakeRoleManager.LookupEnemiesAtGridXY(client, (int)gridList[i].X, (int)gridList[i].Y, enemiesList2);
                if (enemiesList2.Count > 0)
                {
                    return false;
                }
            }

            return true;
        }

        /// <summary>
        /// 将各自中的对象移动到下一个格子，连锁反应，除非遇到【障碍物，等级高于自己的，地图边缘】
        /// </summary>
        /// <param name="direction"></param>
        /// <param name="gridX"></param>
        /// <param name="gridY"></param>
        /// <returns></returns>
        public static bool QueueMoveObject(GameClient client, int direction, int gridX, int gridY, int maxSearchNum, int moveNum, int addInjured, byte holdBitSet, bool addSelf = false)
        {
            //根据传入的格子坐标和方向返回指定方向的格子列表(遇到空闲格子才终止, 如果遇到障碍物或者地图边缘，则返回null)
            List<Point> gridList = Global.SearchIdleGridPointByDirection(client, direction, gridX, gridY, maxSearchNum, moveNum, holdBitSet);
            if (null == gridList)
            {
                return false;
            }

            if (addSelf)
            {
                gridList.Insert(0, new Point(gridX, gridY));
            }

            //先取出来放格子中，否则，一旦前一个格子平移了对象到下个，那么下个格子再平移时，就无法区分那个是新对象，那个是旧对象了
            Dictionary<int, List<Object>> dict = new Dictionary<int, List<object>>();

            //先检查一遍能够推动整个格子列的对象
            for (int i = 0; i < gridList.Count; i++)
            {
                // 查找指定圆周范围内的敌人
                List<Object> enemiesList = new List<Object>();
                GameManager.ClientMgr.LookupEnemiesAtGridXY(client, (int)gridList[i].X, (int)gridList[i].Y, enemiesList);
                GameManager.MonsterMgr.LookupEnemiesAtGridXY(client, (int)gridList[i].X, (int)gridList[i].Y, enemiesList);
                for (int j = 0; j < enemiesList.Count; j++)
                {
                    //是否能推动对象
                    if (!Global.CanPushObject(client, enemiesList[j]))
                    {
                        return false;
                    }
                }

                // 查找指定圆周范围内的敌人
                List<Object> enemiesList2 = new List<Object>();
                BiaoCheManager.LookupEnemiesAtGridXY(client, (int)gridList[i].X, (int)gridList[i].Y, enemiesList2);
                JunQiManager.LookupEnemiesAtGridXY(client, (int)gridList[i].X, (int)gridList[i].Y, enemiesList2);
                FakeRoleManager.LookupEnemiesAtGridXY(client, (int)gridList[i].X, (int)gridList[i].Y, enemiesList2);
                if (enemiesList2.Count > 0)
                {
                    return false;
                }

                dict[i] = enemiesList;
            }

            GameMap gameMap = GameManager.MapMgr.DictMaps[client.ClientData.MapCode];

            // 属性改造 加上一级属性公式 区分职业[8/15/2013 LiaoWei]
            int nOcc = Global.CalcOriginalOccupationID(client);

            int attackType = nOcc;//client.ClientData.Occupation;

            //现在按照顺序将对象推移
            for (int i = 0; i < gridList.Count - moveNum; i++)
            {
                // 查找指定圆周范围内的敌人
                List<Object> enemiesList = null;
                if (!dict.TryGetValue(i, out enemiesList))
                {
                    return false; //没有取到列表，非法的，返回失败
                }

                //随着格子的减免伤害
                addInjured = (int)(addInjured * (1.0 - (i * 0.1)));
                addInjured = Global.GMax(0, addInjured);

                for (int j = 0; j < enemiesList.Count; j++)
                {
                    Object obj = enemiesList[j] as IObject;
                    Point objGrid = (obj as IObject).CurrentGrid;
                    Point objMoveTo = new Point(gridList[i + moveNum].X * gameMap.MapGridWidth + gameMap.MapGridWidth / 2, gridList[i + moveNum].Y * gameMap.MapGridHeight + gameMap.MapGridHeight / 2);
                    if (obj is GameClient) //被攻击者是角色
                    {
                        if ((obj as GameClient).ClientData.RoleID == client.ClientData.RoleID)
                        {
                            continue;
                        }

                        if (!Global.IsOpposition(client, obj as GameClient))
                        {
                            continue; //不冲撞非敌人
                        }

                        GameManager.ClientMgr.ChangePosition(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                            obj as GameClient, (int)objMoveTo.X, (int)objMoveTo.Y, (obj as GameClient).ClientData.RoleDirection, (int)TCPGameServerCmds.CMD_SPR_CHANGEPOS, 1);

                        GameManager.ClientMgr.NotifyOtherInjured(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                            client, obj as GameClient, 0, (int)addInjured, 1.0, attackType, false, 0, 1.0, 0, 0, 0, 0.0, 0.0, false);

                    }
                    else if (obj is Monster) //被攻击者是怪物
                    {
                        if (!Global.IsOpposition(client, obj as Monster))
                        {
                            continue; //不冲撞非敌人
                        }

                        GameManager.MonsterMgr.ChangePosition(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                            obj as Monster, (int)objMoveTo.X, (int)objMoveTo.Y, (int)(obj as Monster).Direction, (int)TCPGameServerCmds.CMD_SPR_CHANGEPOS, 1);

                        GameManager.MonsterMgr.NotifyInjured(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                            client, obj as Monster, 0, (int)addInjured, 1.0, attackType, false, 0, 1.0, 0, 0, 0, 0.0, 0.0, false);
                    }
                }
            }

            return true;
        }

        #endregion 按照格子顺序平推对象

        #region 大小比较

        /// <summary>
        /// 获取两个整数中的小数
        /// </summary>
        /// <param name="l">第一个整数</param>
        /// <param name="r">第二个整数</param>
        /// <returns>两个数中的小数</returns>
        public static long GMin(long l, long r)
        {
            return Math.Min(l, r);
        }

        /// <summary>
        /// 获取两个整数中的大数
        /// </summary>
        /// <param name="l">第一个整数</param>
        /// <param name="r">第二个整数</param>
        /// <returns>两个数中的大数</returns>
        public static long GMax(long l, long r)
        {
            return Math.Max(l, r);
        }

        /// <summary>
        /// 获取两个整数中的小数
        /// </summary>
        /// <param name="l">第一个整数</param>
        /// <param name="r">第二个整数</param>
        /// <returns>两个数中的小数</returns>
        public static int GMin(int l, int r)
        {
            return Math.Min(l, r);
        }

        /// <summary>
        /// 获取两个整数中的大数
        /// </summary>
        /// <param name="l">第一个整数</param>
        /// <param name="r">第二个整数</param>
        /// <returns>两个数中的大数</returns>
        public static int GMax(int l, int r)
        {
            return Math.Max(l, r);
        }

        /// <summary>
        /// 获取两个浮点数中的小数
        /// </summary>
        /// <param name="l">第一个浮点数</param>
        /// <param name="r">第二个浮点数</param>
        /// <returns>两个浮点数中的小数</returns>
        public static double GMin(double l, double r)
        {
            return Math.Min(l, r);
        }

        /// <summary>
        /// 限定给定的值到给定的范围并返回
        /// </summary>
        /// <param name="v"></param>
        /// <param name="l"></param>
        /// <param name="r"></param>
        /// <returns></returns>
        public static int Clamp(int v, int l, int r)
        {
            if (v < l)
            {
                v = l;
            }
            else if (v > r)
            {
                v = r;
            }

            return v;
        }

        /// <summary>
        /// 限定给定的值到给定的范围并返回
        /// </summary>
        /// <param name="v"></param>
        /// <param name="l"></param>
        /// <param name="r"></param>
        /// <returns></returns>
        public static long Clamp(long v, long l, long r)
        {
            if (v < l)
            {
                v = l;
            }
            else if (v > r)
            {
                v = r;
            }

            return v;
        }

        /// <summary>
        /// 限定给定的值到给定的范围并返回
        /// </summary>
        /// <param name="v"></param>
        /// <param name="l"></param>
        /// <param name="r"></param>
        /// <returns></returns>
        public static double Clamp(double v, double l, double r)
        {
            if (v < l)
            {
                v = l;
            }
            else if (v > r)
            {
                v = r;
            }

            return v;
        }

        /// <summary>
        /// 获取两个浮点数中的大数
        /// </summary>
        /// <param name="l">第一个浮点数</param>
        /// <param name="r">第二个浮点数</param>
        /// <returns>两个浮点数中的大数</returns>
        public static double GMax(double l, double r)
        {
            return Math.Max(l, r);
        }

        /// <summary>
        /// 检查多个限制条件是否满足启用
        /// </summary>
        /// <param name="args"></param>
        /// <returns></returns>
        public static bool CheckAnyForMultipleCondition(params bool?[] args)
        {
            //第一个值兼顾总配置开关，如果未配置，则其他条件不需限制
            if (args.Length == 0 || args[0] == null)
            {
                return true;
            }

            //如果都没限制，则返回true
            if (args.All((x) => x == null))
            {
                return true;
            }

            //如果有限制，则任意一个条件满足则返回true
            return args.Any((x) => x == true);
        }

        #endregion //大小比较

        #region 类型转换

        /// <summary>
        /// 安全的转换时间
        /// </summary>
        /// <param name="str"></param>
        /// <returns></returns>
        public static long SafeConvertToTicks(string str)
        {
            try
            {
                if (string.IsNullOrEmpty(str)) return 0;
                DateTime dt;
                if (!DateTime.TryParse(str, out dt))
                {
                    return 0L;
                }

                return dt.Ticks / 10000;
            }
            catch (Exception)
            {
            }

            return 0L;
        }

        /// <summary>
        /// 安全的字符串到整型的转换
        /// </summary>
        /// <param name="str"></param>
        /// <returns></returns>
        public static int SafeConvertToInt32(string str)
        {
            if (string.IsNullOrEmpty(str))
            {
                return 0;
            }
#if FastMode
            #region 优化这个函数
            bool navgite = false;
            int x = 0;
            foreach (var c in str)
            {
                if (c >= '0' && c <= '9')
                {
                    x = x * 10 + c - '0';
                }
                else if (c == '-')
                {
                    navgite = true;
                }
                else if (char.IsWhiteSpace(c))
                {
                    continue;
                }
                else
                {
                    return 0;
                }
            }
            if (navgite)
            {
                x = -x;
            }
            return x;
            #endregion
#else
            str = str.Trim();
            if (string.IsNullOrEmpty(str)) return 0;

            try
            {
                return Convert.ToInt32(str);
            }
            catch (Exception)
            {
            }

            return 0;
#endif
        }

        // 增加一个接口 [7/31/2013 LiaoWei]
        /// <summary>
        /// 安全的字符串到整型的转换
        /// </summary>
        /// <param name="str"></param>
        /// <returns></returns>
        public static long SafeConvertToInt64(string str)
        {
            if (string.IsNullOrEmpty(str))
            {
                return 0;
            }

            str = str.Trim();
            if (string.IsNullOrEmpty(str)) return 0;

            try
            {
                return Convert.ToInt64(str);
            }
            catch (Exception)
            {
            }

            return 0;
        }

        /// <summary>
        /// 安全的字符串到浮点的转换
        /// </summary>
        /// <param name="str"></param>
        /// <returns></returns>
        public static double SafeConvertToDouble(string str)
        {
            if (string.IsNullOrEmpty(str)) return 0.0;
            str = str.Trim();
            if (string.IsNullOrEmpty(str)) return 0.0;

            try
            {
                return Convert.ToDouble(str);
            }
            catch (Exception)
            {
            }

            return 0.0;
        }

        /// <summary>
        /// 将字符串转换为Double类型数组
        /// </summary>
        /// <param name="ss">字符串数组</param>
        /// <returns></returns>
        public static double[] String2DoubleArray(string str)
        {
            if (string.IsNullOrEmpty(str))
            {
                return null;
            }

            string[] sa = str.Split(',');
            return Global.StringArray2DoubleArray(sa);
        }

        /// <summary>
        /// 将字符串数组转换为double类型数组
        /// </summary>
        /// <param name="ss">字符串数组</param>
        /// <returns></returns>
        public static double[] StringArray2DoubleArray(string[] sa)
        {
            double[] da = new double[sa.Length];
            try
            {
                for (int i = 0; i < sa.Length; i++)
                {
                    string str = sa[i].Trim();
                    str = string.IsNullOrEmpty(str) ? "0.0" : str;
                    da[i] = Convert.ToDouble(str);
                }
            }
            catch (System.Exception ex)
            {
                string msg = ex.ToString();
            }

            return da;
        }

        /// <summary>
        /// 将字符串转换为Int类型数组
        /// </summary>
        /// <param name="ss">字符串数组</param>
        /// <returns></returns>
        public static int[] String2IntArray(string str, char spliter = ',')
        {
            if (string.IsNullOrEmpty(str))
            {
                return null;
            }

            string[] sa = str.Split(spliter);
            return Global.StringArray2IntArray(sa);
        }

        /// <summary>
        /// 将字符串转换为Int类型数组
        /// </summary>
        /// <param name="ss">字符串数组</param>
        /// <returns></returns>
        public static string[] String2StringArray(string str, char spliter = '|')
        {
            if (string.IsNullOrEmpty(str))
            {
                return null;
            }

            return str.Split(spliter);
        }

        /// <summary>
        /// 将字符串数组转换为Int类型数组
        /// </summary>
        /// <param name="ss">字符串数组</param>
        /// <returns></returns>
        public static int[] StringArray2IntArray(string[] sa)
        {
            if (sa == null) return null;
            return StringArray2IntArray(sa, 0, sa.Length);
            /*
            int[] da = new int[sa.Length];
            for (int i = 0; i < sa.Length; i++)
            {
                string str = sa[i].Trim();
                str = string.IsNullOrEmpty(str) ? "0" : str;
                da[i] = Convert.ToInt32(str);
            }

            return da;
           */
        }

        public static int[] StringArray2IntArray(string[] sa, int start, int count)
        {
            if (sa == null) return null;
            if (start < 0 || start >= sa.Length) return null;
            if (count <= 0) return null;
            if (sa.Length - start < count) return null;

            int[] result = new int[count];
            for (int i = 0; i < count; ++i)
            {
                string str = sa[start + i].Trim();
                str = string.IsNullOrEmpty(str) ? "0" : str;
                result[i] = Convert.ToInt32(str);
            }

            return result;
        }

        /// <summary>
        /// 将字符串转换为Point类型, x1,y1
        /// </summary>
        /// <param name="sa"></param>
        /// <returns></returns>
        public static Point StrToPoint(string str)
        {
            if (string.IsNullOrEmpty(str)) return new Point(double.NaN, double.NaN);
            str = str.Trim();
            if (str == "") return new Point(double.NaN, double.NaN);

            string[] fields = str.Split(',');
            if (fields.Length != 2) return new Point(double.NaN, double.NaN);

            try
            {
                string str1 = fields[0].Trim();
                str1 = string.IsNullOrEmpty(str) ? "0" : str1;

                string str2 = fields[1].Trim();
                str2 = string.IsNullOrEmpty(str) ? "0" : str2;
                return new Point(Convert.ToDouble(str1), Convert.ToDouble(str2));
            }
            catch (Exception)
            {
            }

            return new Point(double.NaN, double.NaN);
        }

        #endregion //类型转换

        #region 根据ID值范围判断类型

        private static long BaseUniqueID;

        /// <summary>
        /// 获取一个唯一ID
        /// </summary>
        /// <returns></returns>
        public static long GetUniqueID()
        {
            return Interlocked.Increment(ref BaseUniqueID);
        }

        /// <summary>
        /// 根据角色ID获取类型
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public static GSpriteTypes GetSpriteType(UInt32 id)
        {
            int prefix = ((int)id >> 16);
            switch (prefix)
            {
                case (SpriteBaseIds.NpcBaseId >> 16):
                    return GSpriteTypes.NPC;
                case (SpriteBaseIds.PetBaseId >> 16):
                    return GSpriteTypes.Pet;
                case (SpriteBaseIds.BiaoCheBaseId >> 16):
                    return GSpriteTypes.BiaoChe;
                case (SpriteBaseIds.JunQiBaseId >> 16):
                    return GSpriteTypes.JunQi;
                default:
                    if (id < SpriteBaseIds.NpcBaseId)
                    {
                        return GSpriteTypes.Other;
                    }
                    else if (id < SpriteBaseIds.PetBaseId)
                    {
                        return GSpriteTypes.Monster;
                    }
                    else if (id < SpriteBaseIds.MaxId)
                    {
                        return GSpriteTypes.FakeRole;
                    }
                    else //if (id < SpriteBaseIds.NpcBaseId)
                    {
                        return GSpriteTypes.Other;
                    }
            }
        }

        /// <summary>
        /// 通过ID查找对象
        /// </summary>
        /// <param name="id"></param>
        /// <param name="mapCode"></param>
        /// <returns></returns>
        public static IObject FindSpriteByID(int id, int mapCode)
        {
            GSpriteTypes spriteType = GetSpriteType((uint)id);
            if (spriteType == GSpriteTypes.Other)
            {
                return GameManager.ClientMgr.FindClient(id);
            }
            else if (spriteType == GSpriteTypes.Monster)
            {
                return GameManager.MonsterMgr.FindMonster(mapCode, id);
            }

            return null;
        }

        #endregion //根据ID值范围判断类型

        #region 全局的随机数

        /// <summary>
        /// 全局的随机数对象
        /// </summary>
        private static Random GlobalRand = new Random(Guid.NewGuid().GetHashCode());

        /// <summary>
        /// 获取全局的随机数
        /// </summary>
        /// <param name="minV"></param>
        /// <param name="MaxV"></param>
        /// <returns></returns>
        public static int GetRandomNumber(int minV, int maxV)
        {
            if (minV == maxV) return minV; //如果相等，则直接返回
            if (minV > maxV) return maxV;

            int ret = minV;
            lock (GlobalRand)
            {
                ret = GlobalRand.Next(minV, maxV);
            }

            return ret;
        }

        /// <summary>
        /// 获取全局的随机数
        /// </summary>
        /// <param name="minV"></param>
        /// <param name="MaxV"></param>
        /// <returns></returns>
        public static double GetRandom()
        {
            lock (GlobalRand)
            {
                return GlobalRand.NextDouble();
            }
        }

        #endregion //全局的随机数

        #region 物品管理

        /// <summary>
        /// 默认的物品结束时间
        /// </summary>
        public const string ConstGoodsEndTime = "1900-01-01 12:00:00";

        /// <summary>
        /// 获取物品是否可以叠加的值
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static int GetGoodsGridNumByID(int goodsID)
        {
            //获取Xml项
            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
            {
                return 1;
            }

            //判断两个物品项是否同一个物品，是否可以叠加?
            return systemGoods.GetIntValue("GridNum");
        }

        /// <summary>
        /// 获取物品铜钱价格 [XSea 2015/8/24]
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static int GetGoodsYinLiangNumByID(int goodsID)
        {
            //获取Xml项
            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
            {
                return 0;
            }

            return systemGoods.GetIntValue("PriceTwo");
        }

        /// <summary>
        /// 从队列中删除物品
        /// </summary>
        /// <param name="client"></param>
        /// <param name="id"></param>
        public static void RemoveGoodsData(GameClient client, int id)
        {
            if (client.ClientData.GoodsDataList == null)
            {
                return;
            }

            lock (client.ClientData.GoodsDataList)
            {
                for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    if (client.ClientData.GoodsDataList[i].Id == id)
                    {
                        client.ClientData.GoodsDataList.RemoveAt(i);
                        break;
                    }
                }
            }
        }

        /// <summary>
        /// 从队列中删除物品
        /// </summary>
        /// <param name="client"></param>
        /// <param name="id"></param>
        public static bool RemoveGoodsData(GameClient client, GoodsData gd)
        {
            if (null == gd) return false;
            if (client.ClientData.GoodsDataList == null)
            {
                return false;
            }

            bool ret = false;
            lock (client.ClientData.GoodsDataList)
            {
                ret = client.ClientData.GoodsDataList.Remove(gd);
            }

            return ret;
        }

        /// <summary>
        /// 添加物品到队列中
        /// </summary>
        /// <param name="client"></param>
        public static void AddGoodsData(GameClient client, GoodsData gd)
        {
            if (null == gd) return;
            if (client.ClientData.GoodsDataList == null)
            {
                client.ClientData.GoodsDataList = new List<GoodsData>();
            }

            lock (client.ClientData.GoodsDataList)
            {
                client.ClientData.GoodsDataList.Add(gd);
            }
        }

        /// <summary>
        /// 添加物品到队列中
        /// </summary>
        /// <param name="client"></param>
        public static GoodsData AddGoodsData(GameClient client, int id, int goodsID, int forgeLevel, int quality, int goodsNum, int binding, int site, string jewelList, string startTime, string endTime,
            int addPropIndex, int bornIndex, int lucky, int strong, int ExcellenceProperty, int nAppendPropLev, int nEquipChangeLife, int bagIndex = 0, List<int> washProps = null)
        {
            GoodsData gd = new GoodsData()
            {
                Id = id,
                GoodsID = goodsID,
                Using = 0,
                Forge_level = forgeLevel,
                Starttime = startTime,
                Endtime = endTime,
                Site = site,
                Quality = quality,
                Props = "",
                GCount = goodsNum,
                Binding = binding,
                Jewellist = jewelList,
                BagIndex = bagIndex,
                AddPropIndex = addPropIndex,
                BornIndex = bornIndex,
                Lucky = lucky,
                Strong = strong,
                ExcellenceInfo = ExcellenceProperty,
                AppendPropLev = nAppendPropLev,
                ChangeLifeLevForEquip = nEquipChangeLife,
                WashProps = washProps,
            };

            Global.AddGoodsData(client, gd);
            return gd;
        }

        /// <summary>
        /// 从物品列表中查找指定的物品
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static GoodsData GetGoodsByDbID(GameClient client, int dbID)
        {
            if (null == client.ClientData.GoodsDataList) return null;

            lock (client.ClientData.GoodsDataList)
            {
                for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    if (client.ClientData.GoodsDataList[i].Id == dbID)
                    {
                        return client.ClientData.GoodsDataList[i];
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 返回过期物品DbId列表, 没有则返回Null
        /// </summary>
        /// <returns></returns>
        public static List<GoodsData> GetGoodsTimeExpired(GameClient client)
        {
            List<GoodsData> expiredList = null;

            if (null == client.ClientData.GoodsDataList) return null;

            lock (client.ClientData.GoodsDataList)
            {
                for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    if (IsGoodsTimeOver(client.ClientData.GoodsDataList[i]))
                    {
                        if (null == expiredList)
                        {
                            expiredList = new List<GoodsData>();//这样写保证很多情况下根本不用new
                        }

                        expiredList.Add(client.ClientData.GoodsDataList[i]);
                    }
                }
            }
            ///时装过期   panghui
            //lock (client.ClientData.FashionGoodsDataList)
            //{
            //    for (int i = 0; i < client.ClientData.FashionGoodsDataList.Count; i++)
            //    {
            //        if (IsGoodsTimeOver(client.ClientData.FashionGoodsDataList[i]))
            //        {
            //            if (null == expiredList)
            //            {
            //                expiredList = new List<GoodsData>();//这样写保证很多情况下根本不用new
            //            }

            //            expiredList.Add(client.ClientData.FashionGoodsDataList[i]);
            //        }
            //    }
            //}

            return expiredList;
        }

        public static List<GoodsData> GetFashionTimeExpired(GameClient client)
        {
            List<GoodsData> expiredList = null;
            ///时装过期   panghui
            lock (client.ClientData.FashionGoodsDataList)
            {
                for (int i = 0; i < client.ClientData.FashionGoodsDataList.Count; i++)
                {
                    if (IsGoodsTimeOver(client.ClientData.FashionGoodsDataList[i]))
                    {
                        if (null == expiredList)
                        {
                            expiredList = new List<GoodsData>();//这样写保证很多情况下根本不用new
                        }

                        expiredList.Add(client.ClientData.FashionGoodsDataList[i]);
                    }
                }
            }

            return expiredList;
        }

        /// <summary>
        /// 从物品列表中查找指定的物品
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static GoodsData GetGoodsByID(GameClient client, int goodsID)
        {
            if (null == client.ClientData.GoodsDataList) return null;

            lock (client.ClientData.GoodsDataList)
            {
                for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    if (client.ClientData.GoodsDataList[i].GoodsID == goodsID)
                    {
                        return client.ClientData.GoodsDataList[i];
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 从物品列表中查找指定的物品并且是绑定的 [4/30/2014 LiaoWei]
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static GoodsData GetBindGoodsByID(GameClient client, int goodsID)
        {
            if (null == client.ClientData.GoodsDataList) return null;

            lock (client.ClientData.GoodsDataList)
            {
                for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    if (client.ClientData.GoodsDataList[i].GoodsID == goodsID && client.ClientData.GoodsDataList[i].Binding >= 1)
                    {
                        return client.ClientData.GoodsDataList[i];
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 从物品列表中查找指定的物品并且是非绑定的 [4/30/2014 LiaoWei]
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static GoodsData GetNotBindGoodsByID(GameClient client, int goodsID)
        {
            if (null == client.ClientData.GoodsDataList) return null;

            lock (client.ClientData.GoodsDataList)
            {
                for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    if (client.ClientData.GoodsDataList[i].GoodsID == goodsID && client.ClientData.GoodsDataList[i].Binding <= 0)
                    {
                        return client.ClientData.GoodsDataList[i];
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 从物品列表中查找指定的物品(非使用状态)
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static GoodsData GetNotUsingGoodsByID(GameClient client, int goodsID, int goodsLevel, int goodsQuality)
        {
            if (null == client.ClientData.GoodsDataList) return null;

            lock (client.ClientData.GoodsDataList)
            {
                for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    if (client.ClientData.GoodsDataList[i].Using > 0)
                    {
                        continue;
                    }

                    if (client.ClientData.GoodsDataList[i].GoodsID == goodsID &&
                        client.ClientData.GoodsDataList[i].Forge_level == goodsLevel &&
                        client.ClientData.GoodsDataList[i].Quality == goodsQuality)
                    {
                        return client.ClientData.GoodsDataList[i];
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 从物品列表中查找指定的物品(记忆索引)
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static GoodsData GetGoodsByID(GameClient client, int goodsID, int bingding, string endTime, ref int startIndex)
        {
            if (null == client.ClientData.GoodsDataList) return null;

            lock (client.ClientData.GoodsDataList)
            {
                if (startIndex >= client.ClientData.GoodsDataList.Count) return null;

                for (int i = startIndex; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    if (client.ClientData.GoodsDataList[i].GoodsID == goodsID &&
                        client.ClientData.GoodsDataList[i].Binding == bingding &&
                        Global.DateTimeEqual(client.ClientData.GoodsDataList[i].Endtime, endTime))
                    {
                        startIndex = i + 1;
                        return client.ClientData.GoodsDataList[i];
                    }
                }
            }

            return null;
        }

        // 增加一个寻找物品的接口 根据物品一系列的品质查找 [1/23/2014 LiaoWei]
        /// <summary>
        /// 查找物品
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static GoodsData GetGoodsByID(GameClient client, int goodsID, int nNum, int bingding, int nforgeLev, int nAppendPro, int nLucky, int nExcellenceInfo, bool bIsusing = false)
        {
            if (null == client.ClientData.GoodsDataList)
                return null;

            GoodsData goods = null;
            lock (client.ClientData.GoodsDataList)
            {
                for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    if (bingding != -1)
                    {
                        if (client.ClientData.GoodsDataList[i].GoodsID == goodsID && client.ClientData.GoodsDataList[i].GCount == nNum && client.ClientData.GoodsDataList[i].Binding == bingding &&
                                client.ClientData.GoodsDataList[i].Forge_level == nforgeLev && client.ClientData.GoodsDataList[i].AppendPropLev == nAppendPro && client.ClientData.GoodsDataList[i].Lucky == nLucky &&
                                    client.ClientData.GoodsDataList[i].ExcellenceInfo == nExcellenceInfo)
                        {
                            goods = client.ClientData.GoodsDataList[i];

                            if (goods != null)
                            {
                                if (bIsusing && goods.Using > 0)
                                {
                                    return goods;
                                }
                                else
                                {
                                    if (goods.Using == 0)
                                        return goods;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (client.ClientData.GoodsDataList[i].GoodsID == goodsID && client.ClientData.GoodsDataList[i].GCount == nNum && client.ClientData.GoodsDataList[i].Forge_level == nforgeLev &&
                                client.ClientData.GoodsDataList[i].AppendPropLev == nAppendPro && client.ClientData.GoodsDataList[i].Lucky == nLucky &&
                                    client.ClientData.GoodsDataList[i].ExcellenceInfo == nExcellenceInfo)
                        {
                            goods = client.ClientData.GoodsDataList[i];

                            if (goods != null)
                            {
                                if (bIsusing && goods.Using > 0)
                                {
                                    return goods;
                                }
                                else
                                {
                                    if (goods.Using == 0)
                                        return goods;
                                }
                            }
                        }
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 从物品列表中查找指定的物品(索引)
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static GoodsData GetGoodsByIndex(GameClient client, int index)
        {
            if (null == client.ClientData.GoodsDataList) return null;

            GoodsData goodsData = null;
            lock (client.ClientData.GoodsDataList)
            {
                if (index >= 0 && index < client.ClientData.GoodsDataList.Count)
                {
                    goodsData = client.ClientData.GoodsDataList[index];
                }
            }

            return goodsData;
        }

        /// <summary>
        /// 修改物品绑定性 [7/18/2014 LiaoWei]
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static void ModifyGoodsBindPorp(GameClient client, int dbID, int nBindPorp)
        {
            if (null == client.ClientData.GoodsDataList)
                return;

            lock (client.ClientData.GoodsDataList)
            {
                for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    if (client.ClientData.GoodsDataList[i].Id == dbID)
                    {
                        client.ClientData.GoodsDataList[i].Binding = nBindPorp;
                        break;
                    }
                }
            }

            return;
        }

        /// <summary>
        /// 获取物品占用的背包格子数量(已经装备的不算占用)
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int GetGoodsUsedGrid(GameClient client)
        {
            int ret = 0;
            if (client.ClientData.GoodsDataList == null)
            {
                return ret;
            }

            lock (client.ClientData.GoodsDataList)
            {
                for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    if (client.ClientData.GoodsDataList[i].Using <= 0)
                    {
                        ret++;
                    }
                }
            }

            return ret;
        }

        /// <summary>
        /// 获取背包格子的最大个数
        /// </summary>
        /// <returns></returns>
        public static int GetTotalMaxBagGridCount(GameClient client)
        {
            return client.ClientData.BagNum;
            //return ((client.ClientData.BagNum + 1) * (int)RoleBagNumPerPage.PageNum);
        }

        /// <summary>
        /// 背包是否已经满？是否可以添加指定的物品
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static bool CanAddGoods(GameClient client, int goodsID, int newGoodsNum, int binding, string endTime = Global.ConstGoodsEndTime, bool canUseOld = true, bool bLeftGrid = false)
        {
            if (client.ClientData.GoodsDataList == null)
            {
                return true;
            }

            /// 获取物品是否可以叠加的值
            int gridNum = GetGoodsGridNumByID(goodsID);
            gridNum = Global.GMax(gridNum, 1);

            bool findOldGrid = false;
            int totalGridNum = 0;
            lock (client.ClientData.GoodsDataList)
            {
                for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    if (client.ClientData.GoodsDataList[i].Using > 0)
                    {
                        continue;
                    }

                    totalGridNum++;
                    if (canUseOld && gridNum > 1) //是否可以共占
                    {
                        if (client.ClientData.GoodsDataList[i].GoodsID == goodsID &&
                            client.ClientData.GoodsDataList[i].Binding == binding &&
                            Global.DateTimeEqual(client.ClientData.GoodsDataList[i].Endtime, endTime))
                        {
                            if ((client.ClientData.GoodsDataList[i].GCount + newGoodsNum) <= gridNum)
                            {
                                findOldGrid = true;
                                break;
                            }
                        }
                    }
                }
            }

            if (findOldGrid && !bLeftGrid)
            {
                return true;
            }

            // 合成随机物品时必须空一格
            //if (bLeftGrid)
            //{
            //    totalGridNum += 1;
            //}

            int totalMaxGridCount = GetTotalMaxBagGridCount(client);
            return (totalGridNum < totalMaxGridCount);
        }

        /// <summary>
        /// 背包是否已经满？是否可以添加指定的物品(自动判断物品的个数)
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static bool CanAddGoods2(GameClient client, int goodsID, int newGoodsNum, int binding, string endTime = Global.ConstGoodsEndTime, bool canUseOld = true)
        {
            if (client.ClientData.GoodsDataList == null)
            {
                return true;
            }

            /// 获取物品是否可以叠加的值
            int gridNum = GetGoodsGridNumByID(goodsID);
            gridNum = Global.GMax(gridNum, 1);

            int totalGridNum = 0;
            lock (client.ClientData.GoodsDataList)
            {
                for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    if (client.ClientData.GoodsDataList[i].Using > 0)
                    {
                        continue;
                    }

                    totalGridNum++;
                    if (canUseOld && gridNum > 1) //是否可以共占
                    {
                        if (client.ClientData.GoodsDataList[i].GoodsID == goodsID &&
                            client.ClientData.GoodsDataList[i].Binding == binding &&
                            Global.DateTimeEqual(client.ClientData.GoodsDataList[i].Endtime, endTime))
                        {
                            if (client.ClientData.GoodsDataList[i].GCount < gridNum)
                            {
                                newGoodsNum -= Global.GMin(newGoodsNum, (gridNum - client.ClientData.GoodsDataList[i].GCount));
                            }
                        }
                    }
                }
            }

            if (newGoodsNum <= 0)
            {
                return true;
            }

            int needGrid = ((newGoodsNum - 1) / gridNum) + 1;

            int totalMaxGridCount = GetTotalMaxBagGridCount(client);
            return ((totalGridNum + needGrid) <= totalMaxGridCount);
        }

        /// <summary>
        /// 判断背包空间是否足够加入新的物品列表
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsDataList"></param>
        /// <returns></returns>
        public static bool CanAddGoodsDataList(GameClient client, List<GoodsData> goodsDataList)
        {
            if (null == goodsDataList) return true;
            return Global.CanAddGoodsNum(client, goodsDataList.Count);
        }

        /// <summary>
        /// 判断背包空格是否能提交接受新的物品
        /// </summary>
        /// <param name="client"></param>
        /// <param name="taskID"></param>
        /// <returns></returns>
        public static bool CanAddGoodsNum(GameClient client, int newGoodsCount)
        {
            int haveGoodsCount = Global.GetGoodsUsedGrid(client);
            int totalMaxGridCount = GetTotalMaxBagGridCount(client);
            return (((newGoodsCount) + haveGoodsCount) <= totalMaxGridCount);
        }

        /// <summary>
        /// 根据物品名称获取物品
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        public static int GetGoodsByName(string name)
        {
            // 物品名字索引管理
            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoodsNamgMgr.GoodsItemsDict.TryGetValue(name, out systemGoods))
            {
                return -1;
            }

            return systemGoods.GetIntValue("ID");
        }

        /// <summary>
        /// 根据物品ID获取物品名称
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        public static string GetGoodsNameByID(int goodsID)
        {
            // 物品名字索引管理
            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
            {
                return "";
            }

            return systemGoods.GetStringValue("Title");
        }

        /// <summary>
        /// 物品记录日志标记字典
        /// Thread-Safe
        /// </summary>
        private static Dictionary<int, int> logItemDict
        {
            get { lock (_logItemLock) { return _logItemDict_storage; } }
            set { lock (_logItemLock) { _logItemDict_storage = value; } }
        }

        private static object _logItemLock = new object();
        private static Dictionary<int, int> _logItemDict_storage = null;

        /// <summary>
        /// 载入物品记录日志标记
        /// </summary>
        public static void LoadItemLogMark()
        {
            int[] arrMark = GameManager.systemParamsList.GetParamValueIntArrayByName("LogGoods");
            var tmpDict = new Dictionary<int, int>();
            if (null != arrMark && arrMark.Length > 0)
            {
                for (int i = 0; i < arrMark.Length; i++)
                {
                    tmpDict.Add(arrMark[i], 1);
                }
            }

            logItemDict = tmpDict;
        }

        /// <summary>
        /// 复活时需要公告的怪物ID
        /// </summary>
        private static Dictionary<int, int> reliveMonsterGongGaoDict = new Dictionary<int, int>();

        /// <summary>
        /// 复活时需要公告的怪物ID
        /// </summary>
        public static void LoadReliveMonsterGongGaoMark()
        {
            int[] arrMark = GameManager.systemParamsList.GetParamValueIntArrayByName("EliteMonster");
            if (null != arrMark && arrMark.Length > 0)
            {
                for (int i = 0; i < arrMark.Length; i++)
                {
                    reliveMonsterGongGaoDict.Add(arrMark[i], 1);
                }
            }
        }

        /// <summary>
        /// 是否是需要公告怪物ID
        /// </summary>
        public static bool IsGongGaoReliveMonster(int nMonsterID)
        {
            int nGongGaoMark = 0;
            if (!reliveMonsterGongGaoDict.TryGetValue(nMonsterID, out nGongGaoMark) || 0 == nGongGaoMark)
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// 根据物品信息调整日志物品名
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        public static string ModifyGoodsLogName(GoodsData goodsData)
        {
            // 物品名字索引管理
            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
            {
                return "";
            }

            // modify by chenjingui. 20150710 loggoods的配置项修改为不记录

            string strTitle = systemGoods.GetStringValue("Title");
            int nNum = Global.GetEquipExcellencePropNum(goodsData);
            if (nNum > 0)
            {
                // 卓越物品一定记录
                strTitle = string.Format("{0}卓越{1}", nNum, strTitle);
            }
            else
            {
                // 非卓越物品，如果出现在loggoods中，那么不记录
                if (logItemDict.ContainsKey(goodsData.GoodsID))
                {
                    return "";
                }

                /* 保留旧代码
                int nLogMark = 0;
                if (!logItemDict.TryGetValue(goodsData.GoodsID, out nLogMark) || 0 == nLogMark)
                {
                    return "";
                }
                 */
            }

            return strTitle;
        }

        /// <summary>
        /// 格式化更新数据库物品字符串
        /// </summary>
        /// <param name="args"></param>
        /// <returns></returns>
        public static string FormatUpdateDBGoodsStr(params object[] args)
        {
            if (args.Length != 23)
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("FormatUpdateDBGoodsStr, 参数个数不对{0}", args.Length));
                return null;
            }

            return string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}:{11}:{12}:{13}:{14}:{15}:{16}:{17}:{18}:{19}:{20}:{21}:{22}", args);
        }

        public static int UpdateGoodsProp(GameClient client, GoodsData gd, UpdateGoodsArgs args = null)
        {
            int ret = Global.sendToDB<int, byte[]>((int)TCPGameServerCmds.CMD_DB_UPDATEGOODS_CMD2, DataHelper.ObjectToBytes(args), client.ServerId);
            if (ret < 0)
            {
                return -2;
            }

            if (null != gd)
            {
                args.CopyPropsTo(gd);
                if (gd.Using > 0)
                {
                    Global.RefreshEquipPropAndNotify(client);
                }
            }
            return ret;
        }

        /// <summary>
        /// 修改物品的宝石列表
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="client"></param>
        /// <param name="gd"></param>
        /// <param name="newGoodsNum"></param>
        /// <param name="newHint"></param>
        /// <returns></returns>
        public static int ModGoodsJewelDBCommand(TCPOutPacketPool pool, GameClient client, GoodsData gd, string jewellist, int binding)
        {
            string strcmd = "";

            //向DBServer请求修改物品2
            string[] dbFields = null;
            strcmd = Global.FormatUpdateDBGoodsStr(client.ClientData.RoleID, gd.Id, "*", "*", "*", "*", "*", "*", "*", "*", jewellist, "*", "*", "*", "*", binding, "*", "*", "*", "*", "*", "*", "*"); // 卓越信息 [12/13/2013 LiaoWei] 装备转生
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, pool, (int)TCPGameServerCmds.CMD_DB_UPDATEGOODS_CMD, strcmd, out dbFields, client.ServerId);
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                return -1;
            }

            if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
            {
                return -2;
            }

            gd.Jewellist = jewellist;
            gd.Binding = binding;

            //写入角色物品的得失行为日志(扩展)
            Global.ModRoleGoodsEvent(client, gd, 0, "镶嵌修改");
            EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, gd.GoodsID, gd.Id, 0, gd.GCount, "镶嵌修改");

            //不通知客户端，由镶嵌的操作处理，jewellist的更新问题
            return 0;
        }

        /// <summary>
        /// 修改物品的数量
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="client"></param>
        /// <param name="gd"></param>
        /// <param name="newGoodsNum"></param>
        /// <param name="newHint"></param>
        /// <returns></returns>
        public static int ModGoodsNumDBCommand(TCPOutPacketPool pool, GameClient client, GoodsData gd, int newGoodsNum, int newHint, string goodsFromWhere, bool bIsFromMap = false)
        {
            string strcmd = "";

            //向DBServer请求修改物品2
            string[] dbFields = null;
            strcmd = Global.FormatUpdateDBGoodsStr(client.ClientData.RoleID, gd.Id, "*", "*", "*", "*", "*", "*", "*", newGoodsNum, "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*"); //卓越信息 [12/13/2013 LiaoWei] 装备转生
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, pool, (int)TCPGameServerCmds.CMD_DB_UPDATEGOODS_CMD, strcmd, out dbFields, client.ServerId);
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                return -1;
            }

            if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
            {
                return -2;
            }

            int addOrSubGoodsNum = newGoodsNum - gd.GCount;
            gd.GCount = newGoodsNum;

            //写入角色物品的得失行为日志(扩展)
            Global.ModRoleGoodsEvent(client, gd, addOrSubGoodsNum, goodsFromWhere, bIsFromMap);
            EventLogManager.AddGoodsEvent(client, OpTypes.AddOrSub, OpTags.None, gd.GoodsID, gd.Id, addOrSubGoodsNum, newGoodsNum, goodsFromWhere);

            //向客户端发送修改物品个数的指令
            GameManager.ClientMgr.NotifyModGoods(Global._TCPManager.MySocketListener, pool, client, (int)ModGoodsTypes.ModValue, gd.Id, gd.Using, gd.Site, newGoodsNum, gd.BagIndex, newHint);
            return 0;
        }

        /// <summary>
        /// 修改物品的耐久度列表
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="client"></param>
        /// <param name="gd"></param>
        /// <param name="newGoodsNum"></param>
        /// <param name="newHint"></param>
        /// <returns></returns>
        public static int ModGoodsStrongDBCommand(TCPOutPacketPool pool, GameClient client, GoodsData gd)
        {
            string strcmd = "";

            //向DBServer请求修改物品2
            string[] dbFields = null;
            strcmd = Global.FormatUpdateDBGoodsStr(client.ClientData.RoleID, gd.Id, "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", gd.Strong, "*", "*", "*"); // 卓越信息 [12/13/2013 LiaoWei] 装备转生
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, pool, (int)TCPGameServerCmds.CMD_DB_UPDATEGOODS_CMD, strcmd, out dbFields, client.ServerId);
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                return -1;
            }

            if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
            {
                return -2;
            }

            //不通知客户端, 由客户端获取，因为更新太频繁
            return 0;
        }

        /// <summary>
        /// 数据库命令执行事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public static int AddGoodsDBCommand(TCPOutPacketPool pool, GameClient client, int goodsID, int goodsNum, int quality, string props, int forgeLevel, int binding, int site, string jewelList, bool useOldGrid, int newHint, string goodsFromWhere, string endTime = Global.ConstGoodsEndTime, int addPropIndex = 0, int bornIndex = 0, int lucky = 0, int strong = 0, int ExcellenceProperty = 0, int nAppendPropLev = 0, int nEquipChangeLife = 0, List<int> washProps = null, List<int> elementhrtsProps = null)
        {
            //在这里截获添加物品的处理, 防止以前遗留的代码，导致物品非正常的 一个物品带多个次数
            /////////////////////////////////////////////////////////////////////////////////////////////////////
            /*if ((int)ItemCategories.Decorate == GetGoodsCatetoriy(goodsID))//是否护身符,如果是，将有效期修改为7天
            {
                int decorateLimitDays = Math.Max(1, (int)GameManager.systemParamsList.GetParamValueIntByName("DecorateLimitDays"));
                endTime = TimeUtil.NowDateTime().AddDays(decorateLimitDays).ToString("yyyy-MM-dd HH:mm:ss");
            }*/
            int dbRet = 0;
            int gridNum = Global.GetGoodsGridNumByID(goodsID);
            gridNum = Global.GMax(gridNum, 1);

            int addCount = (goodsNum - 1) / gridNum + 1;
            for (int i = 0; i < addCount; i++)
            {
                int thisTimeNum = gridNum;
                if (i >= (addCount - 1) && (goodsNum % gridNum) > 0)
                {
                    thisTimeNum = goodsNum % gridNum;
                }

                //想DBServer请求加入某个新的物品到背包中
                dbRet = Global.AddGoodsDBCommand_Hook(pool, client, goodsID, thisTimeNum, quality, props, forgeLevel, binding, site, jewelList, useOldGrid, newHint, goodsFromWhere, false, endTime, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife, false, washProps, elementhrtsProps);
                if (dbRet < 0)
                {
                    return dbRet;
                }
            }

            return dbRet;

            /////////////////////////////////////////////////////////////////////////////////////////////////////
        }

        /// <summary>
        /// [bing] 添加时效性物品 有别于AddGoodsDBCommand 目前只用于部分活动奖励发送时效性物品
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public static int AddEffectiveTimeGoodsDBCommand(TCPOutPacketPool pool, GameClient client, int goodsID, int goodsNum, int quality, string props, int forgeLevel, int binding, int site, string jewelList, bool useOldGrid, int newHint, string goodsFromWhere, string startTime, string endTime = Global.ConstGoodsEndTime, int addPropIndex = 0, int bornIndex = 0, int lucky = 0, int strong = 0, int ExcellenceProperty = 0, int nAppendPropLev = 0, int nEquipChangeLife = 0, List<int> washProps = null, List<int> elementhrtsProps = null)
        {
            //在这里截获添加物品的处理, 防止以前遗留的代码，导致物品非正常的 一个物品带多个次数
            /////////////////////////////////////////////////////////////////////////////////////////////////////
            /*if ((int)ItemCategories.Decorate == GetGoodsCatetoriy(goodsID))//是否护身符,如果是，将有效期修改为7天
            {
                int decorateLimitDays = Math.Max(1, (int)GameManager.systemParamsList.GetParamValueIntByName("DecorateLimitDays"));
                endTime = TimeUtil.NowDateTime().AddDays(decorateLimitDays).ToString("yyyy-MM-dd HH:mm:ss");
            }*/
            int dbRet = 0;
            int gridNum = Global.GetGoodsGridNumByID(goodsID);
            gridNum = Global.GMax(gridNum, 1);

            int addCount = (goodsNum - 1) / gridNum + 1;
            for (int i = 0; i < addCount; i++)
            {
                int thisTimeNum = gridNum;
                if (i >= (addCount - 1) && (goodsNum % gridNum) > 0)
                {
                    thisTimeNum = goodsNum % gridNum;
                }

                //想DBServer请求加入某个新的物品到背包中
                dbRet = Global.AddGoodsDBCommand_Hook(pool, client, goodsID, thisTimeNum, quality, props, forgeLevel, binding, site, jewelList, useOldGrid, newHint, goodsFromWhere, false, endTime, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife, false, washProps, elementhrtsProps, startTime);
                if (dbRet < 0)
                {
                    return dbRet;
                }
            }

            return dbRet;

            /////////////////////////////////////////////////////////////////////////////////////////////////////
        }

        /// <summary>
        /// 数据库命令执行事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public static int AddGoodsDBCommand_Hook(TCPOutPacketPool pool, GameClient client, int goodsID, int goodsNum, int quality, string props, int forgeLevel, int binding, int site,
           string jewelList, bool useOldGrid, int newHint, string goodsFromWhere, bool bIsFromMap, string endTime = Global.ConstGoodsEndTime, int addPropIndex = 0, int bornIndex = 0,
           int lucky = 0, int strong = 0, int ExcellenceProperty = 0, int nAppendPropLev = 0, int nEquipChangeLife = 0, bool disableGoodsDefaultCount = false,
           List<int> washProps = null, List<int> elementhrtsProps = null, string strStartTime = Global.ConstGoodsEndTime)
        {
            //处理获取到商城道具的物品
            Global.ProcessMallGoods(client, goodsID, goodsNum);
            int nBakGoodsNum = goodsNum;

            //是否允许重用旧的格子
            if (useOldGrid && (site == 0 || site == (int)SaleGoodsConsts.FluorescentGemBag)) //背包物品才能自动叠加, 对于移动仓库无效 加荧光宝石背包 [XSea 2015/8/11]
            {
                /// 获取物品是否可以叠加的值
                int gridNum = GetGoodsGridNumByID(goodsID);
                if (gridNum > 1) //可以叠加的
                {
                    GoodsData goodsData = null;

                    int startIndex = 0;
                    if (site == 0) // 背包
                        goodsData = GetGoodsByID(client, goodsID, binding, endTime, ref startIndex);
                    else if (site == (int)SaleGoodsConsts.FluorescentGemBag) // 荧光宝石背包
                        goodsData = GameManager.FluorescentGemMgr.GetGoodsByID(client, goodsID, binding, strStartTime, endTime, ref startIndex);

                    while (null != goodsData && goodsNum > 0)
                    {
                        if (goodsData.GCount < gridNum)
                        {
                            int newGoodsNum = 0;
                            int newNum = goodsNum + goodsData.GCount;
                            if (newNum > gridNum)
                            {
                                newGoodsNum = gridNum;
                                goodsNum = newNum - gridNum;
                            }
                            else
                            {
                                newGoodsNum = goodsData.GCount + goodsNum;
                                goodsNum = 0;
                            }

                            ModGoodsNumDBCommand(pool, client, goodsData, newGoodsNum, newHint, goodsFromWhere, bIsFromMap);
                        }
                        if (site == 0) // 背包
                            goodsData = GetGoodsByID(client, goodsID, binding, endTime, ref startIndex);
                        else if (site == (int)SaleGoodsConsts.FluorescentGemBag) // 荧光宝石背包
                            goodsData = GameManager.FluorescentGemMgr.GetGoodsByID(client, goodsID, binding, strStartTime, endTime, ref startIndex);
                    }
                }

                if (goodsNum <= 0)
                {
                    return 0;
                }
            }

            ///计算背包空闲位置
            int idelBagIndex = 0;
            if (0 == site)
            {
                idelBagIndex = GetIdleSlotOfBagGoods(client);
            }
            else if ((int)SaleGoodsConsts.JinDanGoodsID == site)
            {
                idelBagIndex = GetIdleSlotOfJinDanGoods(client);
            }
            else if ((int)SaleGoodsConsts.PortableGoodsID == site)
            {
                idelBagIndex = GetIdleSlotOfPortableGoods(client);
            }
            else if ((int)SaleGoodsConsts.ElementhrtsGoodsID == site)
            {
                idelBagIndex = ElementhrtsManager.GetIdleSlotOfBag(client);
            }
            else if ((int)SaleGoodsConsts.UsingElementhrtsGoodsID == site)
            {
                idelBagIndex = ElementhrtsManager.GetIdleSlotOfUsing(client);
            }
            else if ((int)SaleGoodsConsts.FluorescentGemBag == site) // 荧光宝石背包
            {
                // 找空闲格子
                idelBagIndex = GameManager.FluorescentGemMgr.GetIdleSlotOfFluorescentGemBag(client);

                // 没有空闲格子
                if (idelBagIndex < 0)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                                                                    StringUtil.substitute(Global.GetLang("荧光宝石背包已满")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    return 0;
                }
            }
            else if ((int)SaleGoodsConsts.SoulStoneBag == site) // 魂石背包
            {
                idelBagIndex = SoulStoneManager.Instance().GetIdleSlotOfBag(client);

                // 没有空闲格子
                if (idelBagIndex < 0)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                                                                    StringUtil.substitute(Global.GetLang("魂石背包已满")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    return 0;
                }
            }

            if (idelBagIndex < 0 && ((int)SaleGoodsConsts.ElementhrtsGoodsID == site || (int)SaleGoodsConsts.UsingElementhrtsGoodsID == site))
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                                                                    StringUtil.substitute(Global.GetLang("元素背包已满")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                return 0;
            }

            //在这里截获添加物品的处理, 特殊物品可以多次使用的特殊处理
            /////////////////////////////////////////////////////////////////////////////////////////////////////
            if (!disableGoodsDefaultCount)
            {
                if (goodsNum <= 1) //如果外部已经设置了大于1， 则不再启用获取缺省大小的逻辑
                {
                    int goodsDefCount = Global.GetGoodsDefaultCount(goodsID);
                    if (goodsDefCount > 0)
                    {
                        goodsNum = Global.GMax(1, goodsDefCount);
                    }
                }
            }

            /////////////////////////////////////////////////////////////////////////////////////////////////////
            string newEndTime = endTime.Replace(":", "$");
            string newStartTime = strStartTime.Replace(":", "$");

            //先DBServer请求扣费
            string[] dbFields = null;
            string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}:{11}:{12}:{13}:{14}:{15}:{16}:{17}:{18}",
                client.ClientData.RoleID, goodsID, goodsNum, quality, props, forgeLevel, binding, site, jewelList, idelBagIndex,
                newStartTime, newEndTime, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife);
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, pool, (int)TCPGameServerCmds.CMD_DB_ADDGOODS_CMD, strcmd, out dbFields, client.ServerId);
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                return -1;
            }

            //添加数据库失败
            if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[0]) < 0)
            {
                return Convert.ToInt32(dbFields[0]);
            }

            //写入角色物品的得失行为日志
            Global.AddRoleGoodsEvent(client, Convert.ToInt32(dbFields[0]), goodsID, goodsNum, binding, quality, forgeLevel, jewelList, site, endTime,
                goodsNum, goodsFromWhere, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife);

            GoodsData gd = null;
            //背包物品列表更新
            if (site == 0)
            {
                gd = Global.AddGoodsData(client, Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, strStartTime, endTime,
                    addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife, idelBagIndex, washProps);

                //更新洗练属性
                if (null != washProps)
                {
                    int dbid = Convert.ToInt32(dbFields[0]);
                    UpdateGoodsArgs args = new UpdateGoodsArgs() { RoleID = client.ClientData.RoleID, DbID = dbid, WashProps = null, ElementhrtsProps = null };
                    args.WashProps = washProps;
                    Global.UpdateGoodsProp(client, gd, args);
                }

                // 属性改造 去掉 负重[8/15/2013 LiaoWei]
                // 刷新包裹的重量
                //Global.UpdateGoodsWeight(client, gd, gd.GCount, true);

                //通知重量更新
                GameManager.ClientMgr.NotifyUpdateWeights(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
            }
            else if (site == (int)SaleGoodsConsts.PortableGoodsID)//移动仓库物品列表更新
            {
                gd = Global.AddPortableGoodsData(client, Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, endTime,
                    addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife);
            }
            else if (site == (int)SaleGoodsConsts.JinDanGoodsID)//金蛋仓库物品列表更新
            {
                gd = Global.AddJinDanGoodsData(client, Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, endTime,
                    addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife);
            }
            else if (site == (int)SaleGoodsConsts.FashionGoods)//时装装备栏 包括称号和翅膀
            {
                gd = FashionManager.getInstance().AddFashionGoodsData(client, Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, endTime,
                    addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife);
            }
            else if (site == (int)SaleGoodsConsts.FluorescentGemBag) // 荧光宝石背包 [XSea 2015/8/7]
            {
                gd = GameManager.FluorescentGemMgr.AddFluorescentGemData(client, Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, strStartTime, endTime,
                    addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife, idelBagIndex);
            }
            else if (site == (int)SaleGoodsConsts.SoulStoneBag) // 魂石背包
            {
                gd = SoulStoneManager.Instance().AddSoulStoneGoods(client, Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, strStartTime, endTime,
                    addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife, idelBagIndex);

                // 没有经验属性就生成默认的经验属性
                if (null == elementhrtsProps)
                {
                    elementhrtsProps = new List<int>();
                    elementhrtsProps.Add(SoulStoneConsts.DefaultLevel);
                    elementhrtsProps.Add(0);
                }
                if (null != elementhrtsProps)
                {
                    int dbid = Convert.ToInt32(dbFields[0]);
                    UpdateGoodsArgs args = new UpdateGoodsArgs() { RoleID = client.ClientData.RoleID, DbID = dbid, WashProps = null, ElementhrtsProps = null };
                    args.ElementhrtsProps = elementhrtsProps;
                    Global.UpdateGoodsProp(client, gd, args);
                }
            }
            else if (site == (int)SaleGoodsConsts.ElementhrtsGoodsID || site == (int)SaleGoodsConsts.UsingElementhrtsGoodsID)
            {
                gd = ElementhrtsManager.AddElementhrtsData(client, Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, idelBagIndex, endTime, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife);
                // 没有经验属性就生成默认的经验属性
                if (null == elementhrtsProps)
                {
                    elementhrtsProps = new List<int>();
                    elementhrtsProps.Add(1);
                    elementhrtsProps.Add(0);
                }
                if (null != elementhrtsProps)
                {
                    int dbid = Convert.ToInt32(dbFields[0]);
                    UpdateGoodsArgs args = new UpdateGoodsArgs() { RoleID = client.ClientData.RoleID, DbID = dbid, WashProps = null, ElementhrtsProps = null };
                    args.ElementhrtsProps = elementhrtsProps;
                    Global.UpdateGoodsProp(client, gd, args);
                }
            }
            else if (site == (int)SaleGoodsConsts.PetBagGoodsID)
            {
                gd = CallPetManager.AddPetData(client, Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, idelBagIndex, endTime,
                    addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife);
            }

            //只有购买到背包物品才能处理
            if (site == 0)
            {
                // 处理任务
                ProcessTask.Process(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, -1, -1, goodsID, TaskTypes.BuySomething);
            }

            if (null != gd)
            {
                string strCurrEnv = "系统";
                if (bIsFromMap)
                {
                    strCurrEnv = Global.GetMapName(client.ClientData.MapCode);
                }

                GameManager.logDBCmdMgr.AddDBLogInfo(Convert.ToInt32(dbFields[0]), Global.ModifyGoodsLogName(gd), goodsFromWhere, strCurrEnv, client.ClientData.RoleName, "增加", nBakGoodsNum, client.ClientData.ZoneID, client.strUserID, -1, client.ServerId);
                EventLogManager.AddGoodsEvent(client, OpTypes.AddOrSub, OpTags.None, goodsID, gd.Id, goodsNum, gd.GCount, goodsFromWhere);
            }

            GameManager.ClientMgr.NotifySelfAddGoods(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                Convert.ToInt32(dbFields[0]), goodsID, forgeLevel, quality, goodsNum, binding, site, jewelList, newHint, newEndTime,
                addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nEquipChangeLife, idelBagIndex, washProps, elementhrtsProps);

            return Convert.ToInt32(dbFields[0]);
        }

        /// <summary>
        /// 处理获取到商城道具的物品
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <param name="goodsNum"></param>
        public static void ProcessMallGoods(GameClient client, int goodsID, int goodsNum)
        {
            if (goodsNum <= 0) return;

            MallGoodsCacheItem mallGoodsCacheItem = MallGoodsMgr.GetMallGoodsCacheItem(goodsID);
            if (null == mallGoodsCacheItem)
            {
                return;
            }

            //获取商城物品价格
            int yuanBaoPrice = mallGoodsCacheItem.Price;
            if (yuanBaoPrice <= 0) return;

            client.ClientData.TotalGoodsMoney += (yuanBaoPrice * goodsNum);

            //处理获取到商城道具的物品的报警
            Global.ProcessWarningMallGoods(client);
        }

        /// <summary>
        /// 处理获取到商城道具的物品的报警
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <param name="goodsNum"></param>
        public static void ProcessWarningMallGoods(GameClient client)
        {
            if (client.ClientData.TotalGoodsMoney <= 0) return;

            int warningMoneyMax = GameManager.GameConfigMgr.GetGameConfigItemInt("warning-money-max", 5000);
            if (client.ClientData.TotalGoodsMoney - client.ClientData.ReportWarningGoodsMoney < warningMoneyMax)
            {
                return;
            }

            int reportGoodsMoney = client.ClientData.TotalGoodsMoney - client.ClientData.ReportWarningGoodsMoney;
            client.ClientData.ReportWarningGoodsMoney = client.ClientData.TotalGoodsMoney;

            //更新上线状态
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDMONEYWARNING,
                string.Format("{0}:{1}:{2}", client.ClientData.RoleID, client.ClientData.TotalUsedMoney, reportGoodsMoney),
                null, client.ServerId);

            /*string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheWarning(-1,
                client.ClientData.ZoneID,
                userID,
                userName,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.UserMoney,
                client.ClientData.TotalUsedMoney,
                reportGoodsMoney,
                writerTime);*/
        }

        /// <summary>
        /// 根据物品ID查找背包中总的数量
        /// </summary>
        /// <param name="id"></param>
        public static int GetTotalGoodsCountByID(GameClient client, int goodsID)
        {
            if (null == client.ClientData.GoodsDataList) return 0;

            int ret = 0;
            lock (client.ClientData.GoodsDataList)
            {
                for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    //if (client.ClientData.GoodsDataList[i].Site > 0) continue; 这个无用吧？
                    if (client.ClientData.GoodsDataList[i].GoodsID != goodsID) continue;
                    if (Global.IsGoodsTimeOver(client.ClientData.GoodsDataList[i])
                        || Global.IsGoodsNotReachStartTime(client.ClientData.GoodsDataList[i]))
                        continue; //如果已经超时
                    ret += client.ClientData.GoodsDataList[i].GCount;
                }
            }

            return ret;
        }

        /// <summary>
        /// 根据物品ID查找背包中非绑定的总的数量 [4/30/2014 LiaoWei]
        /// </summary>
        /// <param name="id"></param>
        public static int GetTotalNotBindGoodsCountByID(GameClient client, int goodsID)
        {
            if (null == client.ClientData.GoodsDataList) return 0;

            int ret = 0;
            lock (client.ClientData.GoodsDataList)
            {
                for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    //if (client.ClientData.GoodsDataList[i].Site > 0) continue; 这个无用吧？
                    if (client.ClientData.GoodsDataList[i].GoodsID != goodsID) continue;
                    if (client.ClientData.GoodsDataList[i].Binding > 0) continue;
                    if (Global.IsGoodsTimeOver(client.ClientData.GoodsDataList[i])
                        || Global.IsGoodsNotReachStartTime(client.ClientData.GoodsDataList[i]))
                        continue; //如果已经超时
                    ret += client.ClientData.GoodsDataList[i].GCount;
                }
            }

            return ret;
        }

        /// <summary>
        /// 根据物品ID查找背包中绑定的总的数量 [4/30/2014 LiaoWei]
        /// </summary>
        /// <param name="id"></param>
        public static int GetTotalBindGoodsCountByID(GameClient client, int goodsID)
        {
            if (null == client.ClientData.GoodsDataList) return 0;

            int ret = 0;
            lock (client.ClientData.GoodsDataList)
            {
                for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    //if (client.ClientData.GoodsDataList[i].Site > 0) continue; 这个无用吧？
                    if (client.ClientData.GoodsDataList[i].GoodsID != goodsID) continue;
                    if (client.ClientData.GoodsDataList[i].Binding < 1) continue;
                    if (Global.IsGoodsTimeOver(client.ClientData.GoodsDataList[i])
                        || Global.IsGoodsNotReachStartTime(client.ClientData.GoodsDataList[i]))
                        continue; //如果已经超时
                    ret += client.ClientData.GoodsDataList[i].GCount;
                }
            }

            return ret;
        }

        /// <summary>
        /// 获取到正在装备的物品列表
        /// </summary>
        /// <param name="client"></param>
        public static List<GoodsData> GetUsingGoodsList(GameClient client, int binding)
        {
            if (null == client.ClientData.GoodsDataList) return null;

            List<GoodsData> goodsDataList = new List<GoodsData>();

            lock (client.ClientData.GoodsDataList)
            {
                for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    if (client.ClientData.GoodsDataList[i].Binding != binding)
                    {
                        continue;
                    }

                    if (client.ClientData.GoodsDataList[i].Using > 0)
                    {
                        goodsDataList.Add(client.ClientData.GoodsDataList[i]);
                    }
                }
            }

            return goodsDataList;
        }

        /// <summary>
        /// 获取到正在装备的物品列表
        /// </summary>
        /// <param name="client"></param>
        public static List<GoodsData> GetUsingGoodsList(SafeClientData clientData)
        {
            if (null == clientData.GoodsDataList) return null;

            List<GoodsData> goodsDataList = new List<GoodsData>();

            lock (clientData.GoodsDataList)
            {
                for (int i = 0; i < clientData.GoodsDataList.Count; i++)
                {
                    if (clientData.GoodsDataList[i].Using > 0)
                    {
                        goodsDataList.Add(clientData.GoodsDataList[i]);
                    }
                }
            }

            return goodsDataList;
        }

        /// <summary>
        /// 获取到正在装备的武器
        /// </summary>
        /// <param name="client"></param>
        /// 
        // 注意 该接口逻辑要改 因为之前只有一个武器栏 MU项目有2个武器栏  所以 要返回一个武器的列表  暂时处理下 todo... [10/28/2013 LiaoWei]
        public static List<GoodsData> GetUsingWeaponGoods(GameClient client)
        {
            if (null == client.ClientData.GoodsDataList)
                return null;

            List<GoodsData> lGood = new List<GoodsData>();

            lock (client.ClientData.GoodsDataList)
            {
                for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    if (client.ClientData.GoodsDataList[i].Using > 0)
                    {
                        int goodsCatetoriy = Global.GetGoodsCatetoriy(client.ClientData.GoodsDataList[i].GoodsID);
                        if ((int)ItemCategories.WuQi_Jian == goodsCatetoriy || (int)ItemCategories.WuQi_Fu == goodsCatetoriy ||
                            (int)ItemCategories.WuQi_Chui == goodsCatetoriy || (int)ItemCategories.WuQi_Gong == goodsCatetoriy ||
                        (int)ItemCategories.WuQi_Nu == goodsCatetoriy || (int)ItemCategories.WuQi_Mao == goodsCatetoriy ||
                        (int)ItemCategories.WuQi_Dao == goodsCatetoriy || (int)ItemCategories.WuQi_GongJianTong == goodsCatetoriy ||
                        (int)ItemCategories.WuQi_Zhang == goodsCatetoriy || (int)ItemCategories.WuQi_NuJianTong == goodsCatetoriy)
                        {
                            lGood.Add(client.ClientData.GoodsDataList[i]);
                        }
                    }
                }
            }

            if (lGood.Count() > 0)
                return lGood;

            return null;
        }

        /// <summary>
        /// 取得攻击类型的物品列表 [3/8/2014 LiaoWei]
        /// </summary>
        /// <param name="client"></param>
        public static List<GoodsData> GetUsingAttackWeaponGoods(GameClient client)
        {
            if (null == client.ClientData.GoodsDataList)
                return null;

            List<GoodsData> lGood = new List<GoodsData>();

            lock (client.ClientData.GoodsDataList)
            {
                for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    if (client.ClientData.GoodsDataList[i].Using > 0)
                    {
                        int goodsCatetoriy = Global.GetGoodsCatetoriy(client.ClientData.GoodsDataList[i].GoodsID);

                        if ((int)ItemCategories.WuQi_Jian == goodsCatetoriy || (int)ItemCategories.WuQi_Fu == goodsCatetoriy ||
                            (int)ItemCategories.WuQi_Chui == goodsCatetoriy || (int)ItemCategories.WuQi_Gong == goodsCatetoriy ||
                        (int)ItemCategories.WuQi_Nu == goodsCatetoriy || (int)ItemCategories.WuQi_Mao == goodsCatetoriy ||
                        (int)ItemCategories.WuQi_Zhang == goodsCatetoriy || (int)ItemCategories.WuQi_Dao == goodsCatetoriy)
                        {
                            lGood.Add(client.ClientData.GoodsDataList[i]);
                        }
                    }
                }
            }

            if (lGood.Count() > 0)
                return lGood;

            return null;
        }

        /// <summary>
        /// 获取到没有装备的物品列表
        /// </summary>
        /// <param name="client"></param>
        public static List<GoodsData> GetNotUsingGoodsList(GameClient client)
        {
            if (null == client.ClientData.GoodsDataList) return null;

            List<GoodsData> goodsDataList = new List<GoodsData>();

            lock (client.ClientData.GoodsDataList)
            {
                for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    if (client.ClientData.GoodsDataList[i].Using <= 0)
                    {
                        goodsDataList.Add(client.ClientData.GoodsDataList[i]);
                    }
                }
            }

            return goodsDataList;
        }

        /// <summary>
        /// 获取到可以掉落的装备的物品列表
        /// </summary>
        /// <param name="client"></param>
        public static List<GoodsData> GetFallGoodsList(GameClient client)
        {
            if (null == client.ClientData.GoodsDataList) return null;

            List<GoodsData> goodsDataList = new List<GoodsData>();

            SystemXmlItem systemGoods = null;
            lock (client.ClientData.GoodsDataList)
            {
                for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    if (client.ClientData.GoodsDataList[i].Using > 0)
                    {
                        continue;
                    }

                    if (client.ClientData.GoodsDataList[i].Binding > 0)
                    {
                        continue;
                    }

                    systemGoods = null;
                    if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(client.ClientData.GoodsDataList[i].GoodsID, out systemGoods))
                    {
                        continue;
                    }

                    //如果不能丢弃
                    //if (systemGoods.GetIntValue("AbadonID") <= 0)
                    //{
                    //    continue;
                    //}

                    goodsDataList.Add(client.ClientData.GoodsDataList[i]);
                }
            }

            return goodsDataList;
        }

        /// <summary>
        /// 通知更换衣服和武器代码(当物品变化时)
        /// </summary>
        /// <param name="tcpMgr"></param>
        /// <param name="pool"></param>
        /// <param name="?"></param>
        /// <param name="goodsID"></param>
        //public static void NotifyChangeCode(TCPManager tcpMgr, TCPOutPacketPool pool, GameClient client, int goodsDbID, int goodsID, int isusing, int refreshNow)
        public static void NotifyChangeEquip(TCPManager tcpMgr, TCPOutPacketPool pool, GameClient client, GoodsData goodsData, int refreshNow)
        {
            SystemXmlItem systemGoods = null;
            if (GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
            {
                //判断是否更换了衣服和武器
                int category = systemGoods.GetIntValue("Categoriy");
                //int equipCode = systemGoods.GetIntValue("EquipCode");
                if (/*equipCode != -1 && */(category >= (int)ItemCategories.TouKui && category < (int)ItemCategories.EquipMax))
                {
                    //if ((int)ItemCategories.Weapon == category || (int)ItemCategories.ShenBing == category) 
                    //if ((int)ItemCategories.WuQi_Jian == category || (int)ItemCategories.WuQi_Fu == category ||
                    //        (int)ItemCategories.WuQi_Chui == category || (int)ItemCategories.WuQi_Gong == category ||
                    //    (int)ItemCategories.WuQi_Nu == category || (int)ItemCategories.WuQi_Mao == category ||
                    //    (int)ItemCategories.WuQi_Dao == category || (int)ItemCategories.WuQi_GongJianTong == category ||
                    //    (int)ItemCategories.WuQi_Jian == category || (int)ItemCategories.WuQi_NuJianTong == category)//武器相关操作
                    //{
                    //    //通知所有同一个地图的用户，自己更换了武器
                    //    GameManager.ClientMgr.NotifyOthersChangeCode(tcpMgr.MySocketListener, pool, client, -2, isusing > 0 ? equipCode : -1, refreshNow);
                    //}
                    //else if ((int)ItemCategories.KaiJia == category /*|| (int)ItemCategories.ShenJia == category*/)  //衣服相关操作
                    //{
                    //    //通知所有同一个地图的用户，自己更换了衣服
                    //    GameManager.ClientMgr.NotifyOthersChangeCode(tcpMgr.MySocketListener, pool, client, isusing > 0 ? equipCode : client.ClientData.RoleSex, -2, refreshNow);
                    //}

                    //通知所有同一个地图的用户，自己更换了衣服
                    GameManager.ClientMgr.NotifyOthersChangeEquip(tcpMgr.MySocketListener, pool, client, goodsData, refreshNow);

                    //通知骑乘的的指令信息
                    if (client.ClientData.HorseDbID > 0)
                    {
                        HorseData horseData = Global.GetHorseDataByDbID(client, client.ClientData.HorseDbID);

                        if (null != horseData)
                        {
                            List<Object> objsList = Global.GetAll9Clients(client);
                            GameManager.ClientMgr.NotifyHorseCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, 0,
                                (int)HorseCmds.On, horseData.DbID, horseData.HorseID, horseData.BodyID, objsList);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// 获取物品项(数量可能大于1)的价格===>卖给npc的价格
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static int GetGoodsDataPrice(GoodsData goodsData)
        {
            if (null == goodsData) return 0;
            if (goodsData.GCount <= 0) return 0;

            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
            {
                return 0;
            }

            //出售给系统的价格
            int priceTwo = systemGoods.GetIntValue("PriceTwo");
            int categoriy = systemGoods.GetIntValue("Categoriy");
            if (categoriy < (int)ItemCategories.TouKui || categoriy > (int)ItemCategories.EquipMax)
            {
                if (Global.GetGoodsUsingNum(goodsData.GoodsID) <= 1)
                {
                    return (int)(priceTwo / 5.0) * goodsData.GCount;
                }

                return (int)(priceTwo / 5.0);
            }

            //计算价格
            double[] equipPropsArray = systemGoods.GetDoubleArrayValue("EquipProps");

            if (equipPropsArray.Length >= 2)
            {
                double fMaxStrong = equipPropsArray[0];//采用number，省得考虑除0

                //避免配置错误
                if (fMaxStrong <= 0.001)
                {
                    return 0;
                }

                //出售给系统的铜钱 =（购买铜钱/5）*(耐久值/耐久上限值) 
                int totalPrice = (int)((priceTwo / 5.0) * (fMaxStrong - goodsData.Strong) / fMaxStrong);//浮点计算，分母为0 也无所谓
                if (Global.GetGoodsUsingNum(goodsData.GoodsID) <= 1)
                {
                    totalPrice = totalPrice * goodsData.GCount;
                }

                return totalPrice;
            }

            return 0;
            /*
            int suitID = systemGoods.GetIntValue("SuitID");
            int level = goodsData.Forge_level;
            if (level > MaxEquipLevel) //防止作弊
            {
                level = 0;
            }

            int totalLevel = 0;
            for (int i = 0; i <= level && i <= MaxForgeLevel; i++)
            {
                totalLevel += i;
            }

            int quality = goodsData.Quality;
            if (quality >= (int)GoodsQuality.Max)
            {
                quality = (int)GoodsQuality.Gold;
            }

            int totalQuality = 0;
            for (int i = 0; i <= quality; i++)
            {
                totalQuality += i;
            }

            double origPrice = systemGoods.GetDoubleValue("SalePrice");
            double value = origPrice + origPrice * ((totalQuality * 0.20) + (totalLevel * 0.05));
            int equipPrice = (int)Math.Floor(value);
            if (level > MaxForgeLevel) //10级一下单独计算属性
            {
                equipPrice += (int)((0.50 + (level - 9) * 0.01) * (level - 10) * origPrice);
            }

            equipPrice *= goodsData.GCount;
            equipPrice = Math.Abs(equipPrice);
            return equipPrice;
            */
        }

        /// <summary>
        /// 获取物品项(数量可能大于1)的再造点数===>卖给npc的价格
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static int GetGoodsDataZaiZao(GoodsData goodsData)
        {
            if (null == goodsData) return 0;
            if (goodsData.GCount <= 0) return 0;

            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
                return 0;

            //出售给系统的价格(再造点)
            int zaiZao = systemGoods.GetIntValue("ChangeZaiZao");
            return zaiZao * goodsData.GCount;
        }

        /// <summary>
        /// 获取物品项出售给Npc的精元(魔晶)
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static int GetGoodsDataJingYuan(GoodsData goodsData)
        {
            if (null == goodsData) return 0;
            if (goodsData.GCount <= 0) return 0;

            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
                return 0;

            //出售给系统的价格(精元)
            int jingYuan = systemGoods.GetIntValue("ChangeJinYuan");
            return jingYuan * goodsData.GCount;
        }

        /// <summary>
        /// 整理用户的背包
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static void ResetBagAllGoods(GameClient client, bool notifyClient = true)
        {
            byte[] bytesCmd = null;
            if (client.ClientData.GoodsDataList != null)
            {
                lock (client.ClientData.GoodsDataList)
                {
                    Dictionary<string, GoodsData> oldGoodsDict = new Dictionary<string, GoodsData>();
                    List<GoodsData> toRemovedGoodsDataList = new List<GoodsData>();
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].Using > 0)
                        {
                            continue;
                        }

                        client.ClientData.GoodsDataList[i].BagIndex = 0;
                        int gridNum = Global.GetGoodsGridNumByID(client.ClientData.GoodsDataList[i].GoodsID);
                        if (gridNum <= 1)
                        {
                            continue;
                        }

                        GoodsData oldGoodsData = null;
                        string key = string.Format("{0}_{1}_{2}_{3}", client.ClientData.GoodsDataList[i].GoodsID,
                            client.ClientData.GoodsDataList[i].Binding,
                            Global.DateTimeTicks(client.ClientData.GoodsDataList[i].Starttime),
                            Global.DateTimeTicks(client.ClientData.GoodsDataList[i].Endtime));
                        if (oldGoodsDict.TryGetValue(key, out oldGoodsData))
                        {
                            int toAddNum = Global.GMin((gridNum - oldGoodsData.GCount), client.ClientData.GoodsDataList[i].GCount);

                            oldGoodsData.GCount += toAddNum;

                            client.ClientData.GoodsDataList[i].GCount -= toAddNum;
                            client.ClientData.GoodsDataList[i].BagIndex = 1;
                            oldGoodsData.BagIndex = 1;
                            if (!ResetBagGoodsData(client, client.ClientData.GoodsDataList[i]))
                            {
                                //出错, 停止整理
                                break;
                            }

                            EventLogManager.AddGoodsEvent(client, OpTypes.Sort, OpTags.None, oldGoodsData.GoodsID, oldGoodsData.Id, toAddNum, oldGoodsData.GCount, "整理背包");
                            EventLogManager.AddGoodsEvent(client, OpTypes.Sort, OpTags.None, client.ClientData.GoodsDataList[i].GoodsID, client.ClientData.GoodsDataList[i].Id, -toAddNum, client.ClientData.GoodsDataList[i].GCount, "整理背包");

                            if (oldGoodsData.GCount >= gridNum) //旧的物品已经加满
                            {
                                if (client.ClientData.GoodsDataList[i].GCount > 0)
                                {
                                    oldGoodsDict[key] = client.ClientData.GoodsDataList[i];
                                }
                                else
                                {
                                    oldGoodsDict.Remove(key);
                                    toRemovedGoodsDataList.Add(client.ClientData.GoodsDataList[i]);
                                }
                            }
                            else
                            {
                                if (client.ClientData.GoodsDataList[i].GCount <= 0)
                                {
                                    toRemovedGoodsDataList.Add(client.ClientData.GoodsDataList[i]);
                                }
                            }
                        }
                        else
                        {
                            oldGoodsDict[key] = client.ClientData.GoodsDataList[i];
                        }
                    }

                    for (int i = 0; i < toRemovedGoodsDataList.Count; i++)
                    {
                        client.ClientData.GoodsDataList.Remove(toRemovedGoodsDataList[i]);
                    }

                    //按照物品分类排序===>2012-09-27 修改成按照道具ID排序
                    client.ClientData.GoodsDataList.Sort(delegate(GoodsData x, GoodsData y)
                    {
                        //return (Global.GetGoodsCatetoriy(y.GoodsID) - Global.GetGoodsCatetoriy(x.GoodsID));
                        return (y.GoodsID - x.GoodsID);
                    });

                    int index = 0;
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        if (client.ClientData.GoodsDataList[i].Using > 0)
                        {
                            continue;
                        }

                        if (GameManager.Flag_OptimizationBagReset)
                        {
                            bool godosCountChanged = client.ClientData.GoodsDataList[i].BagIndex > 0;
                            client.ClientData.GoodsDataList[i].BagIndex = index++;
                            if (godosCountChanged)
                            {
                                if (!Global.ResetBagGoodsData(client, client.ClientData.GoodsDataList[i]))
                                {
                                    //出错, 停止整理
                                    break;
                                }
                            }
                        }
                        else
                        {
                            client.ClientData.GoodsDataList[i].BagIndex = index++;
                            if (!Global.ResetBagGoodsData(client, client.ClientData.GoodsDataList[i]))
                            {
                                //出错, 停止整理
                                break;
                            }
                        }
                    }
                    bytesCmd = DataHelper.ObjectToBytes<List<GoodsData>>(client.ClientData.GoodsDataList);
                }
            }
            else
            {
                return;
            }

            if (notifyClient)
            {
                TCPOutPacket tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(Global._TCPManager.TcpOutPacketPool, bytesCmd, 0, bytesCmd.Length, (int)TCPGameServerCmds.CMD_SPR_RESETBAG);
                //tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(client.ClientData.GoodsDataList, Global._TCPManager.TcpOutPacketPool, (int)TCPGameServerCmds.CMD_SPR_RESETBAG);
                Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket);
            }
        }

        /// <summary>
        /// 根据物品ID获取物品类型
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static int GetGoodsCatetoriy(int goodsID)
        {
            //获取Xml项
            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
            {
                return 0;
            }

            //判断两个物品项是否同一个物品，是否可以叠加?
            return systemGoods.GetIntValue("Categoriy");
        }

        /// <summary>
        /// 缓存物品的阶数
        /// </summary>
        private static Dictionary<int, int> GoodsSuitCacheDict = new Dictionary<int, int>();

        /// <summary>
        /// 根据物品ID获取首饰套装ID
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static int GetGoodsShouShiSuitID(int goodsID)
        {
            //判断两个物品项是否同一个物品，是否可以叠加?
            int suit = 0;
            lock (GoodsSuitCacheDict)
            {
                if (!GoodsSuitCacheDict.TryGetValue(goodsID, out suit))
                {
                    //获取Xml项
                    SystemXmlItem systemGoods = null;
                    if (GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
                    {
                        suit = systemGoods.GetIntValue("ShouShiSuitID");
                    }
                    else
                    {
                        suit = -1;
                    }

                    GoodsSuitCacheDict.Add(goodsID, suit);
                }
            }
            return suit;
        }

        /// <summary>
        /// 清除 物品ID获取首饰套装ID的缓存
        /// </summary>
        public static void ClearCachedGoodsShouShiSuitID()
        {
            lock (GoodsSuitCacheDict)
            {
                GoodsSuitCacheDict.Clear();
            }
        }

        /// <summary>
        /// 根据物品ID获取套装品质ID
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static int GetGoodsQualityID(int goodsID)
        {
            //获取Xml项
            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
            {
                return -1;
            }

            //判断两个物品项是否同一个物品，是否可以叠加?
            return systemGoods.GetIntValue("QualityID");
        }

        /// <summary>
        /// 根据物品ID获取物品对应职业(只穿戴使用)
        /// 物品表扩展主职业列后，此列已修改为2的N次方和（N为职业编号），目前客户端在用，服务器暂时没用到 [XSea 2015/5/4]
        /// 用法 (1 << 角色职业) & 物品对应ToOccupation， = 0不可佩戴，非0=可佩戴
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        /*public static int GetGoodsToOccupation(int goodsID)
        {
            //获取Xml项
            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
            {
                return (int)EOccupationType.EOT_Warrior;
            }
            
            //判断两个物品是否同时属于一个职业
            return systemGoods.GetIntValue("ToOccupation");
        }*/

        /// <summary>
        /// 是否能装备或使用(主要用于检查物品是否可以装备或使用) [XSea 2015/6/16]
        /// <param name="client">角色</param>
        /// <param name="nGoodsID">物品ID</param>
        /// </summary>
        /// <returns>true=可以，false=不可以</returns>
        public static bool IsCanEquipOrUseByOccupation(GameClient client, int nGoodsID)
        {
            return IsCanEquipOrUseByOccupation(client.ClientData.Occupation, nGoodsID);
        }

        /// <summary>
        /// 是否能装备或使用(主要用于检查物品是否可以装备或使用) [XSea 2015/6/16]
        /// <param name="nRoleOccu">角色职业</param>
        /// <param name="nGoodsID">物品ID</param>
        /// </summary>
        /// <returns>true=可以，false=不可以</returns>
        public static bool IsCanEquipOrUseByOccupation(int nRoleOccu, int nGoodsID)
        {
            // 取物品静态数据
            SystemXmlItem systemGoods = null;

            // 没有该物品 不可以
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(nGoodsID, out systemGoods))
                return false;

            // 物品对应的职业 物品表扩展主职业字段后，此列已修改为2的N次方和（N为职业编号）
            int nGoodsToOccupation = systemGoods.GetIntValue("ToOccupation");

            // -1=无限制，可以
            if (nGoodsToOccupation == -1)
                return true;

            // 用法 (1 << 角色职业) & 物品对应ToOccupation， = 0不可佩戴，非0=可佩戴
            if (0 == ((1 << CalcOriginalOccupationID(nRoleOccu)) & nGoodsToOccupation))
                return false; // 不可以

            // 通过检查 可以
            return true;
        }

        /// <summary>
        /// 根据物品ID获取物品对应主职业
        /// </summary>
        /// <param name="nGoodsID"></param>
        /// <returns></returns>
        public static int GetMainOccupationByGoodsID(int nGoodsID)
        {
            //获取Xml项
            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(nGoodsID, out systemGoods))
            {
                return (int)EOccupationType.EOT_Warrior;
            }

            // 返回主职业
            return systemGoods.GetIntValue("MainOccupation");
        }

        /// <summary>
        /// 角色职业是否匹配此物品对应的主职业
        /// </summary>
        public static bool IsRoleOccupationMatchGoods(GameClient client, int goodID)
        {
            return IsRoleOccupationMatchGoods(client.ClientData.Occupation, goodID);
        }

        /// <summary>
        /// 角色职业是否匹配此物品对应的主职业
        /// </summary>
        /// <param name="nOccu">角色职业</param>
        /// <param name="goodID">物品id</param>
        public static bool IsRoleOccupationMatchGoods(int nOccu, int goodID)
        {
            SystemXmlItem sytemGoodsItem = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodID, out sytemGoodsItem))
            {
                LogManager.WriteLog(LogTypes.Warning, string.Format("此物品不存在，请检查配置文件: GoodsID={0}", goodID));
                return false;
            }

            int toOccupation = Global.GetMainOccupationByGoodsID(goodID); // 物品主职业

            // -1等于物品无限制 通用
            if (toOccupation == -1)
                return true;

            int nOcc = Global.CalcOriginalOccupationID(nOccu); // 角色职业

            // 职业相等
            if (toOccupation == nOcc)
                return true;

            return false;
        }

        /// <summary>
        /// 修改物品的数量和位置
        /// </summary>
        /// <param name="?"></param>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static bool ResetBagGoodsData(GameClient client, GoodsData goodsData)
        {
            string strcmd = "";

            //向DBServer请求修改物品
            string[] dbFields = null;
            strcmd = Global.FormatUpdateDBGoodsStr(client.ClientData.RoleID, goodsData.Id, goodsData.Using, "*", "*", "*", "*", "*", "*", goodsData.GCount, "*", goodsData.BagIndex, "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*");// 卓越信息 [12/13/2013 LiaoWei] 装备转生
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool,
                Global._TCPManager.TcpOutPacketPool, (int)TCPGameServerCmds.CMD_DB_UPDATEGOODS_CMD, strcmd, out dbFields, client.ServerId);
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                return false;
            }

            if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
            {
                return false;
            }

            //写入角色物品的得失行为日志(扩展)
            Global.NoDBLogModRoleGoodsEvent(client, goodsData, 0, "重置背包索引");
            EventLogManager.AddGoodsEvent(client, OpTypes.Sort, OpTags.None, goodsData.GoodsID, goodsData.Id, 0, goodsData.GCount, "重置背包索引");

            return true;
        }

        /// <summary>
        /// 检查物品的有效性
        /// </summary>
        /// <param name="client"></param>
        public static void CheckGoodsDataValid(GameClient client)
        {
            if (client.ClientSocket.IsKuaFuLogin)
            {
                //跨服服务器不检查物品有效性,防止误删物品
                return;
            }

            if (client.ClientData.GoodsDataList == null)
            {
                return;
            }

            lock (client.ClientData.GoodsDataList)
            {
                List<GoodsData> toRemovedGoodsDataList = new List<GoodsData>();
                for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    if (!GameManager.SystemGoods.SystemXmlItemDict.ContainsKey(client.ClientData.GoodsDataList[i].GoodsID))
                    {
                        toRemovedGoodsDataList.Add(client.ClientData.GoodsDataList[i]);
                    }
                }

                for (int i = 0; i < toRemovedGoodsDataList.Count; i++)
                {
                    GoodsData goodsData = toRemovedGoodsDataList[i];
                    client.ClientData.GoodsDataList.Remove(goodsData);
                    goodsData.GCount = 0;
                    Global.ResetBagGoodsData(client, goodsData);
                }
            }
        }

        /// <summary>
        /// 批量加入物品，个数受背包的空格的限制
        /// </summary>
        /// <param name="goodsID"></param>
        /// <param name="goodsNum"></param>
        /// <param name="binding"></param>
        public static bool BatchAddGoods(GameClient client, int goodsID, int goodsNum, int binding, string goodsFromWhere)
        {
            bool ret = true;
            int gridNum = Global.GetGoodsGridNumByID(goodsID);
            gridNum = Global.GMax(gridNum, 1);

            int addCount = (goodsNum - 1) / gridNum + 1;
            for (int i = 0; i < addCount; i++)
            {
                int thisTimeNum = gridNum;
                if (i >= (addCount - 1) && (goodsNum % gridNum) > 0)
                {
                    thisTimeNum = goodsNum % gridNum;
                }

                //想DBServer请求加入某个新的物品到背包中
                int dbRet = Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, goodsID, thisTimeNum, 0, "", 0, binding, 0, "", true, 1, goodsFromWhere);
                if (dbRet < 0)
                {
                    ret = false;
                    break;
                }
            }

            return ret;
        }

        /// <summary>
        /// 根据goodsID 读取配置文件生成物品
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static GoodsData GetNewGoodsData(int goodsID, int binding)
        {
            int maxStrong = 0;
            int lucky = 0;

            //对于新给的物品，gcount必须设置成1，如果是持续消耗品，由外部在修改gcount的值!!!!!
            return GetNewGoodsData(goodsID, 1, 0, 0, binding, 0, lucky, maxStrong);
        }

        /// <summary>
        /// 获取物品数据
        /// </summary>
        /// <param name="goodsID"></param>
        /// <param name="gcount"></param>
        /// <param name="quality"></param>
        /// <param name="forgeLevel"></param>
        /// <param name="binding"></param>
        /// <returns></returns>
        public static GoodsData GetNewGoodsData(int goodsID, int gcount, int quality, int forgeLevel, int binding, int bornIndex, int lucky, int strong, int nExcellenceInfo = 0, int nAppendPropLev = 0, int nChangeLife = 0)
        {
            GoodsData goodsData = new GoodsData()
            {
                Id = -1,
                GoodsID = goodsID,
                Using = 0,
                Forge_level = forgeLevel,
                Starttime = "1900-01-01 12:00:00",
                Endtime = Global.ConstGoodsEndTime,
                Site = 0,
                Quality = quality,
                Props = "",
                GCount = gcount,
                Binding = binding,
                Jewellist = "",
                BagIndex = 0,
                SaleMoney1 = 0,
                SaleYuanBao = 0,
                SaleYinPiao = 0,
                AddPropIndex = 0,
                BornIndex = bornIndex,
                Lucky = lucky,
                Strong = strong,
                ExcellenceInfo = nExcellenceInfo,
                AppendPropLev = nAppendPropLev,
                ChangeLifeLevForEquip = nChangeLife,
            };

            return goodsData;
        }

        /// <summary>
        /// 复制GoodsData对象
        /// </summary>
        /// <param name="oldGoodsData"></param>
        /// <returns></returns>
        public static GoodsData CopyGoodsData(GoodsData oldGoodsData)
        {
            GoodsData goodsData = new GoodsData(oldGoodsData);
            /*GoodsData goodsData = new GoodsData()
            {
                Id = oldGoodsData.Id,
                GoodsID = oldGoodsData.GoodsID,
                Using = oldGoodsData.Using,
                Forge_level = oldGoodsData.Forge_level,
                Starttime = oldGoodsData.Starttime,
                Endtime = oldGoodsData.Endtime,
                Site = oldGoodsData.Site,
                Quality = oldGoodsData.Quality,
                Props = oldGoodsData.Props,
                GCount = oldGoodsData.GCount,
                Binding = oldGoodsData.Binding,
                Jewellist = oldGoodsData.Jewellist,
                BagIndex = oldGoodsData.BagIndex,
                SaleMoney1 = oldGoodsData.SaleMoney1,
                SaleYuanBao = oldGoodsData.SaleYuanBao,
                SaleYinPiao = oldGoodsData.SaleYinPiao,
                AddPropIndex = oldGoodsData.AddPropIndex,
                BornIndex = oldGoodsData.BornIndex,
                Lucky = oldGoodsData.Lucky,
                Strong = oldGoodsData.Strong,
                ExcellenceInfo = oldGoodsData.ExcellenceInfo,
                AppendPropLev = oldGoodsData.AppendPropLev,
                ChangeLifeLevForEquip = oldGoodsData.ChangeLifeLevForEquip,
            };*/

            return goodsData;
        }

        /// <summary>
        /// 获取字符串的Ticks
        /// </summary>
        /// <param name="dateTime1"></param>
        /// <param name="dateTime2"></param>
        /// <returns></returns>
        public static long DateTimeTicks(string strDateTime)
        {
            try
            {
                DateTime dt1;
                if (!DateTime.TryParse(strDateTime, out dt1))
                {
                    return 0;
                }

                return dt1.Ticks;
            }
            catch (Exception)
            {
            }

            return 0;
        }

        /// <summary>
        /// 判断两个时间是否相等
        /// </summary>
        /// <param name="dateTime1"></param>
        /// <param name="dateTime2"></param>
        /// <returns></returns>
        public static bool DateTimeEqual(string strDateTime1, string strDateTime2)
        {
            try
            {
                // 应该只需要比较两个字符串就行 ChenXiaojun
                return (strDateTime1 == strDateTime2);

                //DateTime dt1;
                //if (!DateTime.TryParse(strDateTime1, out dt1))
                //{
                //    return false;
                //}

                //DateTime dt2;
                //if (!DateTime.TryParse(strDateTime2, out dt2))
                //{
                //    return false;
                //}

                //return (dt1.Ticks == dt2.Ticks);
            }
            catch (Exception)
            {
            }

            return false;
        }

        /// <summary>
        /// 是否限制时间的物品
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static bool IsTimeLimitGoods(GoodsData goodsData)
        {
            if (!string.IsNullOrEmpty(goodsData.Endtime) && !Global.DateTimeEqual(goodsData.Endtime, Global.ConstGoodsEndTime)) //限时物品
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 限制时间的物品是否过期
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static bool IsGoodsTimeOver(GoodsData goodsData)
        {
            if (!Global.IsTimeLimitGoods(goodsData)) //如果非限时物品
            {
                return false;
            }

            long nowTicks = TimeUtil.NOW() * 10000;
            long goodsEndTicks = Global.DateTimeTicks(goodsData.Endtime);
            if (nowTicks >= goodsEndTicks) return true;
            return false;
        }

        /// <summary>
        /// 检查物品是否未到使用时间
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static bool IsGoodsNotReachStartTime(GoodsData goodsData)
        {
            if (!Global.IsTimeLimitGoods(goodsData)) //如果非限时物品
            {
                return false;
            }

            long nowTicks = TimeUtil.NOW() * 10000;
            long goodsStartTicks = Global.DateTimeTicks(goodsData.Starttime);
            if (nowTicks < goodsStartTicks) return true;

            return false;
        }

        /// <summary>
        /// 获取物品的默认的自带使用次数
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static int GetGoodsDefaultCount(int goodsID)
        {
            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
            {
                return 0;
            }

            return Global.GMax(1, systemGoods.GetIntValue("UsingNum"));
        }

        /// <summary>
        /// 获取物品的每日默认使用次数
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static int GetGoodsUsingNum(int goodsID)
        {
            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
            {
                return 0;
            }

            return systemGoods.GetIntValue("UsingNum");
        }

        /// <summary>
        /// 绑定铜钱符每日使用次数列表缓存
        /// </summary>
        public static int[] _VipUseBindTongQianGoodsIDNum = null;

        /// <summary>
        /// 获取绑定铜钱符每日使用次数列表缓存
        /// </summary>
        /// <returns></returns>
        public static int[] GetVipUseBindTongQianGoodsIDNum()
        {
            if (null != _VipUseBindTongQianGoodsIDNum)
            {
                return _VipUseBindTongQianGoodsIDNum;
            }

            _VipUseBindTongQianGoodsIDNum = GameManager.systemParamsList.GetParamValueIntArrayByName("VipUseBindTongQianGoodsIDNum");
            return _VipUseBindTongQianGoodsIDNum;
        }

        /// <summary>
        /// 获取物品的每日使用次数限制
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static int GetGoodsLimitNum(GameClient client, int goodsID)
        {
            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
            {
                return 0;
            }

            if ((int)ItemCategories.BindMoneyFu == systemGoods.GetIntValue("Categoriy"))
            {
                int[] VipUseBindTongQianGoodsIDNum = Global.GetVipUseBindTongQianGoodsIDNum();
                if (VipUseBindTongQianGoodsIDNum != null && VipUseBindTongQianGoodsIDNum.Length == 4)
                {
                    if ((int)VIPTypes.NoVip == Global.GetVipType(client))
                    {
                        return VipUseBindTongQianGoodsIDNum[0];
                    }
                    else if ((int)VIPTypes.Month == Global.GetVipType(client))
                    {
                        return VipUseBindTongQianGoodsIDNum[1];
                    }
                    else if ((int)VIPTypes.Season == Global.GetVipType(client))
                    {
                        return VipUseBindTongQianGoodsIDNum[2];
                    }
                    else if ((int)VIPTypes.HalfYear == Global.GetVipType(client))
                    {
                        return VipUseBindTongQianGoodsIDNum[3];
                    }
                }
            }

            // VIP对极品果实和金条的处理 [2/20/2014 LiaoWei]
            int nType = systemGoods.GetIntValue("ID");

            if ((int)VIPEumValue.VIPENUMVALUE_GOODFRUIT == nType || (int)VIPEumValue.VIPENUMVALUE_GOODGOLD == nType)
            {
                //int nPriority = 0;
                int dayID = TimeUtil.NowDateTime().DayOfYear;
                int nVipLev = client.ClientData.VipLevel;

                int[] nArry = null;
                if ((int)VIPEumValue.VIPENUMVALUE_GOODFRUIT == nType)
                {
                    //nPriority = (int)VIPTYPEEum.VIPTYPEEUM_USEFRUIT;
                    nArry = GameManager.systemParamsList.GetParamValueIntArrayByName("VIPJiPinGuoShiAdd");
                }
                else if ((int)VIPEumValue.VIPENUMVALUE_GOODGOLD == nType)
                {
                    //nPriority = (int)VIPTYPEEum.VIPTYPEEUM_USEFGOLD;
                    nArry = GameManager.systemParamsList.GetParamValueIntArrayByName("VIPJinTiaoAdd");
                }

                if (nVipLev > 0 && nArry != null && nArry[nVipLev] > 0)
                {
                    /*VipDailyData dailyVipData = null;
                    dailyVipData = Global.FindVipDailyDataByPriority(client, nPriority);

                    if (dailyVipData != null)
                    {
                        if (dailyVipData.DayID == dayID)
                        {
                            nNum = nArry[nVipLev] - dailyVipData.UsedTimes;
                        }
                    }
                    else
                        nNum = nArry[nVipLev];

                    Global.UpdateVipDailyData(client, dayID, nPriority);

                    return systemGoods.GetIntValue("DayLimit") + nNum;*/

                    return systemGoods.GetIntValue("DayLimit") + nArry[nVipLev];
                }

            }

            return systemGoods.GetIntValue("DayLimit");
        }

        /// <summary>
        /// 返回物品对应的某种货币的价格
        /// </summary>
        /// <param name="goodsID"></param>
        /// <param name="moneyType"></param>
        /// <returns></returns>
        public static int GetGoodsPriceByMoneyType(int goodsID, int moneyType)
        {
            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
            {
                return 0;
            }

            String sPriceField = "";
            switch (moneyType)
            {
                case (int)MoneyTypes.TongQian:
                    sPriceField = "PriceOne";
                    break;
                case (int)MoneyTypes.YinLiang:
                    sPriceField = "PriceTwo";
                    break;
                case (int)MoneyTypes.JingYuanZhi:
                    sPriceField = "JinYuanPrice";
                    break;
                case (int)MoneyTypes.JunGongZhi:
                    sPriceField = "JunGongPrice";
                    break;
                case (int)MoneyTypes.LieShaZhi:
                    sPriceField = "LieShaPrice";
                    break;
                case (int)MoneyTypes.JiFenZhi:
                    sPriceField = "JiFenPrice";
                    break;
                case (int)MoneyTypes.ZhanHun:
                    sPriceField = "ZhanHunPrice";
                    break;
                default:
                    break;
            }

            return Math.Max(0, systemGoods.GetIntValue(sPriceField));
        }

        /// <summary>
        /// 销毁物品，如果物品已经穿戴，则先卸载再删除
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static bool DestroyGoods(GameClient client, GoodsData goodsData)
        {
            String cmdData = "";
            //装备中的先卸载
            if (goodsData.Using > 0)
            {
                cmdData = String.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", client.ClientData.RoleID, (int)ModGoodsTypes.EquipUnload,
                    goodsData.Id, goodsData.GoodsID, 0, goodsData.Site, goodsData.GCount, goodsData.BagIndex, "");
                ModifyGoodsByCmdParams(client, cmdData);
            }

            //摧毁
            cmdData = String.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", client.ClientData.RoleID, (int)ModGoodsTypes.Destroy,
                    goodsData.Id, goodsData.GoodsID, 0, goodsData.Site, goodsData.GCount, goodsData.BagIndex, "");
            ModifyGoodsByCmdParams(client, cmdData);

            return true;
        }

        /// <summary>
        /// 根据参数命令拆分物品
        /// </summary>
        /// <param name="fields"></param>
        public static TCPProcessCmdResults SplitGoodsByCmdParams(GameClient client, TMSKSocket socket, int nID, int roleID, int id, int site, int goodsID, int newNum, bool sendErroMsg = true)
        {
            TCPManager tcpMgr = Global._TCPManager;
            TCPClientPool tcpClientPool = Global._TCPManager.tcpClientPool;
            TCPOutPacketPool pool = Global._TCPManager.TcpOutPacketPool;

            newNum = Global.GMax(newNum, 1); //防止刷出0个数的数据库物品, 会被外挂利用，复制临时的物品使用。

            //判断物品是否存在?
            GoodsData goodsData1 = null;
            if (site == 0)
            {
                goodsData1 = Global.GetGoodsByDbID(client, id);
            }
            else if (site == (int)SaleGoodsConsts.PortableGoodsID)
            {
                goodsData1 = Global.GetPortableGoodsDataByDbID(client, id);
            }

            if (null == goodsData1)
            {
                if (sendErroMsg)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("定位物品对象1失败, CMD={0}, Client={1}, RoleID={2}, GoodsDbID={3}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, id));
                }

                return TCPProcessCmdResults.RESULT_OK;
            }

            if (goodsData1.GoodsID != goodsID)
            {
                if (sendErroMsg)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("监测到复制物品的操作立即断开, CMD={0}, Client={1}, RoleID={2}, GoodsDbID={3}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, id));
                }

                return TCPProcessCmdResults.RESULT_FAILED;
            }

            if (Global.IsTimeLimitGoods(goodsData1))
            {
                // 显示物品不可拆分 chenjingui. 2015-06-08
                return TCPProcessCmdResults.RESULT_OK;
            }

            //拆分的个数不能超过物品的个数
            if (newNum >= goodsData1.GCount)
            {
                return TCPProcessCmdResults.RESULT_OK;
            }

            int gridNum = Global.GetGoodsGridNumByID(goodsID);

            //不做任何处理
            if (gridNum <= 1)
            {
                return TCPProcessCmdResults.RESULT_OK;
            }

            int usingNum = Global.GetGoodsUsingNum(goodsID);

            //不做任何处理
            if (usingNum > 1)
            {
                return TCPProcessCmdResults.RESULT_OK;
            }

            if (site == 0) //背包
            {
                //判断背包是否够用
                if (!Global.CanAddGoods(client, goodsID, newNum, goodsData1.Binding, Global.ConstGoodsEndTime, false))
                {
                    if (sendErroMsg)
                    {
                        /// 通知在线的对方(不限制地图)个人紧要消息
                        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, Global.GetLang("背包已满，请先清理出空格后再拆分"), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.NoBagGrid);
                    }

                    return TCPProcessCmdResults.RESULT_OK;
                }
            }
            else if (site == (int)SaleGoodsConsts.PortableGoodsID) //移动仓库
            {
                //判断背包是否够用
                if (!Global.CanPortableAddGoods(client, goodsID, newNum, goodsData1.Binding))
                {
                    if (sendErroMsg)
                    {
                        /// 通知在线的对方(不限制地图)个人紧要消息
                        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, Global.GetLang("移动仓库已满，请先清理出空格后再拆分"), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    }

                    return TCPProcessCmdResults.RESULT_OK;
                }
            }

            string strcmd = "";

            //向DBServer请求修改物品2
            string[] dbFields = null;
            strcmd = Global.FormatUpdateDBGoodsStr(roleID, id, "*", "*", "*", "*", "*", "*", "*", goodsData1.GCount - newNum, "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*"); // 卓越一击 [12/13/2013 LiaoWei] 装备转生
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, (int)TCPGameServerCmds.CMD_DB_UPDATEGOODS_CMD, strcmd, out dbFields, client.ServerId);
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                return TCPProcessCmdResults.RESULT_OK;
            }

            if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
            {
                return TCPProcessCmdResults.RESULT_OK;
            }

            goodsData1.GCount -= newNum;

            //写入角色物品的得失行为日志(扩展)
            Global.ModRoleGoodsEvent(client, goodsData1, -newNum, "物品拆分");
            EventLogManager.AddGoodsEvent(client, OpTypes.AddOrSub, OpTags.None, goodsData1.GoodsID, goodsData1.Id, -newNum, goodsData1.GCount, "物品拆分");

            //向客户端发送修改物品个数的指令
            GameManager.ClientMgr.NotifyModGoods(tcpMgr.MySocketListener, pool, client, (int)ModGoodsTypes.ModValue, goodsData1.Id, goodsData1.Using, goodsData1.Site, goodsData1.GCount, goodsData1.BagIndex, 0);

            //想DBServer请求加入某个新的物品到背包中
            int dbRet = Global.AddGoodsDBCommand(pool, client, goodsID, newNum, 0, "", 0, goodsData1.Binding, goodsData1.Site, "", false, 0, "物品拆分", goodsData1.Endtime);
            if (dbRet < 0)
            {
                if (sendErroMsg)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("拆分物品时, 拆分生成新物品失败, CMD={0}, Client={1}, RoleID={2}, GoodsDbID={3}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, id));
                }
            }

            return TCPProcessCmdResults.RESULT_OK;
        }

        public static bool CanOpenPortableBag(GameClient client)
        {
            VIPDataInfo data;
            if (Data.VIPDataInfoList.TryGetValue(VIPEumValue.VIPENUMVALUE_OpenPortableBag, out data))
            {
                if (client.ClientData.VipLevel < data.VIPlev && Global.GetTwoPointDistanceSquare(client.CurrentPos, client.ClientData.OpenPortableBagPoint) > 900 * 900)
                {
                    return false;
                }
            }

            return true;
        }

        /// <summary>
        /// 根据参数命令修改物品，包括物品的 摧毁，丢弃，装备，卸除装备等,参数个数必须是冒号隔开的9个数 装备/卸下
        /// </summary>
        /// <param name="fields"></param>
        public static TCPProcessCmdResults ModifyGoodsByCmdParams(GameClient client, String cmdData)
        {
            //解析用户名称和用户密码
            string[] fields = cmdData.Split(':');
            if (fields.Length != 9)
            {
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            int roleID = Convert.ToInt32(fields[0]);
            int modType = Convert.ToInt32(fields[1]);
            int id = Convert.ToInt32(fields[2]);
            int goodsID = Convert.ToInt32(fields[3]);
            int isusing = Convert.ToInt32(fields[4]);
            int site = Convert.ToInt32(fields[5]);
            int gcount = Convert.ToInt32(fields[6]);
            int bagindex = Convert.ToInt32(fields[7]); // 装备栏格子索引
            String extraParams = fields[8];//额外参数字段，对于某些修改，可能需要额外参数，比如丢弃物品,需要目标点位置格子坐标

            //int nID = (int)TCPGameServerCmds.CMD_SPR_MOD_GOODS;
            TCPOutPacketPool pool = Global._TCPManager.TcpOutPacketPool;
            TCPClientPool tcpClientPool = Global._TCPManager.tcpClientPool;
            TCPManager tcpMgr = Global._TCPManager;
            TMSKSocket socket = client.ClientSocket;

            GoodsData goodsData = null;
            do
            {
                //从时装装备栏查找物品
                goodsData = FashionManager.GetFashionGoodsDataByDbID(client, id);
                if (null != goodsData)
                    break;

                //从背包中查找物品
                goodsData = Global.GetGoodsByDbID(client, id);
                if (null != goodsData)
                    break;

                //从移动仓库中查找物品
                goodsData = Global.GetPortableGoodsDataByDbID(client, id);
                if (null != goodsData)
                    break;

                //从金蛋仓库中查找物品
                goodsData = Global.GetJinDanGoodsDataByDbID(client, id);
                if (null != goodsData)
                    break;

                //从精灵栏查找物品
                goodsData = DamonMgr.GetDamonGoodsDataByDbID(client, id);
                if (null != goodsData)
                    break;

                //从精灵背包查找物品
                goodsData = CallPetManager.GetPetByDbID(client, id);
                if (null != goodsData)
                    break;

            } while (false);
            if (null == goodsData)
            {
                return TCPProcessCmdResults.RESULT_OK;
            }

            if (goodsData.GoodsID != goodsID)
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("监测到复制物品的操作立即断开, CMD={0}, Client={1}, RoleID={2}", TCPGameServerCmds.CMD_SPR_MOD_GOODS, Global.GetSocketRemoteEndPoint(socket), roleID));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            if (modType == (int)ModGoodsTypes.SaleToNpc && (goodsData.Site != 0 || goodsData.Using > 0))
            {
                //只有背包中的且未装备物品才能出售,客户端已经有提示，只有外挂才会执行到这
                LogManager.WriteLog(LogTypes.Error, string.Format("检测到出售装备物品或者仓库物品, CMD={0}, Client={1}, RoleID={2}", TCPGameServerCmds.CMD_SPR_MOD_GOODS, Global.GetSocketRemoteEndPoint(socket), roleID));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            int oldGoodsNum = goodsData.GCount;

            //如果物品数量变大，说明是在作弊，直接断开连接
            //2011-12-01添加，发现客户端传出的gcount 会小于服务器点，而且，客户端不允许直接改小物品的数量，所以禁止数量的操作
            if (gcount != goodsData.GCount)
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("不能直接使用命令修改物品对象数量的大小, CMD={0}, Client={1}, RoleID={2}, GoodsID={3}", TCPGameServerCmds.CMD_SPR_MOD_GOODS, Global.GetSocketRemoteEndPoint(socket), roleID, goodsID));
                return TCPProcessCmdResults.RESULT_OK;
            }

            if (modType == (int)ModGoodsTypes.Abandon || modType == (int)ModGoodsTypes.Destroy || modType == (int)ModGoodsTypes.SaleToNpc)
            {
                if (modType == (int)ModGoodsTypes.Abandon)
                {
                    EventLogManager.AddGoodsEvent(client, OpTypes.AddOrSub, OpTags.None, goodsData.GoodsID, goodsData.Id, -goodsData.GCount, 0, "丢弃物品");
                }
                else if (modType == (int)ModGoodsTypes.Destroy)
                {
                    EventLogManager.AddGoodsEvent(client, OpTypes.AddOrSub, OpTags.None, goodsData.GoodsID, goodsData.Id, -goodsData.GCount, 0, "回收物品");
                }
                else if (modType == (int)ModGoodsTypes.SaleToNpc)
                {
                    EventLogManager.AddGoodsEvent(client, OpTypes.AddOrSub, OpTags.None, goodsData.GoodsID, goodsData.Id, -goodsData.GCount, 0, "回收物品");
                }

                gcount = 0;
            }

            //如果要修改的数据和服务器端全部相等，则返回不处理，因为无任何处理的意义
            //外怪通过这个可以刷出 攻击力，暴击等, 就是重复装备物品
            if (isusing == goodsData.Using && site == goodsData.Site && gcount == goodsData.GCount && bagindex == goodsData.BagIndex)
            {
                //冲正客户端的数据
                GameManager.ClientMgr.NotifyModGoods(Global._TCPManager.MySocketListener, pool,
                    client, (int)ModGoodsTypes.ModValue, goodsData.Id, goodsData.Using, goodsData.Site, goodsData.GCount, goodsData.BagIndex, 0);
                return TCPProcessCmdResults.RESULT_OK;
            }

            //如果是改变存储位置，则一定要保证Using不能大于0
            if (site != goodsData.Site)
            {
                if (isusing > 0)
                    return TCPProcessCmdResults.RESULT_OK;   
            }

            //是否更新装备
            bool updateEquip = (modType >= (int)ModGoodsTypes.EquipLoad && modType <= (int)ModGoodsTypes.EquipUnload);
            bool isUsingChanged = (isusing != goodsData.Using);

            //如果是更新装备的操作
            if (updateEquip)
            {
                //如果使用标志没有发生变化，则说明是外挂操作，或者是重复的双击操作(网络延时的情况下会出现)
                if (!isUsingChanged)
                {
                    //冲正客户端的数据
                    GameManager.ClientMgr.NotifyModGoods(Global._TCPManager.MySocketListener, pool,
                        client, (int)ModGoodsTypes.ModValue, goodsData.Id, goodsData.Using, goodsData.Site, goodsData.GCount, goodsData.BagIndex, 0);

                    return TCPProcessCmdResults.RESULT_OK;//判断过程中已经有错误提示了
                }
            }

            //如果是装备物品，判断物品是否可以装备[根据ToType 和 ToSex等]
            if (modType == (int)ModGoodsTypes.EquipLoad)
            {
                //能否佩戴装备
                if (!client.UsingEquipMgr.CanUsingEquip(client, goodsData, bagindex, true))
                {
                    //冲正客户端的数据
                    GameManager.ClientMgr.NotifyModGoods(Global._TCPManager.MySocketListener, pool,
                        client, (int)ModGoodsTypes.ModValue, goodsData.Id, goodsData.Using, goodsData.Site, goodsData.GCount, goodsData.BagIndex, 0);

                    return TCPProcessCmdResults.RESULT_OK;//判断过程中已经有错误提示了
                }

                // 属性改造 去掉 负重[8/15/2013 LiaoWei]
                //是否能佩戴装备物品(判断腕力或者佩戴负重是否足够)
                /*if (Global.CanUsingGoodsWeight(client, goodsData, true) < 0)
                {
                    //冲正客户端的数据
                    GameManager.ClientMgr.NotifyModGoods(Global._TCPManager.MySocketListener, pool,
                        client, (int)ModGoodsTypes.ModValue, goodsData.Id, goodsData.Using, goodsData.Site, goodsData.GCount, goodsData.BagIndex, 0);

                    return TCPProcessCmdResults.RESULT_OK;//判断过程中已经有错误提示了
                }*/

                if (!Global.CanUseGoods(client, goodsData.GoodsID, true, true))
                {
                    //冲正客户端的数据
                    GameManager.ClientMgr.NotifyModGoods(Global._TCPManager.MySocketListener, pool,
                        client, (int)ModGoodsTypes.ModValue, goodsData.Id, goodsData.Using, goodsData.Site, goodsData.GCount, goodsData.BagIndex, 0);

                    return TCPProcessCmdResults.RESULT_OK;//判断过程中已经有错误提示了
                }

                // 宠物出战恶意操作限制
                if (goodsData.Site == (int)SaleGoodsConsts.UsingDemonGoodsID)
                {
                    if (CreateRoleLimitManager.Instance().SpriteFightSlotTicks > 0 &&
                        TimeUtil.NOW() - client.ClientData._SpriteFightTicks < CreateRoleLimitManager.Instance().SpriteFightSlotTicks)
                    {
                        // 返回错误信息
                        GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                            StringUtil.substitute(Global.GetLang("您操作过快，请稍后再试")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                        //冲正客户端的数据
                        GameManager.ClientMgr.NotifyModGoods(Global._TCPManager.MySocketListener, pool,
                            client, (int)ModGoodsTypes.ModValue, goodsData.Id, goodsData.Using, goodsData.Site, goodsData.GCount, goodsData.BagIndex, 0);

                        return TCPProcessCmdResults.RESULT_OK;
                    }
                    client.ClientData._SpriteFightTicks = TimeUtil.NOW();
                }
            }

            //string strcmd = "";
            SCModGoods scData = null;
            if (gcount > 0)
            {
                if (goodsData.Site == site) //位置没有改变
                {
                    if (!updateEquip) //非佩戴操作
                    {
                        if (0 == site) //如果是背包中的，才计算
                        {
                            if (goodsData.GCount < oldGoodsNum)
                            {
                                // 属性改造 去掉 负重[8/15/2013 LiaoWei]                                //刷新重量
                                //Global.UpdateGoodsWeight(client, goodsData, oldGoodsNum - goodsData.GCount, false, false);
                            }
                        }
                    }
                    else if (updateEquip && isUsingChanged && modType == (int)ModGoodsTypes.EquipUnload) // 从身上到背包 [7/30/2014 LiaoWei]
                    {
                        int nCategories = Global.GetGoodsCatetoriy(goodsData.GoodsID);
                        if (nCategories >= (int)ItemCategories.ShouHuChong && nCategories <= (int)ItemCategories.ChongWu)
                        {
                            //精灵装备后还精灵栏，不需要处理。
                        }
                        else if(nCategories == (int)ItemCategories.ShiZhuang)
                        {
                            // 时装卸载，不需要处理。
                        }
                        else
                        {
                            // 之前 装备卸载 如果背包没有格子 都是客户端判断并拦截的 现在服务器也做判断 如果没有格子 返回错误码[7/30/2014 LiaoWei]
                            if (!CanAddGoods(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding))
                            {
                                scData = new SCModGoods(-1000, modType, id, isusing, site, gcount, bagindex, 0);
                                client.sendCmd((int)TCPGameServerCmds.CMD_SPR_MOD_GOODS, scData);

                                return TCPProcessCmdResults.RESULT_OK;
                            }
                            bagindex = GetIdleSlotOfBagGoods(client);
                        }
                    }

                    goodsData.Using = isusing;
                    goodsData.GCount = gcount;
                    goodsData.BagIndex = bagindex;
                }
                else
                {
                    if (goodsData.Site == 0 && site == (int)SaleGoodsConsts.PortableGoodsID) //原来在背包, 现在到仓库
                    {
                        if (!Global.CanOpenPortableBag(client))
                        {
                            GameManager.ClientMgr.NotifyHintMsg(client, Global.GetLang("请重新打开仓库！"));
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        bagindex = GetIdleSlotOfPortableGoods(client);

                        Global.RemoveGoodsData(client, goodsData);

                        goodsData.Site = site;
                        Global.AddPortableGoodsData(client, goodsData);

                        // 属性改造 去掉 负重[8/15/2013 LiaoWei]                        //刷新重量
                        //Global.UpdateGoodsWeight(client, goodsData, goodsData.GCount, false, false);
                    }
                    else if (goodsData.Site == 0 && site == (int)SaleGoodsConsts.UsingDemonGoodsID) //原来在背包, 现在到精灵装备栏
                    {
                        if (!DamonMgr.CanAddGoodsToDamonCangKu(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, goodsData.Starttime, false))
                        {
                            //strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", -4, modType, id, isusing, site, gcount, bagindex, 0);
                            //GameManager.ClientMgr.SendToClient(client, strcmd, nID);

                            scData = new SCModGoods(-4, modType, id, isusing, site, gcount, bagindex, 0);
                            client.sendCmd((int)TCPGameServerCmds.CMD_SPR_MOD_GOODS, scData);

                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        bagindex = GetIdleSlotOfDamonGoods(client);

                        Global.RemoveGoodsData(client, goodsData);
                        DamonMgr.AddDamonGoodsData(client, goodsData);
                        goodsData.Site = site;
                        goodsData.BagIndex = bagindex;

                        GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.GetSpriteCountBuleUp));
                        GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.GetSpriteCountPurpleUp));

                        PetSkillManager.UpdateRolePetSkill(client);

                        // 属性改造 去掉 负重[8/15/2013 LiaoWei]                      //刷新重量
                        //Global.UpdateGoodsWeight(client, goodsData, goodsData.GCount, false, false);
                    }
                    else if (goodsData.Site == (int)SaleGoodsConsts.JinDanGoodsID && site == 0) //原来在金蛋仓库, 现在到背包
                    {
                        // 先判断是否能取到背包中(客户端也有判断) 然后检索到背包中剩余的格子 [7/24/2014 LiaoWei]
                        if (!CanAddGoods(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding))
                        {
                            //strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", -3, modType, id, isusing, site, gcount, bagindex, 0);
                            //GameManager.ClientMgr.SendToClient(client, strcmd, nID);

                            scData = new SCModGoods(-3, modType, id, isusing, site, gcount, bagindex, 0);
                            client.sendCmd((int)TCPGameServerCmds.CMD_SPR_MOD_GOODS, scData);

                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        bagindex = GetIdleSlotOfBagGoods(client);

                        Global.RemoveJinDanGoodsData(client, goodsData);
                        goodsData.Site = site;
                        Global.AddGoodsData(client, goodsData);

                        // 刷新重量 // 属性改造 去掉 负重[8/15/2013 LiaoWei]
                        //Global.UpdateGoodsWeight(client, goodsData, goodsData.GCount, true, false);
                    }
                    else if (goodsData.Site == (int)SaleGoodsConsts.UsingDemonGoodsID && site == 0) //原来精灵装备栏, 现在到背包
                    {
                        // 先判断是否能取到背包中(客户端也有判断) 然后检索到背包中剩余的格子 [7/24/2014 LiaoWei]
                        if (!CanAddGoods(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding))
                        {
                            //strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", -3, modType, id, isusing, site, gcount, bagindex, 0);
                            //GameManager.ClientMgr.SendToClient(client, strcmd, nID);

                            scData = new SCModGoods(-3, modType, id, isusing, site, gcount, bagindex, 0);
                            client.sendCmd((int)TCPGameServerCmds.CMD_SPR_MOD_GOODS, scData);

                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        bagindex = GetIdleSlotOfBagGoods(client);

                        DamonMgr.RemoveDamonGoodsData(client, goodsData);
                        goodsData.Site = site;
                        Global.AddGoodsData(client, goodsData);

                        GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.GetSpriteCountBuleUp));
                        GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.GetSpriteCountPurpleUp));

                        PetSkillManager.UpdateRolePetSkill(client);

                        // 刷新重量 // 属性改造 去掉 负重[8/15/2013 LiaoWei]
                        //Global.UpdateGoodsWeight(client, goodsData, goodsData.GCount, true, false);
                    }
                    else if (goodsData.Site != (int)SaleGoodsConsts.JinDanGoodsID && site == (int)SaleGoodsConsts.JinDanGoodsID) //原来在在其他地方, 现在到金蛋仓库===>这个操作不允许
                    {
                        ;//单独的指令处理
                    }
                    else if (goodsData.Site == 0 && site < 0) //原来在背包, 现在到出售列表
                    {
                        ;//单独的指令处理
                    }
                    else if (goodsData.Site == (int)SaleGoodsConsts.PortableGoodsID && site == 0) //原来在仓库, 现在到背包
                    {
                        if (!Global.CanOpenPortableBag(client))
                        {
                            GameManager.ClientMgr.NotifyHintMsg(client, Global.GetLang("请重新打开仓库！"));
                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        // 先判断是否能取到背包中(客户端也有判断) 然后检索到背包中剩余的格子 [7/24/2014 LiaoWei]
                        if (!CanAddGoods(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding))
                        {
                            //strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", -3, modType, id, isusing, site, gcount, bagindex, 0);
                            //GameManager.ClientMgr.SendToClient(client, strcmd, nID);

                            scData = new SCModGoods(-3, modType, id, isusing, site, gcount, bagindex, 0);
                            client.sendCmd((int)TCPGameServerCmds.CMD_SPR_MOD_GOODS, scData);

                            return TCPProcessCmdResults.RESULT_OK;
                        }

                        bagindex = GetIdleSlotOfBagGoods(client);

                        Global.RemovePortableGoodsData(client, goodsData);
                        goodsData.Site = site;
                        Global.AddGoodsData(client, goodsData);

                        // 刷新重量 // 属性改造 去掉 负重[8/15/2013 LiaoWei]
                        //Global.UpdateGoodsWeight(client, goodsData, goodsData.GCount, true, false);
                    }
                    else if (goodsData.Site == (int)SaleGoodsConsts.PetBagGoodsID && site == 0) //原来在精灵仓库, 现在到背包
                    {
                        // 先判断是否能取到背包中(客户端也有判断) 然后检索到背包中剩余的格子 [7/24/2014 LiaoWei]
                        if (!CanAddGoods(client, goodsData.GoodsID, goodsData.GCount, goodsData.Binding))
                            return TCPProcessCmdResults.RESULT_OK;

                        bagindex = GetIdleSlotOfBagGoods(client);

                        CallPetManager.RemovePetGoodsData(client, goodsData);
                        goodsData.Site = site;
                        Global.AddGoodsData(client, goodsData);

                        // 属性改造 去掉 负重[8/15/2013 LiaoWei]                        //刷新重量
                        //Global.UpdateGoodsWeight(client, goodsData, goodsData.GCount, true, false);
                    }
                    else if (goodsData.Site == 0 && site == (int)SaleGoodsConsts.FashionGoods) // 原来在背包，现在到时装装备栏
                    {
                        if(goodsData.GCount != 1) // 限制激活数量
                            return TCPProcessCmdResults.RESULT_OK;

                        // 是否可以激活时装
                        if (!FashionManager.getInstance().FashionCanActive(client, goodsData))
                            return TCPProcessCmdResults.RESULT_OK;

                        Global.RemoveGoodsData(client, goodsData);
                        goodsData.Site = site;
                        FashionManager.getInstance().AddFashionGoodsData(client, goodsData);
                    }
                    else if (goodsData.Site < 0 && site == 0) //原来在出售列表, 现在到背包
                    {
                        ;//单独的指令处理
                    }

                    goodsData.Using = isusing;
                    goodsData.GCount = gcount;
                    goodsData.BagIndex = bagindex;
                }
            }
            else
            {
                //删除物品作为回收物品处理，用户可以得到半价
                int totalPrice = Global.GetGoodsDataPrice(goodsData);//取物品项(数量可能大于1)的价格
                if (totalPrice > 0 && modType == (int)ModGoodsTypes.SaleToNpc)//只有卖给npc时玩家才能得到部分铜钱或者绑定铜钱【是装备是否绑定】
                {
                    if (goodsData.Binding > 0)
                    {
                        GameManager.ClientMgr.AddMoney1(tcpMgr.MySocketListener, tcpClientPool, pool, client, totalPrice, "回收物品");
                    }
                    else
                    {
                        GameManager.ClientMgr.AddUserYinLiang(tcpMgr.MySocketListener, tcpClientPool, pool, client, totalPrice, "回收物品");
                    }
                }

                if (goodsData.Site == 0)
                {
                    // 刷新重量 // 属性改造 去掉 负重[8/15/2013 LiaoWei]
                    //Global.UpdateGoodsWeight(client, goodsData, goodsData.GCount, false, false);
                }

                if (goodsData.Site == (int)SaleGoodsConsts.PetBagGoodsID)
                {
                    CallPetManager.RemovePetGoodsData(client, goodsData);
                }
                else if (goodsData.Site == (int)SaleGoodsConsts.FashionGoods)
                {
                    FashionManager.getInstance().RemoveFashionGoodsData(client, goodsData);
                }
                else
                {
                    goodsData.GCount = 0;
                    if (!Global.RemoveGoodsData(client, goodsData))
                    {
                        Global.RemovePortableGoodsData(client, goodsData);
                    }
                }
            }

            // 把存盘滞后, 因为bagindex要被先确定才能存... [7/25/2014 LiaoWei]
            string[] dbFields = null; // 向DBServer请求修改物品
            string strcmd = Global.FormatUpdateDBGoodsStr(roleID, id, isusing, "*", "*", "*", site, "*", "*", gcount, "*", bagindex, "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*"); // 卓越信息 [12/13/2013 LiaoWei] 装备转生
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(tcpClientPool, pool, (int)TCPGameServerCmds.CMD_DB_UPDATEGOODS_CMD, strcmd, out dbFields, client.ServerId);
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                //strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", -1, modType, id, isusing, site, gcount, bagindex, 0);
                //GameManager.ClientMgr.SendToClient(client, strcmd, nID);

                scData = new SCModGoods(-1, modType, id, isusing, site, gcount, bagindex, 0);
                client.sendCmd((int)TCPGameServerCmds.CMD_SPR_MOD_GOODS, scData);

                return TCPProcessCmdResults.RESULT_OK;
            }

            if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
            {
                //strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", -2, modType, id, isusing, site, gcount, bagindex, 0);
                //GameManager.ClientMgr.SendToClient(client, strcmd, nID);

                scData = new SCModGoods(-2, modType, id, isusing, site, gcount, bagindex, 0);
                client.sendCmd((int)TCPGameServerCmds.CMD_SPR_MOD_GOODS, scData);

                return TCPProcessCmdResults.RESULT_OK;
            }

            if (modType == (int)ModGoodsTypes.EquipUnload)
            {
                //记录角色装备穿戴判断需要用的基础战斗属性 这次记录主要用于切换装备时的装备限制属性判断
                //卸载前记录，穿戴时判断，穿戴后记录
                Global.ResetBaseBattleAttributesOfLastTime(client);
            }

            //写入角色物品的得失行为日志(扩展)
            Global.ModRoleGoodsEvent(client, goodsData, goodsData.GCount - oldGoodsNum, "客户端修改");
            EventLogManager.AddGoodsEvent(client, OpTypes.Forge, OpTags.None, goodsData.GoodsID, goodsData.Id, 0, goodsData.GCount, "客户端修改");

            if (updateEquip)
            {
                // 刷新重量 // 属性改造 去掉 负重[8/15/2013 LiaoWei]
                //Global.UpdateGoodsWeight(client, goodsData, goodsData.GCount, (modType == (int)ModGoodsTypes.EquipLoad), updateEquip); //处理佩戴负重

                // 刷新重量
                //Global.UpdateGoodsWeight(client, goodsData, goodsData.GCount, !(modType == (int)ModGoodsTypes.EquipLoad), false); //处理背包负重
            }

            //是否更新装备属性
            if (updateEquip && isUsingChanged)
            {
                //刷新装备
                client.UsingEquipMgr.RefreshEquip(goodsData);

                //重新计算装备的合成属性
                if (Global.RefreshEquipProp(client, goodsData))
                {
                    //通知客户端属性变化
                    GameManager.ClientMgr.NotifyUpdateEquipProps(tcpMgr.MySocketListener, pool, client);

                    // 总生命值和魔法值变化通知(同一个地图才需要通知)
                    GameManager.ClientMgr.NotifyOthersLifeChanged(tcpMgr.MySocketListener, pool, client);
                }

                /// 通知更换衣服和武器代码(当物品变化时)
                Global.NotifyChangeEquip(tcpMgr, pool, client, goodsData, 1);

                //[bing] 刷新客户端活动叹号
                bool bFlush = false;
                bFlush = bFlush | client._IconStateMgr.CheckJieRiFanLi(client, ActivityTypes.JieriStrengthen);
                bFlush = bFlush | client._IconStateMgr.CheckJieRiFanLi(client, ActivityTypes.JieriAddon);
                bFlush = bFlush | client._IconStateMgr.CheckJieRiFanLi(client, ActivityTypes.JieriArchangel);
                bFlush = bFlush | client._IconStateMgr.CheckJieRiFanLi(client, ActivityTypes.JieriAmulet);

                if (bFlush == true)
                {
                    client._IconStateMgr.AddFlushIconState((ushort)ActivityTipTypes.JieRiActivity, client._IconStateMgr.IsAnyJieRiTipActived());
                    client._IconStateMgr.SendIconStateToClient(client);
                }

                // 七日活动
                GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.PeiDaiBlueUp));
                GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.PeiDaiPurpleUp));
                GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.PeiDaiAppendEquip));
                GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.PeiDaiForgeEquip));
                GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.PeiDaiSuitEquipLevel));
                GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.PeiDaiSuitEquipCount));

                PetSkillManager.UpdateRolePetSkill(client);
            }
            else
            {
                //重量属性更新通知
                GameManager.ClientMgr.NotifyUpdateWeights(tcpMgr.MySocketListener, pool, client);
            }

            if (modType == (int)ModGoodsTypes.EquipLoad)
            {
                //记录角色装备穿戴判断需要用的基础战斗属性 这次记录主要用于切换装备时的装备限制属性判断
                //卸载前记录，穿戴时判断，穿戴后记录
                Global.ResetBaseBattleAttributesOfLastTime(client);
            }

            //如果是丢弃物品，拦截给global处理
            if (modType == (int)ModGoodsTypes.Abandon)
            {
                String[] xyArr = extraParams.Split('_');
                int toGridX = (int)client.CurrentGrid.X;
                int toGridY = (int)client.CurrentGrid.Y;

                if (2 == xyArr.Length)
                {
                    toGridX = Global.SafeConvertToInt32(xyArr[0]);
                    toGridY = Global.SafeConvertToInt32(xyArr[1]);
                }

                goodsData.GCount = oldGoodsNum;

                //如果丢弃成功，则直接简单返回，否则执行物品摧毁操作
                Global.AbandonGoods(client, goodsData, toGridX, toGridY);
            }

            //strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", 0, modType, id, isusing, site, gcount, bagindex, 0);
            //GameManager.ClientMgr.SendToClient(client, strcmd, nID);

            scData = new SCModGoods(0, modType, id, isusing, site, gcount, bagindex, 0);
            client.sendCmd((int)TCPGameServerCmds.CMD_SPR_MOD_GOODS, scData);

            return TCPProcessCmdResults.RESULT_OK;
        }

        /// <summary>
        /// 返回包裹中的空闲位置
        /// </summary>
        /// <param name="dbRoleInfo"></param>
        /// <returns></returns>
        public static int GetIdleSlotOfBagGoods(GameClient client)
        {
            int idelPos = 0;

            if (null == client.ClientData.GoodsDataList) return idelPos;

            List<int> usedBagIndex = new List<int>();

            for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
            {
                if (client.ClientData.GoodsDataList[i].Site == 0 && client.ClientData.GoodsDataList[i].Using <= 0)
                {
                    if (usedBagIndex.IndexOf(client.ClientData.GoodsDataList[i].BagIndex) < 0)
                    {
                        usedBagIndex.Add(client.ClientData.GoodsDataList[i].BagIndex);
                    }
                }
            }

            for (int n = 0; n < client.ClientData.BagNum; n++)
            {
                if (usedBagIndex.IndexOf(n) < 0)
                {
                    idelPos = n;
                    break;
                }
            }

            return idelPos;
        }

        /// <summary>
        /// 返回包裹中的空闲位置
        /// </summary>
        /// <param name="dbRoleInfo"></param>
        /// <returns></returns>
        public static int GetIdleSlotOfJinDanGoods(GameClient client)
        {
            int idelPos = 0;

            if (null == client.ClientData.JinDanGoodsDataList) return idelPos;

            List<int> usedBagIndex = new List<int>();

            for (int i = 0; i < client.ClientData.JinDanGoodsDataList.Count; i++)
            {
                if (client.ClientData.JinDanGoodsDataList[i].Site == 0 && client.ClientData.JinDanGoodsDataList[i].Using <= 0)
                {
                    if (usedBagIndex.IndexOf(client.ClientData.JinDanGoodsDataList[i].BagIndex) < 0)
                    {
                        usedBagIndex.Add(client.ClientData.JinDanGoodsDataList[i].BagIndex);
                    }
                }
            }

            for (int n = 0; n < Global.GetJinDanBagCapacity(client); n++)
            {
                if (usedBagIndex.IndexOf(n) < 0)
                {
                    idelPos = n;
                    break;
                }
            }

            return idelPos;
        }

        /// <summary>
        /// 返回精灵栏中的空闲位置
        /// </summary>
        /// <param name="dbRoleInfo"></param>
        /// <returns></returns>
        public static int GetIdleSlotOfDamonGoods(GameClient client)
        {
            int idelPos = 0;

            if (null == client.ClientData.DamonGoodsDataList) return idelPos;

            List<int> usedBagIndex = new List<int>();

            for (int i = 0; i < client.ClientData.DamonGoodsDataList.Count; i++)
            {
                if (client.ClientData.DamonGoodsDataList[i].Site == (int)SaleGoodsConsts.UsingDemonGoodsID)
                {
                    if (usedBagIndex.IndexOf(client.ClientData.DamonGoodsDataList[i].BagIndex) < 0)
                    {
                        usedBagIndex.Add(client.ClientData.DamonGoodsDataList[i].BagIndex);
                    }
                }
            }

            int nCapacity = DamonMgr.GetDamonBagCapacity(client);
            for (int n = 0; n < nCapacity; n++)
            {
                if (usedBagIndex.IndexOf(n) < 0)
                {
                    idelPos = n;
                    break;
                }
            }

            return idelPos;
        }

        /// <summary>
        /// 返回包裹中的空闲位置
        /// </summary>
        /// <param name="dbRoleInfo"></param>
        /// <returns></returns>
        public static int GetIdleSlotOfPortableGoods(GameClient client)
        {
            int idelPos = 0;

            if (null == client.ClientData.PortableGoodsDataList) return idelPos;

            List<int> usedBagIndex = new List<int>();

            for (int i = 0; i < client.ClientData.PortableGoodsDataList.Count; i++)
            {
                if (client.ClientData.PortableGoodsDataList[i].Site == -1000 && client.ClientData.PortableGoodsDataList[i].Using <= 0)
                {
                    if (usedBagIndex.IndexOf(client.ClientData.PortableGoodsDataList[i].BagIndex) < 0)
                    {
                        usedBagIndex.Add(client.ClientData.PortableGoodsDataList[i].BagIndex);
                    }
                }
            }

            for (int n = 0; n < Global.GetPortableBagCapacity(client); n++)
            {
                if (usedBagIndex.IndexOf(n) < 0)
                {
                    idelPos = n;
                    break;
                }
            }

            return idelPos;
        }
        #endregion 物品管理

        #region 物品使用限制管理

        /// <summary>
        /// 从物品限制列表中查找指定的物品
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static GoodsLimitData GetGoodsLimitByID(GameClient client, int goodsID)
        {
            if (null == client.ClientData.GoodsLimitDataList) return null;

            lock (client.ClientData.GoodsLimitDataList)
            {
                for (int i = 0; i < client.ClientData.GoodsLimitDataList.Count; i++)
                {
                    if (client.ClientData.GoodsLimitDataList[i].GoodsID == goodsID)
                    {
                        return client.ClientData.GoodsLimitDataList[i];
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 从物品限制列表中查找指定的物品的当日使用次数
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static int GetTodayGoodsLimitByID(GameClient client, int goodsID)
        {
            if (null == client.ClientData.GoodsLimitDataList) return 0;

            int usedNum = 0;
            lock (client.ClientData.GoodsLimitDataList)
            {
                for (int i = 0; i < client.ClientData.GoodsLimitDataList.Count; i++)
                {
                    if (client.ClientData.GoodsLimitDataList[i].GoodsID == goodsID)
                    {
                        int dayID = TimeUtil.NowDateTime().DayOfYear;
                        if (dayID == client.ClientData.GoodsLimitDataList[i].DayID)
                        {
                            usedNum = client.ClientData.GoodsLimitDataList[i].UsedNum;
                        }

                        break;
                    }
                }
            }

            return usedNum;
        }

        /// <summary>
        /// 物品限制列表中加入指定的物品
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static void UpdateGoodsLimitByID(GameClient client, GoodsLimitData goodsLimitData)
        {
            if (client.ClientData.GoodsLimitDataList == null)
            {
                client.ClientData.GoodsLimitDataList = new List<GoodsLimitData>();
            }

            lock (client.ClientData.GoodsLimitDataList)
            {
                int findIndex = -1;
                for (int i = 0; i < client.ClientData.GoodsLimitDataList.Count; i++)
                {
                    if (client.ClientData.GoodsLimitDataList[i].GoodsID == goodsLimitData.GoodsID)
                    {
                        findIndex = i;

                        client.ClientData.GoodsLimitDataList[i].DayID = goodsLimitData.DayID;
                        client.ClientData.GoodsLimitDataList[i].UsedNum = goodsLimitData.UsedNum;

                        break;
                    }
                }

                if (-1 == findIndex)
                {
                    client.ClientData.GoodsLimitDataList.Add(goodsLimitData);
                }
            }
        }

        /// <summary>
        /// 缓存的二锅头物品列表
        /// </summary>
        public static List<int> ErGuoTouGoodsIDList = null;

        /// <summary>
        /// 获取缓存的二锅头物品ID列表
        /// </summary>
        /// <returns></returns>
        public static List<int> GetErGuoTouGoodsIDList()
        {
            if (Global.ErGuoTouGoodsIDList != null)
            {
                return Global.ErGuoTouGoodsIDList;
            }

            int[] erGuoTouArr = GameManager.systemParamsList.GetParamValueIntArrayByName("ErGuoTouList");
            Global.ErGuoTouGoodsIDList = erGuoTouArr.ToList<int>();
            return Global.ErGuoTouGoodsIDList;
        }

        /// <summary>
        /// 角色是否有某物品的足够的每日使用次数
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static Boolean HasEnoughGoodsDayUseNum(GameClient client, int goodsID, int willUseNum = 1)
        {
            //判断物品是否有每日使用次数限制
            int dayLimitNum = Global.GetGoodsLimitNum(client, goodsID);
            if (dayLimitNum > 0)
            {
                int todayUsedNum = Global.GetTodayGoodsLimitByID(client, goodsID);

                if (todayUsedNum + willUseNum > dayLimitNum)
                {
                    String goodsName = Global.GetGoodsNameByID(goodsID);

                    //二锅头单独提示
                    List<int> erGuoTouList = Global.GetErGuoTouGoodsIDList();
                    if (erGuoTouList.IndexOf(goodsID) >= 0)
                    {
                        GameManager.LuaMgr.Error(client, StringUtil.substitute(Global.GetLang("美酒也不可贪杯喔， 每个玩家每日最多可饮{0}瓶{1}"), dayLimitNum, goodsName));
                        return false;
                    }

                    GameManager.LuaMgr.Error(client, StringUtil.substitute(Global.GetLang("{0}每日限制使用{1}次,您今日使用已达上限"), goodsName, dayLimitNum));
                    return false;
                }
                else //对于二锅头加入额外的判断
                {
                    //二锅头单独提示
                    List<int> erGuoTouList = Global.GetErGuoTouGoodsIDList();
                    if (erGuoTouList.IndexOf(goodsID) >= 0)
                    {
                        /// 获取而过头今日还可以使用的次数
                        int erGuoTouNum = Global.GetErGuoTouTodayNum(client);
                        if (erGuoTouNum + willUseNum > dayLimitNum)
                        {
                            string goodsName = Global.GetGoodsNameByID(erGuoTouList[0]);
                            GameManager.LuaMgr.Error(client, StringUtil.substitute(Global.GetLang("美酒也不可贪杯喔， 每个玩家每日最多可饮不同种类的{0}瓶{1}"), dayLimitNum, goodsName));
                            return false;
                        }
                    }
                }
            }
            return true;
        }

        /// <summary>
        /// 更新物品使用次数限制 这个函数只允许在 NotifyUseGoods()中调用一次，其它任何地方不允许调用
        /// </summary>
        /// <param name="client"></param>
        public static void AddGoodsLimitNum(GameClient client, int goodsID, int usedNum)
        {
            //获取物品的每日使用次数限制
            if (GetGoodsLimitNum(client, goodsID) <= 0)
            {
                return;
            }

            GoodsLimitData goodsLimitData = Global.GetGoodsLimitByID(client, goodsID);
            if (null == goodsLimitData)
            {
                goodsLimitData = new GoodsLimitData()
                {
                    GoodsID = goodsID,
                    DayID = TimeUtil.NowDateTime().DayOfYear,
                    UsedNum = usedNum,
                };

                UpdateGoodsLimitByID(client, goodsLimitData);
            }
            else
            {
                int dayID = TimeUtil.NowDateTime().DayOfYear;
                if (dayID != goodsLimitData.DayID)
                {
                    goodsLimitData.DayID = dayID;
                    goodsLimitData.UsedNum = usedNum;
                }
                else
                {
                    goodsLimitData.UsedNum += usedNum;
                }
            }

            //更新上线状态
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEGOODSLIMIT,
                string.Format("{0}:{1}:{2}:{3}", client.ClientData.RoleID, goodsLimitData.GoodsID, goodsLimitData.DayID, goodsLimitData.UsedNum),
                null, client.ServerId);

            //二锅头单独提示
            List<int> erGuoTouList = Global.GetErGuoTouGoodsIDList();
            if (erGuoTouList.IndexOf(goodsID) >= 0)
            {
                Global.AddErGuoTouTodayNum(client, usedNum);
            }
        }

        /// <summary>
        /// 判断是否可以使用物品
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <param name="errHint"></param>
        /// <returns></returns>
        public static Boolean CanUseGoods(GameClient client, int goodsID, bool errHint = true, bool isForEquipLoad = false)
        {
            SystemXmlItem systemGoodsItem = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoodsItem))
            {
                return false;
            }

            // 先检查职业是否对应 [XSea 2015/6/16]
            if (!Global.IsCanEquipOrUseByOccupation(client, goodsID))
                return false;

            // 插入新版限制的拦截机制 chenjingui
            string failedMsg = string.Empty;
            if (!GoodsCanUseManager.Instance().CheckCanUse_ByToType(client, goodsID, out failedMsg))
            {
                if (errHint && !string.IsNullOrEmpty(failedMsg))
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                                     failedMsg, GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                }
                return false;
            }

            //特殊的额外限制，由ToType 决定 ToTypeProperty值的意义，不同项用逗号隔开
            String toType = systemGoodsItem.GetStringValue("ToType");
            String toTypeProperty = systemGoodsItem.GetStringValue("ToTypeProperty");

            /*
               *  旧的限制类型已废弃，只有UseYuanBao，NotSageRegion， CannotBeyondLevel有效，这三种已整合到新版限制机制
               *   modify by chenjingui. 2015-06-09
               *
           //判断额外限制条件是否满足
           if (!Global.CanUseGoodsByExtraTypeProperty(client, toType, toTypeProperty, errHint, isForEquipLoad))
           {
               return false;//如果出错，判断函数内部已经有判断了
           }
             */

            //判断性别是否匹配
            int toSex = systemGoodsItem.GetIntValue("ToSex");
            if (toSex >= 0)
            {
                if (client.ClientData.RoleSex != toSex)
                {
                    string goodsName = systemGoodsItem.GetStringValue("Title");
                    string sexName = (0 == toSex) ? Global.GetLang("男性角色") : Global.GetLang("女性角色");
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(Global.GetLang("【{0}】只能被{1}使用"), goodsName, sexName), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    return false;
                }
            }

            int toChangeLifeLev = systemGoodsItem.GetIntValue("ToZhuanSheng");
            int toLevel = systemGoodsItem.GetIntValue("ToLevel");

            if (client.ClientData.ChangeLifeCount < toChangeLifeLev)
            {
                string goodsName = systemGoodsItem.GetStringValue("Title");
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(Global.GetLang("转生级别高于{0}级别才能使用{1}"), toLevel, goodsName), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.LevelNotEnough);
                return false;
            }
            else if (client.ClientData.ChangeLifeCount == toChangeLifeLev)
            {
                if (toLevel > 0)
                {
                    if (client.ClientData.Level < toLevel)
                    {
                        string goodsName = systemGoodsItem.GetStringValue("Title");
                        GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(Global.GetLang("高于{0}级别才能使用{1}"), toLevel, goodsName), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.LevelNotEnough);
                        return false;
                    }
                }
            }

            return true;
        }

        /// <summary>
        /// 通过额外属性字段判断物品是否可以被使用，EquipRequirementTypes中的各个字段共同判定
        /// modify by chenjingui.  该函数已废弃，请参考GoodsCanUseManager. 2015-06-09
        /// </summary>
        /// <param name="client"></param>
        /// <param name="toType"></param>
        /// <param name="toTypeProperty"></param>
        /// <param name="errHint"></param>
        /// <param name="isForEquipLoad"></param>
        /// <returns></returns>
        public static Boolean CanUseGoodsByExtraTypeProperty(GameClient client, String toType, String toTypeProperty, bool errHint = true, bool isForEquipLoad = false)
        {
            ///这样表示没限制
            if ("-1" == toType || toType.Length <= 0)
            {
                return true;
            }

            String[] typeArr = toType.Split(',');//多项用逗号隔开
            String[] propertyArr = toTypeProperty.Split(',');

            ///配置有错误，仍旧表示没限制
            if (typeArr.Length != propertyArr.Length)
            {
                return true;
            }

            for (int index = 0; index < typeArr.Length; index++)
            {
                String type = typeArr[index];
                String gateValue = propertyArr[index];

                // 旧版判断机制，先保留这里，满满迁移 chenjingui
                if (!IsRoleReachLimit(client, type, gateValue, isForEquipLoad))
                {
                    if (errHint)
                    {
                        // 特殊处理 等级限制的物品 [8/16/2014 LiaoWei]
                        if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.CanNotBeyondLevel))
                        {
                            GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                                                                    StringUtil.substitute(Global.GetLang("您已超过物品最大使用等级")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                        }
                        else
                        {
                            GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                                                                    StringUtil.substitute(Global.GetLang("需要{0}才能使用"), GetEquipLimitString(type, gateValue)),
                                                                        GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                        }
                    }
                    return false;
                }
            }

            return true;
        }

        /// <summary>
        /// 使用物品后处理后续动作
        /// </summary>
        /// <param name="client"></param>
        /// <param name="toType"></param>
        /// <param name="toTypeProperty"></param>
        /// <returns></returns>
        public static bool UseGoodsByExtraTypePropertyBeforeUseGoods(GameClient client, String toType, String toTypeProperty)
        {
            ///这样表示没限制
            if ("-1" == toType || toType.Length <= 0)
            {
                return true;
            }

            String[] typeArr = toType.Split(',');//多项用逗号隔开
            String[] propertyArr = toTypeProperty.Split(',');

            ///配置有错误，仍旧表示没限制
            if (typeArr.Length != propertyArr.Length)
            {
                return true;
            }

            for (int index = 0; index < typeArr.Length; index++)
            {
                String type = typeArr[index];
                String gateValue = propertyArr[index];

                if (!DoRoleReachLimitAction(client, type, gateValue))
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(Global.GetLang("需要{0}才能使用"), GetEquipLimitString(type, gateValue)), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    return false;
                }
            }

            return true;
        }

        /// <summary>
        /// 判断主角是否达到条件限制，装备方面，EquipRequirementTypes中的各个字段共同判定
        /// </summary>
        /// <param name="client"></param>
        /// <param name="type"></param>
        /// <param name="gateValue"></param>
        /// <param name="isForEquipLoad"></param>
        /// <returns></returns>
        public static Boolean IsRoleReachLimit(GameClient client, String type, String gateValue, bool isForEquipLoad = false)
        {
            if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.VIP))//判断角色是否vip
            {
                return IsVip(client);
            }
            if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.FEIANQUANQU))//判断角色是否安全区
            {
                GameMap gameMap = null;
                if (!GameManager.MapMgr.DictMaps.TryGetValue(client.ClientData.MapCode, out gameMap))
                {
                    return false;
                }

                if (null == gameMap)
                {
                    return false;
                }

                return !gameMap.InSafeRegionList(client.CurrentGrid);
            }

            // 不能超过等级限制 提前判断
            if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.CanNotBeyondLevel))
            {
                int nLimitChangeLife = 0;
                int nLimitLevel = 0;

                string[] strAarray = null;
                strAarray = gateValue.Split('|');

                if (strAarray.Length != 2)
                    return false;

                nLimitChangeLife = Global.SafeConvertToInt32(strAarray[0]);
                nLimitLevel = Global.SafeConvertToInt32(strAarray[1]);

                if (client.ClientData.ChangeLifeCount > nLimitChangeLife)
                {
                    return false;
                }
                else if (client.ClientData.ChangeLifeCount == nLimitChangeLife)
                {
                    if (client.ClientData.Level >= nLimitLevel)
                        return false;
                }
                else
                {
                    return true;
                }

                return true;
            }

            //限制值用整数值 
            int theGateValue = SafeConvertToInt32(gateValue);
            int curValue = theGateValue - 1;//===>默认都是不允许使用的,所以这儿默认限制值减少1

            if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.JinMai))//经脉需求
            {
                curValue = GameManager.ClientMgr.GetJingMaiLevelValue(client);
            }
            //最大攻击类判断一般用于装备替换时判断，由客户端判断就行，服务器不
            else if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.MaxAttack))//最大物理攻击
            {
                //对于装备穿戴判断，需要使用上一次记录的战斗属性值，因为装备的切换是先卸载装备，再穿新装备两个指令完成
                if (isForEquipLoad)
                {
                    curValue = client.ClientData.BaseBattleAttributesOfLastTime[0];
                }
                else
                {
                    curValue = (int)RoleAlgorithm.GetMaxAttackV(client);
                }
            }
            else if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.MaxMAttack))//最大魔法攻击
            {
                //对于装备穿戴判断，需要使用上一次记录的战斗属性值，因为装备的切换是先卸载装备，再穿新装备两个指令完成
                if (isForEquipLoad)
                {
                    curValue = client.ClientData.BaseBattleAttributesOfLastTime[1];
                }
                else
                {
                    curValue = (int)RoleAlgorithm.GetMaxMagicAttackV(client);
                }
            }
            else if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.MaxDSAttack))//最大道术攻击
            {
                // 属性改造 [8/15/2013 LiaoWei]
                //对于装备穿戴判断，需要使用上一次记录的战斗属性值，因为装备的切换是先卸载装备，再穿新装备两个指令完成
                /*if (isForEquipLoad)
                {
                    curValue = client.ClientData.BaseBattleAttributesOfLastTime[2];
                }
                else
                {
                    curValue = (int)RoleAlgorithm.GetMaxDSAttackV(client);
                }*/
            }
            else if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.UseYuanBao))//使用元宝
            {
                curValue = (int)client.ClientData.UserMoney;
            }
            else if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.AddIntoBH))//加入帮会
            {
                curValue = (int)client.ClientData.Faction;
            }
            else if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.WuXue))//武学重数
            {
                curValue = (int)GameManager.ClientMgr.GetWuXueLevelValue(client);
            }
            else if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.ChengJiu))//成就重数????
            {
                curValue = (int)GameManager.ClientMgr.GetChengJiuPointsValue(client);
            }
            else if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.ZhanHunLevel))//战魂等级
            {
                curValue = (int)GameManager.ClientMgr.GetZhanHunLevelValue(client);
            }
            else if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.RongYuLevel))//荣誉等级
            {
                curValue = (int)GameManager.ClientMgr.GetRongYuLevelValue(client);
            }

            return curValue >= theGateValue;
        }

        /// <summary>
        /// 判断如果达到条件，是否需要执行什么动作
        /// </summary>
        /// <param name="client"></param>
        /// <param name="type"></param>
        /// <param name="gateValue"></param>
        /// <param name="isForEquipLoad"></param>
        /// <returns></returns>
        public static Boolean DoRoleReachLimitAction(GameClient client, String type, String gateValue)
        {
            //限制值用整数值 
            int theGateValue = SafeConvertToInt32(gateValue);
            int curValue = theGateValue;

            if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.UseYuanBao))//使用元宝
            {
                return GameManager.ClientMgr.SubUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool,
                    Global._TCPManager.TcpOutPacketPool, client, Math.Max(0, curValue), "DoRoleReachLimitAction");
            }

            return true;
        }

        /// <summary>
        /// 重置角色替换装备前的基础战斗属性【最后一次的战斗属性】 主要用于装备替换条件判断
        /// 卸载前记录，穿戴时判断，穿戴后记录
        /// </summary>
        /// <param name="client"></param>
        public static void ResetBaseBattleAttributesOfLastTime(GameClient client)
        {
            client.ClientData.BaseBattleAttributesOfLastTime[0] = (int)RoleAlgorithm.GetMaxAttackV(client);
            client.ClientData.BaseBattleAttributesOfLastTime[1] = (int)RoleAlgorithm.GetMaxMagicAttackV(client);
            //client.ClientData.BaseBattleAttributesOfLastTime[2] = (int)RoleAlgorithm.GetMaxDSAttackV(client);     // 属性改造 去掉 道术攻击属性[8/15/2013 LiaoWei]
        }

        /// <summary>
        /// 返回限制字符串
        /// </summary>
        /// <param name="type"></param>
        /// <param name="gateValue"></param>
        /// <returns></returns>
        public static String GetEquipLimitString(String type, String gateValue)
        {
            if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.VIP))//判断角色是否vip
            {
                return GetLang("VIP");
            }

            String curValue = "";

            // 不能超过等级限制 提前判断
            if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.CanNotBeyondLevel))
            {
                return GetLang("您已超过物品最大使用等级");
            }

            //限制值用整数值
            int theGateValue = SafeConvertToInt32(gateValue);

            if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.JinMai))//经脉需求
            {
                curValue = StringUtil.substitute(GetLang("经脉等级{0}"), theGateValue);
            }
            else if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.MaxAttack))//最大物理攻击
            {
                curValue = StringUtil.substitute(GetLang("最大物理攻击{0}"), theGateValue);
            }
            else if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.MaxDSAttack))//最大道术攻击
            {
                curValue = StringUtil.substitute(GetLang("最大道术攻击{0}"), theGateValue);
            }
            else if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.MaxMAttack))//最大魔法攻击
            {
                curValue = StringUtil.substitute(GetLang("最大魔法攻击{0}"), theGateValue);
            }
            else if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.UseYuanBao))//使用元宝
            {
                curValue = StringUtil.substitute(GetLang("使用{0}元宝"), theGateValue);
            }
            else if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.AddIntoBH))//加入帮会
            {
                curValue = StringUtil.substitute(GetLang("加入帮会后"));
            }
            else if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.WuXue))//武学
            {
                curValue = StringUtil.substitute(GetLang("武学等级{0}"), theGateValue);
            }
            else if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.ChengJiu))//成就
            {
                curValue = StringUtil.substitute(GetLang("成就{0}"), theGateValue);
            }
            else if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.ZhanHunLevel))//战魂
            {
                curValue = StringUtil.substitute(GetLang("战魂{0}"), theGateValue);
            }
            else if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.RongYuLevel))//荣誉
            {
                curValue = StringUtil.substitute(GetLang("荣誉{0}"), theGateValue);
            }
            else if (StringUtil.IsEqualIgnoreCase(type, EquipRequirementTypes.FEIANQUANQU))//非安全区
            {
                curValue = StringUtil.substitute(GetLang("非安全区{0}"), "");
            }

            return curValue;
        }

        /// <summary>
        /// 获取而过头今日还可以使用的次数
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int GetErGuoTouTodayNum(GameClient client)
        {
            int dayID = TimeUtil.NowDateTime().DayOfYear;
            int erGuoTouNum = Global.GetRoleParamsInt32FromDB(client, RoleParamName.ErGuoTouNum);
            int erGuoTouDayID = Global.GetRoleParamsInt32FromDB(client, RoleParamName.ErGuoTouDayID);
            if (dayID == erGuoTouDayID)
            {
                return erGuoTouNum;
            }

            return 0;
        }

        /// <summary>
        /// 增加而过头今日还可以使用的次数
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static void AddErGuoTouTodayNum(GameClient client, int addNum)
        {
            int dayID = TimeUtil.NowDateTime().DayOfYear;
            int erGuoTouNum = Global.GetRoleParamsInt32FromDB(client, RoleParamName.ErGuoTouNum);
            int erGuoTouDayID = Global.GetRoleParamsInt32FromDB(client, RoleParamName.ErGuoTouDayID);
            if (dayID == erGuoTouDayID)
            {
                erGuoTouNum += addNum;
            }
            else
            {
                erGuoTouNum = addNum;
                erGuoTouDayID = dayID;
            }

            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.ErGuoTouNum, erGuoTouNum, true);
            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.ErGuoTouDayID, erGuoTouDayID, true);
        }

        #endregion 物品使用限制管理

        #region NPC相关管理

        /// <summary>
        /// NPC脚本的时间限制缓存
        /// </summary>
        private static Dictionary<int, DateTimeRange[]> _NPCScriptTimeLimitsDict = new Dictionary<int, DateTimeRange[]>();

        /// <summary>
        /// 获取NPC脚本的时间限制字段
        /// </summary>
        /// <param name="systemScriptItem"></param>
        /// <returns></returns>
        public static DateTimeRange[] GetNPCScriptTimeLimits(int npcScriptID, SystemXmlItem systemScriptItem)
        {
            DateTimeRange[] dateTimeRangeArray = null;
            lock (_NPCScriptTimeLimitsDict)
            {
                if (_NPCScriptTimeLimitsDict.TryGetValue(npcScriptID, out dateTimeRangeArray))
                {
                    return dateTimeRangeArray;
                }
            }

            string timeLimits = systemScriptItem.GetStringValue("TimeLimits");
            if (string.IsNullOrEmpty(timeLimits))
            {
                return null;
            }

            dateTimeRangeArray = Global.ParseDateTimeRangeStr(timeLimits);

            lock (_NPCScriptTimeLimitsDict)
            {
                _NPCScriptTimeLimitsDict[npcScriptID] = dateTimeRangeArray;
            }

            return dateTimeRangeArray;
        }

        /// <summary>
        /// 清空NPC脚本时间限制缓存
        /// </summary>
        public static void ClearNPCScriptTimeLimits()
        {
            lock (_NPCScriptTimeLimitsDict)
            {
                _NPCScriptTimeLimitsDict.Clear();
            }
        }

        /// <summary>
        /// 过滤NPC脚本
        /// </summary>
        /// <param name="npcScriptID"></param>
        /// <returns></returns>
        public static bool FilterNPCScriptByID(GameClient client, int npcScriptID, out int errorCode)
        {
            errorCode = 0;
            if (npcScriptID <= 0)
            {
                errorCode = -11001;
                return true;
            }

            SystemXmlItem systemScriptItem = null;
            if (!GameManager.systemNPCScripts.SystemXmlItemDict.TryGetValue(npcScriptID, out systemScriptItem))
            {
                errorCode = -11002;
                return true;
            }

            int minLevel = systemScriptItem.GetIntValue("MinLevel");
            int maxLevel = systemScriptItem.GetIntValue("MaxLevel");
            if (client.ClientData.Level < minLevel || client.ClientData.Level > maxLevel)
            {
                errorCode = -11003;
                return true;
            }

            int sexCondition = systemScriptItem.GetIntValue("SexCondition");
            if (-1 != sexCondition && client.ClientData.RoleSex != sexCondition)
            {
                errorCode = -11004;
                return true;
            }

            int occupCondition = systemScriptItem.GetIntValue("OccupCondition");

            // 属性改造 加上一级属性公式 区分职业[8/15/2013 LiaoWei]
            int nOcc = Global.CalcOriginalOccupationID(client);

            if (-1 != occupCondition && nOcc != occupCondition)
            {
                errorCode = -11005;
                return true;
            }

            DateTimeRange[] dateTimeRangeArray = Global.GetNPCScriptTimeLimits(npcScriptID, systemScriptItem);
            if (null != dateTimeRangeArray)
            {
                int endMinute = 0;
                if (!Global.JugeDateTimeInTimeRange(TimeUtil.NowDateTime(), dateTimeRangeArray, out endMinute))
                {
                    errorCode = -11006;
                    return true;
                }
            }

            int filterID = systemScriptItem.GetIntValue("FilterID");
            if (filterID <= 0)
            {
                return false;
            }

            if ((int)FilterNPCScriptIDs.EnterNextMap == filterID) //进入下一层副本
            {
                //判断如果没有杀光怪物，则不显示
                if (Global.GetLeftMonsterByCopyMapID(client.ClientData.CopyMapID) > 0)
                {
                    errorCode = -11007;
                    return true;
                }

                //判断如果是最后一层，则不显示
                int toNextMapCode = FuBenManager.FindNextMapCodeByFuBenID(client.ClientData.MapCode);
                if (-1 == toNextMapCode)
                {
                    errorCode = -11008;
                    return true;
                }
            }
            else if ((int)FilterNPCScriptIDs.GetMapAward == filterID) //领取副本的奖励
            {
                //判断如果没有杀光怪物，则不显示
                if (Global.GetLeftMonsterByCopyMapID(client.ClientData.CopyMapID) > 0)
                {
                    errorCode = -11009;
                    return true;
                }

                //判断副本地图中是否有奖励
                if (!FuBenManager.CanGetFuBenMapAwards(client))
                {
                    errorCode = -11010;
                    return true;
                }

                //判断如果已经领取过了，则不显示
                //如果已经获取过一次奖励，则不再提示奖励
                //查找角色的ID+副本顺序ID对应地图编号的奖励领取状态
                int awardState = GameManager.CopyMapMgr.FindAwardState(client.ClientData.RoleID, client.ClientData.FuBenSeqID, client.ClientData.MapCode);
                if (awardState > 0)
                {
                    errorCode = -11011;
                    return true;
                }
            }
            else if ((int)FilterNPCScriptIDs.GetWuXingAward == filterID) //领取过五行奇阵的奖励
            {
                //判断如果已经领取过了，则不再显示
                if (!WuXingMapMgr.CanGetWuXingAward(client))
                {
                    errorCode = -11012;
                    return true;
                }
            }
            else if ((int)FilterNPCScriptIDs.LeaveLaoFang == filterID) //出狱
            {
                //判断如果已经领取过了，则不再显示
                //if (client.ClientData.PKPoint > Global.MinLeaveJailPKPoints)
                //{
                //    return true;
                //}
            }
            else if ((int)FilterNPCScriptIDs.TakeSheLiZhiYuan == filterID) //提取舍利之源
            {
                //判断如果不是帮会的帮助，则不再显示
                if (client.ClientData.Faction <= 0 || client.ClientData.BHZhiWu != 1)
                {
                    errorCode = -11013;
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// NPC功能ID的时间限制缓存
        /// </summary>
        private static Dictionary<int, DateTimeRange[]> _NPCOpterationTimeLimitsDict = new Dictionary<int, DateTimeRange[]>();

        /// <summary>
        /// 获取NPC功能ID的时间限制字段
        /// </summary>
        /// <param name="systemOperationItem"></param>
        /// <returns></returns>
        public static DateTimeRange[] GetNPCOperationTimeLimits(int npcOperationID, SystemXmlItem systemOperationItem)
        {
            DateTimeRange[] dateTimeRangeArray = null;
            lock (_NPCOpterationTimeLimitsDict)
            {
                if (_NPCOpterationTimeLimitsDict.TryGetValue(npcOperationID, out dateTimeRangeArray))
                {
                    return dateTimeRangeArray;
                }
            }

            string timeLimits = systemOperationItem.GetStringValue("TimeLimits");
            if (string.IsNullOrEmpty(timeLimits))
            {
                return null;
            }

            dateTimeRangeArray = Global.ParseDateTimeRangeStr(timeLimits);

            lock (_NPCOpterationTimeLimitsDict)
            {
                _NPCOpterationTimeLimitsDict[npcOperationID] = dateTimeRangeArray;
            }

            return dateTimeRangeArray;
        }

        /// <summary>
        /// 清除NPC功能时间缓存
        /// </summary>
        public static void ClearNPCOperationTimeLimits()
        {
            lock (_NPCOpterationTimeLimitsDict)
            {
                _NPCOpterationTimeLimitsDict.Clear();
            }
        }

        /// <summary>
        /// 过滤NPC功能
        /// </summary>
        /// <param name="npcOperationID"></param>
        /// <returns></returns>
        public static bool FilterNPCOperationByID(GameClient client, int npcOperationID, int npcID)
        {
            if (npcOperationID <= 0)
            {
                return true;
            }

            SystemXmlItem systemOperationItem = null;
            if (!GameManager.SystemOperasMgr.SystemXmlItemDict.TryGetValue(npcOperationID, out systemOperationItem))
            {
                return true;
            }

            int minLevel = systemOperationItem.GetIntValue("MinLevel");
            int maxLevel = systemOperationItem.GetIntValue("MaxLevel");
            if (client.ClientData.Level < minLevel || client.ClientData.Level > maxLevel)
            {
                return true;
            }

            int sexCondition = systemOperationItem.GetIntValue("SexCondition");
            if (-1 != sexCondition && client.ClientData.RoleSex != sexCondition)
            {
                return true;
            }

            int occupCondition = systemOperationItem.GetIntValue("OccupCondition");

            // 属性改造 加上一级属性公式 区分职业[8/15/2013 LiaoWei]
            int nOcc = Global.CalcOriginalOccupationID(client);

            if (-1 != occupCondition && nOcc != occupCondition)
            {
                return true;
            }

            DateTimeRange[] dateTimeRangeArray = Global.GetNPCOperationTimeLimits(npcOperationID, systemOperationItem);
            if (null != dateTimeRangeArray)
            {
                int endMinute = 0;
                if (!Global.JugeDateTimeInTimeRange(TimeUtil.NowDateTime(), dateTimeRangeArray, out endMinute))
                {
                    return true;
                }
            }

            int filterID = systemOperationItem.GetIntValue("FilterID");
            if (filterID <= 0)
            {
                return false;
            }

            if ((int)FilterNPCOperationIDs.StartYaBiao == filterID) //接受运镖
            {
                if (null != client.ClientData.MyYaBiaoData)
                {
                    //已经在押镖中
                    if (client.ClientData.MyYaBiaoData.YaBiaoID > 0)
                    {
                        return true;
                    }
                }
            }
            else if ((int)FilterNPCOperationIDs.EndYaBiao == filterID) //完成运镖
            {
                if (null == client.ClientData.MyYaBiaoData || client.ClientData.MyYaBiaoData.YaBiaoID <= 0)
                {
                    return true;
                }
            }
            else if ((int)FilterNPCOperationIDs.YaBiaoTakeGoods == filterID) //运镖时提取货物
            {
                if (null == client.ClientData.MyYaBiaoData || client.ClientData.MyYaBiaoData.TakeGoods > 0)
                {
                    return true;
                }

                long nowTicks = TimeUtil.NOW();
                if (nowTicks - client.ClientData.MyYaBiaoData.StartTime >= Global.MaxYaBiaoTicks)
                {
                    return true;
                }

                SystemXmlItem systemYaBiaoItem = null;
                if (!GameManager.systemYaBiaoMgr.SystemXmlItemDict.TryGetValue(client.ClientData.MyYaBiaoData.YaBiaoID, out systemYaBiaoItem))
                {
                    return true;
                }

                if (npcID != systemYaBiaoItem.GetIntValue("DestNPC"))
                {
                    return true;
                }
            }

            return false;
        }

        #endregion NPC相关管理

        #region 怪物管理

        /// <summary>
        /// 根据怪物ID获取怪物的名称
        /// </summary>
        /// <param name="monsterID"></param>
        /// <returns></returns>
        public static string GetMonsterNameByID(int monsterID)
        {
            return MonsterNameManager.GetMonsterName(monsterID);
        }

        #endregion 怪物管理

        #region 出售列表管理

        /// <summary>
        /// 根据物品DbID获取出售物品的信息
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public static GoodsData GetSaleGoodsDataByDbID(GameClient client, int id)
        {
            if (null == client.ClientData.SaleGoodsDataList)
            {
                return null;
            }

            lock (client.ClientData.SaleGoodsDataList)
            {
                for (int i = 0; i < client.ClientData.SaleGoodsDataList.Count; i++)
                {
                    if (client.ClientData.SaleGoodsDataList[i].Id == id)
                    {
                        return client.ClientData.SaleGoodsDataList[i];
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 获取已经挂售物品的数量
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int GetSaleGoodsDataCount(GameClient client)
        {
            if (null == client.ClientData.SaleGoodsDataList)
            {
                return 0;
            }

            int count = 0;
            lock (client.ClientData.SaleGoodsDataList)
            {
                count = client.ClientData.SaleGoodsDataList.Count;
            }

            return count;
        }

        /// <summary>
        /// 从出售的物品队列中删除物品
        /// </summary>
        /// <param name="client"></param>
        /// <param name="id"></param>
        public static bool RemoveSaleGoodsData(GameClient client, GoodsData gd)
        {
            if (null == gd) return false;
            if (client.ClientData.SaleGoodsDataList == null)
            {
                return false;
            }

            bool ret = false;
            lock (client.ClientData.SaleGoodsDataList)
            {
                ret = client.ClientData.SaleGoodsDataList.Remove(gd);
            }

            return ret;
        }

        /// <summary>
        /// 添加物品到出售的物品队列中
        /// </summary>
        /// <param name="client"></param>
        public static void AddSaleGoodsData(GameClient client, GoodsData gd)
        {
            if (null == gd) return;
            if (client.ClientData.SaleGoodsDataList == null)
            {
                client.ClientData.SaleGoodsDataList = new List<GoodsData>();
            }

            lock (client.ClientData.SaleGoodsDataList)
            {
                client.ClientData.SaleGoodsDataList.Add(gd);
            }

            // 七日活动
            GlobalEventSource.getInstance().fireEvent(SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.MallInSaleCount));
        }

        #endregion 出售列表管理

        #region 任务管理

        /// <summary>
        /// 在用户登录后，将任务数据发送给用户前, 进行预先处理
        /// </summary>
        /// <param name="client"></param>
        public static void ProcessTaskData(GameClient client)
        {
            if (null == client.ClientData.TaskDataList) return;

            lock (client.ClientData.TaskDataList)
            {
                for (int i = 0; i < client.ClientData.TaskDataList.Count; i++)
                {
                    Global.ProcessTaskData(client, client.ClientData.TaskDataList[i]);

                    OldTaskData oldTaskData = Global.FindOldTaskByTaskID(client, client.ClientData.TaskDataList[i].DoingTaskID);
                    if (null != oldTaskData)
                    {
                        client.ClientData.TaskDataList[i].DoneCount = oldTaskData.DoCount;
                    }
                }
            }
        }

        /// <summary>
        /// 将任务数据发送给用户前, 进行预先处理
        /// </summary>
        /// <param name="client"></param>
        public static TaskAwardsData GetTaskAwardsData(GameClient client, int taskID, SystemXmlItem systemTask)
        {
            TaskAwardsData taskAwards = new TaskAwardsData()
            {
                TaskawardList = GameManager.TaskAwardsMgr.FindTaskAwards(taskID),
                OtherTaskawardList = GameManager.TaskAwardsMgr.FindOtherAwards(taskID),
                Moneyaward = GameManager.TaskAwardsMgr.FindMoney(taskID),
                Experienceaward = GameManager.TaskAwardsMgr.FindExperience(client, taskID),
                YinLiangaward = GameManager.TaskAwardsMgr.FindYinLiang(taskID),
                LingLiaward = GameManager.TaskAwardsMgr.FindLingLi(taskID),
                BindYuanBaoaward = GameManager.TaskAwardsMgr.FindBindYuanBao(taskID),
                ZhenQiaward = GameManager.TaskAwardsMgr.FindZhenQi(client, taskID),
                LieShaaward = GameManager.TaskAwardsMgr.FindLieSha(client, taskID),
                WuXingaward = GameManager.TaskAwardsMgr.FindWuXing(client, taskID),
                NeedYuanBao = GameManager.TaskAwardsMgr.FindNeedYuanBao(client, taskID),
                JunGongaward = GameManager.TaskAwardsMgr.FindJunGong(client, taskID),
                RongYuaward = GameManager.TaskAwardsMgr.FindRongYu(client, taskID),
                MoJingaward = GameManager.TaskAwardsMgr.FindMoJing(client, taskID),
                XingHunaward = GameManager.TaskAwardsMgr.FindXingHun(client, taskID),
            };

            // 如果是日常跑环任务--给客户端发额外奖励 [12/5/2013 LiaoWei]
            if (systemTask.GetIntValue("TaskClass") == (int)TaskClasses.DailyTask)
            {
                int nIndex = Global.GetDailyCircleTaskAddAward(client);
                if (nIndex >= 0)
                {
                    taskAwards.AddExperienceForDailyCircleTask = Data.DailyCircleTaskAward[nIndex].Experience;
                    taskAwards.AddMoJingForDailyCircleTask = Data.DailyCircleTaskAward[nIndex].XingHun;

                    int nGood = Data.DailyCircleTaskAward[nIndex].GoodsID;
                    int nNum = Data.DailyCircleTaskAward[nIndex].GoodsNum;
                    string sGood = Convert.ToString(nGood);
                    string sNmu = Convert.ToString(nNum);

                    taskAwards.AddGoodsForDailyCircleTask = sGood + "," + sNmu + "," + Data.DailyCircleTaskAward[nIndex].Binding;
                }
            }

            return taskAwards;
        }

        /// <summary>
        /// 将任务数据发送给用户前, 进行预先处理
        /// </summary>
        /// <param name="client"></param>
        public static void ProcessTaskData(GameClient client, TaskData taskData)
        {
            int taskID = taskData.DoingTaskID;

            taskData.TaskAwards = new TaskAwardsData()
            {
                TaskawardList = GameManager.TaskAwardsMgr.FindTaskAwards(taskID),
                OtherTaskawardList = GameManager.TaskAwardsMgr.FindOtherAwards(taskID),
                Moneyaward = GameManager.TaskAwardsMgr.FindMoney(taskID),
                Experienceaward = GameManager.TaskAwardsMgr.FindExperience(client, taskID),
                YinLiangaward = GameManager.TaskAwardsMgr.FindYinLiang(taskID),
                LingLiaward = GameManager.TaskAwardsMgr.FindLingLi(taskID),
                BindYuanBaoaward = GameManager.TaskAwardsMgr.FindBindYuanBao(taskID),
                ZhenQiaward = GameManager.TaskAwardsMgr.FindZhenQi(client, taskID),
                LieShaaward = GameManager.TaskAwardsMgr.FindLieSha(client, taskID),
                WuXingaward = GameManager.TaskAwardsMgr.FindWuXing(client, taskID),
                NeedYuanBao = GameManager.TaskAwardsMgr.FindNeedYuanBao(client, taskID),
                JunGongaward = GameManager.TaskAwardsMgr.FindJunGong(client, taskID),
                RongYuaward = GameManager.TaskAwardsMgr.FindRongYu(client, taskID),
                MoJingaward = GameManager.TaskAwardsMgr.FindMoJing(client, taskID),
                XingHunaward = GameManager.TaskAwardsMgr.FindXingHun(client, taskID),
            };

            // 8号日常跑环任务的额外奖励 要给客户端发送 [12/11/2013 LiaoWei]
            SystemXmlItem systemTask = null;
            if (GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
            {
                if (systemTask != null && systemTask.GetIntValue("TaskClass") == (int)TaskClasses.DailyTask)
                {
                    int nIndex = Global.GetDailyCircleTaskAddAward(client);
                    if (nIndex >= 0)
                    {
                        taskData.TaskAwards.AddExperienceForDailyCircleTask = Data.DailyCircleTaskAward[nIndex].Experience;
                        taskData.TaskAwards.AddMoJingForDailyCircleTask = Data.DailyCircleTaskAward[nIndex].XingHun;

                        int nGood = Data.DailyCircleTaskAward[nIndex].GoodsID;
                        int nNum = Data.DailyCircleTaskAward[nIndex].GoodsNum;
                        string sGood = Convert.ToString(nGood);
                        string sNmu = Convert.ToString(nNum);

                        taskData.TaskAwards.AddGoodsForDailyCircleTask = sGood + "," + sNmu + "," + Data.DailyCircleTaskAward[nIndex].Binding;
                    }
                }
            }
        }

        /// <summary>
        /// 查找旧任务
        /// </summary>
        /// <param name="taskID"></param>
        /// <returns></returns>
        public static OldTaskData FindOldTaskByTaskID(GameClient client, int taskID)
        {
            if (null == client.ClientData.OldTasks)
            {
                return null;
            }

            lock (client.ClientData.OldTasks)
            {
                for (int i = 0; i < client.ClientData.OldTasks.Count; i++)
                {
                    if (taskID == client.ClientData.OldTasks[i].TaskID)
                    {
                        return client.ClientData.OldTasks[i];
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 添加旧的任务
        /// </summary>
        /// <param name="taskID"></param>
        public static void AddOldTask(GameClient client, int taskID)
        {
            if (null == client.ClientData.OldTasks)
            {
                client.ClientData.OldTasks = new List<OldTaskData>();
            }

            int findIndex = -1;

            lock (client.ClientData.OldTasks)
            {
                for (int i = 0; i < client.ClientData.OldTasks.Count; i++)
                {
                    if (client.ClientData.OldTasks[i].TaskID == taskID)
                    {
                        findIndex = i;
                        break;
                    }
                }

                if (findIndex >= 0)
                {
                    client.ClientData.OldTasks[findIndex].DoCount++;
                }
                else
                {
                    client.ClientData.OldTasks.Add(new OldTaskData()
                    {
                        TaskID = taskID,
                        DoCount = 1,
                    });
                }
            }
        }

        /// <summary>
        /// 从用户的正在做的任务列表查找一个任务
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static TaskData GetTaskData(GameClient client, int taskID)
        {
            if (null == client.ClientData.TaskDataList) return null;

            lock (client.ClientData.TaskDataList)
            {
                for (int i = 0; i < client.ClientData.TaskDataList.Count; i++)
                {
                    if (client.ClientData.TaskDataList[i].DoingTaskID == taskID)
                    {
                        return client.ClientData.TaskDataList[i];
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 从用户的正在做的任务列表查找一个任务(根据数据库ID)
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static TaskData GetTaskDataByDbID(GameClient client, int taskDbID)
        {
            if (null == client.ClientData.TaskDataList) return null;

            lock (client.ClientData.TaskDataList)
            {
                for (int i = 0; i < client.ClientData.TaskDataList.Count; i++)
                {
                    if (client.ClientData.TaskDataList[i].DbID == taskDbID)
                    {
                        return client.ClientData.TaskDataList[i];
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 查找
        /// </summary>
        /// <param name="npcID"></param>
        /// <returns></returns>
        public static NPCTaskState GetNPCTaskState(List<NPCTaskState> npcTaskStateList, int npcID)
        {
            if (null == npcTaskStateList) return null;
            for (int i = 0; i < npcTaskStateList.Count; i++)
            {
                if (npcTaskStateList[i].NPCID == npcID)
                {
                    return npcTaskStateList[i];
                }
            }

            return null;
        }

        /// <summary>
        /// 获取任务的最大重做次数
        /// </summary>
        /// <param name="taskID"></param>
        /// <returns></returns>
        public static int GetTaskMaxRedoing(int taskID)
        {
            int maxRedoing = -1;
            SystemXmlItem systemTask = null;
            if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
            {
                return maxRedoing;
            }

            maxRedoing = systemTask.GetIntValue("MaxRedoing");
            return maxRedoing;
        }

        /// <summary>
        /// 判断是否是能接的新任务
        /// </summary>
        /// <param name="taskID"></param>
        /// <returns></returns>
        public static bool CanTakeNewTask(GameClient client, int taskID, SystemXmlItem systemTask = null)
        {
            if (null != GetTaskData(client, taskID))
            {
                return false; //正在做任务
            }

            //如果任务xml节点为空，则获取
            if (null == systemTask)
            {
                if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
                {
                    return false; //获取任务信息失败
                }
            }

            //是否强制失效?
            int forceNoPub = systemTask.GetIntValue("ForceNoPub");
            if (1 == forceNoPub)
            {
                return false;
            }

            //是否有时间段限制????
            string pubStartTime = systemTask.GetStringValue("PubStartTime");
            string pubEndTime = systemTask.GetStringValue("PubEndTime");
            if (!string.IsNullOrEmpty(pubStartTime) && !string.IsNullOrEmpty(pubEndTime))
            {
                long startTime = Global.SafeConvertToTicks(pubStartTime);
                long endTime = Global.SafeConvertToTicks(pubEndTime);
                long nowTicks = TimeUtil.NOW();
                if (nowTicks < startTime || nowTicks > endTime)
                {
                    return false;
                }
            }

            //性别条件
            int taskSex = systemTask.GetIntValue("SexCondition");
            if (-1 != taskSex)
            {
                if (client.ClientData.RoleSex != taskSex)
                {
                    return false;
                }
            }

            //职业条件
            int taskOccupation = systemTask.GetIntValue("OccupCondition");
            if (-1 != taskOccupation)
            {
                // 属性改造 加上一级属性公式 区分职业[8/15/2013 LiaoWei]
                int nOcc = Global.CalcOriginalOccupationID(client);

                if (nOcc != taskOccupation)
                {
                    return false;
                }
            }

            int taskClass = systemTask.GetIntValue("TaskClass");

            //if (taskClass > (int)TaskClasses.MainTask) //非主线任务
            //{
            //    if (client.ClientData.Level - minLevel >= 10) //差别超过了10级别
            //    {
            //        return false;
            //    }
            //}
            if ((int)TaskClasses.DailyTask == taskClass)
            {
                if (!GlobalNew.IsGongNengOpened(client, GongNengIDs.RiChangRenWu))  //功能未开启
                    return false;
            }
            if ((int)TaskClasses.TaofaTask == taskClass)
            {
                if (!GlobalNew.IsGongNengOpened(client, GongNengIDs.TaofaRenWu))    //功能未开启
                    return false;
            }
            else if ((int)TaskClasses.BanghuiTask == taskClass) //接帮会日常任务，必须处于帮会之中
            {
                if (client.ClientData.Faction <= 0)
                {
                    return false;
                }
            }

            //任务必须够级别了才能接
            //if (client.ClientData.Level < minLevel)
            //{
            //    return false;
            //}

            // 增加转生级别判断 [3/15/2014 LiaoWei]
            int nLev = client.ClientData.Level;
            int nChangeLifeLev = client.ClientData.ChangeLifeCount;

            int minLevel = systemTask.GetIntValue("MinLevel");
            int minChangeLifeLev = systemTask.GetIntValue("MinZhuanSheng");

            int maxLevel = systemTask.GetIntValue("MaxLevel");
            int maxChangeLifeLev = systemTask.GetIntValue("MaxZhuanSheng");

            if (nChangeLifeLev < minChangeLifeLev || nChangeLifeLev > maxChangeLifeLev)
                return false;
            else if (nChangeLifeLev == minChangeLifeLev && nLev < minLevel)
                return false;
            else if (nChangeLifeLev == maxChangeLifeLev && nLev > maxLevel)
                return false;

            int maxRedoing = -1;
            OldTaskData oldTaskData = null;
            int prevTask = systemTask.GetIntValue("PrevTask");
            if (-1 != prevTask)
            {
                oldTaskData = Global.FindOldTaskByTaskID(client, prevTask);
                if (oldTaskData == null)
                {
                    return false; //没做过前置任务，则跳过
                }

                //获取前置任务的最大重做次数
                maxRedoing = Global.GetTaskMaxRedoing(prevTask);
                if (maxRedoing > 0 && oldTaskData.DoCount < maxRedoing)
                {
                    return false; //前置任务没有做够最大次数, 则跳过
                }
            }

            maxRedoing = systemTask.GetIntValue("MaxRedoing");
            oldTaskData = Global.FindOldTaskByTaskID(client, taskID);
            if (null != oldTaskData)
            {
                if (maxRedoing > 0 && oldTaskData.DoCount >= maxRedoing)
                {
                    return false; //超过最大的做的次数
                }
            }

            return true; //可以接受
        }

        /// <summary>
        /// 计算NPC的任务状态
        /// </summary>
        /// <param name="npcID"></param>
        public static int ComputeNPCTaskState(GameClient client, List<TaskData> TaskDataList, int npcID)
        {
            int ret = (int)NPCTaskStates.NONE;

            List<int> taskIDList = null;
            if (GameManager.NPCTasksMgr.SourceNPCTasksDict.TryGetValue(npcID, out taskIDList))
            {
                for (int i = 0; i < taskIDList.Count; i++)
                {
                    SystemXmlItem systemTask = null;
                    if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskIDList[i], out systemTask))
                    {
                        continue;
                    }

                    //如果是跑环任务，则跳过，后边单独处理
                    int taskClass = systemTask.GetIntValue("TaskClass");
                    if (taskClass >= (int)TaskClasses.CircleTaskStart && taskClass <= (int)TaskClasses.CircleTaskEnd) //如果是跑环任务
                    {
                        // 是否还能接受跑环任务
                        bool canTaskPaoHuanTask = Global.CanTaskPaoHuanTask(client, taskClass);

                        //判断当前是否还能接日跑环任务
                        if (!canTaskPaoHuanTask)
                        {
                            continue;
                        }
                    }

                    //判断是否是能接的新任务
                    if (!Global.CanTakeNewTask(client, taskIDList[i]))
                    {
                        continue;
                    }

                    ret = (int)NPCTaskStates.NEWTASK;
                    break;
                }
            }

            if (null == TaskDataList) return ret;

            lock (TaskDataList)
            {
                for (int i = 0; i < TaskDataList.Count; i++)
                {
                    SystemXmlItem systemTask = null;
                    if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(TaskDataList[i].DoingTaskID, out systemTask))
                    {
                        continue;
                    }

                    int destNPC = systemTask.GetIntValue("DestNPC");

                    if (destNPC == npcID)
                    {
                        if (JugeTaskComplete(TaskDataList[i].DoingTaskID, TaskDataList[i].DoingTaskVal1, TaskDataList[i].DoingTaskVal2))
                        {
                            ret = (int)NPCTaskStates.OKTASK; ;
                        }
                        else
                        {
                            ret = (int)NPCTaskStates.DOINGTASK; ;
                        }
                    }
                }
            }

            return ret;
        }

        /// <summary>
        /// 计算NPC的任务状态
        /// </summary>
        /// <param name="roleData"></param>
        public static void ComputeNPCTaskState(GameClient client)
        {
            string fileName = string.Format("Map/{0}/npcs.xml", client.ClientData.MapCode);
            XElement xml = GeneralCachingXmlMgr.GetXElement(Global.ResPath(fileName));
            if (null == xml) return;

            List<NPCTaskState> npcTaskStateList = new List<NPCTaskState>();
            IEnumerable<XElement> items = xml.Elements("NPCs").Elements();
            foreach (var item in items)
            {
                int npcID = -1;
                if ("" != (string)item.Attribute("Code"))
                {
                    npcID = Convert.ToInt32((string)item.Attribute("Code"));
                }

                if (-1 == npcID) continue;

                npcTaskStateList.Add(new NPCTaskState()
                {
                    NPCID = npcID,
                    TaskState = 0,
                });
            }

            for (int i = 0; i < npcTaskStateList.Count; i++)
            {
                npcTaskStateList[i].TaskState = ComputeNPCTaskState(client, client.ClientData.TaskDataList, npcTaskStateList[i].NPCID);
            }

            //通知客户端
            //将NPC的状态列表通知客户端
            GameManager.ClientMgr.NotifyNPCTaskStateList(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, npcTaskStateList);
        }

        /// <summary>
        /// 获取任务的源NPC信息
        /// </summary>
        /// <param name="systemTask"></param>
        /// <param name="mapCode"></param>
        /// <param name="npcType"></param>
        /// <param name="npcID"></param>
        /// <returns></returns>
        public static bool GetTaskSourceNPCID(SystemXmlItem systemTask, out int mapCode, out int npcType, out int npcID)
        {
            mapCode = -1;
            npcType = (int)(GSpriteTypes.NPC);
            npcID = -1;
            int sourceNPC = systemTask.GetIntValue("SourceNPC");

            SystemXmlItem xmlNode = null;
            if (!GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(sourceNPC, out xmlNode))
            {
                return false;
            }

            mapCode = xmlNode.GetIntValue("MapCode");
            npcType = (int)(GSpriteTypes.NPC);
            npcID = xmlNode.GetIntValue("ID");
            return true;
        }

        /// <summary>
        /// 获取任务的目标NPC信息
        /// </summary>
        /// <param name="systemTask"></param>
        /// <param name="mapCode"></param>
        /// <param name="npcType"></param>
        /// <param name="npcID"></param>
        /// <returns></returns>
        public static bool GetTaskDestNPCID(SystemXmlItem systemTask, out int mapCode, out int npcType, out int npcID)
        {
            mapCode = -1;
            npcType = (int)(GSpriteTypes.NPC);
            npcID = -1;
            int destNPC = systemTask.GetIntValue("DestNPC");

            SystemXmlItem xmlNode = null;
            if (!GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(destNPC, out xmlNode))
            {
                return false;
            }

            mapCode = xmlNode.GetIntValue("MapCode");
            npcType = (int)(GSpriteTypes.NPC);
            npcID = xmlNode.GetIntValue("ID");
            return true;
        }

        /// <summary>
        /// 判断任务目标是否已经完成
        /// </summary>
        /// <param name="systemTask"></param>
        /// <param name="taskVal"></param>
        /// <returns></returns>
        public static bool JugeTaskTargetComplete(SystemXmlItem systemTask, int num, int taskVal)
        {
            if (systemTask.GetIntValue(string.Format("TargetNPC{0}", num)) < 0)
            {
                return true;
            }

            int targetNum = systemTask.GetIntValue(string.Format("TargetNum{0}", num));
            if (targetNum <= 0) targetNum = 1;
            return (taskVal >= targetNum);
        }

        /// <summary>
        /// 判断任务是否真的完成
        /// </summary>
        /// <returns></returns>
        public static bool JugeTaskComplete(int taskID, int taskVal1, int taskVal2)
        {
            SystemXmlItem systemTask = null;
            if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
            {
                return false;
            }

            return (JugeTaskTargetComplete(systemTask, 1, taskVal1) && JugeTaskTargetComplete(systemTask, 2, taskVal2));
        }

        /// <summary>
        /// 获取当前追踪的任务的个数
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int GetFocusTaskCount(GameClient client)
        {
            int ret = 0;
            if (null == client.ClientData.TaskDataList) return ret;

            lock (client.ClientData.TaskDataList)
            {
                for (int i = 0; i < client.ClientData.TaskDataList.Count; i++)
                {
                    if (client.ClientData.TaskDataList[i].DoingTaskFocus > 0)
                    {
                        ret++;
                    }
                }
            }

            return ret;
        }



        /// <summary>
        /// 判断指定任务奖励物品需要的背包格子的物品列表
        /// </summary>
        /// <param name="client"></param>
        /// <param name="taskID"></param>
        /// <returns></returns>
        public static List<GoodsData> GetTaskAwardsGoodsGridCount(GameClient client, int taskID)
        {
            List<GoodsData> goodsDataList = new List<GoodsData>();

            // 属性改造 加上一级属性公式 区分职业[8/15/2013 LiaoWei]
            int nOcc = Global.CalcOriginalOccupationID(client);

            //奖励用户装备物品
            List<AwardsItemData> awardsItemList = GameManager.TaskAwardsMgr.FindTaskAwards(taskID);
            if (null != awardsItemList)
            {
                for (int i = 0; i < awardsItemList.Count; i++)
                {
                    // 根据职业检查是否可以发放奖励
                    if (Global.IsCanGiveRewardByOccupation(client, awardsItemList[i].GoodsID))
                    {
                        goodsDataList.Add(new GoodsData()
                                        {
                                            GoodsID = awardsItemList[i].GoodsID,
                                            GCount = awardsItemList[i].GoodsNum,
                                            Binding = awardsItemList[i].Binding,
                                            Forge_level = awardsItemList[i].Level,
                                            Quality = awardsItemList[i].Quality,
                                            Lucky = awardsItemList[i].IsHaveLuckyProp,
                                            ExcellenceInfo = awardsItemList[i].ExcellencePorpValue,
                                            AppendPropLev = awardsItemList[i].AppendLev,
                                            Endtime = awardsItemList[i].EndTime
                                        });
                    }
                }
            }

            //奖励用户其他物品
            awardsItemList = null;
            awardsItemList = GameManager.TaskAwardsMgr.FindOtherAwards(taskID);

            if (null != awardsItemList)
            {
                for (int i = 0; i < awardsItemList.Count; i++)
                {
                    // 根据职业检查是否可以发放奖励
                    if (Global.IsCanGiveRewardByOccupation(client, awardsItemList[i].GoodsID))
                    {
                        goodsDataList.Add(new GoodsData()
                        {
                            GoodsID = awardsItemList[i].GoodsID,
                            GCount = awardsItemList[i].GoodsNum,
                            Binding = awardsItemList[i].Binding,
                            Forge_level = awardsItemList[i].Level,
                            Quality = awardsItemList[i].Quality,
                            Lucky = awardsItemList[i].IsHaveLuckyProp,
                            ExcellenceInfo = awardsItemList[i].ExcellencePorpValue,
                            AppendPropLev = awardsItemList[i].AppendLev,
                            Endtime = awardsItemList[i].EndTime
                        });
                    }

                }
            }

            return goodsDataList;
        }

        /// <summary>
        /// 判断背包空格是否能提交任务
        /// </summary>
        /// <param name="client"></param>
        /// <param name="taskID"></param>
        /// <returns></returns>
        public static bool CanCompleteTaskByGridNum(SocketListener sl, TCPOutPacketPool pool, GameClient client, int taskID)
        {
            //判断是否有奖励，如果有，则判断是否背包的格子足够用
            /// 判断指定任务奖励物品需要的背包格子的个数
            List<GoodsData> goodsDataList = Global.GetTaskAwardsGoodsGridCount(client, taskID);
            //for (int i = 0; i < goodsDataList.Count; i++)
            //{
            //    if (!Global.CanAddGoods(client, goodsDataList[i].GoodsID, goodsDataList[i].GCount, goodsDataList[i].Binding))
            //    {
            //        return false;
            //    }
            //}

            //return true;

            if (null == goodsDataList) return true;

            return Global.CanAddGoodsDataList(client, goodsDataList);
        }

        /// <summary>
        /// 将
        /// </summary>
        /// <param name="awardsItemList"></param>
        /// <returns></returns>
        public static List<GoodsData> ConvertToGoodsDataList(List<AwardsItemData> awardsItemList, int nOccupation = -1)
        {
            List<GoodsData> goodsDataList = new List<GoodsData>();
            if (null != awardsItemList)
            {
                for (int i = 0; i < awardsItemList.Count; i++)
                {

                    if (nOccupation < 0 || awardsItemList[i].Occupation == -1 || awardsItemList[i].Occupation == nOccupation)
                    {
                        goodsDataList.Add(new GoodsData()
                        {
                            GoodsID = awardsItemList[i].GoodsID,
                            GCount = awardsItemList[i].GoodsNum,
                            Binding = awardsItemList[i].Binding,
                            Forge_level = awardsItemList[i].Level,
                            Quality = awardsItemList[i].Quality,
                            Lucky = awardsItemList[i].IsHaveLuckyProp,
                            ExcellenceInfo = awardsItemList[i].ExcellencePorpValue,
                            AppendPropLev = awardsItemList[i].AppendLev,
                            Endtime = awardsItemList[i].EndTime
                        });
                    }

                }
            }

            return goodsDataList;
        }

        /// <summary>
        /// 是否是给予物品的任务类型, 如果是返回物品个数(虚拟物品返回0)
        /// </summary>
        /// <param name="client"></param>
        /// <param name="taskID"></param>
        /// <param name="npcID"></param>
        /// <param name="extensionID"></param>
        /// <returns></returns>
        public static int GetSomethingTaskNeedGoodsNum(GameClient client, int taskID, int npcID, int extensionID, out int goodsID)
        {
            goodsID = -1;
            SystemXmlItem systemTask = null;
            if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
            {
                return 0;
            }

            //判断任务是否属于当前的NPC
            if (extensionID == systemTask.GetIntValue("TargetNPC1"))
            {
                if (systemTask.GetIntValue("TargetType1") == (int)TaskTypes.GetSomething && "" != systemTask.GetStringValue("PropsName1"))
                {
                    //检测物品包中有没有指定的物品
                    string goodsName = systemTask.GetStringValue("PropsName1");
                    int transferGoodsID = Global.GetGoodsByName(goodsName);
                    if (transferGoodsID < -1)
                    {
                        return 0;
                    }

                    goodsID = transferGoodsID;
                    return 1;
                }

                return 0;
            }

            //判断任务是否属于当前的NPC
            if (extensionID == systemTask.GetIntValue("TargetNPC2"))
            {
                if (systemTask.GetIntValue("TargetType2") == (int)TaskTypes.GetSomething && "" != systemTask.GetStringValue("PropsName2"))
                {
                    //检测物品包中有没有指定的物品
                    string goodsName = systemTask.GetStringValue("PropsName2");
                    int transferGoodsID = Global.GetGoodsByName(goodsName);
                    if (transferGoodsID < -1)
                    {
                        return 0;
                    }

                    goodsID = transferGoodsID;
                    return 1;
                }

                return 0;
            }

            return 0;
        }

        /// <summary>
        /// 过滤删除无效的任务
        /// </summary>
        /// <param name="client"></param>
        public static bool RemoveInvalidTask(GameClient client, TaskData taskData)
        {
            //如果没有找到任务
            if (GameManager.SystemTasksMgr.SystemXmlItemDict.ContainsKey(taskData.DoingTaskID))
            {
                return false;
            }

            int dbID = taskData.DbID;
            int taskID = taskData.DoingTaskID;

            //更新上线状态
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_SPR_ABANDONTASK,
                string.Format("{0}:{1}:{2}", client.ClientData.RoleID, dbID, taskID),
                null, client.ServerId);

            return true;
        }

        /// <summary>
        /// 过滤删除所有无效的任务
        /// </summary>
        /// <param name="client"></param>
        public static bool RemoveAllInvalidTasks(GameClient client)
        {
            if (null == client.ClientData.TaskDataList || client.ClientData.TaskDataList.Count <= 0)
            {
                return false;
            }

            List<TaskData> abandonTaskList = new List<TaskData>();
            int abandonCount = 0;

            lock (client.ClientData.TaskDataList)
            {
                for (int i = 0; i < client.ClientData.TaskDataList.Count; i++)
                {
                    if (RemoveInvalidTask(client, client.ClientData.TaskDataList[i]))
                    {
                        abandonTaskList.Add(client.ClientData.TaskDataList[i]);
                        abandonCount++;
                    }
                }
            }

            //添加到角色的列表中
            for (int i = 0; i < abandonTaskList.Count; i++)
            {
                lock (client.ClientData.TaskDataList)
                {
                    client.ClientData.TaskDataList.Remove(abandonTaskList[i]);
                }

                LogManager.WriteLog(LogTypes.Error, string.Format("删除无效的任务, Client={0}({1}), TaskID={2}",
                    client.ClientData.RoleID, client.ClientData.RoleName, abandonTaskList[i].DoingTaskID));
            }

            return (abandonCount > 0);
        }

        /// <summary>
        /// 判断任务是否有祝福点奖励，有的话判断是否在坐骑骑乘状态
        /// </summary>
        /// <param name="systemTask"></param>
        /// <param name="taskVal"></param>
        /// <returns></returns>
        public static bool CanCompleteTaskByBlessPoint(GameClient client, SystemXmlItem systemTask)
        {
            int blessPoint = systemTask.GetIntValue("BlessPoint");
            if (blessPoint <= 0)
            {
                return true;
            }

            //处理先前的坐骑
            if (client.ClientData.HorseDbID <= 0)
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// 获取任务的随机奖励
        /// </summary>
        /// <param name="?"></param>
        /// <param name="randomTaskaward"></param>
        /// <returns></returns>
        public static List<AwardsItemData> GetRandomTaskawardItemList(List<AwardsItemData> awardsItemList, int randomTaskaward)
        {
            if (randomTaskaward <= 0)
            {
                //全部给予
                //awardsItemList.Clear();
                return awardsItemList;
            }

            awardsItemList = Global.RandomSortList<AwardsItemData>(awardsItemList);
            randomTaskaward = Global.GetRandomNumber(0, randomTaskaward + 1);
            while (awardsItemList.Count > randomTaskaward)
            {
                awardsItemList.RemoveAt(0);
            }

            return awardsItemList;
        }

        //处理副本
        private static void ProcessFuBenNPCOrMonster(SystemXmlItem taskXml, int oldMapCode, int oldNpcType, int oldNpcID, out int mapCode, out int npcType, out int npcID)
        {
            mapCode = oldMapCode;
            npcType = oldNpcType;
            npcID = oldNpcID;

            if (-1 == oldMapCode)
            {
                return;
            }

            if (MapTypes.Normal == Global.GetMapType(oldMapCode))
            {
                return;
            }

            Global.GetTaskSourceNPCID(taskXml, out mapCode, out npcType, out npcID);
        }

        /// <summary>
        /// 获取任务的目标
        /// </summary>
        /// <param name="taskXml"></param>
        /// <param name="num"></param>
        /// <param name="mapCode"></param>
        /// <param name="npcType"></param>
        /// <param name="npcID"></param>
        /// <returns></returns>
        public static bool GetTaskTargetID(SystemXmlItem taskXml, int num, out int mapCode, out int npcType, out int npcID, bool replaceFuBen = true)
        {
            mapCode = -1;
            npcType = -1;
            npcID = -1;
            int targetType = (int)(TaskTypes.None);
            targetType = taskXml.GetIntValue(StringUtil.substitute("TargetType{0}", num));
            int targetNPC = taskXml.GetIntValue(StringUtil.substitute("TargetNPC{0}", num));
            if (targetType == (int)(TaskTypes.Talk))
            {
                if (-1 != targetNPC)
                {
                    SystemXmlItem xmlNode = null;
                    if (GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(targetNPC, out xmlNode))
                    {
                        mapCode = xmlNode.GetIntValue("MapCode");
                        npcType = (int)(GSpriteTypes.NPC);
                        npcID = xmlNode.GetIntValue("ID");
                    }
                }
            }
            else if (targetType == (int)(TaskTypes.KillMonster))
            {
                if (-1 != targetNPC)
                {
                    SystemXmlItem xmlNode = null;
                    if (GameManager.systemMonsterMgr.SystemXmlItemDict.TryGetValue(targetNPC, out xmlNode))
                    {
                        mapCode = xmlNode.GetIntValue("MapCode");
                        npcType = (int)(GSpriteTypes.Monster);
                        npcID = xmlNode.GetIntValue("ID");
                    }
                }
            }
            else if (targetType == (int)(TaskTypes.MonsterSomething))
            {
                if (-1 != targetNPC)
                {
                    SystemXmlItem xmlNode = null;
                    if (GameManager.systemMonsterMgr.SystemXmlItemDict.TryGetValue(targetNPC, out xmlNode))
                    {
                        mapCode = xmlNode.GetIntValue("MapCode");
                        npcType = (int)(GSpriteTypes.Monster);
                        npcID = xmlNode.GetIntValue("ID");
                    }
                }
            }
            else if (targetType == (int)(TaskTypes.UseSomething))
            {
            }
            else if (targetType == (int)(TaskTypes.TransferSomething))
            {
                if (-1 != targetNPC)
                {
                    SystemXmlItem xmlNode = null;
                    if (GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(targetNPC, out xmlNode))
                    {
                        mapCode = xmlNode.GetIntValue("MapCode");
                        npcType = (int)(GSpriteTypes.NPC);
                        npcID = xmlNode.GetIntValue("ID");
                    }
                }
            }
            else if (targetType == (int)(TaskTypes.NeedYuanBao))
            {
                if (-1 != targetNPC)
                {
                    SystemXmlItem xmlNode = null;
                    if (GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(targetNPC, out xmlNode))
                    {
                        mapCode = xmlNode.GetIntValue("MapCode");
                        npcType = (int)(GSpriteTypes.NPC);
                        npcID = xmlNode.GetIntValue("ID");
                    }
                }
            }
            else if (targetType == (int)(TaskTypes.CaiJiGoods))
            {
                if (-1 != targetNPC)
                {
                    SystemXmlItem xmlNode = null;
                    if (GameManager.systemMonsterMgr.SystemXmlItemDict.TryGetValue(targetNPC, out xmlNode))
                    {
                        mapCode = xmlNode.GetIntValue("MapCode");
                        npcType = (int)(GSpriteTypes.Monster);
                        npcID = xmlNode.GetIntValue("ID");
                    }
                }
            }
            else if (targetType == (int)(TaskTypes.ZhiLiao))
            {
                if (-1 != targetNPC)
                {
                    SystemXmlItem xmlNode = null;
                    if (GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(targetNPC, out xmlNode))
                    {
                        mapCode = xmlNode.GetIntValue("MapCode");
                        npcType = (int)(GSpriteTypes.Monster);
                        npcID = xmlNode.GetIntValue("ID");
                    }
                }
            }
            else if (targetType == (int)(TaskTypes.FangHuo))
            {
                if (-1 != targetNPC)
                {
                    SystemXmlItem xmlNode = null;
                    if (GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(targetNPC, out xmlNode))
                    {
                        mapCode = xmlNode.GetIntValue("MapCode");
                        npcType = (int)(GSpriteTypes.Monster);
                        npcID = xmlNode.GetIntValue("ID");
                    }
                }
            }
            else if (targetType != (int)(TaskTypes.UseSomething))
            {
                if (-1 != targetNPC)
                {
                    SystemXmlItem xmlNode = null;
                    if (GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(targetNPC, out xmlNode))
                    {
                        mapCode = xmlNode.GetIntValue("MapCode");
                        npcType = (int)(GSpriteTypes.NPC);
                        npcID = xmlNode.GetIntValue("ID");
                    }
                }
            }

            if (replaceFuBen)
            {
                Global.ProcessFuBenNPCOrMonster(taskXml, mapCode, npcType, npcID, out mapCode, out npcType, out npcID);
            }
            return true;
        }

        /// <summary>
        /// 处理任务寻路
        /// </summary>
        /// <param name="taskID"></param>
        public static void ProcessAutoTaskFindRoad(GameClient client, int taskID)
        {
            SystemXmlItem taskXmlNode = null;
            if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out taskXmlNode))
            {
                return;
            }

            int buttonID = taskXmlNode.GetIntValue("Teleports");
            if (buttonID <= 0)
            {
                return;
            }

            TaskData taskData = Global.GetTaskData(client, taskID);
            if (null == taskData)
            {
                return;
            }

            int mapCode = -1;
            int npcType = -1;
            int npcID = -1;
            Point toMapPos = new Point(0, 0);

            GameMap gameMap = GameManager.MapMgr.DictMaps[client.ClientData.MapCode];

            int direction = client.ClientData.RoleDirection;
            if (!Global.JugeTaskComplete(taskData.DoingTaskID, taskData.DoingTaskVal1, taskData.DoingTaskVal2))
            {
                if (!Global.JugeTaskTargetComplete(taskXmlNode, 1, taskData.DoingTaskVal1))
                {
                    Global.GetTaskTargetID(taskXmlNode, 1, out mapCode, out npcType, out npcID);
                    if (-1 == mapCode)
                    {
                        if (taskXmlNode.GetIntValue("TargetMapCode1") >= 0)
                        {
                            int targetType = taskXmlNode.GetIntValue("TargetType1");
                            int targetMapCode1 = taskXmlNode.GetIntValue("TargetMapCode1");
                            string targetPos1 = taskXmlNode.GetStringValue("TargetPos1");
                            if ("" != targetPos1)
                            {
                                int[] pts = Global.String2IntArray(targetPos1);
                                if (null != pts && pts.Length == 2)
                                {
                                    toMapPos = new Point((int)(pts[0] / gameMap.MapGridWidth) * gameMap.MapGridWidth + gameMap.MapGridWidth / 2, (int)(pts[1] / gameMap.MapGridHeight) * gameMap.MapGridHeight + gameMap.MapGridHeight / 2);
                                    mapCode = targetMapCode1;
                                    npcType = -1;
                                }
                            }
                        }
                    }
                }
                else
                {
                    Global.GetTaskTargetID(taskXmlNode, 2, out mapCode, out npcType, out npcID);
                    if (-1 == mapCode)
                    {
                        if (taskXmlNode.GetIntValue("TargetMapCode2") >= 0)
                        {
                            int targetType = taskXmlNode.GetIntValue("TargetType2");
                            int targetMapCode2 = taskXmlNode.GetIntValue("TargetMapCode2");
                            string targetPos2 = taskXmlNode.GetStringValue("TargetPos2");
                            if ("" != targetPos2)
                            {
                                int[] pts = Global.String2IntArray(targetPos2);
                                if (null != pts && pts.Length == 2)
                                {
                                    toMapPos = new Point((int)(pts[0] / gameMap.MapGridWidth) * gameMap.MapGridWidth + gameMap.MapGridWidth / 2, (int)(pts[1] / gameMap.MapGridHeight) * gameMap.MapGridHeight + gameMap.MapGridHeight / 2);
                                    mapCode = targetMapCode2;
                                    npcType = -1;
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                npcID = taskXmlNode.GetIntValue("DestNPC");
                SystemXmlItem xmlNode = null;
                if (GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(npcID, out xmlNode))
                {
                    mapCode = xmlNode.GetIntValue("MapCode");
                    npcType = (int)(GSpriteTypes.NPC);
                    npcID = xmlNode.GetIntValue("ID");
                }
            }

            if (-1 != mapCode)
            {
                Point pt = new Point(-1, -1);
                if (npcType == (int)(GSpriteTypes.Monster))
                {
                    pt = GameManager.MonsterZoneMgr.GetMonsterPointByMapCodeAndMonsterID(mapCode, npcID);
                    pt = Global.GetMapPoint(ObjectTypes.OT_CLIENT, mapCode, (int)pt.X, (int)pt.Y, 64 * 4);
                }
                else if (npcType == (int)(GSpriteTypes.NPC))
                {
                    NPC npc = NPCGeneralManager.FindNPC(mapCode, npcID);
                    if (null != npc)
                    {
                        pt = new Point(npc.GridPoint.X * gameMap.MapGridWidth + gameMap.MapGridWidth / 2, npc.GridPoint.Y * gameMap.MapGridHeight + gameMap.MapGridHeight / 2);
                        List<Point> npcFrontPoints = Global.GetGridPointByDirection(4, (int)npc.GridPoint.X, (int)npc.GridPoint.Y, 3);
                        int c = npcFrontPoints.Count;
                        for (int i = 0; i < c; i++)
                        {
                            int idx = Global.GetRandomNumber(0, npcFrontPoints.Count);
                            Point p = npcFrontPoints[idx];
                            if (!Global.InOnlyObs(ObjectTypes.OT_CLIENT, mapCode, (int)p.X, (int)p.Y))
                            {
                                pt = new Point(p.X * gameMap.MapGridWidth + gameMap.MapGridWidth / 2, p.Y * gameMap.MapGridHeight + gameMap.MapGridHeight / 2);
                                direction = 0;
                                break;
                            }
                            else
                            {
                                npcFrontPoints.RemoveAt(idx);
                            }
                        }
                    }
                }
                else
                {
                    pt = toMapPos;
                }
                if (pt.X == -1 || pt.Y == -1)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("根据任务ID传送失败, RoleID={0}, 路径信息格式错误 ,无法自动寻路", client.ClientData.RoleID));
                }
                else
                {
                    GameManager.LuaMgr.GotoMap(client, mapCode, (int)pt.X, (int)pt.Y, direction);
                }
            }
        }

        /// <summary>
        /// 进入任务目标所在的副本
        /// </summary>
        /// <param name="fuBenID"></param>
        public static void EnterTaskTargetFuBen(GameClient client, int toMapCode)
        {
            int fuBenID = FuBenManager.FindFuBenIDByMapCode(toMapCode);
            if (-1 == fuBenID)
            {
                return;
            }

            //从DBServer获取副本顺序ID
            string[] dbFields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_GETFUBENSEQID, string.Format("{0}", client.ClientData.RoleID), client.ServerId);
            if (null == dbFields || dbFields.Length < 2)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener,
                    Global._TCPManager.TcpOutPacketPool, client,
                    StringUtil.substitute(Global.GetLang("进入任务目标副本时错误, 从DBServer获取副本序号失败")),
                    GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                return;
            }

            int fuBenSeqID = Global.SafeConvertToInt32(dbFields[1]);

            //增加副本今日的进入次数
            Global.UpdateFuBenData(client, fuBenID);

            //通知用户切换地图到副本的地图上
            GameMap gameMap = null;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener,
                    Global._TCPManager.TcpOutPacketPool, client,
                    StringUtil.substitute(Global.GetLang("进入任务目标副本时错误, 地图编号无效")),
                    GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                return;
            }

            //设置角色的副本顺序ID
            client.ClientData.FuBenSeqID = fuBenSeqID;

            //添加一个角色到副本顺序ID的映射
            FuBenManager.AddFuBenSeqID(client.ClientData.RoleID, client.ClientData.FuBenSeqID, 0, fuBenID);

            GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                client, toMapCode, -1, -1, -1);
        }

        /// <summary>
        /// 角色接受新的任务
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static TCPProcessCmdResults TakeNewTask(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, GameClient client, int roleID, int taskID, int npcID, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;

            SystemXmlItem systemTask = null;
            if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("外挂接受新任务, 任务不存在, CMD={0}, Client={1}, RoleID={2}, TaskID={3}, NPCID={4}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, taskID, npcID));
                return TCPProcessCmdResults.RESULT_OK;
            }

            //如果是跑环任务，则跳过，后边单独处理
            int taskClass = systemTask.GetIntValue("TaskClass");
            if (taskClass >= (int)TaskClasses.CircleTaskStart && taskClass <= (int)TaskClasses.CircleTaskEnd) //如果是跑环任务 
            {
                // 是否还能接受跑环任务
                bool canTaskPaoHuanTask = Global.CanTaskPaoHuanTask(client, taskClass);

                //判断当前是否还能接日跑环任务
                if (!canTaskPaoHuanTask)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("外挂接受新任务, 跑环任务超出次数限制, CMD={0}, Client={1}, RoleID={2}, TaskID={3}, NPCID={4}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, taskID, npcID));
                    return TCPProcessCmdResults.RESULT_OK;
                }
            }

            //判断是否是能接的新任务
            if (!Global.CanTakeNewTask(client, taskID, systemTask))
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("外挂接受新任务, 任务不能再接, CMD={0}, Client={1}, RoleID={2}, TaskID={3}, NPCID={4}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID, taskID, npcID - SpriteBaseIds.NpcBaseId));
                return TCPProcessCmdResults.RESULT_OK;
            }

            string strcmd = "";

            TaskData taskData = new TaskData()
            {
                DbID = -1,
                DoingTaskID = taskID,
            };

            /// 是否是给予物品的任务类型, 如果是返回物品个数(虚拟物品返回0)
            int giveGoodsID = -1;
            int needGoodsGridNum = Global.GetSomethingTaskNeedGoodsNum(client, taskID, npcID, (npcID - SpriteBaseIds.NpcBaseId), out giveGoodsID);
            if (needGoodsGridNum > 0 && -1 != giveGoodsID)
            {
                if (Global.GetGoodsByID(client, giveGoodsID) == null && !Global.CanAddGoods(client, giveGoodsID, 1, 1))
                {
                    //判断接任务是否需要给予物品，如果是则要判断背包是否有空格

                    taskData.DbID = -100;
                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket<TaskData>(taskData, pool, nID);
                    return TCPProcessCmdResults.RESULT_DATA;
                }
            }

            int focus = 0;

            //if (GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
            {
                //if (systemTask.GetIntValue("TaskClass") <= (int)TaskClasses.MainTask) //主线任务
                {
                    focus = 1;

                    //获取当前追踪的任务的个数
                    if (Global.GetFocusTaskCount(client) >= Data.TaskMaxFocusCount)
                    {
                        focus = 0;
                    }
                }
            }

            // 如果是日常跑环任务 [12/5/2013 LiaoWei]
            // 日常任务随机星级
            int nStarLevel = 1;
            if (taskClass == (int)TaskClasses.DailyTask)
            {
                int randPercent = Global.GetRandomNumber(1, 10001);

                int nNum = 0;
                int[] nArrPercent = new int[Data.TaskStarInfo.Count];

                for (int i = 0; i < Data.TaskStarInfo.Count; ++i)
                {
                    nArrPercent[i] = Data.TaskStarInfo[i].Probability + nNum;
                    nNum = nArrPercent[i];
                }

                for (int j = 0; j < nArrPercent.Length; ++j)
                {
                    if (randPercent <= nArrPercent[j])
                    {
                        nStarLevel = Data.TaskStarInfo[j].ID;
                        break;
                    }
                }

            }

            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", roleID, npcID, taskID, focus, nStarLevel);

            string[] fieldsData = null;
            if (TCPProcessCmdResults.RESULT_FAILED == Global.RequestToDBServer(tcpClientPool, pool, nID, strcmd, out fieldsData, client.ServerId))
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID));

                taskData.DbID = -999;
                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<TaskData>(taskData, pool, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            strcmd = "";
            if (Convert.ToInt32(fieldsData[3]) < 0) //添加出错
            {
                taskData.DbID = Convert.ToInt32(fieldsData[3]);
                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<TaskData>(taskData, pool, nID);
                return TCPProcessCmdResults.RESULT_DATA;
            }

            //添加到角色的列表中
            if (null == client.ClientData.TaskDataList)
            {
                client.ClientData.TaskDataList = new List<TaskData>();
            }

            taskData.DbID = Convert.ToInt32(fieldsData[3]);
            taskData.DoingTaskVal1 = 0;
            taskData.DoingTaskVal2 = 0;
            taskData.DoingTaskFocus = focus;
            taskData.AddDateTime = Convert.ToInt64(fieldsData[2]);
            taskData.DoneCount = 0;
            taskData.StarLevel = nStarLevel;

            OldTaskData oldTaskData = Global.FindOldTaskByTaskID(client, taskID);
            if (null != oldTaskData)
            {
                taskData.DoneCount = oldTaskData.DoCount;
            }

            //将任务数据发送给用户前, 进行预先处理
            Global.ProcessTaskData(client, taskData);

            lock (client.ClientData.TaskDataList)
            {
                client.ClientData.TaskDataList.Add(taskData);
            }

            //如果是使用物品4, 或者是传递物品，则先将物品放入用户的包裹中

            //提前发送，否则无法判断任务是否完成
            tcpOutPacket = DataHelper.ObjectToTCPOutPacket<TaskData>(taskData, pool, nID);
            if (!tcpMgr.MySocketListener.SendData(client.ClientSocket, tcpOutPacket))
            {
                //
                /*LogManager.WriteLog(LogTypes.Error, string.Format("向用户发送tcp数据失败: ID={0}, Size={1}, RoleID={2}, RoleName={3}",
                    tcpOutPacket.PacketCmdID,
                    tcpOutPacket.PacketDataSize,
                    client.ClientData.RoleID,
                    client.ClientData.RoleName));*/
            }

            /////////////////////////////////////////////////////////////////////////////////////////////////////////

            int state = 0;
            int sourceNPC = systemTask.GetIntValue("SourceNPC");
            if (sourceNPC >= 0)
            {
                // NPC的任务状态更新通知
                state = Global.ComputeNPCTaskState(client, client.ClientData.TaskDataList, sourceNPC);
                GameManager.ClientMgr.NotifyUpdateNPCTaskSate(tcpMgr.MySocketListener, pool, client, sourceNPC + SpriteBaseIds.NpcBaseId, state);
            }

            ProcessTask.Process(tcpMgr.MySocketListener, pool, client, npcID, (npcID - SpriteBaseIds.NpcBaseId), -1, TaskTypes.GetSomething);

            //修改目标NPC的状态
            systemTask = null;
            if (GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
            {
                int destNPC = systemTask.GetIntValue("DestNPC");
                if (-1 != destNPC && destNPC != (npcID - SpriteBaseIds.NpcBaseId))
                {
                    state = Global.ComputeNPCTaskState(client, client.ClientData.TaskDataList, destNPC);
                    GameManager.ClientMgr.NotifyUpdateNPCTaskSate(tcpMgr.MySocketListener, pool, client, (destNPC + SpriteBaseIds.NpcBaseId), state);
                }

                string goodsName1 = systemTask.GetStringValue("PropsName1");
                string goodsName2 = systemTask.GetStringValue("PropsName2");
                int goodsID1 = "" != goodsName1 ? Global.GetGoodsByName(goodsName1) : -1;
                int goodsID2 = "" != goodsName2 ? Global.GetGoodsByName(goodsName2) : -1;

                // 处理任务
                if (goodsID1 >= 0)
                {
                    ProcessTask.Process(tcpMgr.MySocketListener, pool, client, -1, -1, goodsID1, TaskTypes.BuySomething);
                }

                if (goodsID2 >= 0)
                {
                    ProcessTask.Process(tcpMgr.MySocketListener, pool, client, -1, -1, goodsID2, TaskTypes.BuySomething);
                }
            }

            return TCPProcessCmdResults.RESULT_OK;
        }

        /// <summary>
        /// 修正MainTaskID的问题
        /// </summary>
        /// <param name="roleDataEx"></param>
        public static void FixMainTaskID(RoleDataEx roleDataEx)
        {
            if (null == roleDataEx.OldTasks)
            {
                return;
            }

            int toUpdateMainTaskID = 0;
            for (int i = 0; i < roleDataEx.OldTasks.Count; i++)
            {
                int taskID = roleDataEx.OldTasks[i].TaskID;
                SystemXmlItem systemTask = null;
                if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
                {
                    continue;
                }

                if ((int)TaskClasses.MainTask == systemTask.GetIntValue("TaskClass")) //判断是否是主线任务
                {
                    toUpdateMainTaskID = Global.GMax(roleDataEx.OldTasks[i].TaskID, toUpdateMainTaskID);
                }
            }

            if (toUpdateMainTaskID > roleDataEx.MainTaskID)
            {
                roleDataEx.MainTaskID = toUpdateMainTaskID;
            }
        }

        #endregion 任务管理

        #region 日常任务管理

        /// <summary>
        /// 猎杀日常的每日次数上限
        /// </summary>
        private const int MaxLieShaDailyNum = 10;

        /// <summary>
        /// 猎杀日常的每日次数上限(VIP)
        /// </summary>
        private const int MaxLieShaDailyNumForVIP = 15;

        /// <summary>
        /// 武学日常的每日次数上限
        /// </summary>
        private const int MaxWuXueDailyNum = 10;

        /// <summary>
        /// 军功日常的每日次数上限
        /// </summary>
        private const int MaxJunGongDailyNum = 6;

        /// <summary>
        /// 魔族帮会的每日次数上限
        /// </summary>
        private const int MaxMoZuShiLiDailyNum = 1;

        /// <summary>
        /// 帮会日常的每日次数上限
        /// </summary>
        private const int MaxBangHuiDailyNum = 10;

        /// <summary>
        /// Mu项目日常任务每日次数上限  [12/3/2013 LiaoWei]
        /// </summary>
        public const int MaxDailyTaskNumForMU = 10;

        /// <summary>
        /// Mu项目讨伐任务每日次数上限
        /// </summary>
        public static int MaxTaofaTaskNumForMU = 5;

        /// <summary>
        /// 获取日常任务次数
        /// </summary>
        /// <param name="taskClass"></param>
        /// <returns></returns>
        public static int GetMaxDailyTaskNum(GameClient client, int taskClass, DailyTaskData dailyTaskData)
        {
            int todayID = (int)TimeUtil.NowDateTime().DayOfYear;
            int extNum = 0;
            if (todayID == dailyTaskData.ExtDayID)
            {
                extNum = dailyTaskData.ExtNum;
            }

            if ((int)TaskClasses.LieshaTask == taskClass) //猎杀日常
            {
                if (Global.IsVip(client))
                {
                    return (Global.MaxLieShaDailyNumForVIP + extNum);
                }

                return (Global.MaxLieShaDailyNum + extNum);
            }
            else if ((int)TaskClasses.WuxueTask == taskClass) //武学日常
            {
                return (Global.MaxWuXueDailyNum + extNum);
            }
            else if ((int)TaskClasses.JungongTask == taskClass) //军功日常
            {
                return (Global.MaxJunGongDailyNum + extNum);
            }
            else if ((int)TaskClasses.MozuTask == taskClass) //魔族帮会
            {
                return (Global.MaxMoZuShiLiDailyNum + extNum);
            }
            else if ((int)TaskClasses.BanghuiTask == taskClass) //帮会任务
            {
                return (Global.MaxBangHuiDailyNum + extNum);
            }
            else if ((int)TaskClasses.DailyTask == taskClass) // 日常跑环任务 -- MU新增任务类型 [12/3/2013 LiaoWei]
            {
                return (Global.MaxDailyTaskNumForMU + extNum);
            }
            else if ((int)TaskClasses.TaofaTask == taskClass) // 日常跑环任务 -- MU新增任务类型 [12/3/2013 LiaoWei]
            {
                return (Global.MaxTaofaTaskNumForMU + extNum);
            }
            return 0;
        }

        /// <summary>
        /// 检查军功日常(增加额外的次数)
        /// </summary>
        /// <param name="dailyTaskData"></param>
        private static void CheckJunGongDailyTask(GameClient client, DailyTaskData dailyTaskData)
        {
            if (null == dailyTaskData)
            {
                return;
            }

            if (string.IsNullOrEmpty(dailyTaskData.RecTime))
            {
                return;
            }

            DateTime dateTime;
            if (!DateTime.TryParse(dailyTaskData.RecTime, out dateTime))
            {
                return;
            }

            int lastDayID = (int)dateTime.DayOfYear;
            int todayID = (int)TimeUtil.NowDateTime().DayOfYear;
            if (lastDayID == todayID) //已经相同，所以不再处理
            {
                return;
            }

            ///多重保护，防止出错
            if (dailyTaskData.ExtDayID == todayID)
            {
                return;
            }

            int extNum = 0;
            int elapsedDayNum = Math.Min(5, Math.Abs(todayID - lastDayID));
            elapsedDayNum -= 1;
            elapsedDayNum = Global.GMax(0, elapsedDayNum);

            extNum = elapsedDayNum * Global.MaxJunGongDailyNum;
            extNum += Global.GMax(0, Global.MaxJunGongDailyNum - dailyTaskData.RecNum);

            //string today = TimeUtil.NowDateTime().ToString("yyyy-MM-dd");
            //dailyTaskData.RecTime = today;
            //dailyTaskData.RecNum = 0;

            dailyTaskData.ExtDayID = todayID;
            //dailyTaskData.ExtNum = Global.GMin(Global.MaxJunGongDailyNum * 5, dailyTaskData.ExtNum + extNum); //一直累积不起作用，是因为每天都上线，导致总是+6， 覆盖掉旧的了
            int lastExtNum = dailyTaskData.ExtNum - Global.GMax(0, dailyTaskData.RecNum - Global.MaxJunGongDailyNum);
            dailyTaskData.ExtNum = Global.GMin(Global.MaxJunGongDailyNum * 5, Global.GMax(0, lastExtNum + extNum)); //会导致一直累积太多，【定一个简单的规则，今天上线补充的，必须做完，否则，从明天开始重新开始计算】
            //这里出现了负数，所以要追查下。

            //更新日常任务
            Global.UpdateDBDailyTaskData(client, dailyTaskData, false);
        }

        /// <summary>
        /// 检查MU日常任务
        /// </summary>
        /// <param name="dailyTaskData"></param>
        private static void CheckRiChangDailyTask(GameClient client, DailyTaskData dailyTaskData)
        {
            if (null == dailyTaskData)
            {
                return;
            }

            if (string.IsNullOrEmpty(dailyTaskData.RecTime))
            {
                return;
            }

            DateTime dateTime;
            if (!DateTime.TryParse(dailyTaskData.RecTime, out dateTime))
            {
                return;
            }

            int lastDayID = (int)dateTime.DayOfYear;
            int todayID = (int)TimeUtil.NowDateTime().DayOfYear;
            if (lastDayID == todayID) //已经相同，所以不再处理
            {
                return;
            }
            //日常任务保存旧数据，用于资源找回
            client.ClientData.YesterdayDailyTaskData = new DailyTaskData()
            {
                RecNum = dailyTaskData.RecNum,
                RecTime = dailyTaskData.RecTime
            };

            string today = TimeUtil.NowDateTime().ToString("yyyy-MM-dd");
            dailyTaskData.RecTime = today;
            dailyTaskData.RecNum = 0;

            //更新日常任务
            Global.UpdateDBDailyTaskData(client, dailyTaskData, true);
        }

        /// <summary>
        /// 检查MU讨伐任务
        /// </summary>
        /// <param name="dailyTaskData"></param>
        private static void CheckTaofaDailyTask(GameClient client, DailyTaskData dailyTaskData)
        {
            if (null == dailyTaskData)
            {
                return;
            }

            if (string.IsNullOrEmpty(dailyTaskData.RecTime))
            {
                return;
            }

            DateTime dateTime;
            if (!DateTime.TryParse(dailyTaskData.RecTime, out dateTime))
            {
                return;
            }

            int lastDayID = (int)dateTime.DayOfYear;
            int todayID = (int)TimeUtil.NowDateTime().DayOfYear;
            if (lastDayID == todayID) //已经相同，所以不再处理
            {
                return;
            }
            //日常任务保存旧数据，用于资源找回
            client.ClientData.YesterdayTaofaTaskData = new DailyTaskData()
            {
                RecNum = dailyTaskData.RecNum,
                RecTime = dailyTaskData.RecTime
            };

            string today = TimeUtil.NowDateTime().ToString("yyyy-MM-dd");
            dailyTaskData.RecTime = today;
            dailyTaskData.RecNum = 0;

            //更新日常任务
            Global.UpdateDBDailyTaskData(client, dailyTaskData, true);
        }

        /// <summary>
        /// 查找日跑环
        /// </summary>
        /// <param name="client"></param>
        /// <param name="taskClass"></param>
        /// <returns></returns>
        public static DailyTaskData FindDailyTaskDataByTaskClass(GameClient client, int taskClass)
        {
            if (null == client.ClientData.MyDailyTaskDataList) return null;
            for (int i = 0; i < client.ClientData.MyDailyTaskDataList.Count; i++)
            {
                if (client.ClientData.MyDailyTaskDataList[i].TaskClass == taskClass)
                {
                    return client.ClientData.MyDailyTaskDataList[i];
                }
            }

            return null;
        }

        /// <summary>
        /// 添加跑环
        /// </summary>
        /// <param name="client"></param>
        /// <param name="taskClass"></param>
        /// <returns></returns>
        public static void AddDailyTaskData(GameClient client, DailyTaskData dailyTaskData)
        {
            if (null == client.ClientData.MyDailyTaskDataList)
            {
                client.ClientData.MyDailyTaskDataList = new List<DailyTaskData>();
            }

            client.ClientData.MyDailyTaskDataList.Add(dailyTaskData);
        }

        /// <summary>
        /// 查找已经接受的任务中是否有跑环任务
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool FindPaoHuanTask(GameClient client, int taskClass)
        {
            if (null == client.ClientData.TaskDataList) return false;

            bool ret = false;
            lock (client.ClientData.TaskDataList)
            {
                for (int i = 0; i < client.ClientData.TaskDataList.Count; i++)
                {
                    SystemXmlItem systemTask = null;
                    if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(client.ClientData.TaskDataList[i].DoingTaskID, out systemTask))
                    {
                        continue;
                    }

                    if (taskClass == systemTask.GetIntValue("TaskClass")) //如果是跑环任务
                    {
                        ret = true;
                        break;
                    }
                }
            }

            return ret;
        }

        /// <summary>
        /// 是否还能接受跑环任务
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool CanTaskPaoHuanTask(GameClient client, int taskClass)
        {
            //查找已经接受的任务中是否有跑环任务
            if (Global.FindPaoHuanTask(client, taskClass))
            {
                return false;
            }

            //没开启就不用继续判断了
            switch (taskClass)
            {
                case (int)TaskClasses.DailyTask:
                    if (!GlobalNew.IsGongNengOpened(client, GongNengIDs.RiChangRenWu))
                        return false;
                    break;
                case (int)TaskClasses.TaofaTask:
                    if (!GlobalNew.IsGongNengOpened(client, GongNengIDs.TaofaRenWu))
                        return false;
                    break;
            }

            //判断是否超过了最大的上限次数
            if (null == client.ClientData.MyDailyTaskDataList)
            {
                return true;
            }

            DailyTaskData dailyTaskData = Global.FindDailyTaskDataByTaskClass(client, taskClass);
            if (null == dailyTaskData)
            {
                return true;
            }

            string today = TimeUtil.NowDateTime().ToString("yyyy-MM-dd");
            //int huanID = 1; //固定的环，不再按照等级区分

            //配置文件中的作废
            //int dailyTaskMaxNum = (int)GameManager.systemParamsList.GetParamValueIntByName(string.Format("DailyTaskMaxNum{0}", huanID));
            //if (dailyTaskData.HuanID == huanID)

            //获取日常任务次数
            int maxNum = Global.GetMaxDailyTaskNum(client, taskClass, dailyTaskData);
            if (maxNum <= 0)
            {
                return false;
            }

            if (dailyTaskData.RecTime == today)
            {
                if (dailyTaskData.RecNum >= maxNum)
                {
                    return false;
                }
            }

            return true;
        }

        /// <summary>
        /// 更新日跑环的数据
        /// </summary>
        /// <param name="client"></param>
        public static bool UpdateDailyTaskData(GameClient client, int taskHuanID, long taskAddDateTime, int taskClass, bool bIsOneClickComlete = false)
        {
            int huanID = 1; //作废，统一使用1环

            //int huanID = client.ClientData.Level / 10;
            //if (taskHuanID != huanID) //旧的跑环任务, 不再记录
            //{
            //    return;
            //}

            string taskDateTime = (new DateTime(taskAddDateTime * 10000)).ToString("yyyy-MM-dd");
            string today = TimeUtil.NowDateTime().ToString("yyyy-MM-dd");

            //强迫重新刷新跑环任务
            PaoHuanTasksMgr.SetPaoHuanHistTaskID(client.ClientData.RoleID, taskClass, -1);

            //获得日常任务数据如果没有就创建一个新的
            DailyTaskData dailyTaskData = null;
            GetDailyTaskData(client, taskClass, out dailyTaskData, false);
            if (null == dailyTaskData)
                return false;

            //旧跑环任务,更新本日跑环次数信息给客户端,不计入今日环数,今日环数清零
            //今日跑环任务更新计数
            int maxNum = Global.GetMaxDailyTaskNum(client, taskClass, dailyTaskData);
            if (dailyTaskData.RecTime == today)
            {
                dailyTaskData.RecNum++;
                if (dailyTaskData.RecNum >= maxNum)
                {
                    Global.AddPaoHuanEvent(client, taskClass);
                }
            }
            else
            {
                dailyTaskData.RecTime = today;
                dailyTaskData.RecNum = 0;

                if (bIsOneClickComlete == true)
                    return false;
            }

            //更新日常任务
            Global.UpdateDBDailyTaskData(client, dailyTaskData, true);

            return true;
        }

        /// <summary>
        /// 使用道具增加额外的日常任务次数，应当判断是否开启了这项每日任务
        /// </summary>
        /// <param name="client"></param>
        /// <param name="taskClass"></param>
        /// <param name="addNum"></param>
        public static void AddExtNumByGoods(GameClient client, int taskClass, int addNum)
        {
            //获得环式任务数据如果没有就创建一个新的
            DailyTaskData dailyTaskData = null;
            GetDailyTaskData(client, taskClass, out dailyTaskData, false);
            if (null == dailyTaskData)
                return;

            int dayID = (int)TimeUtil.NowDateTime().DayOfYear;

            int maxNum = Global.GetMaxDailyTaskNum(client, taskClass, dailyTaskData);
            if (dailyTaskData.ExtDayID == dayID)
            {
                dailyTaskData.ExtNum += addNum;
            }
            else
            {
                dailyTaskData.ExtDayID = dayID;
                dailyTaskData.ExtNum = addNum;
            }

            //更新日常任务
            Global.UpdateDBDailyTaskData(client, dailyTaskData, true);
        }

        /// <summary>
        /// 更新日常任务
        /// </summary>
        /// <param name="client"></param>
        /// <param name="dailyTaskData"></param>
        public static void UpdateDBDailyTaskData(GameClient client, DailyTaskData dailyTaskData, bool notifyClient = true)
        {
            //更新DBServer的日跑环数据
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEDAILYTASKDATA,
                string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}",
                client.ClientData.RoleID,
                dailyTaskData.HuanID,
                dailyTaskData.RecTime,
                dailyTaskData.RecNum,
                dailyTaskData.TaskClass,
                dailyTaskData.ExtDayID,
                dailyTaskData.ExtNum),
                null, client.ServerId);

            if (notifyClient)
            {
                //将新的日常任务数据通知自己
                GameManager.ClientMgr.NotifyDailyTaskData(client);
            }
        }

        /// <summary>
        /// 初始化角色的各种每日环式任务
        /// </summary>
        /// <param name="client"></param>
        public static void InitRoleDailyTaskData(GameClient client, bool isNewday)
        {
            DailyTaskData dailyTaskData = null;

            //目前军功日常是必然开启的？
            {
                GetDailyTaskData(client, (int)TaskClasses.JungongTask, out dailyTaskData, true);
            }

            //日常
            if (GlobalNew.IsGongNengOpened(client, GongNengIDs.RiChangRenWu))
            {
                GetDailyTaskData(client, (int)TaskClasses.DailyTask, out dailyTaskData, true);
            }

            //讨伐
            if (GlobalNew.IsGongNengOpened(client, GongNengIDs.TaofaRenWu))
            {
                GetDailyTaskData(client, (int)TaskClasses.TaofaTask, out dailyTaskData, true);
            }

            if (isNewday)
            {
                for (int i = 0; i < client.ClientData.MyDailyTaskDataList.Count; i++)
                {
                    if ((int)TaskClasses.JungongTask == client.ClientData.MyDailyTaskDataList[i].TaskClass) //如果是军功日常
                    {
                        /// 检查军功日常(增加额外的次数)
                        Global.CheckJunGongDailyTask(client, client.ClientData.MyDailyTaskDataList[i]);
                    }
                    else if ((int)TaskClasses.DailyTask == client.ClientData.MyDailyTaskDataList[i].TaskClass) //如果是MU日常任务
                    {
                        /// 检查日常(增加额外的次数)
                        Global.CheckRiChangDailyTask(client, client.ClientData.MyDailyTaskDataList[i]);
                    }
                    else if ((int)TaskClasses.TaofaTask == client.ClientData.MyDailyTaskDataList[i].TaskClass) //如果是MU讨伐任务
                    {
                        /// 检查讨伐任务(增加额外的次数)
                        Global.CheckTaofaDailyTask(client, client.ClientData.MyDailyTaskDataList[i]);
                    }
                }
            }
        }

        /// <summary>
        /// 获得日常任务数据，如果没有就创建一个新的
        /// </summary>
        /// <param name="client"></param>
        public static void GetDailyTaskData(GameClient client, int taskclass, out DailyTaskData dailyTaskData, bool notifydb /*=false*/)
        {
            dailyTaskData = Global.FindDailyTaskDataByTaskClass(client, taskclass);
            if (null == dailyTaskData)
            {
                dailyTaskData = new DailyTaskData();
                dailyTaskData.HuanID = 1;
                dailyTaskData.RecTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd");
                dailyTaskData.RecNum = 0;
                dailyTaskData.TaskClass = taskclass;
                dailyTaskData.ExtDayID = 0;
                dailyTaskData.ExtNum = 0;

                Global.AddDailyTaskData(client, dailyTaskData);

                /// 更新日常任务
                if (notifydb)
                    Global.UpdateDBDailyTaskData(client, dailyTaskData, false);
            }
        }

        #endregion 日常任务管理

        #region vip日常数据管理
        /// <summary>
        /// vip 奖励列表，由 vip等级_奖励id 组成，里面包括角色终身一次的奖励
        /// </summary>
        protected static List<String> VipLevelAwardList = new List<String>();

        /// <summary>
        /// 判断是否vip 终身的单次奖励，由 100， 101， 102三个奖励ID过滤
        /// </summary>
        /// <param name="awardID"></param>
        /// <returns></returns>
        public static Boolean IsVipOnceAwardOfRole(int awardID)
        {
            return 100 == awardID || 101 == awardID || 102 == awardID;
        }

        /// <summary>
        /// 返回单次特权ID
        /// </summary>
        /// <param name="awardID"></param>
        /// <returns></returns>
        public static int GetVipOnceAwardPriorityID(GameClient client)
        {
            int vipType = Global.GetVipType(client);

            if ((int)VIPTypes.Month == vipType)
            {
                return 100;
            }
            else if ((int)VIPTypes.Season == vipType)
            {
                return 101;
            }
            if ((int)VIPTypes.HalfYear == vipType)
            {
                return 102;
            }

            return -1;
        }

        /// <summary>
        /// 判断是否能够领取单次的vip奖励
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static Boolean CanFetchOnceVipAward(GameClient client)
        {
            int vipType = Global.GetVipType(client);

            if ((int)VIPTypes.Month == vipType)
            {
                return (client.ClientData.OnceAwardFlag & OnceAwardMask.UseMonthVipCard) == 0;
            }
            else if ((int)VIPTypes.Season == vipType)
            {
                return (client.ClientData.OnceAwardFlag & OnceAwardMask.UseSeasonVipCard) == 0;
            }
            if ((int)VIPTypes.HalfYear == vipType)
            {
                return (client.ClientData.OnceAwardFlag & OnceAwardMask.UseHalfYearVipCard) == 0;
            }

            return false;
        }

        /// <summary>
        /// 更新单次vip领取标志
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static long UpdateOnceVipAwardFlag(GameClient client)
        {
            int vipType = Global.GetVipType(client);

            if ((int)VIPTypes.Month == vipType)
            {
                client.ClientData.OnceAwardFlag = client.ClientData.OnceAwardFlag | OnceAwardMask.UseMonthVipCard;
            }
            else if ((int)VIPTypes.Season == vipType)
            {
                client.ClientData.OnceAwardFlag = client.ClientData.OnceAwardFlag | OnceAwardMask.UseSeasonVipCard;
            }
            if ((int)VIPTypes.HalfYear == vipType)
            {
                client.ClientData.OnceAwardFlag = client.ClientData.OnceAwardFlag | OnceAwardMask.UseHalfYearVipCard;
            }

            return client.ClientData.OnceAwardFlag;
        }


        /// <summary>
        /// 加载vip等级奖励
        /// </summary>
        public static void LoadVipLevelAwardList()
        {
            List<String> vipLevelAwardList = new List<String>();

            string fileName = Global.GameResPath("Config/VIP.xml");
            XElement xml = XElement.Load(fileName);

            if (null == xml)
            {
                throw new Exception(string.Format("加载系统xml配置文件:{0}, 失败。没有找到相关XML配置文件!", fileName));
            }

            SystemXmlItem systemXmlItem = null;
            IEnumerable<XElement> nodes = xml.Elements("Items").Elements();

            foreach (var node in nodes)
            {
                systemXmlItem = new SystemXmlItem()
                {
                    XMLNode = node,
                };

                int type = (int)Global.GetSafeAttributeLong(node, "Type");
                int getID = (int)Global.GetSafeAttributeLong(node, "GetID");

                if (getID != 0)
                {
                    vipLevelAwardList.Add(String.Format("{0}_{1}", type, getID));
                }
            }

            VipLevelAwardList = vipLevelAwardList;
        }

        /// <summary>
        /// 返回vip类型，用于判断是月vip，季卡vip还是半年卡vip
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int GetVipType(GameClient client)
        {
            BufferData bufferData = Global.GetBufferDataByID(client, (int)BufferItemTypes.MonthVIP);
            if (null == bufferData)
            {
                return (int)VIPTypes.NoVip;
            }
            if (IsBufferDataOver(bufferData))
            {
                return (int)VIPTypes.NoVip;
            }

            return (int)bufferData.BufferVal;//这个值是vip具体类型
        }

        /// <summary>
        /// 返回vip类型，用于判断是月vip，季卡vip还是半年卡vip
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int GetVipType(SafeClientData clientData)
        {
            BufferData bufferData = Global.GetBufferDataByID(clientData, (int)BufferItemTypes.MonthVIP);
            if (null == bufferData)
            {
                return (int)VIPTypes.NoVip;
            }
            if (IsBufferDataOver(bufferData))
            {
                return (int)VIPTypes.NoVip;
            }

            return (int)bufferData.BufferVal;//这个值是vip具体类型
        }

        /// <summary>
        /// 返回vip类型，用于判断是月vip，季卡vip还是半年卡vip
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int GetVipType(List<BufferData> bufferDataList)
        {
            BufferData bufferData = Global.GetBufferDataByClientData(bufferDataList, (int)BufferItemTypes.MonthVIP);
            if (null == bufferData)
            {
                return (int)VIPTypes.NoVip;
            }
            if (IsBufferDataOver(bufferData))
            {
                return (int)VIPTypes.NoVip;
            }

            return (int)bufferData.BufferVal;//这个值是vip具体类型
        }

        /// <summary>
        /// 是否vip
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static Boolean IsVip(GameClient client)
        {
            //return CanUseVipPriority(client);
            return client.ClientData.VipLevel > 0;
        }

        /// <summary>
        /// 是否白银vip
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static Boolean IsVipOfMonth(GameClient client)
        {
            return GetVipType(client) == (int)VIPTypes.Month;
        }

        /// <summary>
        /// 是否黄金vip
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static Boolean IsVipOfSeason(GameClient client)
        {
            return GetVipType(client) == (int)VIPTypes.Season;
        }

        /// <summary>
        /// 是否钻石vip
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static Boolean IsVipOfHalfYear(GameClient client)
        {
            return GetVipType(client) == (int)VIPTypes.HalfYear;
        }

        ///返回vip的中文名称
        public static String GetVipTypeNameString(GameClient client)
        {
            if (IsVipOfMonth(client))
            {
                return Global.GetLang("白银VIP");
            }
            else if (IsVipOfSeason(client))
            {
                return Global.GetLang("黄金VIP");
            }
            else if (IsVipOfHalfYear(client))
            {
                return Global.GetLang("钻石VIP");
            }

            return "";
        }

        ///返回vip的领取元宝特权的信息
        public static int GetVipTypeGiveYuanBao(GameClient client)
        {
            if (IsVipOfMonth(client))
            {
                return 3000;
            }
            else if (IsVipOfSeason(client))
            {
                return 13500;
            }
            else if (IsVipOfHalfYear(client))
            {
                return 36000;
            }

            return 0;
        }

        /// <summary>
        /// 判断是否能使用vip功能
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool CanUseVipPriority(GameClient client)
        {
            BufferData bufferData = Global.GetBufferDataByID(client, (int)BufferItemTypes.MonthVIP);
            if (null == bufferData)
            {
                return false;
            }

            long nowTicks = TimeUtil.NOW();
            if ((nowTicks - bufferData.StartTime) >= ((long)bufferData.BufferSecs * 1000))
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// 判断是否能使用vip功能
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool CanUseVipPriority(List<BufferData> bufferDataList)
        {
            BufferData bufferData = Global.GetBufferDataByClientData(bufferDataList, (int)BufferItemTypes.MonthVIP);
            if (null == bufferData)
            {
                return false;
            }

            long nowTicks = TimeUtil.NOW();
            if ((nowTicks - bufferData.StartTime) >= ((long)bufferData.BufferSecs * 1000))
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// 通过特权类型查找vip日数据
        /// </summary>
        /// <param name="client"></param>
        /// <param name="priority"></param>
        /// <returns></returns>
        public static VipDailyData FindVipDailyDataByPriority(GameClient client, int priority)
        {
            if (null == client.ClientData.VipDailyDataList)
            {
                return null;
            }

            VipDailyData daily = null;
            for (int n = 0; n < client.ClientData.VipDailyDataList.Count; n++)
            {
                daily = client.ClientData.VipDailyDataList.ElementAt(n);
                if (daily.PriorityType == priority)
                {
                    return daily;
                }
            }

            return null;
        }

        /// <summary>
        /// 获取vip特权每日最大使用次数
        /// </summary>
        /// <param name="priority"></param>
        /// <returns></returns>
        public static int GetVipPriorityDailyMaxUseTimes(int priority)
        {
            int dailyMaxUseTimes = 0;

            SystemXmlItem xmlItem = null;

            if (!GameManager.systemVipDailyAwardsMgr.SystemXmlItemDict.TryGetValue(priority, out xmlItem) || null == xmlItem)
            {
                return dailyMaxUseTimes;
            }

            dailyMaxUseTimes = xmlItem.GetIntValue("DailyMaxUseTimes");

            if (dailyMaxUseTimes < 0)
            {
                dailyMaxUseTimes = 0;
            }

            return dailyMaxUseTimes;
        }

        /// <summary>
        /// 判断能否获取某项vip特权的奖励--->这个函数主要用于vip每日奖励，所以，如果是终身只能领取一次的vip奖励，这儿将返回负数
        /// </summary>
        /// <param name="client"></param>
        /// <param name="priority"></param>
        /// <returns></returns>
        public static int CanGiveVipDailyAwardForPriority(GameClient client, int priority, int dayID)
        {
#if 怒斩代码
            //判断是否ViP
            if (!Global.CanUseVipPriority(client))
            {
                return -10000;
            }

            //如果每日数据列表为空，可以给予奖励
            if (null == client.ClientData.VipDailyDataList)
            {
                return 1;
            }

            //判断vip类型 和 特权是否一致，不一致不能领取
            int vipType = Global.GetVipType(client);
            if (VipLevelAwardList.IndexOf(String.Format("{0}_{1}", vipType, priority)) < 0)
            {
                return -10002;
            }

            //如果是角色终身只能领取一次的vip奖励，这儿返回错误
            if (IsVipOnceAwardOfRole(priority))
            {
                return -10003;
            }

            //如果该项特权是学习技能，进行技能判断
            if (15 == priority)
            {
                if (!Global.HasNotLearnManuSkill(client))
                {
                    return -10004;//没有需要学习的
                }
                else if(!Global.CanLearnManuSkill(client))
                {
                    return -10005;//有需要学习的，但学习条件不满足
                }
            }

            //如果是洗红名，判断是否红名，不红名不需要洗
            if (14 == priority)
            {
                if (client.ClientData.PKValue <= 0)
                {
                    return -10006;//未红名，不需要洗
                }
            }
#else
            int needVIPLevel = 0;
            SystemXmlItem xmlItem = null;
            if (!GameManager.systemVipDailyAwardsMgr.SystemXmlItemDict.TryGetValue(priority, out xmlItem) || null == xmlItem)
            {
                return -10000;
            }
            needVIPLevel = xmlItem.GetIntValue("VIPlev");
            if (client.ClientData.VipLevel < needVIPLevel)
            {
                return -10002;
            }

            //如果是角色终身只能领取一次的vip奖励，这儿返回错误
            if (IsVipOnceAwardOfRole(priority))
            {
                return -10003;
            }
#endif

            //该项特权没有数据
            VipDailyData dailyVipData = Global.FindVipDailyDataByPriority(client, priority);
            if (null == dailyVipData)
            {
                return 1;
            }
            //特权每日最大使用次数
            int dailyPriorityMaxUseTimes = GetVipPriorityDailyMaxUseTimes(priority);
            if (dailyPriorityMaxUseTimes > 0)
            {
                //int dayID = TimeUtil.NowDateTime().DayOfYear;

                if (dailyVipData.DayID == dayID)
                {
                    if (dailyVipData.UsedTimes >= dailyPriorityMaxUseTimes)
                    {
                        return -10001;
                    }
                }
            }

            return 1;
        }

        /// <summary>
        /// 添加vip每日数据
        /// </summary>
        /// <param name="client"></param>
        /// <param name="taskClass"></param>
        /// <returns></returns>
        public static void AddDailyVipData(GameClient client, VipDailyData dailyVipData)
        {
            if (null == client.ClientData.VipDailyDataList)
            {
                client.ClientData.VipDailyDataList = new List<VipDailyData>();
            }

            client.ClientData.VipDailyDataList.Add(dailyVipData);
        }

        /// <summary>
        /// 更新vip日常数据,每更新一次，就意味着使用了一次
        /// </summary>
        /// <param name="client"></param>
        /// <param name="dayID"></param>
        /// <param name="priority"></param>
        public static bool UpdateVipDailyData(GameClient client, int dayID, int priority)
        {
            bool reset = false;

            VipDailyData dailyVipData = Global.FindVipDailyDataByPriority(client, priority);

            //从来没有这个数据，稍后增加数据对象
            if (null == dailyVipData)
            {
                reset = true;
            }
            else
            {
                //天数一样，则增加次数
                if (dailyVipData.DayID == dayID)
                {
                    dailyVipData.UsedTimes++;
                }
                else
                {
                    //天数不一样，则表示新的一天使用了一次
                    dailyVipData.DayID = dayID;
                    dailyVipData.UsedTimes = 1;
                }
            }

            if (reset)
            {
                //从来没用过，数据不存在，就增加数据
                if (null == dailyVipData)
                {
                    dailyVipData = new VipDailyData();
                }

                dailyVipData.PriorityType = priority;
                dailyVipData.DayID = dayID;
                dailyVipData.UsedTimes = 1;

                Global.AddDailyVipData(client, dailyVipData);
            }

            //通知dbserver更新数据
            string[] dbCmds = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEDAILYVIPDATA,
                string.Format("{0}:{1}:{2}:{3}",
                client.ClientData.RoleID,
                dailyVipData.DayID,
                dailyVipData.PriorityType,
                dailyVipData.UsedTimes), client.ServerId);

            if (null == dbCmds || dbCmds.Length != 3 || 0 != dbCmds[0].CompareTo("1"))
            {
                return false;
            }

            //将新的日常任务数据通知自己
            GameManager.ClientMgr.NotifyVipDailyData(client);

            return true;
        }

        /// <summary>
        /// 返回针对某个特权的物品数量【用于判读背包空间是否足够】
        /// </summary>
        /// <param name="priority"></param>
        /// <returns></returns>
        public static int GetGoodsCountForVipPriority(int priority)
        {
            SystemXmlItem xmlItem = null;

            if (!GameManager.systemVipDailyAwardsMgr.SystemXmlItemDict.TryGetValue(priority, out xmlItem) || null == xmlItem)
            {
                return 0;
            }

            string goodsIDs = xmlItem.GetStringValue("GoodsIDs");

            if (goodsIDs.Trim().Length <= 0)
            {
                return 0;
            }

            return goodsIDs.Split('|').Count();
        }

        /// <summary>
        /// 使用vip每日特权【主要是每日领取各种物品】
        /// </summary>
        /// <param name="client"></param>
        /// <param name="priority"></param>
        public static bool GiveVipDailyAwardForPriority(GameClient client, int priority)
        {
            return Global.GiveVipAwardForPriority(client, priority);
        }

        /// <summary>
        /// 使用vip单次特权【主要是领取各种物品】
        /// </summary>
        /// <param name="client"></param>
        /// <param name="priority"></param>
        public static bool GiveVipOnceAwardForPriority(GameClient client)
        {
            int priority = Global.GetVipOnceAwardPriorityID(client);

            return Global.GiveVipAwardForPriority(client, priority);
        }

        /// <summary>
        /// 使用vip特权【主要是领取各种物品】[每日奖励和终身一次的奖励]
        /// </summary>
        /// <param name="client"></param>
        /// <param name="priority"></param>
        public static bool GiveVipAwardForPriority(GameClient client, int priority)
        {
            //GetDailyYuanBao = 1,//每日上线即可免费领取200非绑定元宝
            //GetDailyLingLi = 5,//每日上线即可免费领取10000灵力
            //GetDailyYinLiang = 6,//每日上线即可免费领取2000银两
            //GetDailyAttackFuZhou = 7,//每日免费领取狂攻符咒一个
            //GetDailyDefenseFuZhou = 8,//每日免费领取防御符咒一个
            //GetDailyLifeFuZhou = 9,//每日免费领取生命符咒一个
            //GetDailyTongQian = 10,//每日上线可免费领取100000铜钱
            //GetDailyZhenQi = 21,//每日上线可免费领取【幻境阵旗】20个
            SystemXmlItem xmlItem = null;

            if (!GameManager.systemVipDailyAwardsMgr.SystemXmlItemDict.TryGetValue(priority, out xmlItem) || null == xmlItem)
            {
                return false;
            }

            //提取奖励配置信息
            string goodsIDs = xmlItem.GetStringValue("GoodsIDs");
            int yuanBao = xmlItem.GetIntValue("YuanBao");
            int yinLiang = xmlItem.GetIntValue("YinLiang");
            int tongQian = xmlItem.GetIntValue("TongQian");
            int lingLi = xmlItem.GetIntValue("LingLi");
            int bindYuanBao = xmlItem.GetIntValue("BindYuanBao");
            int[] bufferGoodsIDs = xmlItem.GetIntArrayValue("BufferGoods");
            int xiHongMing = xmlItem.GetIntValue("XiHongMing");
            int learnSkill = xmlItem.GetIntValue("LearnSkill");
            int xiuLi = xmlItem.GetIntValue("XiuLi");

            List<GoodsData> listGoods = Global.ParseGoodsDataListFromGoodsStr(goodsIDs, "vip每日奖励配置文件");

            //领取元宝
            if (yuanBao > 0)
            {
                //给用户加钱,更新用户的元宝
                GameManager.ClientMgr.AddUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, yuanBao, string.Format("{0}特权领取", Global.GetVipTypeNameString(client)));
                GameManager.SystemServerEvents.AddEvent(string.Format("角色根据{0}特权领取元宝, roleID={1}({2}), Money={3}, newMoney={4}, priority={5}", Global.GetVipTypeNameString(client), client.ClientData.RoleID, client.ClientData.RoleName, client.ClientData.UserMoney, yuanBao, priority), EventLevels.Record);

                //系统提示
                BroadcastVipFetchYuanBaoAwardMsg(client, yuanBao);
            }

            //绑定元宝
            if (bindYuanBao > 0)
            {
                //给用户加钱,更新用户的绑定元宝
                GameManager.ClientMgr.AddUserGold(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, bindYuanBao, "VIP" + priority + "奖励");
                GameManager.SystemServerEvents.AddEvent(string.Format("角色根据{0}特权领取绑定元宝, roleID={1}({2}), Money={3}, newMoney={4}, priority={5}", Global.GetVipTypeNameString(client), client.ClientData.RoleID, client.ClientData.RoleName, client.ClientData.UserMoney, bindYuanBao, priority), EventLevels.Record);

                //系统提示
                BroadcastVipFetchBindYuanBaoAwardMsg(client, bindYuanBao);
            }

            //领取银两
            if (yinLiang > 0)
            {
                //给用户加钱,更新用户的银两
                GameManager.ClientMgr.AddUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, yinLiang, "VIP" + priority + "奖励");
                GameManager.SystemServerEvents.AddEvent(string.Format("角色根据{0}特权领取银两, roleID={1}({2}), Money={3}, newMoney={4}, priority={5}", Global.GetVipTypeNameString(client), client.ClientData.RoleID, client.ClientData.RoleName, client.ClientData.YinLiang, yinLiang, priority), EventLevels.Record);
            }

            //领取铜钱
            if (tongQian > 0)
            {
                //给用户加钱,更新用户的铜钱
                GameManager.ClientMgr.AddMoney1(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, tongQian, "VIP" + priority + "奖励", false);
                GameManager.SystemServerEvents.AddEvent(string.Format("角色根据{0}特权领取金币, roleID={1}({2}), Money={3}, newMoney={4}, priority={5}", Global.GetVipTypeNameString(client), client.ClientData.RoleID, client.ClientData.RoleName, client.ClientData.Money1, tongQian, priority), EventLevels.Record);
            }

            //领取灵力
            if (lingLi > 0)
            {
                //角色添加灵力
                GameManager.ClientMgr.AddInterPower(client, lingLi, true, false);

                GameManager.SystemServerEvents.AddEvent(string.Format("角色根据{0}特权领取灵力, roleID={1}({2}), LingLi={3}, newLingLi={4}, priority={5}", Global.GetVipTypeNameString(client), client.ClientData.RoleID, client.ClientData.RoleName, client.ClientData.InterPower, lingLi, priority), EventLevels.Record);
            }

            string awardReason = /**/string.Format("VIP使用特权{0}获取", priority);

            //领取物品
            for (int n = 0; n < listGoods.Count; n++)
            {
                GoodsData goodsData = listGoods[n];

                if (null == goodsData)
                {
                    continue;
                }

                //向DBServer请求加入某个新的物品到背包中
                //添加物品
                goodsData.Id = Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, goodsData.GoodsID,
                    goodsData.GCount, goodsData.Quality, goodsData.Props, goodsData.Forge_level,
                    goodsData.Binding, 0, goodsData.Jewellist, true, 1, awardReason, goodsData.Endtime, goodsData.AddPropIndex, goodsData.BornIndex, goodsData.Lucky, goodsData.Strong);
            }

            //领取buffer
            if (null != bufferGoodsIDs && bufferGoodsIDs.Length > 0)
            {
                for (int n = 0; n < bufferGoodsIDs.Length; n++)
                {
                    Global.AddBufferByGoodsID(client, bufferGoodsIDs[n]);
                }
            }

            //洗红名
            if (1 == xiHongMing)
            {
                //设置PK值(限制当前地图)
                GameManager.ClientMgr.SetRolePKValuePoint(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                    client, 0, 0);
            }

            //学习技能
            if (1 == learnSkill)
            {
                if (!Global.LearnAllManuSkills(client))
                {
                    return false;
                }
            }

            //一键修理
            if (1 == xiuLi)
            {
                /// 一键修理装备
                Global.OneKeyFixAllEquips(client);
            }

            //记录money 提取日志
            Global.AddRoleFetchVipAwardEvent(client, yuanBao, yinLiang, tongQian, lingLi, priority);

            return true;
        }

        /// <summary>
        /// 从逗号隔开的物品字符串解析物品，fileName用于发生错误时记录日志
        /// </summary>
        /// <param name="batchGoods"></param>
        /// <param name="fileName"></param>
        /// <returns></returns>
        private static List<GoodsData> ParseGoodsDataListFromGoodsStr(string batchGoods, string fileName = "")
        {
            string[] fields = batchGoods.Split('|');

            List<GoodsData> goodsDataList = new List<GoodsData>();
            for (int i = 0; i < fields.Length; i++)
            {
                string[] sa = fields[i].Split(',');
                if (sa.Length != 6)
                {
                    LogManager.WriteLog(LogTypes.Warning, string.Format("解析{0}中的奖励项时失败, 物品配置项个数错误", fileName));
                    continue;
                }

                int[] goodsFields = Global.StringArray2IntArray(sa);

                //获取物品数据
                GoodsData goodsData = Global.GetNewGoodsData(goodsFields[0], goodsFields[1], goodsFields[2], goodsFields[3], goodsFields[4], goodsFields[5], 0, 0);
                goodsDataList.Add(goodsData);
            }

            return goodsDataList;
        }

        #endregion

        #region 角色装备属性

        /// <summary>
        /// 获取指定的装备的指定基础属性
        /// </summary>
        /// <param name="gd"></param>
        /// <param name="item"></param>
        /// <param name="itemIndex"></param>
        /// <returns></returns>
        public static double GetEquipBasePropsItemVal(GoodsData gd, EquipPropItem item, int itemIndex)
        {
            return 0.0;
        }

        /// <summary>
        /// 获取指定的宝石的指定基础属性
        /// </summary>
        /// <param name="gd"></param>
        /// <param name="item"></param>
        /// <param name="itemIndex"></param>
        /// <returns></returns>
        public static double GetJewelBasePropsItemVal(EquipPropItem item, int itemIndex)
        {
            return 0.0;
        }

        /// <summary>
        /// 锻造的加成属性比例
        /// </summary>
        public static double[] ForgeLevelAddRates = null;

        /// <summary>
        /// 获取指定的装备的指定扩展属性
        /// </summary>
        /// <param name="gd"></param>
        /// <param name="item"></param>
        /// <param name="itemIndex"></param>
        /// <returns></returns>
        public static double GetEquipExtPropsItemVal(GoodsData gd, EquipPropItem item, int itemIndex, SystemXmlItem systemGoods)
        {
            if (null == item) return 0.0;

            int suitID = systemGoods.GetIntValue("SuitID");
            int level = 0;
            level = gd.Forge_level;
            int categoriy = systemGoods.GetIntValue("Categoriy");
            double origExtProp = item.ExtProps[itemIndex];
            if (categoriy == (int)ItemCategories.ChongWu || categoriy == (int)ItemCategories.ShouHuChong)
            {
                int MaxUpgradeLevel = suitID * 10 + 9;
                if (level > MaxUpgradeLevel) //防止作弊
                {
                    level = 0;
                }

                double PetValue = origExtProp * (1 + level * UpgradeDamon.GetPetQiangPer(itemIndex));
                //if (itemIndex < (int)ExtPropIndexes.MaxLifePercent)
                //{
                //    int PetEquipVal = (int)Math.Floor(PetValue);
                //    return PetEquipVal;
                //}

                return PetValue;
            }

            if (level > MaxEquipLevel) //防止作弊
            {
                level = 0;
            }

            int totalLevel = level;

            int quality = gd.Quality;
            if (quality >= (int)GoodsQuality.Max)
            {
                quality = (int)GoodsQuality.Gold;
            }

            int totalQuality = quality;


            double origValue = origExtProp; // 保存初始值 用来给强化值做运算 [1/21/2014 LiaoWei]

            if (itemIndex != (int)ExtPropIndexes.MaxAttack &&
                itemIndex != (int)ExtPropIndexes.MaxMAttack
                /*&& itemIndex != (int)ExtPropIndexes.MaxDSAttack*/) // 属性改造 去掉 道术攻击[8/15/2013 LiaoWei]
            {
                //if ((int)ExtPropIndexes.Lucky == itemIndex)
                //{
                //    if (gd.Lucky <= 0)
                //    {
                //        origExtProp = 0;
                //    }
                //}

                //return origExtProp;   // 注释掉 走下面的逻辑 [1/22/2014 LiaoWei]
            }

            if (gd.BornIndex > 0)
            {
                int attackType = 0;
                if (itemIndex == (int)ExtPropIndexes.MaxMAttack)
                {
                    attackType = 1;
                }
                /*else if (itemIndex == (int)ExtPropIndexes.MaxDSAttack) // 属性改造 去掉 道术攻击[8/15/2013 LiaoWei]
                {
                    attackType = 2;
                }*/

                //根据天生属性字段，获取攻击力的值               
                origExtProp += GetBornAttackValue(gd.BornIndex, attackType);
            }

            // 装备的追加属性 [12/18/2013 LiaoWei]
            double AppendProp = 0.0;

            // 强化改造 begin [12/17/2013 LiaoWei]
            double forgeProp = 0.0;

            // 卓越追加属性 [12/27/2013 LiaoWei]
            double ExcellenceProp = 0.0;

            // 生命上限 [1/25/2014 LiaoWei]
            double LifeMax = 0.0;

            // 装备转生提升攻击力 [2/17/2014 LiaoWei]
            double EquipChangeLifeAddAttack = 0.0;

            // 装备转生提升防御力 [2/17/2014 LiaoWei]
            double EquipChangeLifeAddDefense = 0.0;

            // 区分翅膀类型装备
            if (item.ExtProps[itemIndex] > 0)
            {
                // 卓越属性 影响物理攻击和物理防御
                if (gd.ExcellenceInfo > 0)
                {
                    int nNum = GetEquipExcellencePropNum(gd);

                    if (nNum >= 0)
                    {
                        double dValue = 0.0;

                        if (nNum >= 1 && nNum <= 2)
                        {
                            dValue = Data.ZhuoYueAddAttackRates[0];
                        }
                        else if (nNum >= 3 && nNum <= 4)
                        {
                            dValue = Data.ZhuoYueAddAttackRates[1];
                        }
                        else if (nNum >= 5 && nNum <= 6)
                        {
                            dValue = Data.ZhuoYueAddAttackRates[2];
                        }

                        if (itemIndex == (int)ExtPropIndexes.MinAttack || itemIndex == (int)ExtPropIndexes.MinMAttack ||
                                itemIndex == (int)ExtPropIndexes.MaxAttack || itemIndex == (int)ExtPropIndexes.MaxMAttack)
                        {
                            //nValue = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhuoYueAddAttackRates");
                            //dValue = Data.ZhuoYueAddAttackRates;

                            if (dValue > 0.0)
                                ExcellenceProp = origValue * dValue;
                        }
                        else if (itemIndex == (int)ExtPropIndexes.MinDefense || itemIndex == (int)ExtPropIndexes.MinMDefense ||
                                    itemIndex == (int)ExtPropIndexes.MaxDefense || itemIndex == (int)ExtPropIndexes.MaxMDefense)
                        {
                            //nValue = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhuoYueAddDefenseRates");
                            //dValue = Data.ZhuoYueAddDefenseRates;

                            if (dValue > 0.0)
                                ExcellenceProp = origValue * dValue;
                        }
                    }
                }

                if (Global.GetGoodsCatetoriy(gd.GoodsID) == (int)ItemCategories.ChiBang)
                {
                    if (itemIndex == (int)ExtPropIndexes.MinAttack || itemIndex == (int)ExtPropIndexes.MaxAttack
                                    || itemIndex == (int)ExtPropIndexes.MinMAttack || itemIndex == (int)ExtPropIndexes.MaxMAttack)
                    {
                        if (totalLevel > 0)
                        {
                            //double[] nAttack = GameManager.systemParamsList.GetParamValueDoubleArrayByName("WingForgeLevelAddShangHaiJiaCheng");
                            double[] nAttack = Data.WingForgeLevelAddShangHaiJiaCheng;

                            double dValue = nAttack[totalLevel];

                            forgeProp = (origValue + ExcellenceProp) * dValue + 3;
                        }

                    }
                    else if (itemIndex == (int)ExtPropIndexes.MinDefense || itemIndex == (int)ExtPropIndexes.MaxDefense
                                    || itemIndex == (int)ExtPropIndexes.MinMDefense || itemIndex == (int)ExtPropIndexes.MaxMDefense)
                    {
                        //double[] nDefense = GameManager.systemParamsList.GetParamValueDoubleArrayByName("WingForgeLevelAddDefenseRates");

                        double[] nDefense = Data.WingForgeLevelAddDefenseRates;
                        double dValue = 0.0;

                        if (totalLevel > 0)
                        {
                            dValue = nDefense[totalLevel];

                            forgeProp = (origValue + ExcellenceProp) * dValue + 3;
                        }

                        //nDefense = GameManager.systemParamsList.GetParamValueDoubleArrayByName("WingZhuiJiaLevelAddDefenseRates");

                        if (gd.AppendPropLev > 0)
                        {
                            nDefense = Data.WingZhuiJiaLevelAddDefenseRates;
                            dValue = nDefense[gd.AppendPropLev];

                            AppendProp = (origValue + ExcellenceProp) * dValue + 3;
                        }

                    }
                    else if (itemIndex == (int)ExtPropIndexes.SubAttackInjurePercent)
                    {
                        //double[] nInjureSub = GameManager.systemParamsList.GetParamValueDoubleArrayByName("WingForgeLevelAddShangHaiXiShou");
                        /*double[] nInjureSub = Data.WingForgeLevelAddShangHaiXiShou;

                        forgeProp = nInjureSub[totalLevel];*/

                        /*第一步：翅膀的基础伤害吸收比例*1000/(1-翅膀基础伤害吸收值)
	                    第二步：第一步得出的结果*（1+强化级别对应的提升比例值）
	                    第三步：第二步得出的结果/(1000+第二步得出的结果)
	                    运算得出的值为实际的伤害吸收比例，客户端显示成功百分比值*/

                        /*origValue = origValue * 1000 / (1 - origValue);
                        origValue = origValue * (1 + nInjureSub[level]);
                        origValue = origValue / (1000 + origValue);

                        forgeProp = origValue;*/
                    }
                }
                else
                {
                    if (itemIndex == (int)ExtPropIndexes.MinAttack || itemIndex == (int)ExtPropIndexes.MaxAttack
                            || itemIndex == (int)ExtPropIndexes.MinMAttack || itemIndex == (int)ExtPropIndexes.MaxMAttack)
                    {
                        //double[] nAttack = GameManager.systemParamsList.GetParamValueDoubleArrayByName("ForgeLevelAddAttackRates");
                        double[] nAttack = Data.ForgeLevelAddAttackRates;

                        double dValue = 0.0;

                        if (totalLevel > 0)
                        {
                            dValue = nAttack[totalLevel];

                            forgeProp = (origValue + ExcellenceProp) * dValue + 3;
                        }

                        //nAttack = GameManager.systemParamsList.GetParamValueDoubleArrayByName("ZhuiJiaLevelAddAttackRates");

                        if (gd.AppendPropLev > 0)
                        {
                            nAttack = Data.ZhuiJiaLevelAddAttackRates;

                            dValue = nAttack[gd.AppendPropLev];

                            AppendProp = (origValue + ExcellenceProp) * dValue + 3;
                        }

                    }
                    else if (itemIndex == (int)ExtPropIndexes.MinDefense || itemIndex == (int)ExtPropIndexes.MaxDefense
                                || itemIndex == (int)ExtPropIndexes.MinMDefense || itemIndex == (int)ExtPropIndexes.MaxMDefense)
                    {
                        //double[] nDefense = GameManager.systemParamsList.GetParamValueDoubleArrayByName("ForgeLevelAddDefenseRates");
                        double[] nDefense = Data.ForgeLevelAddDefenseRates;

                        double dValue = 0.0;

                        if (totalLevel > 0)
                        {
                            dValue = nDefense[totalLevel];
                            forgeProp = (origValue + ExcellenceProp) * dValue + 3;
                        }

                        //nDefense = GameManager.systemParamsList.GetParamValueDoubleArrayByName("ZhuiJiaLevelAddDefenseRates");
                        /*nDefense = Data.ZhuiJiaLevelAddDefenseRates;

                        dValue = nDefense[gd.AppendPropLev];

                        AppendProp = origValue * dValue + 3;*/
                    }
                    else if (itemIndex == (int)ExtPropIndexes.MaxLifeV)
                    {
                        double[] nLife = null;
                        double dValue = 0.0;

                        if (totalLevel > 0)
                        {
                            nLife = Data.ForgeLevelAddMaxLifeVRates;
                            dValue = nLife[totalLevel];

                            LifeMax += origValue * dValue + 3;
                        }

                        if (gd.AppendPropLev > 0)
                        {
                            nLife = null;
                            nLife = Data.ZhuiJiaLevelAddDefenseRates;

                            dValue = 0.0;
                            if (gd.AppendPropLev >= nLife.Length)
                            {
                                LogManager.WriteLog(LogTypes.Error, string.Format("GetEquipExtPropsItemVal outside arry, gd.AppendPropLev={0}, nLife.Length={1}", gd.AppendPropLev, nLife.Length));
                            }
                            else
                            {
                                dValue = nLife[gd.AppendPropLev];
                            }

                            LifeMax += origValue * dValue + 3;
                        }
                    }
                }

            }

            /*if (null == ForgeLevelAddRates)
            {
                ForgeLevelAddRates = GameManager.systemParamsList.GetParamValueDoubleArrayByName("ForgeLevelAddRates");
            }

            if (null == ForgeLevelAddRates || ForgeLevelAddRates.Length != 13)
            {
                return 0.0;
            }

            double forgeProp = ForgeLevelAddRates[totalLevel];*/

            // 强化改造 end [12/17/2013 LiaoWei]

            // 装备转生 Bengin [2/17/2014 LiaoWei]
            int nEquipChangeLife = 0;
            nEquipChangeLife = gd.ChangeLifeLevForEquip;

            if (nEquipChangeLife > 0 && nEquipChangeLife <= 10)
            {
                double[] nValue1 = null;

                if (itemIndex == (int)ExtPropIndexes.MinAttack || itemIndex == (int)ExtPropIndexes.MaxAttack
                                    || itemIndex == (int)ExtPropIndexes.MinMAttack || itemIndex == (int)ExtPropIndexes.MaxMAttack)
                {
                    nValue1 = Data.EquipChangeLifeAddAttackRates;

                    if (nValue1 != null)
                    {
                        EquipChangeLifeAddAttack = nValue1[nEquipChangeLife + 1];

                        EquipChangeLifeAddAttack *= (origValue + ExcellenceProp);
                    }
                }
                else if (itemIndex == (int)ExtPropIndexes.MinDefense || itemIndex == (int)ExtPropIndexes.MaxDefense
                                    || itemIndex == (int)ExtPropIndexes.MinMDefense || itemIndex == (int)ExtPropIndexes.MaxMDefense)
                {
                    nValue1 = Data.EquipChangeLifeAddDefenseRates;

                    if (nValue1 != null)
                    {
                        EquipChangeLifeAddDefense = nValue1[nEquipChangeLife + 1];

                        EquipChangeLifeAddDefense *= (origValue + ExcellenceProp);
                    }
                }
            }
            // 装备转生 End [2/17/2014 LiaoWei]

            double ElementValue = 0.0;
            // 元素之心的属性计算
            if (null != gd.ElementhrtsProps && gd.ElementhrtsProps.Count >= 2)
            {
                int nLevel = gd.ElementhrtsProps[0] - 1;
                ElementValue = origExtProp * nLevel;
            }

            double value = origExtProp + forgeProp + AppendProp + ExcellenceProp + LifeMax + EquipChangeLifeAddAttack + EquipChangeLifeAddDefense + ElementValue;
            int equipVal = (int)Math.Floor(value);

            if (level <= MaxForgeLevel)
            {
                return value;
            }

            return value;
        }

        /// <summary>
        /// 获得装备卓越属性的条数
        /// </summary>
        public static int GetEquipExcellencePropNum(GoodsData gd)
        {
            int nRet = 0;

            if (gd.ExcellenceInfo != 0)
            {
                for (int i = 0; i < (int)ExcellencePorp.EXCELLENCEPORPMAXINDEX; ++i)
                {
                    int nExcellence = gd.ExcellenceInfo;

                    if (GetIntSomeBit(nExcellence, i) == 1)
                        ++nRet;
                }
            }

            return nRet;
        }

        private static Dictionary<int, int> GoodsItemQualityDict = null;
        private static object GoodsItemQualityDictMutex = new object();

        public static void ResetCachedGoodsQuality()
        {
            lock (GoodsItemQualityDictMutex)
            {
                GoodsItemQualityDict = null;
            }
        }

        public static Dictionary<int, int> GetGoodsQuality()
        {
            lock (GoodsItemQualityDictMutex)
            {
                if (GoodsItemQualityDict != null)
                {
                    return GoodsItemQualityDict;
                }
            }

            Dictionary<int, int> tmpDict = new Dictionary<int, int>();

#if true
            try
            {
                foreach (var kvp in GameManager.SystemGoods.SystemXmlItemDict)
                {
                    int goodsId = kvp.Key;
                    tmpDict[goodsId] = kvp.Value.GetIntValue("ItemQuality", 0);
                }
            }
            catch (Exception ex)
            {
                LogManager.WriteLog(LogTypes.Error, "LoadGoodsQuality failed.", ex);
            }
#else
            List<string> ItemQualityList = GameManager.systemParamsList.GetParamValueStringListByName("ItemQuality", '|');
            if (null != ItemQualityList && ItemQualityList.Count > 0)
            {
                foreach (var itemQualityStr in ItemQualityList)
                {
                    List<int> idAndQuality = Global.StringToIntList(itemQualityStr, ',');
                    if (null != idAndQuality && idAndQuality.Count == 2)
                    {
                        tmpDict[idAndQuality[0]] = idAndQuality[1];
                    }
                }
            }
#endif

            lock (GoodsItemQualityDictMutex)
            {
                GoodsItemQualityDict = tmpDict;
                return GoodsItemQualityDict;
            }
        }

        /// <summary>
        /// 获取物品的颜色,包括为非装备类特殊物品配置的值
        /// </summary>
        /// <param name="gd"></param>
        /// <returns></returns>
        public static int GetGoodsColorEx(GoodsData gd)
        {
            int nRet = 0;

            //如果不是装备,返回策划配置的颜色值
            int categoriy = Global.GetGoodsCatetoriy(gd.GoodsID);
            if (categoriy > (int)ItemCategories.EquipMax || categoriy == (int)ItemCategories.ShouHuChong || categoriy == (int)ItemCategories.ChongWu)
            {
                var tmpDict = Global.GetGoodsQuality();
                int color;
                tmpDict.TryGetValue(gd.GoodsID, out color);
                return color;
            }

            if (gd.ExcellenceInfo > 0)
            {
                for (int i = 0; i < (int)ExcellencePorp.EXCELLENCEPORPMAXINDEX; ++i)
                {
                    int nExcellence = gd.ExcellenceInfo;

                    if (GetIntSomeBit(nExcellence, i) == 1)
                        ++nRet;
                }
            }

            return 1 + (nRet + 1) / 2;
        }

        public static int GetEquipColor(GoodsData gd)
        {
            int nRet = 0;

            if (gd.ExcellenceInfo > 0)
            {
                for (int i = 0; i < (int)ExcellencePorp.EXCELLENCEPORPMAXINDEX; ++i)
                {
                    int nExcellence = gd.ExcellenceInfo;

                    if (GetIntSomeBit(nExcellence, i) == 1)
                        ++nRet;
                }
            }

            return 1 + (nRet + 1) / 2;
        }

        /// <summary>
        /// 获取指定的宝石的指定扩展属性
        /// </summary>
        /// <param name="gd"></param>
        /// <param name="item"></param>
        /// <param name="itemIndex"></param>
        /// <returns></returns>
        public static double GetJewelExtPropsItemVal(EquipPropItem item, int itemIndex)
        {
            if (null == item) return 0.0;

            double origExtProp = item.ExtProps[itemIndex];
            double value = origExtProp;
            return value;
        }

        /// <summary>
        /// 计算装备积分(包括宝石)
        /// </summary>
        /// <param name="EquipProp"></param>
        /// <returns></returns>
        private static int CalcEquipPropsJiFen(EquipPropItem EquipProp)
        {
            double totalJiFen = 0;
            //double jiFen = 0;
            return (int)totalJiFen;
        }

        /// <summary>
        /// 计算卓越品质装备数
        /// </summary>
        /// <param name="EquipProp"></param>
        /// <returns></returns>
        private static void CalcExcellenceEquipNum(AllThingsCalcItem allThingsCalcItem, GoodsData goodsData, int nRet)
        {
            int nExcellencePropNum = Global.GetEquipExcellencePropNum(goodsData);
            if (nExcellencePropNum >= 5 && nRet == 1)
            {
                allThingsCalcItem.TotalPurpleZhuoYueNum++;
            }
            else if (nExcellencePropNum >= 3 && nRet == 1)
            {
                allThingsCalcItem.TotalBlueZhuoYueNum++;
            }
            else if (nExcellencePropNum >= 1 && nRet == 1)
            {
                allThingsCalcItem.TotalGreenZhuoYueNum++;
            }
        }

        /// <summary>
        /// 打印属性值
        /// </summary>
        /// <param name="client"></param>
        /// <param name="from"></param>
        public static void PrintSomeProps(GameClient client, ref StringBuilder propTrace)
        {
            StringBuilder sb = propTrace;
            if (null == sb) return;

            double sum = 0;
            sb.AppendFormat("角色属性信息详表#{0},{1},{2}#",Global.FormatRoleName4(client), client.ClientData.RoleID, client.ClientData.CombatForce);
            if (null != client.ClientData.EquipProp)
            {
                if (client.ClientData.EquipProp.ExtProps.Any((x) => { return Math.Abs(x) > 0; }))
                {
                    sb.AppendFormat("装备及其他加成#");
                    for (int i = 0; i < (int)ExtPropIndexes.Max; i++)
                    {
                        sb.AppendFormat("{0:0.00},", client.ClientData.EquipProp.ExtProps[i]);
                    }
                    sb.Append("#");
                }
            }

            if (null != client.ClientData.RoleStarConstellationProp)
            {
                if (client.ClientData.RoleStarConstellationProp.StarConstellationSecondProps.Any((x) => { return Math.Abs(x) > 0; }))
                {
                    sb.AppendFormat("星座系统加成#");
                    for (int i = 0; i < (int)ExtPropIndexes.Max; i++)
                    {
                        sb.AppendFormat("{0:0.00},", client.ClientData.RoleStarConstellationProp.StarConstellationSecondProps[i]);
                    }
                    sb.Append("#");
                }
            }

            if (null != client.ClientData.RoleChangeLifeProp)
            {
                if (client.ClientData.RoleChangeLifeProp.ChangeLifeSecondProps.Any((x) => { return Math.Abs(x) > 0; }))
                {
                    sb.AppendFormat("转生系统加成#");
                    for (int i = 0; i < (int)ExtPropIndexes.Max; i++)
                    {
                        sb.AppendFormat("{0:0.00},", client.ClientData.RoleChangeLifeProp.ChangeLifeSecondProps[i]);
                    }
                    sb.Append("#");
                }
            }

            if (null != client.AllThingsMultipliedBuffer)
            {
                sum = 0;
                for (int i = 0; i < (int)ExtPropIndexes.Max; i++)
                {
                    sum += client.AllThingsMultipliedBuffer.GetExtProp(i);
                }

                if (sum > 0)
                {
                    sb.AppendFormat("AllThingsMultipliedBuffer加成#");
                    for (int i = 0; i < (int)ExtPropIndexes.Max; i++)
                    {
                        sb.AppendFormat("{0:0.00},", client.AllThingsMultipliedBuffer.GetExtProp(i));
                    }
                    sb.Append("#");
                }
            }

            sum = 0;
            for (int i = 0; i < (int)ExtPropIndexes.Max; i++)
            {
                sum += DBRoleBufferManager.ProcessTempBufferProp(client, (ExtPropIndexes)i);
            }

            if (sum > 0)
            {
                sb.AppendFormat("持续时间加属性#");
                for (int i = 0; i < (int)ExtPropIndexes.Max; i++)
                {
                    sb.AppendFormat("{0:0.00},", DBRoleBufferManager.ProcessTempBufferProp(client, (ExtPropIndexes)i));
                }
                sb.Append("#");
            }

            if (null != client.RoleBuffer)
            {
                sum = 0;
                for (int i = 0; i < (int)ExtPropIndexes.Max; i++)
                {
                    sum += client.RoleBuffer.GetExtProp(i);
                }

                if (sum > 0)
                {
                    sb.AppendFormat("RoleBuff加成#");
                    for (int i = 0; i < (int)ExtPropIndexes.Max; i++)
                    {
                        sb.AppendFormat("{0:0.00},", client.RoleBuffer.GetExtProp(i));
                    }
                    sb.Append("#");
                }
            }

            if (null != client.RoleMultipliedBuffer)
            {
                sum = 0;
                for (int i = 0; i < (int)ExtPropIndexes.Max; i++)
                {
                    sum += client.RoleMultipliedBuffer.GetExtProp(i);
                }

                if (sum > 0)
                {
                    sb.AppendFormat("RoleMultipliedBuffer加成#");
                    for (int i = 0; i < (int)ExtPropIndexes.Max; i++)
                    {
                        sb.AppendFormat("{0:0.00},", client.RoleMultipliedBuffer.GetExtProp(i));
                    }
                    sb.Append("#");
                }
            }

            sum = 0;
            for (int i = 0; i < (int)ExtPropIndexes.Max; i++)
            {
                sum += DBRoleBufferManager.ProcessTimeAddPkKingAttackProp(client, (ExtPropIndexes)i);
            }

            if (sum > 0)
            {
                sb.AppendFormat("持续时间pk王攻击属性#");
                for (int i = 0; i < (int)ExtPropIndexes.Max; i++)
                {
                    sb.AppendFormat("{0:0.00},", DBRoleBufferManager.ProcessTimeAddPkKingAttackProp(client, (ExtPropIndexes)i));
                }
                sb.Append("#");
            }

            foreach (var item in client.ClientData.PropsCacheManager.GetAllPropsCacheItems())
            {
                if (item.ExtProps.Any((x) => { return Math.Abs(x) > 0; }))
                {
                    sb.AppendFormat("{0}#", item.GetName());
                    for (int i = 0; i < (int)item.ExtProps.Length; i++)
                    {
                        sb.AppendFormat("{0:0.00},", item.ExtProps[i]);
                    }
                    sb.Append("#");
                }
            }

            //卓越属性
            if (null != client.ClientData.ExcellenceProp)
            {
                if (client.ClientData.ExcellenceProp.Any((x) => { return Math.Abs(x) > 0; }))
                {
                    sb.AppendFormat("ExcellenceProp索引(32)#");
                    for (int i = 0; i < (int)ExcellencePorp.EXCELLENCEPORPMAXINDEX || i < (int)ExtPropIndexes.Max; i++)
                    {
                        sb.AppendFormat("{0:0.00},", (i < (int)ExcellencePorp.EXCELLENCEPORPMAXINDEX) ? client.ClientData.ExcellenceProp[i] : 0);
                    }
                    sb.Append("#");
                }
            }
        }

        /// <summary>
        /// 重新计算装备属性
        /// </summary>
        public static void RefreshEquipProp(GameClient client)
        {
            client.ClientData.EquipProp.ResetProps();
            client.ClientData.ResetExcellenceProp();    // 重置卓越值 [12/30/2013 LiaoWei]

            client.ClientData.ResetLuckyProp();//重置幸运

            // 计算翅膀属性 [6/18/2014 LiaoWei]
            if ((null != client.ClientData.MyWingData) && (client.ClientData.MyWingData.Using == 1))
            {
                //将翅膀的扩展属性加入Buffer中
                MUWingsManager.UpdateWingDataProps(client, true);
            }

            //任务章节属性加成
            UpdateTaskZhangJieProp(client, client.ClientData.MainTaskID, true);

            // 刷新梅林魔法书卓越属性 [XSea 2015/7/27]
            GameManager.MerlinMagicBookMgr.RefreshMerlinExcellenceAttr(client, client.ClientData.MerlinData._Level, client.ClientData.MerlinData._StarNum, true);

            GoodsData goodsData = null;
            AllThingsCalcItem allThingsCalcItem = new AllThingsCalcItem();

            bool bHaveDamon = false;
            if (null != client.ClientData.DamonGoodsDataList)
            {
                lock (client.ClientData.DamonGoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.DamonGoodsDataList.Count; i++)
                    {
                        goodsData = client.ClientData.DamonGoodsDataList[i];
                        if (goodsData.Using <= 0)
                        {
                            continue;
                        }
                        AllThingsCalcItem temp = new AllThingsCalcItem();
                        RefreshOneEquipProp(client, goodsData, ref temp);
                        bHaveDamon = true;
                    }
                }
            }

            // 如果有精灵，就加上元素之心的属性
            if (bHaveDamon)
            {
                // 元素之心的装备列表
                if (null != client.ClientData.UsingElementhrtsList)
                {
                    lock (client.ClientData.UsingElementhrtsList)
                    {
                        for (int i = 0; i < client.ClientData.UsingElementhrtsList.Count; i++)
                        {
                            goodsData = client.ClientData.UsingElementhrtsList[i];
                            // 元素之心不算在全套属性加成里
                            AllThingsCalcItem temp = new AllThingsCalcItem();
                            RefreshOneEquipProp(client, goodsData, ref temp);
                        }
                    }
                }
            }

            //如果没装备,下面的无需执行
            if (null != client.ClientData.GoodsDataList)
            {
                lock (client.ClientData.GoodsDataList)
                {
                    for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                    {
                        goodsData = client.ClientData.GoodsDataList[i];
                        if (goodsData.Using <= 0)
                        {
                            continue;
                        }

                        RefreshOneEquipProp(client, goodsData, ref allThingsCalcItem);
                    }
                }
            }

            client.ClientData.MyAllThingsCalcItem = allThingsCalcItem; //重新赋值

            //现在计算全套的索引值
            //根据装备中的计数器获取加成属性值
            Global.CalcClientAllThingsCalcItem(client);

            //计算加成的Buffer
            //根据装备中的计数器获取加成属性值的Buffer
            Global.CalcClientAllThingsBuffer(client);

            //神器再造加成
            ArtifactManager.SetArtifactProp(client);

            //计算装备积分(包括宝石)
            client.ClientData.RoleEquipJiFen = Global.CalcEquipPropsJiFen(client.ClientData.EquipProp);
        }
        //AllThingsCalcItem
        public static void RefreshOneEquipProp(GameClient client, GoodsData goodsData, ref AllThingsCalcItem allThingsCalcItem)
        {
            SystemXmlItem systemGoods = null;
            EquipPropItem item = null;

            systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
            {
                return;
            }

            //判断如果不是装备则，跳过
            // 并且不是元素之心
            int categoriy = systemGoods.GetIntValue("Categoriy");
            bool isElementHrt = ElementhrtsManager.IsElementHrt(categoriy);
            if (categoriy >= (int)ItemCategories.EquipMax && !isElementHrt)
            {
                return;
            }

            // 增加一级属性条件 [6/16/2014 LiaoWei]
            int nRet = 1;

            nRet = client.UsingEquipMgr.EquipFirstPropCondition(client, systemGoods);

            item = GameManager.EquipPropsMgr.FindEquipPropItem(goodsData.GoodsID);
            if (null == item)
            {
                return;
            }

            // 2015-02-28 策划要求 耐久度不影响套装属性
            // 从这里开始计算各种套装的等级
            //if (systemGoods.GetIntValue("Categoriy") != 7) //护符暂时不计算在套装内
            {
                if (nRet == 1)
                {
                    //计算品质个数
                    if (goodsData.Quality >= (int)GoodsQuality.Gold)
                    {
                        allThingsCalcItem.TotalGoldQualityNum++;
                    }
                    else if (goodsData.Quality >= (int)GoodsQuality.Purple)
                    {
                        allThingsCalcItem.TotalPurpleQualityNum++;
                    }
                }

            }

            //if (systemGoods.GetIntValue("Categoriy") != 7) //护符暂时不计算在套装内
            {
                if (nRet == 1)
                {
                    allThingsCalcItem.ChangeTotalForgeLevel(goodsData.Forge_level, true);
                }
            }

            //获得装备卓越属性的条数
            CalcExcellenceEquipNum(allThingsCalcItem, goodsData, nRet);

            //如果镶嵌了宝石
            if (!string.IsNullOrEmpty(goodsData.Jewellist) && nRet == 1)
            {
                AllThingsCalcItem singleEquipJewelItems = new AllThingsCalcItem();
                string[] jewelFields = goodsData.Jewellist.Split(',');
                for (int x = 0; x < jewelFields.Length; x++)
                {
                    int jewelGoodsID = Convert.ToInt32(jewelFields[x]);
                    EquipPropItem jewelItem = GameManager.EquipPropsMgr.FindEquipPropItem(jewelGoodsID);
                    if (null == jewelItem)
                    {
                        continue;
                    }

                    int jewelLevel = Global.GetJewelLevel(jewelGoodsID);
                    if (jewelLevel >= 8)
                    {
                        allThingsCalcItem.TotalJewel8LevelNum++;
                        singleEquipJewelItems.TotalJewel8LevelNum++;
                    }
                    else if (jewelLevel >= 7)
                    {
                        allThingsCalcItem.TotalJewel7LevelNum++;
                        singleEquipJewelItems.TotalJewel7LevelNum++;
                    }
                    else if (jewelLevel >= 6)
                    {
                        allThingsCalcItem.TotalJewel6LevelNum++;
                        singleEquipJewelItems.TotalJewel6LevelNum++;
                    }
                    else if (jewelLevel >= 5)
                    {
                        allThingsCalcItem.TotalJewel5LevelNum++;
                        singleEquipJewelItems.TotalJewel5LevelNum++;
                    }
                    else if (jewelLevel >= 4)
                    {
                        allThingsCalcItem.TotalJewel4LevelNum++;
                        singleEquipJewelItems.TotalJewel4LevelNum++;
                    }

                    /*for (int j = 0; j < 5; j++)
                    {
                        client.ClientData.EquipProp.BaseProps[j] += GetJewelBasePropsItemVal(jewelItem, j);
                    }

                    for (int j = 0; j < (int)ExtPropIndexes.Max; j++)
                    {
                        client.ClientData.EquipProp.ExtProps[j] += GetJewelExtPropsItemVal(jewelItem, j);
                    }*/
                }

                //处理宝石的属性加成
                //SingleEquipAddPropMgr.ProcessSingleEquipPropsJewels(client.ClientData.EquipProp.ExtProps, client.ClientData.Occupation, singleEquipJewelItems, systemGoods, true);
            }

            // 完成计算各种套装的等级

            int maxStrong = (int)item.ExtProps[(int)ExtPropIndexes.Strong];

            //如果一个装备的耐久已经为0了，则不增加也不减少，不处理
            // 元素之心没耐久
            if (!isElementHrt && goodsData.Strong >= maxStrong)
            {
                return;
            }

            // 卓越属性生效 [12/26/2013 LiaoWei]
            bool bRet = true;

            if (nRet != 1)
                bRet = false;

            if (goodsData.ExcellenceInfo != 0)
                ProcessEquipExcellenceProp(client, goodsData, bRet, systemGoods);

            if (bRet && goodsData.Lucky > 0)
            {
                //client.ClientData.LuckProp = 0;
                ProcessEquipLuckProp(client, goodsData, bRet, systemGoods);
            }

            if (nRet == 1)
            {
                for (int j = 0; j < 5; j++)
                {
                    client.ClientData.EquipProp.BaseProps[j] += GetEquipBasePropsItemVal(goodsData, item, j);
                }

                for (int j = 0; j < (int)ExtPropIndexes.Max; j++)
                {
                    client.ClientData.EquipProp.ExtProps[j] += GetEquipExtPropsItemVal(goodsData, item, j, systemGoods);
                }
            }


            /// 将装备的强化属性应用到装备上(传奇版本)
            // 属性改造 加上一级属性公式 区分职业[8/15/2013 LiaoWei]
            int nOcc = Global.CalcOriginalOccupationID(client);

            ChuanQiQianHua.ApplayEquipQianHuaProps(client.ClientData.EquipProp.ExtProps, nOcc, goodsData, systemGoods, true);

            //处理强化的属性加成
            //SingleEquipAddPropMgr.ProcessSingleEquipPropsForge(client.ClientData.EquipProp.ExtProps, client.ClientData.Occupation, goodsData, systemGoods, true);

            //处理附加的属性加成
            //SingleEquipAddPropMgr.ProcessSingleEquipPropsFuJia(client.ClientData.EquipProp.ExtProps, client.ClientData.Occupation, goodsData, systemGoods, true);

            //如果镶嵌了宝石
            if (!string.IsNullOrEmpty(goodsData.Jewellist) && nRet == 1)
            {
                AllThingsCalcItem singleEquipJewelItems = new AllThingsCalcItem();
                string[] jewelFields = goodsData.Jewellist.Split(',');
                for (int x = 0; x < jewelFields.Length; x++)
                {
                    int jewelGoodsID = Convert.ToInt32(jewelFields[x]);
                    EquipPropItem jewelItem = GameManager.EquipPropsMgr.FindEquipPropItem(jewelGoodsID);
                    if (null == jewelItem)
                    {
                        continue;
                    }

                    /*int jewelLevel = Global.GetJewelLevel(jewelGoodsID);
                    if (jewelLevel >= 8)
                    {
                        allThingsCalcItem.TotalJewel8LevelNum++;
                        singleEquipJewelItems.TotalJewel8LevelNum++;
                    }
                    else if (jewelLevel >= 7)
                    {
                        allThingsCalcItem.TotalJewel7LevelNum++;
                        singleEquipJewelItems.TotalJewel7LevelNum++;
                    }
                    else if (jewelLevel >= 6)
                    {
                        allThingsCalcItem.TotalJewel6LevelNum++;
                        singleEquipJewelItems.TotalJewel6LevelNum++;
                    }
                    else if (jewelLevel >= 5)
                    {
                        allThingsCalcItem.TotalJewel5LevelNum++;
                        singleEquipJewelItems.TotalJewel5LevelNum++;
                    }
                    else if (jewelLevel >= 4)
                    {
                        allThingsCalcItem.TotalJewel4LevelNum++;
                        singleEquipJewelItems.TotalJewel4LevelNum++;
                    }*/

                    for (int j = 0; j < 5; j++)
                    {
                        client.ClientData.EquipProp.BaseProps[j] += GetJewelBasePropsItemVal(jewelItem, j);
                    }

                    for (int j = 0; j < (int)ExtPropIndexes.Max; j++)
                    {
                        client.ClientData.EquipProp.ExtProps[j] += GetJewelExtPropsItemVal(jewelItem, j);
                    }
                }

                //处理宝石的属性加成
                //SingleEquipAddPropMgr.ProcessSingleEquipPropsJewels(client.ClientData.EquipProp.ExtProps, client.ClientData.Occupation, singleEquipJewelItems, systemGoods, true);
            }

            //洗练属性加成
            if (nRet > 0)
            {
                if (null != goodsData.WashProps && goodsData.WashProps.Count >= 2)
                {
                    for (int j = 0; j < goodsData.WashProps.Count; j += 2)
                    {
                        int idx = goodsData.WashProps[j];
                        if (0 < idx && idx < (int)ExtPropIndexes.Max)
                        {
                            client.ClientData.EquipProp.ExtProps[idx] += goodsData.WashProps[j + 1];
                        }
                    }
                }
            }
        }

        public static int CalcTaskZhangJieID(GameClient client, int taskID, out int goodsID)
        {
            SystemXmlItem nextZhangJieXmlItem = null;
            int zhangJieID = client.ClientData.CompleteTaskZhangJie;
            int nextZhangJieID = zhangJieID;
            goodsID = 0;
#if false
            for (int i = 0; i < GameManager.TaskZhangJie.SystemXmlItemDict.Count; i++)
            {
                if (GameManager.TaskZhangJie.SystemXmlItemDict.TryGetValue(nextZhangJieID + 1, out nextZhangJieXmlItem))
                {
                    if (nextZhangJieXmlItem.GetIntValue("EndTaskID") <= taskID)
                    {
                        nextZhangJieID = nextZhangJieXmlItem.GetIntValue("ID");
                        goodsID = nextZhangJieXmlItem.GetIntValue("GlGoodsID");
                    }
                    else
                    {
                        break;
                    }
                }
            }
#else
            int index = GameManager.TaskZhangJieDict.BinarySearch(taskID);
            if (index >= 0)
            {
                nextZhangJieXmlItem = (SystemXmlItem)GameManager.TaskZhangJieDict[index].tag;
                nextZhangJieID = nextZhangJieXmlItem.GetIntValue("ID");
                goodsID = nextZhangJieXmlItem.GetIntValue("GlGoodsID");
            }
#endif
            return nextZhangJieID;
        }

        /// <summary>
        /// 更新任务章节完成度
        /// </summary>
        /// <param name="client"></param>
        /// <param name="taskID"></param>
        /// <param name="op">-1 仅计算章节ID</param>
        public static void UpdateTaskZhangJieProp(GameClient client, int taskID, bool bInit = false)
        {
            int nextGoodsID = 0;
            int zhangJieID = client.ClientData.CompleteTaskZhangJie;
            int nextZhangJieID = Global.CalcTaskZhangJieID(client, taskID, out nextGoodsID);

            if (bInit) //如果重新添加章节加成属性
            {
                client.ClientData.CompleteTaskZhangJie = nextZhangJieID;
                foreach (var kv in GameManager.TaskZhangJie.SystemXmlItemDict)
                {
                    if (kv.Key <= nextZhangJieID)
                    {
                        int goodsID = kv.Value.GetIntValue("GlGoodsID");
                        if (goodsID > 0)
                        {
                            Global.RefreshGoodsEquipProps(client, goodsID, true);
                        }
                    }
                }
            }
            else if (zhangJieID != nextZhangJieID) //如果完成了新的章节
            {
                client.ClientData.CompleteTaskZhangJie = nextZhangJieID;
                Global.RefreshGoodsEquipProps(client, nextGoodsID, true);
            }
        }

        /// <summary>
        /// 根据玩家得分和经验系数,计算经验奖励数值
        /// </summary>
        /// <param name="score"></param>
        /// <param name="expModule"></param>
        /// <returns></returns>
        public static long CalcExpForRoleScore(int score, int expModule)
        {
            if (score <= 0)
            {
                return 0;
            }

            return (long)(expModule * (0.5 + Math.Pow(Global.Clamp(score, 0, 100000), 0.34) / 100));
        }

        /// <summary>
        /// 根据GoodsID添加或删除一组属性
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <param name="addOrDel">true 添加/false 删除</param>
        public static void RefreshGoodsEquipProps(GameClient client, int goodsID, bool addOrDel)
        {
            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
            {
                return;
            }

            EquipPropItem item = GameManager.EquipPropsMgr.FindEquipPropItem(goodsID);
            if (null == item)
            {
                return;
            }

            //for (int j = 0; j < 5; j++)
            //{
            //    client.ClientData.EquipProp.BaseProps[j] += 0;
            //}
            if (addOrDel)
            {
                for (int j = 0; j < (int)ExtPropIndexes.Max; j++)
                {
                    client.ClientData.EquipProp.ExtProps[j] += item.ExtProps[j];
                }
            }
            else
            {
                for (int j = 0; j < (int)ExtPropIndexes.Max; j++)
                {
                    client.ClientData.EquipProp.ExtProps[j] -= item.ExtProps[j];
                    client.ClientData.EquipProp.ExtProps[j] = Global.GMax(0, client.ClientData.EquipProp.ExtProps[j]);
                }
            }
        }

        /// <summary>
        /// 加入装备
        /// </summary>
        /// <param name="goodsID"></param>
        public static bool RefreshEquipProp(GameClient client, GoodsData goodsData)
        {
            if (null == goodsData) return false;

            SystemXmlItem systemGoods = null;
            EquipPropItem item = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
            {
                return false;
            }

            int categoriy = systemGoods.GetIntValue("Categoriy");
            bool isElementHrt = ElementhrtsManager.IsElementHrt(categoriy);
            
            //判断如果不是装备并且不是元素之心 || 时装，跳过。
            if ((categoriy >= (int)ItemCategories.EquipMax && !isElementHrt) || categoriy == (int)ItemCategories.ShiZhuang)
            {
                return false;
            }

            bool toAdd = (goodsData.Using > 0);

            // 元素之心通过site判断
            if (isElementHrt)
                toAdd = goodsData.Site == (int)SaleGoodsConsts.UsingElementhrtsGoodsID;

            // 增加一级属性条件 [6/16/2014 LiaoWei]
            int nRet = 1;

            nRet = client.UsingEquipMgr.EquipFirstPropCondition(client, systemGoods);

            item = GameManager.EquipPropsMgr.FindEquipPropItem(goodsData.GoodsID);
            if (null == item)
            {
                return false;
            }

            // 如果不满足一级属性的话返回 注意 -- 每次属性发生改变时 我将调用重载的接口RefreshEquipProp(GameClient client) [6/17/2014 LiaoWei]
            if (nRet != 1)
            {
                return false;
            }

            // 2015-02-28 策划要求 耐久度不影响套装属性
            // 开始计算装备套装等级
            if (categoriy != (int)ItemCategories.ChiBang && categoriy != (int)ItemCategories.ShouHuChong) //宠物暂时不计算在套装内
            {
                //计算品质个数
                if (goodsData.Quality >= (int)GoodsQuality.Gold)
                {
                    client.ClientData.MyAllThingsCalcItem.TotalGoldQualityNum += toAdd ? 1 : -1;
                }
                else if (goodsData.Quality >= (int)GoodsQuality.Purple)
                {
                    client.ClientData.MyAllThingsCalcItem.TotalPurpleQualityNum += toAdd ? 1 : -1;
                }
            }

            //if (systemGoods.GetIntValue("Categoriy") != 7) //护符暂时不计算在套装内
            if (categoriy != (int)ItemCategories.ChiBang && categoriy != (int)ItemCategories.ShouHuChong) //宠物暂时不计算在套装内
            {
                client.ClientData.MyAllThingsCalcItem.ChangeTotalForgeLevel(goodsData.Forge_level, toAdd);
            }

            CalcExcellenceEquipNum(client.ClientData.MyAllThingsCalcItem, goodsData, nRet);


            //如果镶嵌了宝石
            if (!string.IsNullOrEmpty(goodsData.Jewellist))
            {
                AllThingsCalcItem singleEquipJewelItems = new AllThingsCalcItem();
                string[] jewelFields = goodsData.Jewellist.Split(',');
                for (int x = 0; x < jewelFields.Length; x++)
                {
                    int jewelGoodsID = Convert.ToInt32(jewelFields[x]);
                    EquipPropItem jewelItem = GameManager.EquipPropsMgr.FindEquipPropItem(jewelGoodsID);
                    if (null == jewelItem)
                    {
                        continue;
                    }

                    int jewelLevel = Global.GetJewelLevel(jewelGoodsID);

                    if (jewelLevel >= 8)
                    {
                        client.ClientData.MyAllThingsCalcItem.TotalJewel8LevelNum += toAdd ? 1 : -1;
                        singleEquipJewelItems.TotalJewel8LevelNum += 1;
                    }
                    else if (jewelLevel >= 7)
                    {
                        client.ClientData.MyAllThingsCalcItem.TotalJewel7LevelNum += toAdd ? 1 : -1;
                        singleEquipJewelItems.TotalJewel7LevelNum += 1;
                    }
                    else if (jewelLevel >= 6)
                    {
                        client.ClientData.MyAllThingsCalcItem.TotalJewel6LevelNum += toAdd ? 1 : -1;
                        singleEquipJewelItems.TotalJewel6LevelNum += 1;
                    }
                    else if (jewelLevel >= 5)
                    {
                        client.ClientData.MyAllThingsCalcItem.TotalJewel5LevelNum += toAdd ? 1 : -1;
                        singleEquipJewelItems.TotalJewel5LevelNum += 1;
                    }
                    else if (jewelLevel >= 4)
                    {
                        client.ClientData.MyAllThingsCalcItem.TotalJewel4LevelNum += toAdd ? 1 : -1;
                        singleEquipJewelItems.TotalJewel4LevelNum += 1;
                    }

                    /*for (int j = 0; j < 5; j++)
                    {
                        if (toAdd && nRet == 1)
                        {
                            client.ClientData.EquipProp.BaseProps[j] += GetJewelBasePropsItemVal(jewelItem, j);
                        }
                        else
                        {
                            client.ClientData.EquipProp.BaseProps[j] -= GetJewelBasePropsItemVal(jewelItem, j);
                        }
                    }

                    for (int j = 0; j < (int)ExtPropIndexes.Max; j++)
                    {
                        if (toAdd)
                        {
                            client.ClientData.EquipProp.ExtProps[j] += GetJewelExtPropsItemVal(jewelItem, j);
                        }
                        else
                        {
                            client.ClientData.EquipProp.ExtProps[j] -= GetJewelExtPropsItemVal(jewelItem, j);
                        }
                    }*/
                }

                //处理宝石的属性加成
                //SingleEquipAddPropMgr.ProcessSingleEquipPropsJewels(client.ClientData.EquipProp.ExtProps, client.ClientData.Occupation, singleEquipJewelItems, systemGoods, toAdd);
            }

            //现在计算全套的索引值
            //根据装备中的计数器获取加成属性值
            Global.CalcClientAllThingsCalcItem(client);

            //计算加成的Buffer
            //根据装备中的计数器获取加成属性值的Buffer
            Global.CalcClientAllThingsBuffer(client);

            int maxStrong = (int)item.ExtProps[(int)ExtPropIndexes.Strong];

            //如果一个装备的耐久已经为0了，则不增加也不减少，不处理
            if (!isElementHrt && goodsData.Strong >= maxStrong)
            {
                // 没有耐久属性也有可能变化
                return true;
            }

            // 卓越属性生效 [12/26/2013 LiaoWei]
            ProcessEquipExcellenceProp(client, goodsData, toAdd, systemGoods);

            // 幸运属性生效 [8/18/2014 Administrator]
            ProcessEquipLuckProp(client, goodsData, toAdd, systemGoods);

            for (int j = 0; j < 5; j++)
            {
                if (toAdd)
                {
                    client.ClientData.EquipProp.BaseProps[j] += GetEquipBasePropsItemVal(goodsData, item, j);
                }
                else
                {
                    client.ClientData.EquipProp.BaseProps[j] -= GetEquipBasePropsItemVal(goodsData, item, j);
                }
            }

            for (int j = 0; j < (int)ExtPropIndexes.Max; j++)
            {
                double val = GetEquipExtPropsItemVal(goodsData, item, j, systemGoods);
                if (toAdd)
                {
                    client.ClientData.EquipProp.ExtProps[j] += val;
                }
                else
                {
                    client.ClientData.EquipProp.ExtProps[j] -= val;
                }
            }

            // 如果装备的是一个宠物，则刷新元素之心的属性
            if (categoriy == (int)ItemCategories.ChongWu || categoriy == (int)ItemCategories.ShouHuChong)
            {
                // 元素之心的装备列表
                if (null != client.ClientData.UsingElementhrtsList)
                {
                    lock (client.ClientData.UsingElementhrtsList)
                    {
                        for (int i = 0; i < client.ClientData.UsingElementhrtsList.Count; i++)
                        {
                            GoodsData gd = client.ClientData.UsingElementhrtsList[i];
                            SystemXmlItem systemgd = null;
                            EquipPropItem gditem = null;
                            gditem = GameManager.EquipPropsMgr.FindEquipPropItem(gd.GoodsID);
                            if (null == gditem)
                            {
                                continue;
                            }
                            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(gd.GoodsID, out systemgd))
                            {
                                continue;
                            }
                            for (int j = 0; j < (int)ExtPropIndexes.Max; j++)
                            {
                                double val = GetEquipExtPropsItemVal(gd, gditem, j, systemgd);
                                if (toAdd)
                                {
                                    client.ClientData.EquipProp.ExtProps[j] += val;
                                }
                                else
                                {
                                    client.ClientData.EquipProp.ExtProps[j] -= val;
                                }
                            }
                        }
                    }
                }
            }

            /// 将装备的强化属性应用到装备上(传奇版本)

            // 属性改造 加上一级属性公式 区分职业[8/15/2013 LiaoWei]
            int nOcc = Global.CalcOriginalOccupationID(client);

            ChuanQiQianHua.ApplayEquipQianHuaProps(client.ClientData.EquipProp.ExtProps, nOcc, goodsData, systemGoods, toAdd);

            //处理强化的属性加成
            //SingleEquipAddPropMgr.ProcessSingleEquipPropsForge(client.ClientData.EquipProp.ExtProps, client.ClientData.Occupation, goodsData, systemGoods, toAdd);

            //处理附加的属性加成
            //SingleEquipAddPropMgr.ProcessSingleEquipPropsFuJia(client.ClientData.EquipProp.ExtProps, client.ClientData.Occupation, goodsData, systemGoods, toAdd);

            //如果镶嵌了宝石
            if (!string.IsNullOrEmpty(goodsData.Jewellist))
            {
                AllThingsCalcItem singleEquipJewelItems = new AllThingsCalcItem();
                string[] jewelFields = goodsData.Jewellist.Split(',');
                for (int x = 0; x < jewelFields.Length; x++)
                {
                    int jewelGoodsID = Convert.ToInt32(jewelFields[x]);
                    EquipPropItem jewelItem = GameManager.EquipPropsMgr.FindEquipPropItem(jewelGoodsID);
                    if (null == jewelItem)
                    {
                        continue;
                    }

                    /*int jewelLevel = Global.GetJewelLevel(jewelGoodsID);

                    if (jewelLevel >= 8)
                    {
                        client.ClientData.MyAllThingsCalcItem.TotalJewel8LevelNum += toAdd ? 1 : -1;
                        singleEquipJewelItems.TotalJewel8LevelNum += 1;
                    }
                    else if (jewelLevel >= 7)
                    {
                        client.ClientData.MyAllThingsCalcItem.TotalJewel7LevelNum += toAdd ? 1 : -1;
                        singleEquipJewelItems.TotalJewel7LevelNum += 1;
                    }
                    else if (jewelLevel >= 6)
                    {
                        client.ClientData.MyAllThingsCalcItem.TotalJewel6LevelNum += toAdd ? 1 : -1;
                        singleEquipJewelItems.TotalJewel6LevelNum += 1;
                    }
                    else if (jewelLevel >= 5)
                    {
                        client.ClientData.MyAllThingsCalcItem.TotalJewel5LevelNum += toAdd ? 1 : -1;
                        singleEquipJewelItems.TotalJewel5LevelNum += 1;
                    }
                    else if (jewelLevel >= 4)
                    {
                        client.ClientData.MyAllThingsCalcItem.TotalJewel4LevelNum += toAdd ? 1 : -1;
                        singleEquipJewelItems.TotalJewel4LevelNum += 1;
                    }*/

                    for (int j = 0; j < 5; j++)
                    {
                        if (toAdd && nRet == 1)
                        {
                            client.ClientData.EquipProp.BaseProps[j] += GetJewelBasePropsItemVal(jewelItem, j);
                        }
                        else
                        {
                            client.ClientData.EquipProp.BaseProps[j] -= GetJewelBasePropsItemVal(jewelItem, j);
                        }
                    }

                    for (int j = 0; j < (int)ExtPropIndexes.Max; j++)
                    {
                        if (toAdd)
                        {
                            client.ClientData.EquipProp.ExtProps[j] += GetJewelExtPropsItemVal(jewelItem, j);
                        }
                        else
                        {
                            client.ClientData.EquipProp.ExtProps[j] -= GetJewelExtPropsItemVal(jewelItem, j);
                        }
                    }
                }

                //处理宝石的属性加成
                //SingleEquipAddPropMgr.ProcessSingleEquipPropsJewels(client.ClientData.EquipProp.ExtProps, client.ClientData.Occupation, singleEquipJewelItems, systemGoods, toAdd);
            }

            //洗练属性加成
            if (null != goodsData.WashProps && goodsData.WashProps.Count >= 2)
            {
                for (int i = 0; i < goodsData.WashProps.Count; i += 2)
                {
                    int idx = goodsData.WashProps[i];
                    if (0 < idx && idx < (int)ExtPropIndexes.Max)
                    {
                        client.ClientData.EquipProp.ExtProps[idx] += goodsData.WashProps[i + 1] * (toAdd ? 1 : -1);
                    }
                }
            }

            //现在计算全套的索引值
            //根据装备中的计数器获取加成属性值
            Global.CalcClientAllThingsCalcItem(client);

            //计算加成的Buffer
            //根据装备中的计数器获取加成属性值的Buffer
            Global.CalcClientAllThingsBuffer(client);

            //神器再造加成
            ArtifactManager.SetArtifactProp(client);

            //client.propsCacheModule.ResetAllProps();

            return true;
        }

        /// <summary>
        /// 装备卓越
        /// </summary>
        public static void ProcessEquipExcellenceProp(GameClient client, GoodsData goods, bool bAdd, SystemXmlItem systemGoods)
        {
            if (bAdd)
            {
                int nRet = 1;

                nRet = client.UsingEquipMgr.EquipFirstPropCondition(client, systemGoods);

                if (nRet < 1)
                    return;
            }

            int nExcellence = 0;

            for (int n = 0; n < (int)ExcellencePorp.EXCELLENCEPORPMAXINDEX; ++n)
            {
                nExcellence = goods.ExcellenceInfo;

                //if ((nExcellence &= GetBitValue(n)) > 0)
                if (GetIntSomeBit(nExcellence, n) == 1)
                {
                    int nIndex = n;

                    if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP0)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.02; // 卓越一击几率 +2%
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.02;

                    }
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP1) // 策划调整为 -- EXCELLENCEPORP1和EXCELLENCEPORP2 属性同时影响物理和魔法攻击力(最大和最小都影响) [6/17/2014 LiaoWei]
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += (client.ClientData.ChangeLifeCount * 100 + client.ClientData.Level) / 20; // 物理攻击力  +人物等级/20 注 人物等级=转生等级*100+人物等级
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= (client.ClientData.ChangeLifeCount * 100 + client.ClientData.Level) / 20;

                    }
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP2)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += (client.ClientData.ChangeLifeCount * 100 + client.ClientData.Level) / 20; // 魔法攻击力 +人物等级/20 注 人物等级=转生等级*100+人物等级
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= (client.ClientData.ChangeLifeCount * 100 + client.ClientData.Level) / 20;

                    }
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP3)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.02; // 物理攻击力提升  +2%
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.02;
                    }
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP4)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.02; // 魔法攻击力提升  +2%
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.02;
                    }
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP5)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.02; // 攻击速度增加  +7  ---  // 改成 伤害加成+2 [3/6/2014 LiaoWei]
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.02;
                    }
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP6)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.02;//RoleAlgorithm.GetMaxLifeV(client) / 8; // 击杀怪物后恢复生命 +生命上限/8 -- 改成 命中+2%
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.02;// RoleAlgorithm.GetMaxLifeV(client) / 8;
                    }
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP7)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.02;//RoleAlgorithm.GetMaxMagicV(client) / 8; // 击杀怪物后恢复魔法 +魔法上限/8 -- 改成 无视防御比例+2%
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.02;//RoleAlgorithm.GetMaxMagicV(client) / 8;
                    }
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP8)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.02; // 生命上限增加 +2%
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.02;
                    }
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP9)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += (client.ClientData.ChangeLifeCount * 100 + client.ClientData.Level) / 20;//0.04; // 魔法上限增加 +4% -- 改成 防御力 +人物等级/20
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= (client.ClientData.ChangeLifeCount * 100 + client.ClientData.Level) / 20;//0.04;
                    }
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP10)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.02; // 伤害减少 +2%
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.02;
                    }
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP11)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.02; // 伤害反弹 +2%
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.02;
                    }
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP12)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.02; // 闪避 +2%
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.02;
                    }
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP13)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.02;//0.4; // 击杀怪物掉落金钱 +40%   改成 防御力+2%
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.02;//0.4;

                    }
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP14)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.03; // 无视防御几率 +3%
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.03;
                    }
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP15)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.05; // 生命完全恢复几率 5% 
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                    }
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP16)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.05; // 魔法完全恢复几率 5%
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                    }
                    // 幸运一击几率 +5% ok
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP17)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                    }
                    // 卓越一击几率 +5% ok
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP18)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                    }
                    // 命中 +5%   ok
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP19)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                    }
                    // 生命上限加成 +5%   ok
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP20)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                    }
                    // 伤害增加 +5%  ok
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP21)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                    }
                    // 伤害减少 +5%
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP22)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                    }
                    // 致死一击几率 +5% ok
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP23)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                    }
                    // 攻击力 +5% ok
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP24)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                    }
                    // 闪避 +5%   ok
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP25)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                    }
                    // 无视防御几率 +5% ok
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP26)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                    }
                    // 防御力 +5%  ok
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP27)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                    }
                    // 伤害反弹 +5% ok
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP28)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                    }
                    // 抵抗幸运一击率 +5%
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP29)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                    }
                    // 抵抗卓越一击率 +5%
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP30)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                    }
                    // 抵抗致死一击率 +5%
                    else if (nIndex == (int)ExcellencePorp.EXCELLENCEPORP31)
                    {
                        if (bAdd)
                            client.ClientData.ExcellenceProp[nIndex] += 0.05;
                        else
                            client.ClientData.ExcellenceProp[nIndex] -= 0.05;
                    }
                    // 不能再加了 到头了

                    if (bAdd == false)
                        client.ClientData.ExcellenceProp[nIndex] = Global.GMax(0, client.ClientData.ExcellenceProp[nIndex]);
                }
            }
        }

        /// <summary>
        /// 装备幸运
        /// </summary>
        public static void ProcessEquipLuckProp(GameClient client, GoodsData goods, bool bAdd, SystemXmlItem systemGoods)
        {
            if (bAdd)
            {
                int nRet = 1;

                nRet = client.UsingEquipMgr.EquipFirstPropCondition(client, systemGoods);

                if (nRet < 1)
                    return;
            }

            if (goods.Lucky > 0)
            {
                if (bAdd)
                    client.ClientData.LuckProp += 5;
                else
                    client.ClientData.LuckProp -= 5;
            }
        }

        /// <summary>
        /// 计算其他玩家原始数据的套装计算值
        /// </summary>
        public static AllThingsCalcItem CalcGoodsDataListAllThingsItem(List<GoodsData> goodsDataList)
        {
            AllThingsCalcItem allThingsCalcItem = new AllThingsCalcItem();
            if (null == goodsDataList)
            {
                return allThingsCalcItem;
            }

            SystemXmlItem systemGoods = null;
            EquipPropItem item = null;
            GoodsData goodsData = null;

            for (int i = 0; i < goodsDataList.Count; i++)
            {
                goodsData = goodsDataList[i];
                if (goodsData.Using <= 0)
                {
                    continue;
                }

                systemGoods = null;
                if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
                {
                    continue;
                }

                //判断如果不是装备则，跳过
                if (systemGoods.GetIntValue("Categoriy") >= (int)ItemCategories.EquipMax)
                {
                    continue;
                }

                item = GameManager.EquipPropsMgr.FindEquipPropItem(goodsData.GoodsID);
                if (null == item)
                {
                    continue;
                }

                //if (systemGoods.GetIntValue("Categoriy") != 7) //护符暂时不计算在套装内
                {
                    //计算品质个数
                    if (goodsData.Quality >= (int)GoodsQuality.Gold)
                    {
                        allThingsCalcItem.TotalGoldQualityNum++;
                    }
                    else if (goodsData.Quality >= (int)GoodsQuality.Purple)
                    {
                        allThingsCalcItem.TotalPurpleQualityNum++;
                    }
                }

                //if (systemGoods.GetIntValue("Categoriy") != 7) //护符暂时不计算在套装内
                {
                    allThingsCalcItem.ChangeTotalForgeLevel(goodsData.Forge_level, true);
                }

                CalcExcellenceEquipNum(allThingsCalcItem, goodsData, 1);


                //如果镶嵌了宝石
                if (!string.IsNullOrEmpty(goodsData.Jewellist))
                {
                    string[] jewelFields = goodsData.Jewellist.Split(',');
                    for (int x = 0; x < jewelFields.Length; x++)
                    {
                        int jewelGoodsID = Convert.ToInt32(jewelFields[x]);
                        int jewelLevel = Global.GetJewelLevel(jewelGoodsID);
                        if (jewelLevel >= 8)
                        {
                            allThingsCalcItem.TotalJewel8LevelNum++;
                        }
                        else if (jewelLevel >= 7)
                        {
                            allThingsCalcItem.TotalJewel7LevelNum++;
                        }
                        else if (jewelLevel >= 6)
                        {
                            allThingsCalcItem.TotalJewel6LevelNum++;
                        }
                        else if (jewelLevel >= 5)
                        {
                            allThingsCalcItem.TotalJewel5LevelNum++;
                        }
                        else if (jewelLevel >= 4)
                        {
                            allThingsCalcItem.TotalJewel4LevelNum++;
                        }
                    }
                }
            }

            return allThingsCalcItem;
        }

        /// <summary>
        /// 角色属性
        /// </summary>
        /// <param name="client"></param>
        public static double[] GetRoleAttribute(GameClient client)
        {
            double [] ret = new double[(int)ExtPropIndexes.Max];
            //double[] ret2 = new double[(int)ExtPropIndexes.Max];
            try
            {
                /*ret2 服务器测试看数据用*/
                /*ret2[(int)ExtPropIndexes.Strong] = RoleAlgorithm.GetStrong(client);
                ret2[(int)ExtPropIndexes.AttackSpeed] = RoleAlgorithm.GetAttackSpeed(client);
                ret2[(int)ExtPropIndexes.MoveSpeed] = RoleAlgorithm.GetMoveSpeed(client);
                ret2[(int)ExtPropIndexes.MinDefense] = RoleAlgorithm.GetMinADefenseV(client);
                ret2[(int)ExtPropIndexes.MaxDefense] = RoleAlgorithm.GetMaxADefenseV(client);
                ret2[(int)ExtPropIndexes.MinMDefense] = RoleAlgorithm.GetMinMDefenseV(client);
                ret2[(int)ExtPropIndexes.MaxMDefense] = RoleAlgorithm.GetMaxMDefenseV(client);
                ret2[(int)ExtPropIndexes.MinAttack] = RoleAlgorithm.GetMinAttackV(client);
                ret2[(int)ExtPropIndexes.MaxAttack] = RoleAlgorithm.GetMaxAttackV(client);
                ret2[(int)ExtPropIndexes.MinMAttack] = RoleAlgorithm.GetMinMagicAttackV(client);
                ret2[(int)ExtPropIndexes.MaxMAttack] = RoleAlgorithm.GetMaxMagicAttackV(client);
                ret2[(int)ExtPropIndexes.IncreasePhyAttack] = RoleAlgorithm.GetIncreasePhyAttack(client);
                ret2[(int)ExtPropIndexes.IncreaseMagAttack] = RoleAlgorithm.GetIncreaseMagAttack(client);
                ret2[(int)ExtPropIndexes.MaxLifeV] = RoleAlgorithm.GetMaxLifeV(client);
                ret2[(int)ExtPropIndexes.MaxLifePercent] = RoleAlgorithm.GetMaxLifePercentV(client);
                ret2[(int)ExtPropIndexes.MaxMagicV] = RoleAlgorithm.GetMaxMagicV(client);
                ret2[(int)ExtPropIndexes.MaxMagicPercent] = RoleAlgorithm.GetMaxMagicPercent(client);
                ret2[(int)ExtPropIndexes.Lucky] = RoleAlgorithm.GetLuckV(client);
                ret2[(int)ExtPropIndexes.HitV] = RoleAlgorithm.GetHitV(client);
                ret2[(int)ExtPropIndexes.Dodge] = RoleAlgorithm.GetDodgeV(client);
                ret2[(int)ExtPropIndexes.LifeRecoverPercent] = RoleAlgorithm.GetLifeRecoverAddPercentV(client);
                ret2[(int)ExtPropIndexes.MagicRecoverPercent] = RoleAlgorithm.GetMagicRecoverAddPercentV(client);
                ret2[(int)ExtPropIndexes.LifeRecover] = RoleAlgorithm.GetLifeRecoverValPercentV(client);
                ret2[(int)ExtPropIndexes.MagicRecover] = RoleAlgorithm.GetMagicRecoverValPercentV(client);
                ret2[(int)ExtPropIndexes.SubAttackInjurePercent] = RoleAlgorithm.GetSubAttackInjurePercent(client);
                ret2[(int)ExtPropIndexes.SubAttackInjure] = RoleAlgorithm.GetSubAttackInjureValue(client);
                ret2[(int)ExtPropIndexes.AddAttackInjurePercent] = RoleAlgorithm.GetAddAttackInjurePercent(client);
                ret2[(int)ExtPropIndexes.AddAttackInjure] = RoleAlgorithm.GetAddAttackInjureValue(client);
                ret2[(int)ExtPropIndexes.IgnoreDefensePercent] = RoleAlgorithm.GetIgnoreDefensePercent(client);
                ret2[(int)ExtPropIndexes.DamageThornPercent] = RoleAlgorithm.GetDamageThornPercent(client);
                ret2[(int)ExtPropIndexes.DamageThorn] = RoleAlgorithm.GetDamageThorn(client);
                ret2[(int)ExtPropIndexes.PhySkillIncreasePercent] = RoleAlgorithm.GetPhySkillIncrease(client);
                ret2[(int)ExtPropIndexes.PhySkillIncrease] = 0;
                ret2[(int)ExtPropIndexes.MagicSkillIncreasePercent] = RoleAlgorithm.GetMagicSkillIncrease(client);
                ret2[(int)ExtPropIndexes.MagicSkillIncrease] = 0;
                ret2[(int)ExtPropIndexes.FatalAttack] = RoleAlgorithm.GetFatalAttack(client);
                ret2[(int)ExtPropIndexes.DoubleAttack] = RoleAlgorithm.GetDoubleAttack(client);
                ret2[(int)ExtPropIndexes.DecreaseInjurePercent] = RoleAlgorithm.GetDecreaseInjurePercent(client);
                ret2[(int)ExtPropIndexes.DecreaseInjureValue] = RoleAlgorithm.GetDecreaseInjureValue(client);
                ret2[(int)ExtPropIndexes.CounteractInjurePercent] = RoleAlgorithm.GetCounteractInjurePercent(client);
                ret2[(int)ExtPropIndexes.CounteractInjureValue] = RoleAlgorithm.GetCounteractInjureValue(client);
                ret2[(int)ExtPropIndexes.IgnoreDefenseRate] = RoleAlgorithm.GetIgnoreDefenseRate(client);
                ret2[(int)ExtPropIndexes.IncreasePhyDefense] = RoleAlgorithm.GetIncreasePhyDefense(client);
                ret2[(int)ExtPropIndexes.IncreaseMagDefense] = RoleAlgorithm.GetIncreaseMagDefense(client);
                ret2[(int)ExtPropIndexes.LifeSteal] = RoleAlgorithm.GetLifeStealV(client);
                ret2[(int)ExtPropIndexes.AddAttack] = RoleAlgorithm.GetAddAttackV(client);
                ret2[(int)ExtPropIndexes.AddDefense] = RoleAlgorithm.GetAddDefenseV(client);
                ret2[(int)ExtPropIndexes.StateDingShen] = RoleAlgorithm.GetRoleStateDingSheng(client, 0);
                ret2[(int)ExtPropIndexes.StateMoveSpeed] = RoleAlgorithm.GetRoleStateMoveSpeed(client, 0);
                ret2[(int)ExtPropIndexes.StateJiTui] = RoleAlgorithm.GetRoleStateJiTui(client, 0);
                ret2[(int)ExtPropIndexes.StateHunMi] = RoleAlgorithm.GetRoleStateHunMi(client, 0);
                ret2[(int)ExtPropIndexes.DeLucky] = RoleAlgorithm.GetDeLuckyAttack(client);
                ret2[(int)ExtPropIndexes.DeFatalAttack] = RoleAlgorithm.GetDeFatalAttack(client);
                ret2[(int)ExtPropIndexes.DeDoubleAttack] = RoleAlgorithm.GetDeDoubleAttack(client);
                ret2[(int)ExtPropIndexes.HitPercent] = RoleAlgorithm.GetHitPercent(client);
                ret2[(int)ExtPropIndexes.DodgePercent] = RoleAlgorithm.GetDodgePercent(client);
                ret2[(int)ExtPropIndexes.FrozenPercent] = RoleAlgorithm.GetFrozenPercent(client);
                ret2[(int)ExtPropIndexes.PalsyPercent] = RoleAlgorithm.GetPalsyPercent(client);
                ret2[(int)ExtPropIndexes.SpeedDownPercent] = RoleAlgorithm.GetSpeedDownPercent(client);
                ret2[(int)ExtPropIndexes.BlowPercent] = RoleAlgorithm.GetBlowPercent(client);
                ret2[(int)ExtPropIndexes.AutoRevivePercent] = RoleAlgorithm.GetAutoRevivePercent(client);
                ret2[(int)ExtPropIndexes.SavagePercent] = RoleAlgorithm.GetSavagePercent(client);
                ret2[(int)ExtPropIndexes.ColdPercent] = RoleAlgorithm.GetColdPercent(client);
                ret2[(int)ExtPropIndexes.RuthlessPercent] = RoleAlgorithm.GetRuthlessPercent(client);
                ret2[(int)ExtPropIndexes.DeSavagePercent] = RoleAlgorithm.GetDeSavagePercent(client);
                ret2[(int)ExtPropIndexes.DeColdPercent] = RoleAlgorithm.GetDeColdPercent(client);
                ret2[(int)ExtPropIndexes.DeRuthlessPercent] = RoleAlgorithm.GetDeRuthlessPercent(client);
                ret2[(int)ExtPropIndexes.LifeStealPercent] = RoleAlgorithm.GetLifeStealPercentV(client);
                ret2[(int)ExtPropIndexes.Potion] = RoleAlgorithm.GetPotionPercentV(client);
                ret2[(int)ExtPropIndexes.FireAttack] = GameManager.ElementsAttackMgr.GetElementAttack(client, EElementDamageType.EEDT_Fire);
                ret2[(int)ExtPropIndexes.WaterAttack] = GameManager.ElementsAttackMgr.GetElementAttack(client, EElementDamageType.EEDT_Water);
                ret2[(int)ExtPropIndexes.LightningAttack] = GameManager.ElementsAttackMgr.GetElementAttack(client, EElementDamageType.EEDT_Lightning);
                ret2[(int)ExtPropIndexes.SoilAttack] = GameManager.ElementsAttackMgr.GetElementAttack(client, EElementDamageType.EEDT_Soil);
                ret2[(int)ExtPropIndexes.IceAttack] = GameManager.ElementsAttackMgr.GetElementAttack(client, EElementDamageType.EEDT_Ice);
                ret2[(int)ExtPropIndexes.WindAttack] = GameManager.ElementsAttackMgr.GetElementAttack(client, EElementDamageType.EEDT_Wind);
                ret2[(int)ExtPropIndexes.FirePenetration] = GameManager.ElementsAttackMgr.GetElementDamagePenetration(client, EElementDamageType.EEDT_Fire);
                ret2[(int)ExtPropIndexes.WaterPenetration] = GameManager.ElementsAttackMgr.GetElementDamagePenetration(client, EElementDamageType.EEDT_Water);
                ret2[(int)ExtPropIndexes.LightningPenetration] = GameManager.ElementsAttackMgr.GetElementDamagePenetration(client, EElementDamageType.EEDT_Lightning);
                ret2[(int)ExtPropIndexes.SoilPenetration] = GameManager.ElementsAttackMgr.GetElementDamagePenetration(client, EElementDamageType.EEDT_Soil);
                ret2[(int)ExtPropIndexes.IcePenetration] = GameManager.ElementsAttackMgr.GetElementDamagePenetration(client, EElementDamageType.EEDT_Ice);
                ret2[(int)ExtPropIndexes.WindPenetration] = GameManager.ElementsAttackMgr.GetElementDamagePenetration(client, EElementDamageType.EEDT_Wind);
                ret2[(int)ExtPropIndexes.DeFirePenetration] = GameManager.ElementsAttackMgr.GetDeElementDamagePenetration(client, EElementDamageType.EEDT_Fire);
                ret2[(int)ExtPropIndexes.DeWaterPenetration] = GameManager.ElementsAttackMgr.GetDeElementDamagePenetration(client, EElementDamageType.EEDT_Water);
                ret2[(int)ExtPropIndexes.DeLightningPenetration] = GameManager.ElementsAttackMgr.GetDeElementDamagePenetration(client, EElementDamageType.EEDT_Lightning);
                ret2[(int)ExtPropIndexes.DeSoilPenetration] = GameManager.ElementsAttackMgr.GetDeElementDamagePenetration(client, EElementDamageType.EEDT_Soil);
                ret2[(int)ExtPropIndexes.DeIcePenetration] = GameManager.ElementsAttackMgr.GetDeElementDamagePenetration(client, EElementDamageType.EEDT_Ice);
                ret2[(int)ExtPropIndexes.DeWindPenetration] = GameManager.ElementsAttackMgr.GetDeElementDamagePenetration(client, EElementDamageType.EEDT_Wind);
                ret2[(int)ExtPropIndexes.Holywater] = client.ClientData.PropsCacheManager.GetExtProp((int)ExtPropIndexes.Holywater);
                ret2[(int)ExtPropIndexes.RecoverLifeV] = RoleAlgorithm.GetLifeRecoverAddPercentOnlySandR(client);
                ret2[(int)ExtPropIndexes.RecoverMagicV] = RoleAlgorithm.GetMagicRecoverAddPercentOnlySandR(client);
                ret2[(int)ExtPropIndexes.Fatalhurt] = RoleAlgorithm.GetFatalHurt(client);
                ret2[(int)ExtPropIndexes.AddAttackPercent] = RoleAlgorithm.GetAddAttackPercent(client);
                ret2[(int)ExtPropIndexes.AddDefensePercent] = RoleAlgorithm.GetAddDefensePercent(client);
                ret2[(int)ExtPropIndexes.InjurePenetrationPercent] = RoleAlgorithm.GetInjurePenetrationPercent(client);
                ret2[(int)ExtPropIndexes.ElementInjurePercent] = RoleAlgorithm.GetExtPropValue(client, ExtPropIndexes.ElementInjurePercent);
                ret2[(int)ExtPropIndexes.IgnorePhyAttackPercent] = RoleAlgorithm.GetExtPropValue(client, ExtPropIndexes.IgnorePhyAttackPercent);
                ret2[(int)ExtPropIndexes.IgnoreMagyAttackPercent] = RoleAlgorithm.GetExtPropValue(client, ExtPropIndexes.IgnoreMagyAttackPercent);
                */

                for (int i = 0; i < (int)ExtPropIndexes.Max; ++i)
                    ret[i] = RoleAlgorithm.GetPureExtProp(client, i);
                return ret;
            }
            catch
            {
                return null;
            }
        }

        /// <summary>
        /// 刷新装备属性，并且通知客户端【主要用于装备强化，传承，洗练等操作过程中如果操作穿戴的装备时，刷新角色数据】
        /// </summary>
        /// <param name="client"></param>
        public static void RefreshEquipPropAndNotify(GameClient client)
        {
            //重新计算装备的合成属性
            Global.RefreshEquipProp(client);

            //通知客户端属性变化
            GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

            // 总生命值和魔法值变化通知(同一个地图才需要通知)
            GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
        }

        #endregion 角色装备属性

        #region 角色负重管理

        // 属性改造 去掉 负重相关[8/15/2013 LiaoWei]

        /// <summary>
        /// 重新计算角色负重
        /// </summary>
        /*public static void RefreshGoodsWeight(GameClient client)
        {
            client.ClientData.WeighItems.ResetWeights();
            if (null == client.ClientData.GoodsDataList)
            {
                return;
            }

            SystemXmlItem systemGoods = null;
            EquipPropItem item = null;
            GoodsData goodsData = null;

            lock (client.ClientData.GoodsDataList)
            {
                for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    goodsData = client.ClientData.GoodsDataList[i];
                    systemGoods = null;
                    if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
                    {
                        continue;
                    }

                    int categoriy = systemGoods.GetIntValue("Categoriy");
                    item = GameManager.EquipPropsMgr.FindEquipPropItem(goodsData.GoodsID);
                    if (null == item)
                    {
                        continue;
                    }
                    int goodsNum = goodsData.GCount;
                    if (Global.GetGoodsDefaultCount(goodsData.GoodsID) > 1)
                    {
                        goodsNum = 1;
                    }

                    double weight = item.ExtProps[(int)ExtPropIndexes.Weight] * goodsNum;
                    if (goodsData.Using <= 0)
                    {
                        client.ClientData.WeighItems.Weights[(int)WeightIndexes.BagWeight] += weight;
                    }
                    else
                    {
                        if ((int)ItemCategories.Weapon == categoriy ||
                            (int)ItemCategories.ShenBing == categoriy)
                        {
                            client.ClientData.WeighItems.Weights[(int)WeightIndexes.HandWeight] += weight;
                        }
                        else
                        {
                            client.ClientData.WeighItems.Weights[(int)WeightIndexes.DressWeight] += weight;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// 重新计算角色负重(单个物品)
        /// </summary>
        public static bool UpdateGoodsWeight(GameClient client, GoodsData goodsData, int thisTimeGoodsNum, bool toAdd, bool updateEquip = false)
        {
            if (null == goodsData) return false;

            SystemXmlItem systemGoods = null;
            EquipPropItem item = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
            {
                return false;
            }

            int categoriy = systemGoods.GetIntValue("Categoriy");
            item = GameManager.EquipPropsMgr.FindEquipPropItem(goodsData.GoodsID);
            if (null == item)
            {
                return false;
            }

            int goodsNum = thisTimeGoodsNum;
            if (Global.GetGoodsDefaultCount(goodsData.GoodsID) > 1)
            {
                goodsNum = 1;
            }

            double weight = item.ExtProps[(int)ExtPropIndexes.Weight] * goodsNum;
            if (!toAdd)
            {
                weight = 0 - weight; //转为负数
            }

            if (updateEquip)
            {
                if ((int)ItemCategories.Weapon == categoriy ||
                    (int)ItemCategories.ShenBing == categoriy)
                {
                    client.ClientData.WeighItems.Weights[(int)WeightIndexes.HandWeight] += weight;
                }
                else
                {
                    client.ClientData.WeighItems.Weights[(int)WeightIndexes.DressWeight] += weight;
                }
            }
            else
            {
                client.ClientData.WeighItems.Weights[(int)WeightIndexes.BagWeight] += weight;
            }

            return true;
        }

        /// <summary>
        /// 是否能得到物品列表(判断包裹负重是否足够)
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static bool CanAddGoodsListWeight(GameClient client, List<GoodsData> goodsDataList)
        {
            if (null == goodsDataList) return false;

            int totalWeight = 0;
            for (int i = 0; i < goodsDataList.Count; i++)
            {
                SystemXmlItem systemGoods = null;
                EquipPropItem item = null;
                if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsDataList[i].GoodsID, out systemGoods))
                {
                    continue;
                }

                item = GameManager.EquipPropsMgr.FindEquipPropItem(goodsDataList[i].GoodsID);
                if (null == item)
                {
                    continue;
                }

                totalWeight += (int)item.ExtProps[(int)ExtPropIndexes.Weight];
            }

            double weight = totalWeight;
            double maxWeight = RoleAlgorithm.GetBagFuZhong(client);
            if ((client.ClientData.WeighItems.Weights[(int)WeightIndexes.BagWeight] + weight) <= maxWeight)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 是否能得到物品(判断包裹负重是否足够)
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static bool CanAddGoodsWeight(GameClient client, GoodsData goodsData)
        {
            if (null == goodsData) return false;
            SystemXmlItem systemGoods = null;
            EquipPropItem item = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
            {
                return false;
            }

            int categoriy = systemGoods.GetIntValue("Categoriy");
            item = GameManager.EquipPropsMgr.FindEquipPropItem(goodsData.GoodsID);
            if (null == item)
            {
                return true;
            }

            double weight = item.ExtProps[(int)ExtPropIndexes.Weight];
            double maxWeight = RoleAlgorithm.GetBagFuZhong(client);
            if ((client.ClientData.WeighItems.Weights[(int)WeightIndexes.BagWeight] + weight) <= maxWeight)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 是否能佩戴装备物品(判断腕力或者佩戴负重是否足够)
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static int CanUsingGoodsWeight(GameClient client, GoodsData goodsData, bool hintClient = true)
        {
            if (null == goodsData) return -1;
            SystemXmlItem systemGoods = null;
            EquipPropItem item = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
            {
                return -1;
            }

            int categoriy = systemGoods.GetIntValue("Categoriy");
            if (categoriy >= (int)ItemCategories.EquipMax)
            {
                return -1;
            }

            item = GameManager.EquipPropsMgr.FindEquipPropItem(goodsData.GoodsID);
            if (null == item)
            {
                return 0;
            }

            string goodsName = systemGoods.GetStringValue("Title");
            double weight = item.ExtProps[(int)ExtPropIndexes.Weight];
            double maxWeight = RoleAlgorithm.GetDressFuZhong(client);
            if ((int)ItemCategories.Weapon == categoriy || (int)ItemCategories.ShenBing == categoriy)
            {
                maxWeight = RoleAlgorithm.GetHandFuZhong(client);
                if ((client.ClientData.WeighItems.Weights[(int)WeightIndexes.HandWeight] + weight) <= maxWeight)
                {
                    return 0;
                }
                else
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                        StringUtil.substitute(Global.GetLang("佩戴{0}时，腕力不足"), goodsName), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    return -3;
                }
            }
            else
            {
                if ((client.ClientData.WeighItems.Weights[(int)WeightIndexes.DressWeight] + weight) <= maxWeight)
                {
                    return 0;
                }
                else
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                        StringUtil.substitute(Global.GetLang("佩戴{0}时，负重不足"), goodsName), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    return -2;
                }
            }

            return -1;
        }*/

        #endregion 角色负重管理

        #region 角色经验

        /// <summary>
        /// 获取经过转生经验奖励系数加成后的经验数值
        /// </summary>
        /// <param name="client"></param>
        /// <param name="exp"></param>
        /// <returns></returns>
        public static long GetExpMultiByZhuanShengExpXiShu(GameClient client, long exp)
        {
            double expXiShu = 1;
            if (Data.ChangeLifeEverydayExpRate.TryGetValue(client.ClientData.ChangeLifeCount, out expXiShu))
            {
                return (long)(exp * expXiShu);
            }
            return exp;
        }

        /// <summary>
        /// 获取当前角色当前等级升级总共需要多少经验
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static long GetCurrentLevelUpNeedExp(GameClient client)
        {
            long nNeedExp = 0;
            if (client.ClientData.ChangeLifeCount > 0)
            {
                //nNeedExp = (int)(Data.LevelUpExperienceList[sprite.ClientData.Level] * Data.ChangeLifeInfoList[sprite.ClientData.ChangeLifeCount].ExpProportion);
                nNeedExp = (int)Data.LevelUpExperienceList[client.ClientData.Level];

                ChangeLifeDataInfo infoTmp = null;
                infoTmp = GameManager.ChangeLifeMgr.GetChangeLifeDataInfo(client);

                if (infoTmp != null && infoTmp.ExpProportion > 0)
                    nNeedExp = nNeedExp * infoTmp.ExpProportion;
            }
            else
                nNeedExp = Data.LevelUpExperienceList[client.ClientData.Level];

            return nNeedExp;
        }

        /// <summary>
        /// 增加经验值
        /// </summary>
        /// <param name="sprite">对象精灵</param>
        /// <param name="experience">当前经验</param>
        public static void EarnExperience(GameClient sprite, long experience)
        {
            // 角色满级之后 经验不加 [1/24/2014 LiaoWei]
            /*if (sprite.ClientData.Level >= Data.LevelUpExperienceList.Length - 1)
            {
                return;
            }*/

            // 升级改造 角色等级上限和转生等级挂钩 -- ZhuanSheng.xml中Level项 [4/21/2014 LiaoWei]
            int nMaxLev;
            if (sprite.ClientData.ChangeLifeCount > GameManager.ChangeLifeMgr.m_MaxChangeLifeCount)
                return;
            /*else if (sprite.ClientData.ChangeLifeCount == GameManager.ChangeLifeMgr.m_MaxChangeLifeCount)
            {
                ChangeLifeDataInfo infoTmp = null;
                infoTmp = GameManager.ChangeLifeMgr.GetChangeLifeDataInfo(sprite);

                if (infoTmp == null)
                    return;

                nMaxLev = infoTmp.NeedLevel;

                if (sprite.ClientData.Level >= nMaxLev)
                    return;
            }
            else  // 策划今天改成 -- 角色等级即便到了该转生能到的等级上限 但任然可以获得经验 [8/25/2014 LiaoWei]
            {
                nMaxLev = Data.ChangeLifeInfoList[sprite.ClientData.ChangeLifeCount + 1].NeedLevel;

                if (sprite.ClientData.Level >= nMaxLev)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, sprite,
                                                               StringUtil.substitute(Global.GetLang("您的等级已达上限，无法获取经验收益，建议您立即转生")),
                                                               GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.NeedZhuanSheng);
                    return;
                }
            }*/

            // 升级经验需求改造 -- 在转生表中新增了系数 [2/13/2014 LiaoWei]
            long nNeedExp = 0;
            if (sprite.ClientData.ChangeLifeCount > 0)
            {
                //nNeedExp = (int)(Data.LevelUpExperienceList[sprite.ClientData.Level] * Data.ChangeLifeInfoList[sprite.ClientData.ChangeLifeCount].ExpProportion);
                nNeedExp = (int)Data.LevelUpExperienceList[sprite.ClientData.Level];

                ChangeLifeDataInfo infoTmp = null;
                infoTmp = GameManager.ChangeLifeMgr.GetChangeLifeDataInfo(sprite);

                if (infoTmp != null && infoTmp.ExpProportion > 0)
                    nNeedExp = nNeedExp * infoTmp.ExpProportion;
            }
            else
                nNeedExp = Data.LevelUpExperienceList[sprite.ClientData.Level];

            //如果OL版还需要加入判断杀它的人是否为玩家
            if (sprite.ClientData.Level < (Data.LevelUpExperienceList.Length - 1) && sprite.ClientData.Experience + experience >= nNeedExp)
            {
                int oldLevel = sprite.ClientData.Level;

                //等级+1
                sprite.ClientData.Level += 1;

                //尝试激活新的武学等级[武学等级依赖于角色等级]
                TryToActivateSpecialWuXueLevel(sprite);

                //处理古墓地图限时奖励, MU中改为和转生等级相关,且初始时就以达到条件,不再需要升级时判断
                //TryGiveGuMuTimeLimitAwardOnLevelUpTo30(sprite, oldLevel);

                //角色升级 处理boss副本进入次数
                SwitchBossFuBenEnterNum(sprite);

                //每次升级，尝试处理升级有礼
                HuodongCachingMgr.ProcessGetUpLevelGift(sprite);

                //刷新那些需要根据等级开启的功能  add by tanglong 14/11/27
                //GlobalNew.RefreshGongNeng(sprite);

                //多出来的经验
                experience = sprite.ClientData.Experience + experience - nNeedExp;  // 好吧 这儿错了！！ [4/21/2014 LiaoWei] //Data.LevelUpExperienceList[sprite.ClientData.Level];

                //当前经验归0
                sprite.ClientData.Experience = 0;

                //触发玩家升级事件
                GlobalEventSource.getInstance().fireEvent(new PlayerLevelupEventObject(sprite));

                //再重复检验一次，防止经验超过几级
                EarnExperience(sprite, experience);

                //若视频聊天室开启 推送玩家
                VideoLogic.GetOrSendPlayerVideoStatus(sprite, sprite.ClientData.RoleCommonUseIntPamams);
            }
            else
            {
                sprite.ClientData.Experience += experience;
                sprite.ClientData.Experience = Global.GMax(0, sprite.ClientData.Experience); //防止小于0，因为GM操作时可能加入负数
                //sprite.ClientData.Experience = Math.Min(2147483647, sprite.ClientData.Experience); //防止溢出
            }
        }

        /// <summary>
        /// 处理组队状态下的祝福经验加成
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static double ProcessTeamZhuFuExperience(GameClient client)
        {
            if (client.ClientData.TeamID < 0)
            {
                return 0.0;
            }

            TeamData td = GameManager.TeamMgr.FindData(client.ClientData.TeamID);
            if (null == td)
            {
                return 0.0;
            }

            int totalTeamMemberNum = 0;

            //锁定组队数据
            lock (td)
            {
                for (int i = 0; i < td.TeamRoles.Count; i++)
                {
                    if (td.TeamRoles[i].RoleID == client.ClientData.RoleID)
                    {
                        totalTeamMemberNum += 1;
                        continue;
                    }

                    //不在同一个地图上不参与分配
                    GameClient gc = GameManager.ClientMgr.FindClient(td.TeamRoles[i].RoleID);
                    if (null == gc)
                    {
                        continue;
                    }

                    //如果不在同一个地图上，则不处理
                    if (gc.ClientData.MapCode != client.ClientData.MapCode)
                    {
                        continue;
                    }

                    //如果不在同一个副本地图上，则不处理
                    if (gc.ClientData.CopyMapID != client.ClientData.CopyMapID)
                    {
                        continue;
                    }

                    //判断对方是否在主城的安全区中

                    totalTeamMemberNum += 1;
                }
            }

            return (totalTeamMemberNum * 0.02);
        }

        #endregion 角色经验

        #region 永久的技能的属性加载

        /// <summary>
        /// 加载技能的永久属性
        /// </summary>
        /// <param name="client"></param>
        public static void RefreshSkillForeverProps(GameClient client)
        {
            if (null == client.ClientData.SkillDataList) return;

            //重置永久属性?
            client.RoleBuffer.ResetForeverProps();

            lock (client.ClientData.SkillDataList)
            {
                for (int i = 0; i < client.ClientData.SkillDataList.Count; i++)
                {
                    int intKey = client.ClientData.SkillDataList[i].SkillID;
                    int skillLevel = client.ClientData.SkillDataList[i].SkillLevel;
                    int skillid = client.ClientData.SkillDataList[i].SkillID;

                    SystemXmlItem systemMagic = null;
                    if (GameManager.SystemMagicQuickMgr.MagicItemsDict.TryGetValue(intKey, out systemMagic))
                    {
                        if (systemMagic.GetIntValue("MagicType") == (int)EMagicType.EMT_Passive) //如果是被动技能
                        {
                            List<MagicActionItem> magicActionItemList = null;
                            if (GameManager.SystemMagicActionMgr.MagicActionsDict.TryGetValue(intKey, out magicActionItemList) && null != magicActionItemList)
                            {
                                for (int j = 0; j < magicActionItemList.Count; j++)
                                {
                                    MagicAction.ProcessAction(client, client, magicActionItemList[j].MagicActionID, magicActionItemList[j].MagicActionParams, -1, -1, 0, skillLevel, 0);
                                }
                            }
                        }
                    }
                }
            }
        }

        #endregion 永久的技能的属性加载

        #region 技能管理

        /// <summary>
        /// 技能的最大级别
        /// </summary>
        public static int MaxSkillLevel = 100;

        /// <summary>
        /// 战士自动触发的技能ID
        /// </summary>
        public static int[] ZSAutoUseSkillIDs = { 12 };

        /// <summary>
        /// 添加缺省的技能情况
        /// </summary>
        /// 
        public static bool AddDefaultSkills(TCPOutPacketPool pool, GameClient client, int skillID, int skillLevel)
        {
            int szNewSkillID = AddSkillDBCommandForCC(pool, client, skillID, skillLevel);
            if (szNewSkillID > 0)
            {
                SysConOut.WriteLine(string.Format("添加技能成功，技能ID{0}", szNewSkillID));
            }
            else SysConOut.WriteLine(string.Format("添加技能失败，技能ID{0}", szNewSkillID));
            return szNewSkillID > 0;
        }
        public static void AddDefaultSkills(GameClient client)
        {
            if (null == client.ClientData.SkillDataList)
            {
                client.ClientData.SkillDataList = new List<SkillData>();
            }

            SkillData skillData = null;
            int[] nSkillID = null;
            List<SkillData> skillDataList = client.ClientData.SkillDataList;
            int nOcc = Global.CalcOriginalOccupationID(client);

            if (nOcc == (int)EOccupationType.EOT_Warrior)
            {
                nSkillID = DefaultSkill1;
            }
            //else if (nOcc == (int)EOccupationType.EOT_Magician)
            //{
            //    nSkillID = DefaultSkill2;
            //}
            //else if (nOcc == (int)EOccupationType.EOT_Bow)
            //{
            //    nSkillID = DefaultSkill3;
            //}
            /*else if (nOcc == (int)EOccupationType.EOT_MagicSword)// 魔剑士职业默认技能 [4/15/2015 chdeng] 因魔剑士初始已给全部技能 不需要默认技能 [XSea 2015/5/20]
            {
                nSkillID = DefaultSkill4;
            }*/

            if (null != nSkillID)
            {
                for (int i = 0; i < nSkillID.Length; ++i)
                {
                    skillData = new SkillData()
                    {
                        DbID = -1,
                        SkillID = nSkillID[i],
                        SkillLevel = client.ClientData.DefaultSkillLev,
                    };

                    lock (skillDataList)
                    {
                        skillDataList.Add(skillData);
                    }
                }
            }

            //同时更新掉后段技能的等级
            lock (skillDataList)
            {
                foreach (var skilldata in skillDataList)
                {
                    Global.RefreshSecondSkillLevel(client, skilldata.SkillID);
                }
            }

            /*Dictionary<int, int> typeIDsDict = new Dictionary<int, int>();
            List<SkillData> skillDataList = client.ClientData.SkillDataList;
            SystemXmlItem systemMagic = null;
            SkillData skillData = null;

            foreach (var key in GameManager.SystemMagicsMgr.SystemXmlItemDict.Keys)
            {
                systemMagic = GameManager.SystemMagicsMgr.SystemXmlItemDict[(int)key];

                // 属性改造 加上一级属性公式 区分职业[8/15/2013 LiaoWei]
                int nOcc = Global.CalcOriginalOccupationID(client);

                if ((int)systemMagic.GetIntValue("ToOcuupation") != nOcc)
                {
                    continue;
                }

                string condition = systemMagic.GetStringValue("LearnCondition");
                if (string.IsNullOrEmpty(condition))
                {
                    LogManager.WriteLog(LogTypes.Warning, string.Format("AddDefaultSkills--LearnCondition 配置错误"));
                    continue;
                }

                int skillID = systemMagic.GetIntValue("ID");

                // 改造 Begin [11/13/2013 LiaoWei]
                
                //获取升级技能所需要的熟练度
                /*int needRoleLevel = 1;
                int needSkilledDegrees = 0;
                Global.GetUpSkillLearnCondition(skillID, skillData, out needRoleLevel, out needSkilledDegrees, systemMagic);

                int learnLevel = needRoleLevel;
                if (client.ClientData.Level < learnLevel)
                {
                    continue;
                }

                typeIDsDict[skillID] = 0;

                //if (MU_GetUpSkillLearnCondition(client, skillID, systemMagic))
                //    typeIDsDict[skillID] = 0;

                if (MU_GetDefaultSkillLearn(client, skillID, systemMagic))
                {
                    typeIDsDict[skillID] = 0;
                }


                // 改造 End [11/13/2013 LiaoWei]
            }

            foreach (var key in typeIDsDict.Keys)
            {
                int level = typeIDsDict[(int)key];
                skillData = new SkillData()
                {
                    DbID = -1,
                    SkillID = key,
                    SkillLevel = client.ClientData.Level,
                };

                lock (skillDataList)
                {
                    skillDataList.Add(skillData);
                }
            }*/
        }

        /// <summary>
        /// 添加技能
        /// </summary>
        /// <param name="client"></param>
        /// <param name="skillID"></param>
        /// <param name="skillLevel"></param>
        public static void AddSkillData(GameClient client, int skillDbID, int skillID, int skillLevel)
        {
            if (null == client.ClientData.SkillDataList)
            {
                client.ClientData.SkillDataList = new List<SkillData>();
            }

            lock (client.ClientData.SkillDataList)
            {
                client.ClientData.SkillDataList.Add(new SkillData()
                {
                    DbID = skillDbID,
                    SkillID = skillID,
                    SkillLevel = skillLevel,
                });
            }
        }

        /// <summary>
        /// 获取角色的技能
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static SkillData GetSkillDataByID(GameClient client, int skillID)
        {
            SkillData skillData = client.passiveSkillModule.GetSkillData(skillID);
            if (null != skillData)
            {
                return skillData;
            }

            if (null == client.ClientData.SkillDataList) return null;

            lock (client.ClientData.SkillDataList)
            {
                for (int i = 0; i < client.ClientData.SkillDataList.Count; i++)
                {
                    if (client.ClientData.SkillDataList[i].SkillID == skillID)
                    {
                        return client.ClientData.SkillDataList[i];
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 获取角色的技能
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static SkillData GetSkillDataByDbID(GameClient client, int skillDbID)
        {
            if (null == client.ClientData.SkillDataList) return null;

            lock (client.ClientData.SkillDataList)
            {
                for (int i = 0; i < client.ClientData.SkillDataList.Count; i++)
                {
                    if (client.ClientData.SkillDataList[i].DbID == skillDbID)
                    {
                        return client.ClientData.SkillDataList[i];
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 添加一个新的技能到数据库中
        /// </summary>
        /// <param name="client"></param>
        /// <param name="skillID"></param>
        public static int AddSkillDBCommand(TCPOutPacketPool pool, GameClient client, int skillID, int skillLevel)
        {

            //先DBServer请求扣费
            string[] dbFields = null;
            string strcmd = string.Format("{0}:{1}:{2}", client.ClientData.RoleID, skillID, skillLevel);
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, pool, (int)TCPGameServerCmds.CMD_DB_ADDSKILL, strcmd, out dbFields, client.ServerId);
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                return -1;
            }

            int skillDbID = Convert.ToInt32(dbFields[0]);

            //添加数据库失败
            if (dbFields.Length <= 0 || skillDbID < 0)
            {
                return skillDbID;
            }

            //添加技能
            Global.AddSkillData(client, skillDbID, skillID, skillLevel);

            //处理并获取打坐增加熟练度的技能数据
            Global.ProcessNumSkillID(client, false);

            //添加了新技能通知(只通知自己)
            GameManager.ClientMgr.NotifySelfAddSkill(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                skillDbID, skillID, skillLevel);

            return skillDbID;
        }
        public static int AddSkillDBCommandForCC(TCPOutPacketPool pool, GameClient client, int skillID, int skillLevel)
        {
            TCPOutPacket szTCPOutPacket = null;
            MemoryStream msResult = new MemoryStream();
            DBAddSkill szDBAddSkill = new DBAddSkill();
            szDBAddSkill.RoleID = client.ClientData.RoleID;
            szDBAddSkill.SkillID = skillID;
            szDBAddSkill.Lvl = skillLevel;
            Serializer.Serialize<DBAddSkill>(msResult, szDBAddSkill);
            byte []msSendData = msResult.ToArray();
            msResult.Dispose();
            
          
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, pool, (int)CommandID.CMD_DB_ADD_Skill, msSendData, client.ServerId, out szTCPOutPacket);
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                return -1;
            }
            msResult = new MemoryStream(szTCPOutPacket.GetPacketBytes(), 6, szTCPOutPacket.PacketDataSize - 6);
            DBAddSkillReponse szDBAddSkillReponse = Serializer.Deserialize<DBAddSkillReponse>(msResult);
            

            //添加数据库失败
            if (szDBAddSkillReponse.State != (int)ErrorCode.ERROR_OK)
            {
                return 0;
            }

            //添加技能
            Global.AddSkillData(client, (int)szDBAddSkillReponse.DBID, skillID, skillLevel);

            

            //添加了新技能通知(只通知自己)
            GameManager.ClientMgr.NotifySelfAddSkill(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                (int)szDBAddSkillReponse.DBID, skillID, skillLevel);

            return (int)szDBAddSkillReponse.DBID;
        }
        /// <summary>
        /// 处理并获取打坐增加熟练度的技能数据
        /// </summary>
        /// <param name="client"></param>
        public static void ProcessNumSkillID(GameClient client, bool force = false)
        {
            if (null == client.ClientData.SkillDataList) return;

            //如果非强迫
            if (!force)
            {
                if (null != client.ClientData.NumSkillData)
                {
                    return;
                }
            }

            client.ClientData.NumSkillData = null; //先置空

            bool anySkill = false;
            if (client.ClientData.NumSkillID <= 0)
            {
                anySkill = true;
            }

            lock (client.ClientData.SkillDataList)
            {
                for (int i = 0; i < client.ClientData.SkillDataList.Count; i++)
                {
                    int intKey = client.ClientData.SkillDataList[i].SkillID;
                    SystemXmlItem systemMagic = null;
                    if (GameManager.SystemMagicQuickMgr.MagicItemsDict.TryGetValue(intKey, out systemMagic))
                    {
                        if (systemMagic.GetIntValue("MagicType") == (int)EMagicType.EMT_Passive) //如果是被动技能
                        {
                            if (anySkill || (client.ClientData.NumSkillID == intKey))
                            {
                                client.ClientData.NumSkillData = client.ClientData.SkillDataList[i];
                                break;
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// 升级技能需要的熟练度的字典
        /// </summary>
        private static Dictionary<string, long> _SkillLearnConditionDict = new Dictionary<string, long>();

        /// <summary>
        /// 获取升级技能所需要的熟练度
        /// </summary>
        /// <param name="skillID"></param>
        /// <param name="skillXmlNode"></param>
        /// <returns></returns>
        public static bool GetUpSkillLearnCondition(int skillID, SkillData skillData, out int needRoleLevel, out int needShuLianDu, SystemXmlItem systemMagic = null)
        {
            // 注释掉该接口  [11/13/2013 LiaoWei]

            /*needRoleLevel = 1;
            needShuLianDu = 0;

            int magicLeve = (null == skillData) ? 1 : skillData.SkillLevel;//技能当前等级
            string key = string.Format("{0}_{1}", skillID, magicLeve);

            long learnCondition = 0;
            if (_SkillLearnConditionDict.TryGetValue(key, out learnCondition))
            {
                needRoleLevel = (int)((0x00000000FFFFFFFF & learnCondition >> 32));
                needShuLianDu = (int)((0x00000000FFFFFFFF & learnCondition));
                return true;
            }

            if (null == systemMagic)
            {
                //首先判断技能是群攻还是单攻
                if (!GameManager.SystemMagicsMgr.SystemXmlItemDict.TryGetValue(skillID, out systemMagic))
                {
                    return false;
                }
            }

			string condition = systemMagic.GetStringValue("LearnCondition");
			if (string.IsNullOrEmpty(condition))
			{
				return false;
			}
			
			string[] levels = condition.Split('|');
			if (magicLeve > levels.Length)
			{
				return false;
			}
			
			string[] fields = levels[magicLeve - 1].Split(',');
			if (fields.Length != 3)
			{
				return false;
			}

            needRoleLevel = Global.SafeConvertToInt32(fields[1]);
            needShuLianDu = Global.SafeConvertToInt32(fields[2]);

            learnCondition = 0;

            long value = needRoleLevel;
            learnCondition = learnCondition | (value << 32);

            value = needShuLianDu;
            learnCondition = learnCondition | (value);

            _SkillLearnConditionDict[key] = learnCondition;*/

            needRoleLevel = 0;
            needShuLianDu = 0;

            return true;
        }

        /// <summary>
        /// 添加新的接口 技能学习判断 [11/13/2013 LiaoWei]
        /// </summary>
        /// <param name="skillID"></param>
        /// <param name="skillXmlNode"></param>
        /// <returns></returns>
        public static bool MU_GetUpSkillLearnCondition(GameClient Client, int skillID, SystemXmlItem systemMagic = null)
        {
            // 取得静态数据
            if (null == systemMagic)
            {
                if (!GameManager.SystemMagicsMgr.SystemXmlItemDict.TryGetValue(skillID, out systemMagic))
                    return false;
            }

            int learnTask = systemMagic.GetIntValue("LearnTask");
            if (learnTask > 0)
            {
                if (learnTask > Client.ClientData.MainTaskID)
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }

            string condition = systemMagic.GetStringValue("LearnCondition");
            if (string.IsNullOrEmpty(condition))
                return false;

            string[] sConditionFields = condition.Split(',');
            if (sConditionFields.Length != 2)
                return false;

            int nNeedChangeCount = Global.SafeConvertToInt32(sConditionFields[0]);
            int nNeedLevel = Global.SafeConvertToInt32(sConditionFields[1]);

            int nChangeCount = Client.ClientData.ChangeLifeCount;
            int nLevel = Client.ClientData.Level;

            if (nChangeCount > nNeedChangeCount)
                return true;
            else if (nChangeCount < nNeedChangeCount)
                return false;
            else if (nChangeCount == nNeedChangeCount)
            {
                if (nLevel < nNeedLevel)
                    return false;
                else
                    return true;
            }

            return true;
        }

        /// <summary>
        // 默认给的技能 [3/15/2014 LiaoWei]
        /// </summary>
        public static bool MU_GetDefaultSkillLearn(GameClient Client, int skillID, SystemXmlItem systemMagic = null)
        {
            // 取得静态数据
            if (null == systemMagic)
            {
                if (!GameManager.SystemMagicsMgr.SystemXmlItemDict.TryGetValue(skillID, out systemMagic))
                    return false;
            }

            int nNeedChangeLifeLev = 0;
            int nNeedLev = 1;

            if (Client.ClientData.ChangeLifeCount > nNeedChangeLifeLev)
            {
                return true;
            }
            else if (Client.ClientData.ChangeLifeCount == nNeedChangeLifeLev)
            {
                if (Client.ClientData.Level > nNeedLev)
                    return true;
            }

            return false;

        }

        /// <summary>
        /// 改变技能熟练度满的通知状态
        /// </summary>
        /// <param name="client"></param>
        /// <param name="?"></param>
        public static void ChangeSkillUsedNumNotifyState(GameClient client, SkillData skillData, int oldUsedNum, int newUsedNum)
        {
            //已经到了最顶级，就不再通知
            /*if (skillData.SkillLevel >= 3)
            {
                return;
            }*/

            //获取升级技能所需要的熟练度
            int needRoleLevel = 1;
            int needShuLianDu = 0;
            if (!Global.GetUpSkillLearnCondition(skillData.SkillID, skillData, out needRoleLevel, out needShuLianDu, null))
            {
                return;
            }

            int percent1 = (oldUsedNum * 100) / needShuLianDu;
            int percent2 = (newUsedNum * 100) / needShuLianDu;
            if (percent1 == percent2)
            {
                return;
            }

            //通知技能熟练度满
            GameManager.ClientMgr.NotifySkillUsedNumFull(client, skillData);
        }

        /// <summary>
        /// 使用技能需要的消耗的魔法值的字典
        /// </summary>
        private static Dictionary<string, int> _SkillNeedMagicVDict = new Dictionary<string, int>();

        /// <summary>
        /// 获取法术攻击需要消耗的魔法值
        /// </summary>
        /// <param name="client"></param>
        /// <param name="skillID"></param>
        /// <param name="skillLevel"></param>
        /// <returns></returns>
        public static int GetNeedMagicV(IObject attacker, int skillID, int skillLevel)
        {
            string key = string.Format("{0}_{1}", skillID, skillLevel);
            int needMagicV = 0;
            if (_SkillNeedMagicVDict.TryGetValue(key, out needMagicV))
            {
                return needMagicV;
            }

            SystemXmlItem systemMagic = null;
            if (!GameManager.SystemMagicsMgr.SystemXmlItemDict.TryGetValue(skillID, out systemMagic))
            {
                return needMagicV;
            }

            /*string baseMagic = systemMagic.GetStringValue("BaseMagic");
            if (string.IsNullOrEmpty(baseMagic))
            {
                _SkillNeedMagicVDict[key] = 0;
                return 0;
            }

            string[] levels = baseMagic.Split('|');
            if (skillLevel > levels.Length)
            {
                _SkillNeedMagicVDict[key] = 0;
                return 0;
            }

            string[] fields = levels[skillLevel - 1].Split(',');
            if (fields.Length != 2)
            {
                _SkillNeedMagicVDict[key] = 0;
                return 0;
            }

            needMagicV = Global.SafeConvertToInt32(fields[1]);
            needMagicV = Global.GMax(0, needMagicV);
            _SkillNeedMagicVDict[key] = needMagicV;*/

            needMagicV = systemMagic.GetIntValue("BaseMagic");

            return needMagicV;
        }

        /// <summary>
        /// 学习技能
        /// </summary>
        /// <param name="client"></param>
        /// <param name="skillID"></param>
        public static bool LearnSkill(GameClient client, int skillID)
        {
            // 改造 begin [11/13/2013 LiaoWei]

            //获取升级技能所需要的熟练度
            /*int needRoleLevel = 1;
            int needSkilledDegrees = 0;
            if (!Global.GetUpSkillLearnCondition(skillID, null, out needRoleLevel, out needSkilledDegrees, null))
            {
                return false;
            }

            if (client.ClientData.Level < needRoleLevel)
            {
                return false;
            }*/

            if (!MU_GetUpSkillLearnCondition(client, skillID, null))
                return false;

            // 改造 end [11/13/2013 LiaoWei]

            //添加一个新的技能到数据库中
            Global.AddSkillDBCommand(Global._TCPManager.TcpOutPacketPool, client, skillID, 1);
            return true;
        }

        /// <summary>
        /// 角色升级时，判断是否自动学习技能
        /// </summary>
        /// <param name="client"></param>
        public static void AutoLearnSkills(GameClient client)
        {
            if (null == client.ClientData.SkillDataList)
            {
                client.ClientData.SkillDataList = new List<SkillData>();
            }

            Dictionary<int, int> typeIDsDict = new Dictionary<int, int>();
            List<SkillData> skillDataList = client.ClientData.SkillDataList;
            SystemXmlItem systemMagic = null;

            int nOcc = Global.CalcOriginalOccupationID(client);

            foreach (var key in GameManager.SystemMagicsMgr.SystemXmlItemDict.Keys)
            {
                systemMagic = GameManager.SystemMagicsMgr.SystemXmlItemDict[(int)key];

                // 属性改造 加上一级属性公式 区分职业[8/15/2013 LiaoWei]

                if ((int)systemMagic.GetIntValue("ToOcuupation") != nOcc)
                {
                    continue;
                }

                int autoStart = systemMagic.GetIntValue("AutoStart");
                if (1 != autoStart) //不自动学习
                {
                    continue;
                }

                string condition = systemMagic.GetStringValue("LearnCondition");
                if (string.IsNullOrEmpty(condition))
                {
                    continue;
                }

                int skillID = systemMagic.GetIntValue("ID");
                if (null != Global.GetSkillDataByID(client, skillID))
                {
                    continue;
                }

                // 改造 begin [11/13/2013 LiaoWei]
                /*
                //获取升级技能所需要的熟练度
                int needRoleLevel = 1;
                int needSkilledDegrees = 0;
                Global.GetUpSkillLearnCondition(skillID, null, out needRoleLevel, out needSkilledDegrees, systemMagic);

                int learnLevel = needRoleLevel;
                if (client.ClientData.Level < learnLevel)
                {
                    continue;
                }

                typeIDsDict[skillID] = 0;*/

                if (MU_GetUpSkillLearnCondition(client, skillID, systemMagic))
                    typeIDsDict[skillID] = 0;

                // 改造 end [11/13/2013 LiaoWei]
            }

            foreach (var key in typeIDsDict.Keys)
            {
                Global.LearnSkill(client, key);
            }
        }

        /// <summary>
        /// 判断技能是否能够自动升级
        /// </summary>
        /// <param name="client"></param>
        public static bool AutoUpLevelSkill(GameClient client, SkillData skillData)
        {
            if (skillData.SkillLevel >= 3)
            {
                return false;
            }

            // 改造 begin [11/13/2013 LiaoWei]

            //获取升级技能所需要的熟练度
            int needRoleLevel = 1;
            int needSkilledDegrees = 0;
            Global.GetUpSkillLearnCondition(skillData.SkillID, skillData, out needRoleLevel, out needSkilledDegrees, null);

            int learnLevel = needRoleLevel;
            if (client.ClientData.Level < learnLevel || skillData.UsedNum < needSkilledDegrees)
            {
                return false;
            }

            if (MU_GetUpSkillLearnCondition(client, skillData.SkillID, null))
                return false;

            // 改造 end [11/13/2013 LiaoWei]

            skillData.UsedNum = 0;
            skillData.SkillLevel += 1;

            //更新技能信息
            GameManager.ClientMgr.UpdateSkillInfo(client, skillData, true);

            // 注释掉 熟练度取消了 [11/13/2013 LiaoWei]
            //通知技能熟练度满
            //GameManager.ClientMgr.NotifySkillUsedNumFull(client, skillData);

            return true;
        }

        /// <summary>
        /// 判断技能是否能够自动升级
        /// </summary>
        /// <param name="client"></param>
        public static void AutoUpLevelSkills(GameClient client)
        {
            if (null == client.ClientData.SkillDataList)
            {
                return;
            }

            lock (client.ClientData.SkillDataList)
            {
                for (int i = 0; i < client.ClientData.SkillDataList.Count; i++)
                {
                    AutoUpLevelSkill(client, client.ClientData.SkillDataList[i]);
                }
            }
        }

        /// <summary>
        /// 获取技能名称
        /// </summary>
        /// <param name="skillID"></param>
        /// <returns></returns>
        public static string GetSkillNameByID(int skillID)
        {
            SystemXmlItem systemMagic = null;
            if (!GameManager.SystemMagicsMgr.SystemXmlItemDict.TryGetValue(skillID, out systemMagic))
            {
                return "";
            }

            return systemMagic.GetStringValue("Name");
        }

        /// <summary>
        /// 获取下一段技能id [XSea 2015/6/13]
        /// </summary>
        /// <param name="nSkillID">技能id</param>
        /// <returns>大于0为下一段技能id，小于0为无下一段技能</returns>
        public static int GetNextSkillID(int nSkillID)
        {
            SystemXmlItem systemMagic = null;
            if (!GameManager.SystemMagicsMgr.SystemXmlItemDict.TryGetValue(nSkillID, out systemMagic))
                return -1;

            return systemMagic.GetIntValue("NextMagicID");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="nSkillID"></param>
        /// <returns></returns>
        public static int GetPrevSkilID(int nSkillID)
        {
            SystemXmlItem systemMagic = null;
            if (!GameManager.SystemMagicsMgr.SystemXmlItemDict.TryGetValue(nSkillID, out systemMagic))
                return -1;

            return systemMagic.GetIntValue("ParentMagicID");
        }

        #endregion 技能管理

        #region 调试辅助

        /// <summary>
        /// 获取GameClient的IP
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static string GetSocketRemoteIP(GameClient client, bool bForce = false)
        {
            long canRecordIp = GameManager.systemParamsList.GetParamValueIntByName("RecordIP", 1);
            if (0 == canRecordIp && false == bForce)
            {
                return "";
            }

            string ipAndPort = GetSocketRemoteEndPoint(client.ClientSocket);
            int idx = ipAndPort.IndexOf(':');
            if (idx > 0)
            {
                return ipAndPort.Substring(0, idx);
            }
            else
            {
                return ipAndPort;
            }

            return "";
        }


        /// <summary>
        /// 拼接HeartBeatMsg
        /// </summary>
        public static void SendGameServerHeart(TCPClient tcpClient)
        {
            if (null == tcpClient)
                return;

            string cmd = string.Format("{0}:{1}:{2}", GameManager.ServerLineID, GameManager.ClientMgr.GetClientCount(), Global.SendServerHeartCount);
            Global.SendServerHeartCount++; //为了标识是否是第一次

            //获取
            TCPOutPacket tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(TCPOutPacketPool.getInstance(), cmd, (int)TCPGameServerCmds.CMD_DB_ONLINE_SERVERHEART);

            //发送心跳信息
            if (null != tcpOutPacket)
            {
                byte[] bytesData = Global.SendAndRecvData(tcpClient, tcpOutPacket);
            }
        }

        /// <summary>
        /// 获取TMSKSocket的远端IP地址
        /// 韩国要求不能获取玩家IP，但是判断是否为GM需要判断玩家IP，所以在判断玩家账号之后，可以强制获取玩家IP
        /// </summary>
        /// <param name="s"></param>
        /// <param name="bForce"></param>
        /// <returns></returns>
        public static string GetSocketRemoteEndPoint(TMSKSocket s, bool bForce = false)
        {
            try
            {
                long canRecordIp = GameManager.systemParamsList.GetParamValueIntByName("RecordIP", 1);
                if (0 == canRecordIp && false == bForce)
                {
                    return "";
                }

                if (null == s)
                {
                    return "";
                }

                return string.Format("{0} ", s.RemoteEndPoint);
            }
            catch (Exception)
            {
            }

            return "";
        }

        /// <summary>
        /// 获取TMSKSocket的远端IP地址(不带端口)
        /// </summary>
        public static string GetIPAddress(TMSKSocket s)
        {
            try
            {
                if (null == s) return "";
                return ((IPEndPoint)s.RemoteEndPoint).Address.ToString();
            }
            catch (Exception)
            {
            }

            return "";
        }

        public static string GetDebugHelperInfo(TMSKSocket socket)
        {
            if (null == socket)
            {
                return "socket为null, 无法打印错误信息";
            }

            string ret = "";
            try
            {
                ret += string.Format("IP={0} ", GetSocketRemoteEndPoint(socket));
            }
            catch (Exception)
            {
            }

            try
            {
                GameClient client = GameManager.ClientMgr.FindClient(socket);
                if (null != client)
                {
                    ret += string.Format("RoleID={0}({1})", client.ClientData.RoleID, client.ClientData.RoleName);
                }
            }
            catch (Exception)
            {
            }

            return ret;
        }

        #endregion 调试辅助

        #region 装备传承

        /// <summary>
        /// 通过 左边装备【原装备】返回传承需要银两, 小于等于0 非法
        /// </summary>
        /// <param name="leftGoods"></param>
        /// <returns></returns>
        public static int GetChuanChenNeedYinLiang(GoodsData leftGoods)
        {
            if (leftGoods.Forge_level <= 0)
            {
                return 0;
            }

            int[] chuanChengYinLiangArr = GameManager.systemParamsList.GetParamValueIntArrayByName("ChuanchengXiaohaoMoney");

            if (null == chuanChengYinLiangArr || leftGoods.Forge_level > chuanChengYinLiangArr.Length)
            {
                return 0;
            }

            return chuanChengYinLiangArr[leftGoods.Forge_level - 1];
        }

        /// <summary>
        /// 通过 左边装备【原装备】计算传承成功与否并返回,ChuanchengDiaojilv配置的是传承掉级几率，所以需要用100减
        /// 同时，考虑到系统内部几率都采用10000做最大值，因此返回的值扩大100倍
        /// </summary>
        /// <param name="leftGoods"></param>
        /// <returns></returns>
        public static Boolean IsChuanChenSuccess(GoodsData leftGoods)
        {
            if (leftGoods.Forge_level <= 0)
            {
                return false;
            }

            int[] chuanChengDiaoJiArr = GameManager.systemParamsList.GetParamValueIntArrayByName("ChuanChengGoodsRate");

            if (null == chuanChengDiaoJiArr || leftGoods.Forge_level > chuanChengDiaoJiArr.Length)
            {
                return false;
            }

            /*int rate = 100 - chuanChengDiaoJiArr[leftGoods.Forge_level - 1];

            if (rate <= 0)
            {
                return false;
            }

            if (rate >= 100)
            {
                return true;
            }*/

            int rate = chuanChengDiaoJiArr[leftGoods.Forge_level];

            //生成的数小于 rate *100 成功
            if (Global.GetRandomNumber(0, 101) <= rate)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 通过 左边装备【原装备】计算传承成功与否并返回,ChuanchengDiaojilv配置的是传承掉级几率，所以需要用100减
        /// 同时，考虑到系统内部几率都采用10000做最大值，因此返回的值扩大100倍
        /// </summary>
        /// <param name="leftGoods"></param>
        /// <returns></returns>
        public static Boolean IsAppendPropChuanChenSuccess(GoodsData leftGoods)
        {
            if (leftGoods.AppendPropLev <= 0)
            {
                return false;
            }

            int[] chuanChengDiaoJiArr = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhuiJiaGoodsRate");

            if (null == chuanChengDiaoJiArr || leftGoods.AppendPropLev > chuanChengDiaoJiArr.Length)
            {
                return false;
            }

            /*int rate = 100 - chuanChengDiaoJiArr[leftGoods.Forge_level - 1];

            if (rate <= 0)
            {
                return false;
            }

            if (rate >= 100)
            {
                return true;
            }*/

            int rate = chuanChengDiaoJiArr[leftGoods.AppendPropLev];

            //生成的数小于 rate *100 成功
            if (Global.GetRandomNumber(0, 101) <= rate)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 判断某级别的神佑符是否可以用于某物品的传承
        /// </summary>
        /// <param name="shenYouGoodsID"></param>
        /// <param name="leftGoods"></param>
        /// <returns></returns>
        public static bool IsShengYouFuCanBeenUsedForChuanCheng(int shenYouGoodsID, GoodsData leftGoods)
        {
            if (leftGoods.Forge_level <= 0)
            {
                return false;
            }

            // 配置参数列表个数必须一致，一一对应
            int[] chuanChengForgeLevelArr = GameManager.systemParamsList.GetParamValueIntArrayByName("ShengyoufuQianghuaDengji");
            int[] chuanChengShenYouGoodsArr = GameManager.systemParamsList.GetParamValueIntArrayByName("ShenyoufuGoodsIDs");

            if (null == chuanChengForgeLevelArr || null == chuanChengShenYouGoodsArr || chuanChengShenYouGoodsArr.Length != chuanChengForgeLevelArr.Length)
            {
                return false;
            }

            //找到神佑符物品对应索引
            int goodsIndex = -1;
            for (int n = 0; n < chuanChengShenYouGoodsArr.Length; n++)
            {
                if (shenYouGoodsID == chuanChengShenYouGoodsArr[n])
                {
                    goodsIndex = n;//找到就退出循环
                    break;
                }
            }

            if (goodsIndex < 0)
            {
                return false;
            }

            //找到物品对应的必须的强化等级索引
            int forgeLevelIndex = -1;
            for (int n = 0; n < chuanChengForgeLevelArr.Length; n++)
            {
                if (leftGoods.Forge_level <= chuanChengForgeLevelArr[n])
                {
                    forgeLevelIndex = n;//不断的更新,最后一次更新的就是目标索引
                    break;
                }
            }

            if (forgeLevelIndex < 0)
            {
                return false;
            }

            //通过索引比较判断物品的合法性,物品索引小于 强化等级索引，说明神佑符等级太低，不能用
            if (goodsIndex < forgeLevelIndex)
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// 获取装备传承所需配置参数，物品ID,数量,需要消耗的银两 ==>暂时不用
        /// </summary>
        /// <returns></returns>
        public static bool GetEquipInheritParams(out int equipInheritNeedGoodsID, out int needNum, out int needYL)
        {
            equipInheritNeedGoodsID = 0;
            needNum = 0;
            needYL = 0;

            //提取 需要的物品id， 数量， 英两 460916|1|200
            string theParams = GameManager.systemParamsList.GetParamValueByName("EquipInherit");

            string[] arr = theParams.Split('|');
            if (3 != arr.Length)
            {
                return false;
            }

            equipInheritNeedGoodsID = Global.SafeConvertToInt32(arr[0]);

            //配置出错
            if (equipInheritNeedGoodsID < 0)
            {
                return false;
            }

            needNum = Global.SafeConvertToInt32(arr[1]);

            //配置出错
            if (needNum <= 0)
            {
                return false;
            }

            needYL = Global.SafeConvertToInt32(arr[2]);

            //配置出错
            if (needYL < 0)
            {
                return false;
            }

            return true;
        }
        #endregion

        #region 装备天生洗练
        /// <summary>
        /// 装备天生最大值
        /// </summary>
        public const int MaxEquipBornIndex = 100;

        /// <summary>
        /// 获取装备天生洗练所需配置参数，物品ID,数量,需要消耗的银两
        /// </summary>
        /// <returns></returns>
        public static bool GetEquipBornUpdateParams(int oldBornValue, out int bornUpdateNeedGoodsID, out int needNum, out int needYL, out SystemXmlItem destXmlItem)
        {
            bornUpdateNeedGoodsID = 0;
            needNum = 0;
            needYL = 0;

            //目标配置item
            destXmlItem = null;

            //根据旧天生属性查询目标配置
            foreach (var item in GameManager.systemEquipBornMgr.SystemXmlItemDict.Values)
            {
                //配置文件中MinProportion 必须配置成浮点小数
                if (oldBornValue >= (int)(100 * item.GetDoubleValue("MinBorn"))
                    && oldBornValue <= (int)(100 * item.GetDoubleValue("MaxBorn")))
                {
                    destXmlItem = item;
                    break;
                }
            }

            if (null == destXmlItem)
            {
                return false;
            }

            //提取 需要的物品id， 数量， 英两
            string goodsStr = destXmlItem.GetStringValue("Goods");

            string[] arr = goodsStr.Split(',');
            if (2 != arr.Length)
            {
                return false;
            }

            bornUpdateNeedGoodsID = Global.SafeConvertToInt32(arr[0]);
            needNum = Global.SafeConvertToInt32(arr[1]);

            //配置出错
            if (needNum <= 0)
            {
                return false;
            }

            needYL = destXmlItem.GetIntValue("YinLiang");

            //配置出错
            if (needYL < 0)
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// 返回天生属性的名称
        /// </summary>
        /// <param name="bornIndex"></param>
        /// <returns></returns>
        public static string GetBornIndexName(int bornIndex)
        {
            string sName = "";

            int minProportion = 0, maxProportion = 0;
            foreach (var item in GameManager.systemBornNameMgr.SystemXmlItemDict.Values)
            {
                minProportion = (int)(100 * item.GetDoubleValue("MinProportion"));
                maxProportion = (int)(100 * item.GetDoubleValue("MaxProportion"));

                if (bornIndex >= minProportion && bornIndex <= maxProportion)
                {
                    sName = item.GetStringValue("Name");
                    break;
                }
            }

            return sName;
        }

        /// <summary>
        /// 刷新装备天生属性
        /// </summary>
        /// <param name="oldBornValue"></param>
        /// <param name="?"></param>
        /// <returns></returns>
        public static bool GenerateNewEquipBornValue(int oldBornValue, SystemXmlItem destXmlItem, out int newBornValue)
        {
            newBornValue = oldBornValue;
            //  <Item ID="6" MinBorn="0.95" MaxBorn="1" MaxLowerProportion="0.1" LowerProbability="0.97" MaxImproveProportion="0.02" ImproveProbability="0.03" Goods="610000,1" YinLiang="100" />

            //随机数种子，用随机概率乘以它加1得到一个最大范围
            int randomSeed = 10000;

            int minBorn = (int)(100 * destXmlItem.GetDoubleValue("MinBorn"));
            int maxBorn = (int)(100 * destXmlItem.GetDoubleValue("MaxBorn"));
            int maxLowerProportion = (int)(100 * destXmlItem.GetDoubleValue("MaxLowerProportion"));
            double lowerProbability = destXmlItem.GetDoubleValue("LowerProbability");
            int maxImproveProportion = (int)(100 * destXmlItem.GetDoubleValue("MaxImproveProportion"));
            double improveProbability = destXmlItem.GetDoubleValue("ImproveProbability");

            //随机最大范围
            int maxRange = (int)((lowerProbability + improveProbability) * randomSeed) + 1;

            //生成随机值
            int random = Global.GlobalRand.Next(1, maxRange);

            //判断随机值是否落在天生属性减少的概率内
            if (random <= (int)(lowerProbability * randomSeed))
            {
                //天生属性减少
                int minusValue = Global.GlobalRand.Next(1, maxLowerProportion + 1);
                newBornValue = oldBornValue - minusValue;
            }
            else
            {
                //天生属性增加
                int addValue = Global.GlobalRand.Next(1, maxImproveProportion + 1);
                newBornValue = oldBornValue + addValue;
            }

            //天生属性的范围在0 到 最大值[100]之间
            if (newBornValue < 0)
            {
                newBornValue = 0;
            }

            if (newBornValue > Global.MaxEquipBornIndex)
            {
                newBornValue = Global.MaxEquipBornIndex;
            }

            return true;
        }

        /// <summary>
        /// 刷新物品的新的天生属性,返回成功洗炼的类型，大于等于0成功
        /// 负数失败
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static int UpdateNewEquipBornValueByGoodsID(int goodsID, int minBornValue, int maxBornValue, out int newBornIndex)
        {
            newBornIndex = 0;

            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods) || null == systemGoods)
            {
                LogManager.WriteLog(LogTypes.Warning, string.Format("洗炼物品时，获取物品xml信息失败: GoodsID={0}", goodsID));
                return -1900;
            }

            //EquipProps 从0开始，第6到第11 表示攻击 总共26项
            int[] equipProps = systemGoods.GetIntArrayValue("EquipProps");

            if (equipProps.Length < (int)ExtPropIndexes.Max)
            {
                return -1901;
            }

            int bornType = 0;
            int bornValue = 0;

            //生成随机值
            if (equipProps[(int)ExtPropIndexes.MaxAttack] > 0)
            {
                int randAttack = Global.GetRandomNumber(minBornValue, maxBornValue + 1);//物理攻击
                bornValue = Global.SetBornAttackValue(bornValue, randAttack, 0);
                bornType = 0;
            }

            if (equipProps[(int)ExtPropIndexes.MaxMAttack] > 0)
            {
                int randAttack = Global.GetRandomNumber(minBornValue, maxBornValue + 1);//魔法攻击
                bornValue = Global.SetBornAttackValue(bornValue, randAttack, 1);
                bornType = 1;
            }

            // 属性改造 去掉 道术属性[8/15/2013 LiaoWei]
            /*if (equipProps[(int)ExtPropIndexes.MaxDSAttack] > 0)
            {
                int randAttack = Global.GetRandomNumber(minBornValue, maxBornValue + 1);//道术攻击
                bornValue = Global.SetBornAttackValue(bornValue, randAttack, 2);
                bornType = 2;
            }*/

            newBornIndex = bornValue;

            return bornType;
        }

        /// <summary>
        /// 刷新物品的新的天生属性,返回成功洗炼的类型，大于等于0成功
        /// 负数失败
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static int UpdateNewEquipBornValue(GoodsData goodsData, int minBornValue, int maxBornValue)
        {
            int newBornIndex = 0;
            int bornType = Global.UpdateNewEquipBornValueByGoodsID(goodsData.GoodsID, minBornValue, maxBornValue, out newBornIndex);
            if (bornType < 0)
            {
                return bornType;
            }

            goodsData.BornIndex = newBornIndex;
            return bornType;
        }

        /// <summary>
        /// 返回天生参数索引值
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static int GetTianShengParamsIndex(int goodsID)
        {
            SystemXmlItem xmlItem = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out xmlItem))
            {
                return -1;
            }

            //配置了才能洗天生，否则不能洗
            String addYinYongString = xmlItem.GetStringValue("ExecMagic");

            //未配置相关参数
            if (addYinYongString.ToUpper().IndexOf("DB_ADD_YINYONG(") < 0)
            {
                return -1;
            }

            //必须大于等于2个参数
            int index1 = addYinYongString.IndexOf(",");
            int index2 = addYinYongString.IndexOf(")");

            //判断索引是否合法
            if (index2 <= index1 + 1)
            {
                return -1;
            }

            int bornIndexValue = Global.SafeConvertToInt32(addYinYongString.Substring(index1 + 1, index2 - index1 - 1));

            return bornIndexValue;
        }

        /// <summary>
        /// 装备掉落的时候，获取天生属性
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static int GetBornIndexOnFallGoods(int goodsID)
        {
            SystemXmlItem destXmlItem = null;

            //返回洗练所需的参数
            if (!GameManager.systemEquipBornMgr.SystemXmlItemDict.TryGetValue(Global.GetTianShengParamsIndex(goodsID), out destXmlItem))
            {
                return 0;
            }

            //天生激活值范围
            int minBornValue = destXmlItem.GetIntValue("MinBorn");
            int maxBornValue = destXmlItem.GetIntValue("MaxBorn");

            int goodsThisTimeUpdateBornIndex = 0;
            if (Global.UpdateNewEquipBornValueByGoodsID(goodsID, minBornValue, maxBornValue, out goodsThisTimeUpdateBornIndex) < 0)
            {
                return 0;
            }

            return goodsThisTimeUpdateBornIndex;
        }

        #endregion 装备天生洗练

        #region 新的天生配置(传奇版本)

        /// <summary>
        /// 根据天生属性字段，获取攻击力的值 attackType 物理攻击0， 魔法攻击1， 道术攻击2
        /// </summary>
        /// <param name="bornIndex"></param>
        /// <param name="attackType"></param>
        public static int GetBornAttackValue(int bornIndex, int attackType)
        {
            bornIndex = (bornIndex >> (attackType * 8));
            return (bornIndex & 0x000000FF);
        }

        /// <summary>
        /// 根据天生属性字段，设置攻击力的值（洗出来的）attackType 物理攻击0， 魔法攻击1， 道术攻击2
        /// </summary>
        /// <param name="bornIndex"></param>
        /// <param name="attackType"></param>
        public static int SetBornAttackValue(int bornIndex, int attackValue, int attackType)
        {
            attackType = attackValue << (attackType * 8);
            bornIndex |= attackType;
            return bornIndex;
        }

        #endregion 新的天生配置(传奇版本)

        #region 精炼(锻造)，提品，精锻

        /// <summary>
        /// 最大强化等级开关(配置0，则为不开启;配置1,则为永久开放;配置2,2015-09-07 00:00:00, 2015-09-15 23:59:59，则为该时间段开启)
        /// </summary>
        public static int ForgeMaxOpen = 0;

        /// <summary>
        /// 最大强化等级开始开放时间
        /// </summary>
        public static DateTime ForgeMaxOpenStartTime;

        /// <summary>
        /// 最大强化等级开放结束时间
        /// </summary>
        public static DateTime ForgeMaxOpenEndTime;

        /// <summary>
        /// 特殊的强化等级保护规则,仅限15升16
        /// </summary>
        public static int ForgeProtectOpen = 0;

        /// <summary>
        /// 特殊的强化等级保护规则,仅限15升16
        /// </summary>
        public static int ForgeProtectOpenLevel = 15;

        /// <summary>
        /// 当前开放的强化等级
        /// </summary>
        public const int ForgeLevelOpen = 15;

        /// <summary>
        /// 锻造的最大级别
        /// </summary>
        public const int MaxForgeLevel = 20;        // 改成15级 [12/16/2013 LiaoWei]       //[bing] 2015,8,6 瑞祥要改成20级

        /// <summary>
        /// 精锻的最大级别
        /// </summary>
        public const int MaxSubForgeLevel = 10;

        /// <summary>
        /// 精锻的最大级别[装备精锻]
        /// </summary>
        public const int MaxAddPropIndex = 10;

        /// <summary>
        /// 总的装备的最大级别
        /// </summary>
        public const int MaxEquipLevel = 20;        //[bing] 2015,8,6 瑞祥要改成20级

        /// <summary>
        /// 锻造的的成功概率
        /// </summary>
        public static int[] ForgeLevelRocksPercent = null;


        // 追加级别 [12/18/2013 LiaoWei]
        /// <summary>
        /// 锻造的的成功概率
        /// </summary>
        public static int[] AppendPropLevelRocksPercent = null;

        /// <summary>
        /// 追加最大级别
        /// </summary>
        public const int MaxAppendPropLevel = 80;

        /// <summary>
        /// 装备转生最高等级
        /// </summary>
        public static int EquipChangeLifeMaxLevel = 10;

        /// <summary>
        /// 获取强化允许使用的最大幸运符个数
        /// </summary>
        /// <param name="client"></param>
        /// <param name="luckyNum"></param>
        /// <returns></returns>
        /*public static int GetAllowForgeLuckyNum(GameClient client, GoodsData goodsData, int luckyNum)
        {
            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
            {
                return luckyNum;
            }

            if (null == systemGoods) return luckyNum;

            if (goodsData.Forge_level >= MaxForgeLevel)
            {
                return luckyNum;
            }

            int luckyPercent = GetForgeLuckyPercent(client, luckyNum);

            if (null == ForgeLevelRocksPercent)
            {
                ForgeLevelRocksPercent = GameManager.systemParamsList.GetParamValueIntArrayByName("ForgeLevelRocksPercent");
            }

            int percent = Math.Abs(ForgeLevelRocksPercent[goodsData.Forge_level + 1]);

            //判断是否是VIP，是则加成5%
            if (Global.CanUseVipPriority(client))
            {
                percent += 5;
            }

            if (percent >= 100) //不需要使用幸运符了
            {
                return 0;
            }

            int singleLuckyGoodsRate = (int)GameManager.systemParamsList.GetParamValueIntByName("ForgeLuckyGoodsRate");
            singleLuckyGoodsRate = Global.GMax(singleLuckyGoodsRate, 1);
            int allowLuckyNum = ((100 - percent) - 1) / singleLuckyGoodsRate + 1;
            return Global.GMin(luckyNum, allowLuckyNum);
        }
        */

        /// <summary>
        /// 获取锻造使用幸运符增加的概率----不再使用，幸运符规则改变_
        /// </summary>
        /// <param name="luckyNum"></param>
        /// <returns></returns>
        /*private static int GetForgeLuckyPercent(GameClient client, int luckyNum)
        {
            int forgeLuckyGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("ForgeLuckyGoodsID");
            if (forgeLuckyGoodsID < 0) return 0;

            //int totalNum = Global.GetTotalGoodsCountByID(client, forgeLuckyGoodsID);
            //luckyNum = Global.GMin(totalNum, luckyNum);
            if (luckyNum <= 0) return 0;

            int singleLuckyGoodsRate = (int)GameManager.systemParamsList.GetParamValueIntByName("ForgeLuckyGoodsRate");
            return (luckyNum * singleLuckyGoodsRate);
        }
        */

        /// <summary>
        /// 强化最大等级配置
        /// </summary>
        public static void LoadForgeSystemParams()
        {
            bool error = false;
            ForgeProtectOpen = (int)GameManager.systemParamsList.GetParamValueIntByName("ForgeProtectOpen");
            string forgeMaxOpenStr = GameManager.systemParamsList.GetParamValueByName("ForgeMaxOpen");
            if (string.IsNullOrEmpty(forgeMaxOpenStr))
            {
                error = true;
            }
            else
            {
                string[] forgeMaxOpenParams = forgeMaxOpenStr.Split(',');
                ForgeMaxOpen = Global.SafeConvertToInt32(forgeMaxOpenParams[0]);
                DateTime startTime, endTime;
                if (ForgeMaxOpen == 2)
                {
                    if (forgeMaxOpenParams.Length == 3 && DateTime.TryParse(forgeMaxOpenParams[1], out startTime) && DateTime.TryParse(forgeMaxOpenParams[2], out endTime) && endTime > startTime)
                    {
                        ForgeMaxOpenStartTime = startTime;
                        ForgeMaxOpenEndTime = endTime;
                    }
                    else
                    {
                        error = true;
                    }
                }
            }

            if (error)
            {
                ForgeMaxOpen = 0;
            }
        }

        /// <summary>
        /// 获取锻造成功的概率 返回百分比整数
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static int GetForgePercent(GameClient client, GoodsData goodsData, int luckyValue)
        {
            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
            {
                return 0;
            }

            if (null == systemGoods) return 0;

            if (goodsData.Forge_level >= MaxForgeLevel)
            {
                return 0;
            }

            if (null == ForgeLevelRocksPercent)
            {
                ForgeLevelRocksPercent = GameManager.systemParamsList.GetParamValueIntArrayByName("ForgeGoodsRate"); // 强化改造 原来“ForgeLevelRocksPercent” [12/17/2013 LiaoWei]
            }

            //强化基础成功率
            int percent = Math.Abs(ForgeLevelRocksPercent[goodsData.Forge_level + 1]);

            /*//判断是否VIP, 是则加成5%
            if (Global.CanUseVipPriority(client))
            {
                percent += 5;
            }*/

            // VIP处理 Begin[2/20/2014 LiaoWei]
            int nVipLev = client.ClientData.VipLevel;

            int[] nArry = null;
            nArry = GameManager.systemParamsList.GetParamValueIntArrayByName("VIPQiangHuaAdd");

            if (nVipLev > 0 && nArry != null && nArry[nVipLev] > 0)
            {
                percent += nArry[nVipLev];
            }
            // VIP处理 End[2/20/2014 LiaoWei]

            //幸运符加成比率
            percent += luckyValue;

            return Global.GMin(100, percent);
        }

        /// <summary>
        /// 锻造的的失败后降级的概率
        /// </summary>
        public static int[] ForgeLevelFailedPercent = null;

        /// <summary>
        /// 获取锻造失败后降级的概率
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static int GetForgeFailedPercent(GoodsData goodsData)
        {
            if (null == ForgeLevelFailedPercent)
            {
                ForgeLevelFailedPercent = GameManager.systemParamsList.GetParamValueIntArrayByName("ForgeLevelFailedPercent");
            }
            return Math.Abs(ForgeLevelFailedPercent[goodsData.Forge_level + 1]);
        }

        /// <summary>
        /// 判断是否降级
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static bool IsForgeFailed(GoodsData goodsData)
        {
            int percent = GetForgeFailedPercent(goodsData);
            int rndNum = Global.GetRandomNumber(0, 101);
            if (rndNum <= percent)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 开始锻造
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static bool StartForge(GameClient client, GoodsData goodsData, int luckyValue)
        {
            int percent = GetForgePercent(client, goodsData, luckyValue) * 100;
            int rndNum = Global.GetRandomNumber(0, 10001);
            if (rndNum <= percent)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 锻造的的需要的银两
        /// </summary>
        public static int[] ForgeLevelNeedYinLiang = null;

        /// <summary>
        /// 获取将装备锻造到下一个级别所需要的银两
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static int GetForgeNextLevelYinLiang(GoodsData goodsData)
        {
            if (null == ForgeLevelNeedYinLiang)
            {
                ForgeLevelNeedYinLiang = GameManager.systemParamsList.GetParamValueIntArrayByName("ForgeLevelNeedYinLiang");
            }
            return Math.Abs(ForgeLevelNeedYinLiang[goodsData.Forge_level + 1]);
        }

        /// <summary>
        /// 获取将装备锻造到下一个级别所需要的强化石的数量
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static int GetForgeNextLevelRock(GoodsData goodsData)
        {
            return 1;
        }

        /// <summary>
        /// 获取神佑符的物品ID
        /// </summary>
        /// <returns></returns>
        public static int GetShenYouGoodsID()
        {
            return (int)GameManager.systemParamsList.GetParamValueIntByName("ShenyouGoodsID");
        }

        /// <summary>
        /// 锻造需要的千锻石ID列表
        /// </summary>
        public static int[] ForgeGoodsIDs = null;

        /// <summary>
        /// 获取神佑符的物品ID
        /// </summary>
        /// <returns></returns>
        public static int GetForgeRockGoodsID(GoodsData goodsData)
        {
            if (null == ForgeGoodsIDs)
            {
                ForgeGoodsIDs = GameManager.systemParamsList.GetParamValueIntArrayByName("ForgeGoodsIDs");
            }

            return Math.Abs(ForgeGoodsIDs[goodsData.Forge_level + 1]);
        }

        /// <summary>
        /// 获取将装备锻造到下一个级别所需要的神佑符的数量
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static int GetForgeNextLevelShenYou(GoodsData goodsData)
        {
            return 1;
        }

        /// <summary>
        /// 获取装备增幅所需配置参数，一次为 物品ID， 数量，和需要消耗的银两
        /// </summary>
        /// <returns></returns>
        public static bool GetSubForgeNextLevelParams(GoodsData goodsData, out int subForgeGoodsID, out int needNum, out int needYL)
        {
            subForgeGoodsID = 0;
            needNum = 0;
            needYL = 0;

            string subForgeGoodsIDs = GameManager.systemParamsList.GetParamValueByName("SubForgeGoodsIDs");

            int needIndex = goodsData.AddPropIndex + 1;

            string[] arr = subForgeGoodsIDs.Split(',');
            if (needIndex >= arr.Length)
            {
                return false;
            }

            string[] destItem = arr[needIndex].Split('|');
            if (3 != destItem.Length)
            {
                return false;
            }

            //这儿肯定只有三个数，物品id， 数量， 英两
            int value = 0;

            if (!int.TryParse(destItem[0], out value))
            {
                return false;
            }

            subForgeGoodsID = value;

            if (!int.TryParse(destItem[1], out value))
            {
                return false;
            }

            needNum = value;

            if (!int.TryParse(destItem[2], out value))
            {
                return false;
            }

            needYL = value;

            return true;
        }

        /// <summary>
        /// 强化需要的物品ID列表
        /// </summary>
        private static string[] EnchanceGoodsIDList = null;

        /// <summary>
        /// 根据装备的等级来判断需要的强化石的ID
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static int GetEnchanceGoodsID(int quality)
        {
            if (EnchanceGoodsIDList == null)
            {
                string EnchanceGoodsIDs = GameManager.systemParamsList.GetParamValueByName("EnchanceGoodsIDs");
                EnchanceGoodsIDList = EnchanceGoodsIDs.Split(',');
            }

            int index = quality;
            return Convert.ToInt32(EnchanceGoodsIDList[index]);
        }

        /// <summary>
        /// 获取物品的品质颜色名称
        /// </summary>
        /// <param name="gq"></param>
        /// <returns></returns>
        public static string GetEnchanceText(GoodsQuality gq)
        {
            string text = "";
            if (gq == GoodsQuality.White)
            {
                text = Global.GetLang("白色");
            }
            else if (gq == GoodsQuality.Green)
            {
                text = Global.GetLang("绿色");
            }
            else if (gq == GoodsQuality.Blue)
            {
                text = Global.GetLang("蓝色");
            }
            else if (gq == GoodsQuality.Purple)
            {
                text = Global.GetLang("紫色");
            }
            else if (gq == GoodsQuality.Gold)
            {
                text = Global.GetLang("金色");
            }

            return text;
        }

        /// <summary>
        /// 根据颜色名称获取物品的品质
        /// </summary>
        /// <param name="gq"></param>
        /// <returns></returns>
        public static GoodsQuality GetEnchanceQualityByColorName(string colorName)
        {
            if (colorName == Global.GetLang("白色"))
            {
                return GoodsQuality.White;
            }
            else if (colorName == Global.GetLang("绿色"))
            {
                return GoodsQuality.Green;
            }
            else if (colorName == Global.GetLang("蓝色"))
            {
                return GoodsQuality.Blue;
            }
            else if (colorName == Global.GetLang("紫色"))
            {
                return GoodsQuality.Purple;
            }
            else if (colorName == Global.GetLang("金色"))
            {
                return GoodsQuality.Gold;
            }

            return GoodsQuality.White;
        }

        /// <summary>
        /// 提品的的成功概率
        /// </summary>
        public static int[] EnchanceLevelRocksPercent = null;

        /// <summary>
        /// 获取精炼允许使用的最大幸运符个数
        /// </summary>
        /// <param name="client"></param>
        /// <param name="luckyNum"></param>
        /// <returns></returns>
        public static int GetAllowEnchanceLuckyNum(GameClient client, GoodsData goodsData, int luckyNum)
        {
            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
            {
                return luckyNum;
            }

            if (null == systemGoods) return luckyNum;

            if (goodsData.Quality >= (int)GoodsQuality.Max - 1)
            {
                return luckyNum;
            }

            if (null == EnchanceLevelRocksPercent)
            {
                EnchanceLevelRocksPercent = GameManager.systemParamsList.GetParamValueIntArrayByName("EnchanceLevelRocksPercent");
            }

            int percent = Math.Abs(EnchanceLevelRocksPercent[goodsData.Quality + 1]);
            if (percent >= 100) //不需要使用幸运符了
            {
                return 0;
            }

            int singleLuckyGoodsRate = (int)GameManager.systemParamsList.GetParamValueIntByName("EnchanceLuckyGoodsRate");
            singleLuckyGoodsRate = Global.GMax(singleLuckyGoodsRate, 1);
            int allowLuckyNum = ((100 - percent) - 1) / singleLuckyGoodsRate + 1;
            return Global.GMin(luckyNum, allowLuckyNum);
        }

        /// <summary>
        /// 获取提品使用幸运符增加的概率
        /// </summary>
        /// <param name="luckyNum"></param>
        /// <returns></returns>
        private static int GetEnchanceLuckyPercent(GameClient client, int luckyNum)
        {
            int enchanceLuckyGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("EnchanceLuckyGoodsID");
            if (enchanceLuckyGoodsID < 0) return 0;

            //int totalNum = Global.GetTotalGoodsCountByID(client, enchanceLuckyGoodsID);
            //luckyNum = Global.GMin(totalNum, luckyNum);
            if (luckyNum <= 0) return 0;

            int singleLuckyGoodsRate = (int)GameManager.systemParamsList.GetParamValueIntByName("EnchanceLuckyGoodsRate");
            return (luckyNum * singleLuckyGoodsRate);
        }

        /// <summary>
        /// 获取提品成功的概率
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static int GetEnchancePercent(GameClient client, GoodsData goodsData, int luckyNum)
        {
            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
            {
                return 0;
            }

            if (null == systemGoods) return 0;

            if (goodsData.Quality >= (int)GoodsQuality.Max - 1)
            {
                return 0;
            }

            int luckyPercent = GetEnchanceLuckyPercent(client, luckyNum);

            if (null == EnchanceLevelRocksPercent)
            {
                EnchanceLevelRocksPercent = GameManager.systemParamsList.GetParamValueIntArrayByName("EnchanceLevelRocksPercent");
            }

            int percent = Math.Abs(EnchanceLevelRocksPercent[goodsData.Quality + 1]);
            percent += luckyPercent;
            return Global.GMin(100, percent);
        }

        /// <summary>
        /// 开始提品
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static bool StartEnchance(GameClient client, GoodsData goodsData, int luckyNum)
        {
            int percent = GetEnchancePercent(client, goodsData, luckyNum);
            int rndNum = Global.GetRandomNumber(0, 101);
            if (rndNum <= percent)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 提品的的需要的银两
        /// </summary>
        public static int[] EnchanceLevelNeedYinLiang = null;

        /// <summary>
        /// 获取将装备强化到下一个品质所需要的银两
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static int GetEnchanceNextLevelYinLiang(GoodsData goodsData)
        {
            if (null == EnchanceLevelNeedYinLiang)
            {
                EnchanceLevelNeedYinLiang = GameManager.systemParamsList.GetParamValueIntArrayByName("EnchanceLevelNeedYinLiang");
            }

            int index = goodsData.Quality + 1;
            return EnchanceLevelNeedYinLiang[index];
        }

        /// <summary>
        /// 获取将装备强化到下一个级别所需要的强化石的数量
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static int GetEnchanceNextLevelRock(GoodsData goodsData)
        {
            return 1;
        }

        #endregion 精炼(锻造)和提品

        #region 装备进阶

        /// <summary>
        /// 装备的最高阶数
        /// </summary>
        public static int MaxSuitID = 4;

        /// <summary>
        /// 获取进阶使用幸运符增加的概率
        /// </summary>
        /// <param name="luckyNum"></param>
        /// <returns></returns>
        private static int GetJinjieLuckyPercent(GameClient client, int luckyNum)
        {
            int jinjieLuckyGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("JinjieLuckyGoodsID");
            if (jinjieLuckyGoodsID < 0) return 0;

            luckyNum = Global.GMin(Global.GetTotalGoodsCountByID(client, jinjieLuckyGoodsID), luckyNum); //此处必须判断，因为外部无判断，不同于精炼和强化
            if (luckyNum <= 0) return 0;

            int singleLuckyGoodsRate = (int)GameManager.systemParamsList.GetParamValueIntByName("JinjieLuckyGoodsRate");
            return (luckyNum * singleLuckyGoodsRate);
        }

        /// <summary>
        /// 缓存装备物品的阶数
        /// </summary>
        private static Dictionary<int, int> EquipGoodsSuitCacheDict = new Dictionary<int, int>();

        /// <summary>
        /// 装备的阶数
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static int GetEquipGoodsSuitID(int goodsID)
        {
            //判断两个物品项是否同一个物品，是否可以叠加?
            int suit = 0;
            lock (EquipGoodsSuitCacheDict)
            {
                if (!EquipGoodsSuitCacheDict.TryGetValue(goodsID, out suit))
                {
                    //获取Xml项
                    SystemXmlItem systemGoods = null;
                    if (GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
                    {
                        suit = systemGoods.GetIntValue("SuitID");
                    }
                    else
                    {
                        suit = -1;
                    }

                    EquipGoodsSuitCacheDict.Add(goodsID, suit);
                }
            }

            if (suit < 0) return 0;
            return suit;
        }

        /// <summary>
        /// 获取进阶需要的概率
        /// </summary>
        /// <param name="GoodsID"></param>
        /// <returns></returns>
        public static int GetJinjieNextPercent(GameClient client, int goodsID, int luckyNum)
        {
            int percent = 0;
            SystemXmlItem systemEquipUpgradeItem = EquipUpgradeCacheMgr.GetEquipUpgradeItemByGoodsID(goodsID, Global.MaxSuitID);
            if (null == systemEquipUpgradeItem)
            {
                return percent;
            }

            percent = systemEquipUpgradeItem.GetIntValue("Succeed");
            percent += GetJinjieLuckyPercent(client, luckyNum);
            return Global.GMin(percent, 100);
        }

        /// <summary>
        /// 获取将装备进阶到下一个阶所需要的银两
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static int GetJinjieNextLevelYinLiang(int goodsID)
        {
            int yinLiang = 100000000;
            SystemXmlItem systemEquipUpgradeItem = EquipUpgradeCacheMgr.GetEquipUpgradeItemByGoodsID(goodsID, Global.MaxSuitID);
            if (null == systemEquipUpgradeItem)
            {
                return yinLiang;
            }

            yinLiang = systemEquipUpgradeItem.GetIntValue("YinLiang");
            return Global.GMax(yinLiang, 0);
        }

        /// <summary>
        /// 需要的进阶石的数量
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static int GetJinjieNextRocks(int goodsID)
        {
            int needGoodsNum = 100000000;
            SystemXmlItem systemEquipUpgradeItem = EquipUpgradeCacheMgr.GetEquipUpgradeItemByGoodsID(goodsID, Global.MaxSuitID);
            if (null == systemEquipUpgradeItem)
            {
                return needGoodsNum;
            }

            needGoodsNum = systemEquipUpgradeItem.GetIntValue("GoodsNum");
            return Global.GMax(needGoodsNum, 0);
        }

        /// <summary>
        /// 需要的进阶石的GoodsID
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static int GetJinjieNextRocksGoodsID(int goodsID)
        {
            int needGoodsID = 0;
            SystemXmlItem systemEquipUpgradeItem = EquipUpgradeCacheMgr.GetEquipUpgradeItemByGoodsID(goodsID, Global.MaxSuitID);
            if (null == systemEquipUpgradeItem)
            {
                return needGoodsID;
            }

            needGoodsID = systemEquipUpgradeItem.GetIntValue("NeedGoodsID");
            return Global.GMax(needGoodsID, 0);
        }

        #endregion 装备进阶

        #region 装备(宝石)镶嵌

        /// <summary>
        /// 获取宝石的级别
        /// </summary>
        /// <param name="jewelGoodsID"></param>
        /// <returns></returns>
        public static int GetJewelLevel(int jewelGoodsID)
        {
            return (jewelGoodsID % 1000);
        }

        /// <summary>
        /// 判断是否是能够镶嵌的宝石
        /// </summary>
        /// <param name="equipGoodsID"></param>
        /// <param name="jewelGoodsID"></param>
        /// <returns></returns>
        public static bool CanEnchaseJewel(int jewelGoodsID)
        {
            //先判断是否是可以镶嵌的宝石
            int xiangqianRockStartID = (int)GameManager.systemParamsList.GetParamValueIntByName("XiangqianRockStartID");
            int xiangqianRockEndID = (int)GameManager.systemParamsList.GetParamValueIntByName("XiangqianRockEndID");
            if (jewelGoodsID >= xiangqianRockStartID && jewelGoodsID <= xiangqianRockEndID)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 判断装备上是否能够镶嵌指定的宝石
        /// </summary>
        /// <param name="equipGoodsID"></param>
        /// <param name="jewelGoodsID"></param>
        /// <returns></returns>
        public static bool CanAddJewelIntoEquip(int equipGoodsID, int jewelGoodsID)
        {
            //判断拖拽过来的图标是否是可以提品的装备
            //首先判断，如果类型为技能则不处理, 如果 ItemObject 为空，则不处理, 如果是实用中的装备则不处理
            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(equipGoodsID, out systemGoods))
            {
                return false;
            }

            int categoriy = systemGoods.GetIntValue("Categoriy");
            int jewelCategoriy = (jewelGoodsID / 1000) % 100;
            /*if ((int)ItemCategories.Weapon == categoriy) //武器
            {
                if (1 == jewelCategoriy || 3 == jewelCategoriy)
                {
                    return true;
                }
            }
            else if ((int)ItemCategories.Clothes == categoriy) //衣服
            {
                if (2 == jewelCategoriy || 4 == jewelCategoriy || 8 == jewelCategoriy || 9 == jewelCategoriy)
                {
                    return true;
                }
            }
            else if ((int)ItemCategories.Headdress == categoriy) //头盔
            {
                if (2 == jewelCategoriy || 4 == jewelCategoriy || 8 == jewelCategoriy || 9 == jewelCategoriy)
                {
                    return true;
                }
            }
            else if ((int)ItemCategories.Belt == categoriy) //腰带
            {
                if (2 == jewelCategoriy || 4 == jewelCategoriy || 8 == jewelCategoriy || 9 == jewelCategoriy)
                {
                    return true;
                }
            }
            else if ((int)ItemCategories.Bracelet == categoriy) //手镯-护腕
            {
                if (5 == jewelCategoriy)
                {
                    return true;
                }
            }
            else if ((int)ItemCategories.Ring == categoriy) //戒指
            {
                if (1 == jewelCategoriy || 3 == jewelCategoriy)
                {
                    return true;
                }
            }
            else if ((int)ItemCategories.Necklace == categoriy) //吊坠
            {
                if (1 == jewelCategoriy || 3 == jewelCategoriy)
                {
                    return true;
                }
            }
            else if ((int)ItemCategories.Decorate == categoriy) //护符
            {
                return true; //任何宝石都可以镶嵌
            }
            else if ((int)ItemCategories.ShoulderProtection == categoriy) //护肩
            {
                if (2 == jewelCategoriy || 4 == jewelCategoriy || 8 == jewelCategoriy || 9 == jewelCategoriy)
                {
                    return true;
                }
            }
            else if ((int)ItemCategories.ChestProtection == categoriy) //护胸
            {
                if (10 == jewelCategoriy)
                {
                    return true;
                }
            }
            else if ((int)ItemCategories.Glove == categoriy) //手套
            {
                if (6 == jewelCategoriy)
                {
                    return true;
                }
            }
            else if ((int)ItemCategories.Boot == categoriy) //靴子
            {
                if (7 == jewelCategoriy)
                {
                    return true;
                }
            }*/

            return false;
        }

        #endregion 装备(宝石)镶嵌

        #region 装备耐久度管理

        /// <summary>
        /// 通知客户端耐久度发生变化的值
        /// </summary>
        public static int MaxNotifyEquipStrongValue = 1000;

        /// <summary>
        /// 装备耐久度字段缓存
        /// </summary>
        private static Dictionary<int, int> EquipGoodsMaxStrongDict = new Dictionary<int, int>();

        /// <summary>
        /// 清空装备耐久度字段缓存
        /// </summary>
        public static void ClearEquipGoodsMaxStrongDict()
        {
            lock (EquipGoodsMaxStrongDict)
            {
                EquipGoodsMaxStrongDict.Clear();
            }
        }

        /// <summary>
        /// 获取指定物品的最大耐久度
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static int GetEquipGoodsMaxStrong(int goodsID)
        {
            int maxStrong = 0;
            lock (EquipGoodsMaxStrongDict)
            {
                if (EquipGoodsMaxStrongDict.TryGetValue(goodsID, out maxStrong))
                {
                    return maxStrong;
                }
            }

            EquipPropItem item = GameManager.EquipPropsMgr.FindEquipPropItem(goodsID);
            if (null == item)
            {
                maxStrong = 0;
            }
            else
            {
                maxStrong = (int)item.ExtProps[(int)ExtPropIndexes.Strong];
            }

            lock (EquipGoodsMaxStrongDict)
            {
                EquipGoodsMaxStrongDict[goodsID] = maxStrong;
            }

            return maxStrong;
        }

        #endregion 装备耐久度管理

        #region 角色间交易

        /// <summary>
        /// 从交易数据中恢复自己的数据
        /// </summary>
        /// <param name="client"></param>
        /// <param name="ed"></param>
        public static void RestoreExchangeData(GameClient client, ExchangeData ed)
        {
            lock (ed)
            {
                List<GoodsData> goodsDataList = null;
                if (ed.GoodsDict.TryGetValue(client.ClientData.RoleID, out goodsDataList))
                {
                    for (int i = 0; i < goodsDataList.Count; i++)
                    {
                        Global.AddGoodsData(client, goodsDataList[i]);
                        GameManager.ClientMgr.NotifyMoveGoods(_TCPManager.MySocketListener, _TCPManager.TcpOutPacketPool, client, goodsDataList[i], 1);
                    }

                    ed.GoodsDict.Remove(client.ClientData.RoleID);
                }
            }
        }

        /// <summary>
        /// 设置交易数据的锁定状态
        /// </summary>
        /// <param name="client"></param>
        /// <param name="ed"></param>
        /// <param name="locked"></param>
        public static void LockExchangeData(int roleID, ExchangeData ed, int locked)
        {
            lock (ed)
            {
                ed.LockDict[roleID] = locked;
            }
        }

        /// <summary>
        /// 查询交易数据的锁定状态
        /// </summary>
        /// <param name="client"></param>
        /// <param name="ed"></param>
        public static bool IsLockExchangeData(int roleID, ExchangeData ed)
        {
            int locked = 0;
            lock (ed)
            {
                ed.LockDict.TryGetValue(roleID, out locked);
            }

            return (locked > 0);
        }

        /// <summary>
        /// 设置交易数据的同意状态
        /// </summary>
        /// <param name="client"></param>
        /// <param name="ed"></param>
        /// <param name="done"></param>
        public static bool DoneExchangeData(int roleID, ExchangeData ed)
        {
            bool ret = false;
            lock (ed)
            {
                if (!ed.DoneDict.ContainsKey(roleID))
                {
                    ed.DoneDict[roleID] = 1;
                    ret = true;
                }
            }

            return ret;
        }

        /// <summary>
        /// 查询交易数据的同意状态
        /// </summary>
        /// <param name="client"></param>
        /// <param name="ed"></param>
        public static bool IsDoneExchangeData(int roleID, ExchangeData ed)
        {
            int done = 0;
            lock (ed)
            {
                ed.DoneDict.TryGetValue(roleID, out done);
            }

            return (done > 0);
        }

        /// <summary>
        /// 将制定的物品放入交易数据中
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsDbID"></param>
        /// <param name="ed"></param>
        /// <returns></returns>
        public static bool AddGoodsDataIntoExchangeData(GameClient client, int goodsDbID, ExchangeData ed)
        {
            //查询交易数据的锁定状态
            if (IsLockExchangeData(client.ClientData.RoleID, ed))
            {
                return true;
            }

            lock (ed)
            {
                List<GoodsData> goodsDataList = null;
                if (!ed.GoodsDict.TryGetValue(client.ClientData.RoleID, out goodsDataList))
                {
                    goodsDataList = new List<GoodsData>();
                    ed.GoodsDict[client.ClientData.RoleID] = goodsDataList;
                }

                if (goodsDataList.Count < 12)
                {
                    GoodsData gd = Global.GetGoodsByDbID(client, goodsDbID);
                    if (null == gd) return false;
                    if (gd.Binding > 0) return false; //绑定的不能交易给对方
                    if (Global.IsTimeLimitGoods(gd)) return false; //限时的不能交易给对方
                    Global.RemoveGoodsData(client, gd);
                    GameManager.ClientMgr.NotifyMoveGoods(_TCPManager.MySocketListener, _TCPManager.TcpOutPacketPool, client, gd, 0);

                    if (-1 == goodsDataList.IndexOf(gd))
                    {
                        goodsDataList.Add(gd);
                    }
                }
            }

            return true;
        }

        /// <summary>
        /// 将制定的物品从交易数据中删除
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsDbID"></param>
        /// <param name="ed"></param>
        /// <returns></returns>
        public static bool RemoveGoodsDataFromExchangeData(GameClient client, int goodsDbID, ExchangeData ed)
        {
            //查询交易数据的锁定状态
            if (IsLockExchangeData(client.ClientData.RoleID, ed))
            {
                return true;
            }

            GoodsData gd = null;
            lock (ed)
            {
                List<GoodsData> goodsDataList = null;
                if (ed.GoodsDict.TryGetValue(client.ClientData.RoleID, out goodsDataList))
                {
                    for (int i = 0; i < goodsDataList.Count; i++)
                    {
                        if (goodsDataList[i].Id == goodsDbID)
                        {
                            gd = goodsDataList[i];
                            goodsDataList.RemoveAt(i);
                            break;
                        }
                    }
                }
            }

            if (null == gd) return false;
            Global.AddGoodsData(client, gd);
            GameManager.ClientMgr.NotifyMoveGoods(_TCPManager.MySocketListener, _TCPManager.TcpOutPacketPool, client, gd, 1);

            return true;
        }

        /// <summary>
        /// 将制定的金币放入交易数据中
        /// </summary>
        /// <param name="client"></param>
        /// <param name="money"></param>
        /// <param name="ed"></param>
        /// <returns></returns>
        public static bool UpdateExchangeDataMoney(GameClient client, int money, ExchangeData ed)
        {
            //查询交易数据的锁定状态
            if (IsLockExchangeData(client.ClientData.RoleID, ed))
            {
                return true;
            }

            lock (ed)
            {
                ed.MoneyDict[client.ClientData.RoleID] = money;
            }

            return true;
        }

        /// <summary>
        /// 将制定的元宝放入交易数据中
        /// </summary>
        /// <param name="client"></param>
        /// <param name="money"></param>
        /// <param name="ed"></param>
        /// <returns></returns>
        public static bool UpdateExchangeDataYuanBao(GameClient client, int yuanBao, ExchangeData ed)
        {
            //查询交易数据的锁定状态
            if (IsLockExchangeData(client.ClientData.RoleID, ed))
            {
                return true;
            }

            lock (ed)
            {
                ed.YuanBaoDict[client.ClientData.RoleID] = yuanBao;
            }

            return true;
        }

        private static string BuildTradeAnalysisLog(
            GameClient from, GameClient to,
            List<GoodsData> outGoods, List<GoodsData> inGoods,
            int outMoney, int inMoney,
            int outJinbi, int inJinbi)
        {
            // 统计分析 -100 金币，-101 钻石
            Dictionary<int, int> outDict = new Dictionary<int, int>();
            Dictionary<int, int> inDict = new Dictionary<int, int>();

            for (int i = 0; outGoods != null && i < outGoods.Count; ++i)
            {
                if (!outDict.ContainsKey(outGoods[i].GoodsID))
                    outDict.Add(outGoods[i].GoodsID, outGoods[i].GCount);
                else
                    outDict[outGoods[i].GoodsID] += outGoods[i].GCount;
            }

            for (int i = 0; inGoods != null && i < inGoods.Count; ++i)
            {
                if (!inDict.ContainsKey(inGoods[i].GoodsID))
                    inDict.Add(inGoods[i].GoodsID, inGoods[i].GCount);
                else
                    inDict[inGoods[i].GoodsID] += inGoods[i].GCount;
            }

            if (outJinbi > 0) outDict[-100] = outJinbi;
            if (inJinbi > 0) inDict[-100] = inJinbi;
            if (outMoney > 0) outDict[-101] = outMoney;
            if (inMoney > 0) inDict[-101] = inMoney;

            StringBuilder inSb = new StringBuilder(), outSb = new StringBuilder();
            foreach (var kvp in inDict)
            {
                inSb.Append(kvp.Key).Append(':').Append(kvp.Value).Append(',');
            }
            if (inSb.Length > 0) inSb.Remove(inSb.Length - 1, 1);

            foreach (var kvp in outDict)
            {
                outSb.Append(kvp.Key).Append(':').Append(kvp.Value).Append(',');
            }
            if (outSb.Length > 0) outSb.Remove(outSb.Length - 1, 1);

            FriendData fd = Global.FindFriendData(from, to.ClientData.RoleID);
            int isFriend = 0;
            if (fd != null && fd.FriendType == 0)
                isFriend = 100;

            string sip = RobotTaskValidator.getInstance().GetIp(from);
            string tip = RobotTaskValidator.getInstance().GetIp(to);

            string analysisLog = string.Format("server={0} source={1} srcPlayer={2} target={3} dstPlayer={4} in={5} out={6} map={7} sviplevel={8} tviplevel={9} sexp={10} texp={11} friendDegree={12}",
                GameManager.ServerId, from.strUserID, from.ClientData.RoleID, to.strUserID, to.ClientData.RoleID, inSb.ToString(), outSb.ToString(), from.ClientData.MapCode,
                from.ClientData.VipLevel, to.ClientData.VipLevel, sip, tip, isFriend);

            return analysisLog;
        }

        // 统计交易次数的道具
        private static object _LogTradeFreqGoodsMutex = new object();
        private static int[] _LogTradeFreqGoodsArray = null;
        public static void LoadLogTradeGoods()
        {
            lock (_LogTradeFreqGoodsMutex)
            {
                _LogTradeFreqGoodsArray = GameManager.systemParamsList.GetParamValueIntArrayByName("LogTradeFreqGoods");
            }
        }

        /// <summary>
        /// 从交易数据中完成双方的物品交换
        /// </summary>
        /// <param name="client"></param>
        /// <param name="ed"></param>
        public static int CompleteExchangeData(GameClient client, GameClient otherClient, ExchangeData ed)
        {
            int ret = 0;
            lock (ed)
            {
                List<GoodsData> goodsDataList1 = null;
                if (ed.GoodsDict.TryGetValue(client.ClientData.RoleID, out goodsDataList1))
                {
                    if (!Global.CanAddGoodsDataList(otherClient, goodsDataList1))
                    {
                        return -1;
                    }

                    // 属性改造 去掉 负重[8/15/2013 LiaoWei]
                    //是否能得到物品列表(判断包裹负重是否足够)
                    /*if (!Global.CanAddGoodsListWeight(otherClient, goodsDataList1))
                    {
                        return -1001;
                    }*/
                }

                List<GoodsData> goodsDataList2 = null;
                if (ed.GoodsDict.TryGetValue(otherClient.ClientData.RoleID, out goodsDataList2))
                {
                    if (!Global.CanAddGoodsDataList(client, goodsDataList2))
                    {
                        return -11;
                    }

                    // 属性改造 去掉 负重[8/15/2013 LiaoWei]
                    //是否能得到物品列表(判断包裹负重是否足够)
                    /*if (!Global.CanAddGoodsListWeight(client, goodsDataList2))
                    {
                        return -1011;
                    }*/
                }

                int moveMoney1 = 0;
                if (ed.MoneyDict.TryGetValue(client.ClientData.RoleID, out moveMoney1))
                {
                    moveMoney1 = Global.GMax(moveMoney1, 0);
                    if (moveMoney1 > client.ClientData.YinLiang)
                    {
                        return -2;
                    }
                }

                int moveMoney2 = 0;
                if (ed.MoneyDict.TryGetValue(otherClient.ClientData.RoleID, out moveMoney2))
                {
                    moveMoney2 = Global.GMax(moveMoney2, 0);
                    if (moveMoney2 > otherClient.ClientData.YinLiang)
                    {
                        return -12;
                    }
                }

                int moveYuanBao1 = 0;
                if (ed.YuanBaoDict.TryGetValue(client.ClientData.RoleID, out moveYuanBao1))
                {
                    moveYuanBao1 = Global.GMax(moveYuanBao1, 0);
                    if (moveYuanBao1 > client.ClientData.UserMoney)
                    {
                        return -3;
                    }
                }

                int moveYuanBao2 = 0;
                if (ed.YuanBaoDict.TryGetValue(otherClient.ClientData.RoleID, out moveYuanBao2))
                {
                    moveYuanBao2 = Global.GMax(moveYuanBao2, 0);
                    if (moveYuanBao2 > otherClient.ClientData.UserMoney)
                    {
                        return -13;
                    }
                }

                // 是否满足等级限制
                bool bMeetLevelCond = true;
                try
                {
                    // 默认等级限制0转0级
                    string[] szLevelLimit = GameManager.PlatConfigMgr.GetGameConfigItemStr(PlatConfigNames.TradeLevelLlimit, "0,0").Split(',');
                    int minChangeLife = Convert.ToInt32(szLevelLimit[0]);
                    int minLevel = Convert.ToInt32(szLevelLimit[1]);
                    if (GetUnionLevel(client) < GetUnionLevel(minChangeLife, minLevel)
                        || GetUnionLevel(otherClient) < GetUnionLevel(minChangeLife, minLevel))
                    {
                        // 任意一方的等级不满足交易的最小等级
                        bMeetLevelCond = false;
                    }
                }
                catch { }

                try
                {
                    string analysisLog = BuildTradeAnalysisLog(client, otherClient, goodsDataList1, goodsDataList2, moveYuanBao1, moveYuanBao2, moveMoney1, moveMoney2);
                    if (bMeetLevelCond)
                        analysisLog = "trade " + analysisLog;
                    else
                        analysisLog = "tradelevellimit " + analysisLog;

                    LogManager.WriteLog(LogTypes.Analysis, analysisLog);
                }
                catch { }

                if (!bMeetLevelCond)
                {
                    // 低于XX等级不能交易
                    return -14;
                }

                for (int i = 0; goodsDataList1 != null && i < goodsDataList1.Count; i++)
                {
                    string result = "成功";
                    if (!GameManager.ClientMgr.MoveGoodsDataToOtherRole(_TCPManager.MySocketListener, _TCPManager.tcpClientPool, _TCPManager.TcpOutPacketPool,
                        goodsDataList1[i], client, otherClient))
                    {
                        GameManager.SystemServerEvents.AddEvent(string.Format("转移物品时失败, 个人交易, FromRole={0}({1}), ToRole={2}({3}), GoodsDbID={4}, GoodsID={5}, GoodsNum={6}",
                            client.ClientData.RoleID, client.ClientData.RoleName, otherClient.ClientData.RoleID, otherClient.ClientData.RoleName,
                            goodsDataList1[i].Id,
                            goodsDataList1[i].GoodsID,
                            goodsDataList1[i].GCount
                            ),
                            EventLevels.Important);

                        result = "失败";
                    }

                    //写入角色交易的行为日志1
                    Global.AddRoleExchangeEvent1(client, goodsDataList1[i].GoodsID, -goodsDataList1[i].GCount, otherClient.ClientData.RoleID, otherClient.ClientData.RoleName, result);

                    //写入角色交易的行为日志1
                    Global.AddRoleExchangeEvent1(otherClient, goodsDataList1[i].GoodsID, goodsDataList1[i].GCount, client.ClientData.RoleID, client.ClientData.RoleName, result);
                }
                ed.GoodsDict.Remove(client.ClientData.RoleID);

                for (int i = 0; goodsDataList2 != null && i < goodsDataList2.Count; i++)
                {
                    string result = "成功";
                    if (!GameManager.ClientMgr.MoveGoodsDataToOtherRole(_TCPManager.MySocketListener, _TCPManager.tcpClientPool, _TCPManager.TcpOutPacketPool,
                        goodsDataList2[i], otherClient, client))
                    {
                        GameManager.SystemServerEvents.AddEvent(string.Format("转移物品时失败, 个人交易, FromRole={0}({1}), ToRole={2}({3}), GoodsDbID={4}, GoodsID={5}, GoodsNum={6}",
                            otherClient.ClientData.RoleID, otherClient.ClientData.RoleName, client.ClientData.RoleID, client.ClientData.RoleName,
                            goodsDataList2[i].Id,
                            goodsDataList2[i].GoodsID,
                            goodsDataList2[i].GCount
                            ),
                            EventLevels.Important);

                        result = "失败";
                    }

                    //写入角色交易的行为日志1
                    Global.AddRoleExchangeEvent1(otherClient, goodsDataList2[i].GoodsID, -goodsDataList2[i].GCount, client.ClientData.RoleID, client.ClientData.RoleName, result);

                    //写入角色交易的行为日志1
                    Global.AddRoleExchangeEvent1(client, goodsDataList2[i].GoodsID, goodsDataList2[i].GCount, otherClient.ClientData.RoleID, otherClient.ClientData.RoleName, result);
                }
                ed.GoodsDict.Remove(otherClient.ClientData.RoleID);

                if (moveMoney1 > 0)
                {
                    if (GameManager.ClientMgr.SubUserYinLiang(_TCPManager.MySocketListener, _TCPManager.tcpClientPool, _TCPManager.TcpOutPacketPool, client, moveMoney1, "交易扣除一"))
                    {
                        GameManager.ClientMgr.AddUserYinLiang(_TCPManager.MySocketListener, _TCPManager.tcpClientPool, _TCPManager.TcpOutPacketPool, otherClient, moveMoney1, "交易扣除一");

                        //写入角色交易的行为日志2
                        Global.AddRoleExchangeEvent2(client, -moveMoney1, otherClient.ClientData.RoleID, otherClient.ClientData.RoleName);

                        //写入角色交易的行为日志2
                        Global.AddRoleExchangeEvent2(otherClient, moveMoney1, client.ClientData.RoleID, client.ClientData.RoleName);

                        ed.MoneyDict.Remove(client.ClientData.RoleID);
                    }
                }

                if (moveMoney2 > 0)
                {
                    if (GameManager.ClientMgr.SubUserYinLiang(_TCPManager.MySocketListener, _TCPManager.tcpClientPool, _TCPManager.TcpOutPacketPool, otherClient, moveMoney2, "交易扣除二"))
                    {
                        // 上面扣费成功才执行以下操作
                        GameManager.ClientMgr.AddUserYinLiang(_TCPManager.MySocketListener, _TCPManager.tcpClientPool, _TCPManager.TcpOutPacketPool, client, moveMoney2, "交易扣除二");

                        //写入角色交易的行为日志2
                        Global.AddRoleExchangeEvent2(otherClient, -moveMoney2, client.ClientData.RoleID, client.ClientData.RoleName);

                        //写入角色交易的行为日志2
                        Global.AddRoleExchangeEvent2(client, moveMoney2, otherClient.ClientData.RoleID, otherClient.ClientData.RoleName);

                        ed.MoneyDict.Remove(otherClient.ClientData.RoleID);
                    }
                }

                if (moveYuanBao1 > 0)
                {
                    if (GameManager.ClientMgr.SubUserMoney(_TCPManager.MySocketListener, _TCPManager.tcpClientPool, _TCPManager.TcpOutPacketPool, client, moveYuanBao1, "交易扣除一", false))   // 注意!! 玩家交易钻石 不要增长vip [2/20/2014 LiaoWei]
                    {
                        // 上面扣费成功才执行以下操作
                        GameManager.ClientMgr.AddUserMoney(_TCPManager.MySocketListener, _TCPManager.tcpClientPool, _TCPManager.TcpOutPacketPool, otherClient, moveYuanBao1, "交易添加一");

                        //写入角色交易的行为日志3
                        Global.AddRoleExchangeEvent3(client, -moveYuanBao1, otherClient.ClientData.RoleID, otherClient.ClientData.RoleName);

                        //写入角色交易的行为日志2
                        Global.AddRoleExchangeEvent3(otherClient, moveYuanBao1, client.ClientData.RoleID, client.ClientData.RoleName);

                        ed.YuanBaoDict.Remove(client.ClientData.RoleID);

                        // log 
                        int tradelog_num_minamount = GameManager.GameConfigMgr.GetGameConfigItemInt(GameConfigNames.tradelog_num_minamount, 5000);
                        if (moveYuanBao1 >= tradelog_num_minamount)
                        {
                            GameManager.logDBCmdMgr.AddTradeNumberInfo(1, moveYuanBao1, otherClient.ClientData.RoleID, client.ClientData.RoleID, client.ServerId);
                        }
                    }
                }

                if (moveYuanBao2 > 0)
                {
                    if (GameManager.ClientMgr.SubUserMoney(_TCPManager.MySocketListener, _TCPManager.tcpClientPool, _TCPManager.TcpOutPacketPool, otherClient, moveYuanBao2, "交易扣除二", false))  // 注意!! 玩家交易钻石 不要增长vip [2/20/2014 LiaoWei]
                    {
                        // 上面扣费成功才执行以下操作
                        GameManager.ClientMgr.AddUserMoney(_TCPManager.MySocketListener, _TCPManager.tcpClientPool, _TCPManager.TcpOutPacketPool, client, moveYuanBao2, "交易添加二");

                        //写入角色交易的行为日志3
                        Global.AddRoleExchangeEvent3(otherClient, -moveYuanBao2, client.ClientData.RoleID, client.ClientData.RoleName);

                        //写入角色交易的行为日志3
                        Global.AddRoleExchangeEvent3(client, moveYuanBao2, otherClient.ClientData.RoleID, otherClient.ClientData.RoleName);

                        ed.YuanBaoDict.Remove(otherClient.ClientData.RoleID);

                        // log 
                        int tradelog_num_minamount = GameManager.GameConfigMgr.GetGameConfigItemInt(GameConfigNames.tradelog_num_minamount, 5000);
                        if (moveYuanBao2 >= 5000)
                        {
                            GameManager.logDBCmdMgr.AddTradeNumberInfo(1, moveYuanBao2, client.ClientData.RoleID, otherClient.ClientData.RoleID, client.ServerId);
                        }
                    }
                }

                // 交易黑名单
                TradeBlackManager.Instance().OnExchange(client.ClientData.RoleID, otherClient.ClientData.RoleID, goodsDataList1, goodsDataList2, moveYuanBao1, moveMoney2);

                int addTradeCount = 0;
                int[] logTradeGoodsArr = null; lock (_LogTradeFreqGoodsMutex) { logTradeGoodsArr = _LogTradeFreqGoodsArray; }
                if (logTradeGoodsArr != null && logTradeGoodsArr.Count() > 0)
                {
                    if (goodsDataList1 != null)
                        addTradeCount += goodsDataList1.Count(_g => logTradeGoodsArr.Contains(_g.GoodsID));
                    if (goodsDataList2 != null)
                        addTradeCount += goodsDataList2.Count(_g => logTradeGoodsArr.Contains(_g.GoodsID));
                }

                if (moveYuanBao1 > 0 || moveYuanBao2 > 0)
                {
                    ++addTradeCount;
                }

                if (addTradeCount > 0)
                {
                    // 记录花钱的人的记录
                    int freqNumber = Global.IncreaseTradeCount(client, RoleParamName.FTFTradeDayID, RoleParamName.FTFTradeCount, addTradeCount);
                    int tradelog_freq_ftf = GameManager.GameConfigMgr.GetGameConfigItemInt(GameConfigNames.tradelog_freq_ftf, 10);
                    if (freqNumber >= tradelog_freq_ftf)
                    {
                        GameManager.logDBCmdMgr.AddTradeFreqInfo(1, freqNumber, client.ClientData.RoleID);
                    }

                    freqNumber = Global.IncreaseTradeCount(otherClient, RoleParamName.FTFTradeDayID, RoleParamName.FTFTradeCount, addTradeCount);
                    if (freqNumber >= tradelog_freq_ftf)
                    {
                        GameManager.logDBCmdMgr.AddTradeFreqInfo(1, freqNumber, otherClient.ClientData.RoleID);
                    }
                }
            }

            return ret;
        }

        #endregion 角色间交易

        #region 摆摊处理

        /// <summary>
        /// 当前位置是否允许摆摊
        /// </summary>
        /// <returns></returns>
        public static bool AllowStartStall(GameClient client)
        {
            if (Data.MapStallList == null) return false;

            for (int i = 0; i < Data.MapStallList.Count; i++)
            {
                if (Data.MapStallList[i].MapID == client.ClientData.MapCode)
                {
                    Point myPos = new Point(client.ClientData.PosX, client.ClientData.PosY);
                    if (Global.InCircle(myPos, Data.MapStallList[i].ToPos, Data.MapStallList[i].Radius))
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        /// <summary>
        /// 从摆摊数据中恢复自己的数据
        /// </summary>
        /// <param name="client"></param>
        /// <param name="ed"></param>
        public static void RestoreStallData(GameClient client, StallData sd)
        {
            lock (sd)
            {
                for (int i = 0; i < sd.GoodsList.Count; i++)
                {
                    Global.AddGoodsData(client, sd.GoodsList[i]);
                    GameManager.ClientMgr.NotifyMoveGoods(_TCPManager.MySocketListener, _TCPManager.TcpOutPacketPool, client, sd.GoodsList[i], 1);
                }

                sd.GoodsList.Clear();
            }
        }

        /// <summary>
        /// 将制定的物品放入摆摊数据中
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsDbID"></param>
        /// <param name="ed"></param>
        /// <returns></returns>
        public static bool AddGoodsDataIntoStallData(GameClient client, int goodsDbID, StallData sd, int price)
        {
            lock (sd)
            {
                if (sd.Start > 0)
                {
                    return true;
                }

                if (sd.GoodsList.Count < 18)
                {
                    GoodsData gd = Global.GetGoodsByDbID(client, goodsDbID);
                    if (null == gd) return false;
                    if (gd.Binding > 0) return false; //绑定的不能摆摊出售
                    Global.RemoveGoodsData(client, gd);
                    GameManager.ClientMgr.NotifyMoveGoods(_TCPManager.MySocketListener, _TCPManager.TcpOutPacketPool, client, gd, 0);

                    if (-1 == sd.GoodsList.IndexOf(gd))
                    {
                        sd.GoodsList.Add(gd);
                    }

                    sd.GoodsPriceDict[gd.Id] = price;
                }
            }

            return true;
        }

        /// <summary>
        /// 将制定的物品从摆摊数据中删除
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsDbID"></param>
        /// <param name="ed"></param>
        /// <returns></returns>
        public static bool RemoveGoodsDataFromStallData(GameClient client, int goodsDbID, StallData sd)
        {
            GoodsData gd = null;
            lock (sd)
            {
                if (sd.Start > 0)
                {
                    return true;
                }

                for (int i = 0; i < sd.GoodsList.Count; i++)
                {
                    if (sd.GoodsList[i].Id == goodsDbID)
                    {
                        gd = sd.GoodsList[i];
                        sd.GoodsList.RemoveAt(i);
                        sd.GoodsPriceDict.Remove(gd.Id);
                        break;
                    }
                }
            }

            if (null == gd) return false;
            Global.AddGoodsData(client, gd);
            GameManager.ClientMgr.NotifyMoveGoods(_TCPManager.MySocketListener, _TCPManager.TcpOutPacketPool, client, gd, 1);

            return true;
        }

        /// <summary>
        /// 从摆摊数据中完成物品购买
        /// </summary>
        /// <param name="client"></param>
        /// <param name="ed"></param>
        public static int BuyFromStallData(GameClient client, GameClient otherClient, StallData sd, int goodsDbID)
        {
            lock (sd)
            {
                if (sd.GoodsList.Count <= 0)
                {
                    return -11;
                }

                int goodsPrice = 0;
                if (sd.GoodsPriceDict.TryGetValue(goodsDbID, out goodsPrice))
                {
                    goodsPrice = Global.GMax(goodsPrice, 0);
                }

                int ret = -12;
                bool found = false;
                for (int i = 0; i < sd.GoodsList.Count; i++)
                {
                    if (sd.GoodsList[i].Id == goodsDbID)
                    {
                        if (goodsPrice > 0)
                        {
                            if (client.ClientData.Money1 - goodsPrice < 0) //余额不足
                            {
                                ret = -13;
                                break;
                            }

                            GameManager.ClientMgr.SubMoney1(_TCPManager.MySocketListener, _TCPManager.tcpClientPool, _TCPManager.TcpOutPacketPool, client, goodsPrice, "购买摆摊物品");

                            GameManager.ClientMgr.AddMoney1(_TCPManager.MySocketListener, _TCPManager.tcpClientPool, _TCPManager.TcpOutPacketPool, otherClient, (int)(goodsPrice * 0.90), "出售摆摊物品");
                        }

                        if (!GameManager.ClientMgr.MoveGoodsDataToOtherRole(_TCPManager.MySocketListener, _TCPManager.tcpClientPool, _TCPManager.TcpOutPacketPool,
                            sd.GoodsList[i], otherClient, client))
                        {
                            GameManager.SystemServerEvents.AddEvent(string.Format("转移物品时失败, 摊位购买, FromRole={0}({1}), ToRole={2}({3}), GoodsDbID={4}, GoodsID={5}, GoodsNum={6}",
                                otherClient.ClientData.RoleID, otherClient.ClientData.RoleName, client.ClientData.RoleID, client.ClientData.RoleName,
                                sd.GoodsList[i].Id,
                                sd.GoodsList[i].GoodsID,
                                sd.GoodsList[i].GCount
                                ),
                                EventLevels.Important);
                        }

                        found = true;
                        sd.GoodsList.RemoveAt(i);
                        break;
                    }
                }

                if (!found)
                {
                    return ret;
                }

                return 0;
            }
        }

        #endregion 摆摊处理

        #region 组队管理

        /// <summary>
        /// 将ClientData 类型转换为 TeamMemberData类型(组队时使用)
        /// </summary>
        /// <param name="clientData"></param>
        /// <returns></returns>
        public static TeamMemberData ClientDataToTeamMemberData(SafeClientData clientData)
        {
            TeamMemberData teamMemberData = new TeamMemberData()
            {
                RoleID = clientData.RoleID,
                RoleName = Global.FormatRoleName2(clientData, clientData.RoleName),
                RoleSex = clientData.RoleSex,
                Level = clientData.Level,
                Occupation = clientData.Occupation,
                RolePic = clientData.RolePic,
                MapCode = clientData.MapCode,
                OnlineState = 1,
                MaxLifeV = clientData.LifeV,
                CurrentLifeV = clientData.CurrentLifeV,
                MaxMagicV = clientData.MagicV,
                CurrentMagicV = clientData.CurrentMagicV,
                PosX = clientData.PosX,
                PosY = clientData.PosY,
                CombatForce = clientData.CombatForce,
                ChangeLifeLev = clientData.ChangeLifeCount,
            };

            return teamMemberData;
        }

        /// <summary>
        /// 程序退出时脱离组队信息
        /// </summary>
        /// <param name="client"></param>
        public static void QuitFromTeam(GameClient client)
        {
            if (client.ClientData.TeamID <= 0) //如果没有队伍
            {
                return;
            }

            //查找组队的数据
            TeamData td = GameManager.TeamMgr.FindData(client.ClientData.TeamID);
            if (null == td) //没有找到组队数据
            {
                //清空组队ID
                client.ClientData.TeamID = 0;
                GameManager.TeamMgr.RemoveRoleID2TeamID(client.ClientData.RoleID);
                return;
            }

            bool destroy = false;
            lock (td)
            {
                if (td.TeamRoles.Count > 1) //转交队长
                {
                    for (int i = 0; i < td.TeamRoles.Count; i++)
                    {
                        if (td.TeamRoles[i].RoleID == client.ClientData.RoleID)
                        {
                            td.TeamRoles.RemoveAt(i);
                            break;
                        }
                    }

                    //判断是否是队长
                    if (td.LeaderRoleID == client.ClientData.RoleID)
                    {
                        td.LeaderRoleID = td.TeamRoles[0].RoleID; //转交队长
                    }
                }
                else
                {
                    destroy = true;
                    td.LeaderRoleID = -1; //强迫解散
                }
            }

            if (destroy)
            {
                //删除组队数据
                GameManager.TeamMgr.RemoveData(client.ClientData.TeamID);

                //组队解散通知
                GameManager.ClientMgr.NotifyOthersTeamDestroy(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, td);
            }

            //清空组队ID
            client.ClientData.TeamID = 0;
            GameManager.TeamMgr.RemoveRoleID2TeamID(client.ClientData.RoleID);

            //通知组队数据的指令信息
            GameManager.ClientMgr.NotifyTeamData(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, td); //发送null数据，强迫组队解散

            //组队状态变化通知(同一个地图才需要通知)
            GameManager.ClientMgr.NotifyOthersTeamIDChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
        }

        /// <summary>
        /// 获取一个角色的组队中的队长ID
        /// </summary>
        /// <param name="client"></param>
        public static int GetGameClientTeamLeaderID(SafeClientData clientData)
        {
            if (clientData.TeamID <= 0) //如果没有队伍
            {
                return -1;
            }

            //查找组队的数据
            TeamData td = GameManager.TeamMgr.FindData(clientData.TeamID);
            if (null == td) //没有找到组队数据
            {
                return -1;
            }

            int teamLeaderRoleID = -1;
            lock (td)
            {
                teamLeaderRoleID = td.LeaderRoleID;
            }

            return teamLeaderRoleID;
        }

        #endregion 组队管理

        #region 好友管理

        /// <summary>
        /// 查找是否已经在队列中
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        public static FriendData FindFriendData(GameClient client, int otherRoleID)
        {
            if (null == client.ClientData.FriendDataList) return null;
            lock (client.ClientData.FriendDataList)
            {
                for (int i = 0; i < client.ClientData.FriendDataList.Count; i++)
                {
                    if (client.ClientData.FriendDataList[i].OtherRoleID == otherRoleID)
                    {
                        return client.ClientData.FriendDataList[i];
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 查找第一符合指定类型的队列
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        public static FriendData FindFirstFriendDataByType(GameClient client, int friendType)
        {
            if (null == client.ClientData.FriendDataList) return null;
            lock (client.ClientData.FriendDataList)
            {
                for (int i = 0; i < client.ClientData.FriendDataList.Count; i++)
                {
                    if (client.ClientData.FriendDataList[i].FriendType == friendType)
                    {
                        return client.ClientData.FriendDataList[i];
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 判断是否在其黑名单中
        /// </summary>
        /// <param name="client"></param>
        /// <param name="otherRoleID"></param>
        /// <returns></returns>
        public static bool InFriendsBlackList(GameClient client, int otherRoleID)
        {
            FriendData friendData = Global.FindFriendData(client, otherRoleID);
            if (null == friendData) return false;
            if (friendData.FriendType == 1) //在黑名单中
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 添加到好友队列中
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        public static void AddFriendData(GameClient client, FriendData friendData)
        {
            if (null == client.ClientData.FriendDataList)
            {
                client.ClientData.FriendDataList = new List<FriendData>();
            }

            lock (client.ClientData.FriendDataList)
            {
                client.ClientData.FriendDataList.Add(friendData);
            }
        }

        /// <summary>
        /// 从好友队列中删除
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        public static void RemoveFriendData(GameClient client, int dbID)
        {
            if (null == client.ClientData.FriendDataList) return;
            lock (client.ClientData.FriendDataList)
            {
                for (int i = 0; i < client.ClientData.FriendDataList.Count; i++)
                {
                    if (client.ClientData.FriendDataList[i].DbID == dbID)
                    {
                        client.ClientData.FriendDataList.RemoveAt(i);
                        break;
                    }
                }
            }
        }

        /// <summary>
        /// 根据好友的类型返回个数
        /// </summary>
        /// <param name="client"></param>
        /// <param name="friendType"></param>
        /// <returns></returns>
        public static int GetFriendCountByType(GameClient client, int friendType)
        {
            if (null == client.ClientData.FriendDataList) return 0;

            int totalCount = 0;
            lock (client.ClientData.FriendDataList)
            {
                for (int i = 0; i < client.ClientData.FriendDataList.Count; i++)
                {
                    if (client.ClientData.FriendDataList[i].FriendType == friendType)
                    {
                        totalCount++;
                    }
                }
            }

            return totalCount;
        }

        #endregion 好友管理

        #region 自动战斗(挂机)

        /// <summary>
        /// 是否已经进入了战斗保护状态
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool IsAutoFightingProtectState(GameClient client)
        {
            if (!client.ClientData.AutoFighting) return false;

            //处理挂机保护卡
            if (!DBRoleBufferManager.ProcessAutoFightingProtect(client))
            {
                return false;
            }

            long ticks = TimeUtil.NOW();
            if (ticks - client.ClientData.LastAutoFightTicks < (5 * 60 * 1000)) //超过5分钟，才进入被保护状态
            {
                return false;
            }

            return true;
        }

        #endregion 自动战斗(挂机)

        #region 聊天系统

        /// <summary>
        /// 发送世界消息需要消耗的道具的ID
        /// </summary>
        public static int SendWorldMessageGoodsID = 603001;

        /// <summary>
        /// 是否能发送世界聊天消息
        /// </summary>
        /// <returns></returns>
        public static bool CanSendSendWorldMessage(GameClient client)
        {
            return (null != Global.GetGoodsByID(client, SendWorldMessageGoodsID));
        }

        /// <summary>
        /// 判断发送聊天的等级是否足够
        /// </summary>
        /// <param name="client"></param>
        public static bool JugeSendMessgeLevel(GameClient client, int index)
        {
            //int nChangeLife = client.ClientData.ChangeLifeCount;

            //if (nChangeLife >= 1)
            //    return true;

            int minLevel = 0;
            if (index == (int)ChatTypeIndexes.Map)
            {
                minLevel = GameManager.PlatConfigMgr.GetGameConfigItemInt(PlatConfigNames.ChatNearLevel, 0);
            }
            if (index == (int)ChatTypeIndexes.World)
            {
                minLevel = GameManager.PlatConfigMgr.GetGameConfigItemInt(PlatConfigNames.ChatWorldLevel, 0);
            }
            else if (index == (int)ChatTypeIndexes.Faction)
            {
                minLevel = GameManager.PlatConfigMgr.GetGameConfigItemInt(PlatConfigNames.ChatFamilyLevel, 0);
            }
            else if (index == (int)ChatTypeIndexes.Team)
            {
                minLevel = GameManager.PlatConfigMgr.GetGameConfigItemInt(PlatConfigNames.ChatTeamTevel, 0);
            }
            else if (index == (int)ChatTypeIndexes.Private)
            {
                minLevel = GameManager.PlatConfigMgr.GetGameConfigItemInt(PlatConfigNames.ChatPrivateLevel, 0);
            }

            int nLevel = client.ClientData.ChangeLifeCount * 100 + client.ClientData.Level;

            if (nLevel < minLevel)
            {
                string strinfo = StringUtil.substitute(Global.GetLang("您当前的等级低于{0}转{1}级, 无法发送消息"), minLevel / 100, minLevel % 100);
                GameManager.ClientMgr.SendSystemChatMessageToClient(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                    client, strinfo);

                return false;
            }

            return true;
        }

        #endregion 聊天系统

        #region 坐骑管理

        /// <summary>
        /// 坐骑的最大ID值(1~8)
        /// </summary>
        public static int MaxHorseID = 10;

        /// <summary>
        /// 坐骑的最高强化级别
        /// </summary>
        public static int MaxEnchanceLevel = 200;

        /// <summary>
        /// 将坐骑的扩展数据字符串转成浮点数组
        /// </summary>
        /// <param name="extProps"></param>
        /// <returns></returns>
        public static int[] HorseExtStr2IntArray(string extStr)
        {
            if (string.IsNullOrEmpty(extStr))
            {
                return new int[(int)HorseExtIndexes.MaxVal];
            }

            string[] fields = extStr.Split(',');
            int[] intArray = new int[(int)HorseExtIndexes.MaxVal];
            for (int i = 0; i < intArray.Length && i < fields.Length; i++)
            {
                try
                {
                    intArray[i] = Convert.ToInt32(fields[i]);
                }
                catch (Exception)
                {
                }
            }

            return intArray;
        }

        /// <summary>
        /// 将坐骑的扩展数据浮点数组转成字符串
        /// </summary>
        /// <param name="extProps"></param>
        /// <returns></returns>
        public static string HorseExtIntArray2Str(int[] intArray)
        {
            string str = "";
            for (int i = 0; i < intArray.Length; i++)
            {
                str += intArray[i].ToString();
                if (i < intArray.Length - 1)
                {
                    str += ",";
                }
            }

            return str;
        }

        /// <summary>
        /// 获取坐骑的扩展属性的浮点值
        /// </summary>
        /// <param name="horseData"></param>
        /// <param name="extIndex"></param>
        /// <returns></returns>
        public static int GetHorseExtFieldIntVal(int[] horsePropIntArray, HorseExtIndexes extIndex)
        {
            if ((int)extIndex >= horsePropIntArray.Length) return 0;

            int val = 0;
            try
            {
                val = horsePropIntArray[(int)extIndex];
            }
            catch (Exception)
            {
            }

            return val;
        }

        /// <summary>
        /// 将坐骑的扩展属性加入Buffer项中
        /// </summary>
        /// <param name="client"></param>
        /// <param name="dblValue"></param>
        private static void UpdateHorseDataProp(GameClient client, HorseExtIndexes extIndex, double dblValue)
        {
        }

        /// <summary>
        /// 将坐骑的扩展属性加入Buffer中
        /// </summary>
        /// <param name="client"></param>
        public static bool UpdateHorseDataProps(GameClient client, bool toAdd = true)
        {
            if (client.ClientData.HorseDbID <= 0) return false;

            HorseData horseData = Global.GetHorseDataByDbID(client, client.ClientData.HorseDbID);
            if (null == horseData) return false;

            SystemXmlItem baseXmlNode = Global.GetHorseBasePropXmlNode(horseData.HorseID);
            if (null == baseXmlNode) return false;

            /// 将坐骑的扩展数据字符串转成浮点数组
            int[] horseExtIntArray = Global.HorseExtStr2IntArray(horseData.PropsVal);

            bool ret = false;
            for (int i = 0; i < (int)HorseExtIndexes.MaxVal; i++)
            {
                //获取坐骑基础属性值
                int baseVal = Global.GetHorseBasePropVal(horseData.HorseID, (HorseExtIndexes)i, baseXmlNode);

                /// 获取指定的坐骑的指定扩展属性
                double propVal = Global.GetHorseExtFieldIntVal(horseExtIntArray, (HorseExtIndexes)i);
                propVal += baseVal;

                ret = (propVal > 0.0) || ret;
                Global.UpdateHorseDataProp(client, (HorseExtIndexes)i, toAdd ? propVal : 0 - propVal);
            }

            return ret;
        }

        /// <summary>
        /// 添加坐骑数据
        /// </summary>
        /// <param name="dbID"></param>
        /// <returns></returns>
        public static void AddHorseData(GameClient client, HorseData horseData)
        {
            if (null == client.ClientData.HorsesDataList)
            {
                client.ClientData.HorsesDataList = new List<HorseData>();
            }

            lock (client.ClientData.HorsesDataList)
            {
                client.ClientData.HorsesDataList.Add(horseData);
            }
        }

        /// <summary>
        /// 删除坐骑数据通过数据库ID
        /// </summary>
        /// <param name="dbID"></param>
        /// <returns></returns>
        public static void RemoveHorseDataByDbID(GameClient client, int horseDbID)
        {
            if (null == client.ClientData.HorsesDataList)
            {
                return;
            }

            lock (client.ClientData.HorsesDataList)
            {
                for (int i = 0; i < client.ClientData.HorsesDataList.Count; i++)
                {
                    if (client.ClientData.HorsesDataList[i].DbID == horseDbID)
                    {
                        client.ClientData.HorsesDataList.RemoveAt(i);
                        break;
                    }
                }
            }
        }

        /// <summary>
        /// 通过数据库ID定位坐骑数据
        /// </summary>
        /// <param name="dbID"></param>
        /// <returns></returns>
        public static HorseData GetHorseDataByDbID(GameClient client, int dbID)
        {
            if (null == client.ClientData.HorsesDataList) return null;

            lock (client.ClientData.HorsesDataList)
            {
                for (int i = 0; i < client.ClientData.HorsesDataList.Count; i++)
                {
                    if (client.ClientData.HorsesDataList[i].DbID == dbID)
                    {
                        return client.ClientData.HorsesDataList[i];
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 通过索引定位坐骑数据
        /// </summary>
        /// <param name="dbID"></param>
        /// <returns></returns>
        public static HorseData GetHorseDataByIndex(GameClient client, int index)
        {
            if (null == client.ClientData.HorsesDataList) return null;

            lock (client.ClientData.HorsesDataList)
            {
                if (index < client.ClientData.HorsesDataList.Count)
                {
                    return client.ClientData.HorsesDataList[index];
                }
            }

            return null;
        }

        /// <summary>
        /// 数据库命令添加坐骑事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public static int AddHorseDBCommand(TCPOutPacketPool pool, GameClient client, int horseID, int bodyID)
        {
            //先DBServer请求扣费
            TCPOutPacket tcpOutPacket = null;
            string strcmd = string.Format("{0}:{1}:{2}", client.ClientData.RoleID, horseID, bodyID);
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, pool, (int)TCPGameServerCmds.CMD_ADDHORSE, strcmd, out tcpOutPacket, client.ServerId);
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                return -1;
            }

            //添加数据库失败
            if (null == tcpOutPacket)
            {
                return -2;
            }

            //2011.05.29, 从.SendData后边移动到前边来，一是因为加密的原因，发送后会被加密，另外也是因为，这个有问题，一旦先发送，如果快的话，会被收回
            //tcpOutPacket， 自己再处理就会错误了，当时为什么放后边?
            //处理本地精简的好友列表数据
            HorseData horseData = DataHelper.BytesToObject<HorseData>(tcpOutPacket.GetPacketBytes(), 6, tcpOutPacket.PacketDataSize - 6);
            if (null != horseData)
            {
                Global.AddHorseData(client, horseData);
            }

            if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket))
            {
                //
                /*LogManager.WriteLog(LogTypes.Error, string.Format("向用户发送tcp数据失败: ID={0}, Size={1}, RoleID={2}, RoleName={3}",
                    tcpOutPacket.PacketCmdID,
                    tcpOutPacket.PacketDataSize,
                    client.ClientData.RoleID,
                    client.ClientData.RoleName));*/
            }

            return 0;
        }

        /// <summary>
        /// 数据库命令撵走坐骑事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="client"></param>
        /// <param name="horseID"></param>
        /// <param name="props"></param>
        /// <returns></returns>
        public static int RemoveHorseDBCommand(TCPOutPacketPool pool, GameClient client, int dbID)
        {
            //先DBServer请求扣费
            TCPOutPacket tcpOutPacket = null;
            string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}", client.ClientData.RoleID, dbID, 1, "*", "*", "*", "*", "*", "*", "*", "*");
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, pool, (int)TCPGameServerCmds.CMD_MODHORSE, strcmd, out tcpOutPacket, client.ServerId);
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                return -1;
            }

            //添加数据库失败
            if (null == tcpOutPacket)
            {
                return -2;
            }

            if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket))
            {
                //
                /*LogManager.WriteLog(LogTypes.Error, string.Format("向用户发送tcp数据失败: ID={0}, Size={1}, RoleID={2}, RoleName={3}",
                    tcpOutPacket.PacketCmdID,
                    tcpOutPacket.PacketDataSize,
                    client.ClientData.RoleID,
                    client.ClientData.RoleName));*/
            }

            //更新本地的数量
            Global.RemoveHorseDataByDbID(client, dbID);
            return 0;
        }

        /// <summary>
        /// 数据库命令修改坐骑属性事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="client"></param>
        /// <param name="horseID"></param>
        /// <param name="props"></param>
        /// <returns></returns>
        public static int UpdateHorsePropsDBCommand(TCPOutPacketPool pool, GameClient client, int dbID, HorseExtIndexes extIndex, int extValue, int addNum)
        {
            HorseData horseData = Global.GetHorseDataByDbID(client, dbID);
            if (null == horseData)
            {
                return -1;
            }

            /// 将坐骑的扩展数据字符串转成浮点数组
            int[] intArray = Global.HorseExtStr2IntArray(horseData.PropsNum);
            intArray[(int)extIndex] += addNum;

            //将坐骑的扩展数据浮点数组转成字符串
            horseData.PropsNum = Global.HorseExtIntArray2Str(intArray);

            intArray = Global.HorseExtStr2IntArray(horseData.PropsVal);
            intArray[(int)extIndex] += extValue;

            //将坐骑的扩展数据浮点数组转成字符串
            horseData.PropsVal = Global.HorseExtIntArray2Str(intArray);

            //先DBServer请求扣费
            TCPOutPacket tcpOutPacket = null;
            string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}", client.ClientData.RoleID, dbID, "*", "*", "*", horseData.PropsNum, horseData.PropsVal, "*", "*", "*", "*");
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, pool, (int)TCPGameServerCmds.CMD_MODHORSE, strcmd, out tcpOutPacket, client.ServerId);
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                return -1;
            }

            //添加数据库失败
            if (null == tcpOutPacket)
            {
                return -2;
            }

            if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket))
            {
                //
                /*LogManager.WriteLog(LogTypes.Error, string.Format("向用户发送tcp数据失败: ID={0}, Size={1}, RoleID={2}, RoleName={3}",
                    tcpOutPacket.PacketCmdID,
                    tcpOutPacket.PacketDataSize,
                    client.ClientData.RoleID,
                    client.ClientData.RoleName));*/
            }

            return 0;
        }

        /// <summary>
        /// 数据库命令修改坐骑的类型事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="client"></param>
        /// <param name="horseID"></param>
        /// <param name="props"></param>
        /// <returns></returns>
        public static int UpdateHorseIDDBCommand(TCPOutPacketPool pool, GameClient client, int dbID, int horseID, int failedNum, string jinJieTempTime, int jinJieTempNum, int jinJieFailedDayID)
        {
            HorseData horseData = Global.GetHorseDataByDbID(client, dbID);
            if (null == horseData)
            {
                return -1;
            }

            horseData.HorseID = horseID;
            horseData.JinJieFailedNum = failedNum;
            horseData.JinJieTempTime = Global.SafeConvertToTicks(jinJieTempTime);
            horseData.JinJieTempNum = jinJieTempNum;
            horseData.JinJieFailedDayID = jinJieFailedDayID;

            jinJieTempTime = jinJieTempTime.Replace(":", "$"); //为了传输，转化分割符号

            //先DBServer请求扣费
            TCPOutPacket tcpOutPacket = null;
            string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}", client.ClientData.RoleID, dbID, "*", horseData.HorseID, "*", "*", "*", horseData.JinJieFailedNum, jinJieTempTime, jinJieTempNum, horseData.JinJieFailedDayID);
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, pool, (int)TCPGameServerCmds.CMD_MODHORSE, strcmd, out tcpOutPacket, client.ServerId);
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                return -1;
            }

            //添加数据库失败
            if (null == tcpOutPacket)
            {
                return -2;
            }

            if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket))
            {
                //
                /*LogManager.WriteLog(LogTypes.Error, string.Format("向用户发送tcp数据失败: ID={0}, Size={1}, RoleID={2}, RoleName={3}",
                    tcpOutPacket.PacketCmdID,
                    tcpOutPacket.PacketDataSize,
                    client.ClientData.RoleID,
                    client.ClientData.RoleName));*/
            }

            return 0;
        }

        /// <summary>
        /// 数据库命令修改坐骑的形象ID事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="client"></param>
        /// <param name="horseID"></param>
        /// <param name="props"></param>
        /// <returns></returns>
        public static int UpdateHorseBodyIDDBCommand(TCPOutPacketPool pool, GameClient client, int dbID, int horseBodyID)
        {
            HorseData horseData = Global.GetHorseDataByDbID(client, dbID);
            if (null == horseData)
            {
                return -1;
            }

            horseData.BodyID = horseBodyID;

            //先DBServer请求扣费
            TCPOutPacket tcpOutPacket = null;
            string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}", client.ClientData.RoleID, dbID, "*", "*", horseData.BodyID, "*", "*", "*", "*", "*", "*");
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, pool, (int)TCPGameServerCmds.CMD_MODHORSE, strcmd, out tcpOutPacket, client.ServerId);
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                return -1;
            }

            //添加数据库失败
            if (null == tcpOutPacket)
            {
                return -2;
            }

            if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket))
            {
                //
                /*LogManager.WriteLog(LogTypes.Error, string.Format("向用户发送tcp数据失败: ID={0}, Size={1}, RoleID={2}, RoleName={3}",
                    tcpOutPacket.PacketCmdID,
                    tcpOutPacket.PacketDataSize,
                    client.ClientData.RoleID,
                    client.ClientData.RoleName));*/
            }

            return 0;
        }

        /// <summary>
        /// 数据库命令坐骑乘上事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="client"></param>
        /// <param name="horseID"></param>
        /// <param name="props"></param>
        /// <returns></returns>
        public static int HorseOnDBCommand(TCPOutPacketPool pool, GameClient client, int dbID)
        {
            //先DBServer请求扣费
            string[] dbFields = null;
            string strcmd = string.Format("{0}:{1}", client.ClientData.RoleID, dbID);
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, pool, (int)TCPGameServerCmds.CMD_DB_HORSEON, strcmd, out dbFields, client.ServerId);
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                return -1;
            }

            if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[0]) < 0)
            {
                return -2;
            }

            return 0;
        }

        /// <summary>
        /// 数据库命令坐骑乘下事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="client"></param>
        /// <param name="horseID"></param>
        /// <param name="props"></param>
        /// <returns></returns>
        public static void HorseOffDBCommand(TCPOutPacketPool pool, GameClient client, int dbID)
        {
            //更新上线状态
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_HORSEOFF,
                string.Format("{0}:{1}", client.ClientData.RoleID, dbID),
                null, client.ServerId);
        }

        /// <summary>
        /// 获取坐骑强到指定级别时，指定属性的配置xml节点
        /// </summary>
        /// <param name="nextLevel"></param>
        /// <param name="extIndex"></param>
        /// <returns></returns>
        public static SystemXmlItem GetHorseEnchanceXmlNode(int nextLevel, HorseExtIndexes extIndex)
        {
            return HorseCachingManager.GetHorseEnchanceItem(nextLevel, extIndex);
        }

        /// <summary>
        /// 获取坐骑积分的Xml节点
        /// </summary>
        public static SystemXmlItem GetHorseJiFenXmlNode()
        {
            string name = string.Format("Config/Horses/HorseJiFen.xml");
            XElement xml = GeneralCachingXmlMgr.GetXElement(Global.GameResPath(name));
            if (null == xml)
            {
                return null;
            }

            XElement xmlNode = Global.GetXElement(xml, "Level", "ID", "1");
            return new SystemXmlItem()
            {
                XMLNode = xmlNode,
            };
        }

        /// <summary>
        /// 根据坐骑标识，获取坐骑的基础属性xml节点
        /// </summary>
        /// <param name="horseID"></param>
        /// <returns></returns>
        public static SystemXmlItem GetHorseBasePropXmlNode(int horseID)
        {
            string name = string.Format("Config/Horses/HorseBaseProp.xml");
            XElement xml = GeneralCachingXmlMgr.GetXElement(Global.GameResPath(name));
            if (null == xml)
            {
                return null;
            }

            XElement xmlNode = Global.GetXElement(xml, "Level", "ID", horseID.ToString());
            return new SystemXmlItem()
            {
                XMLNode = xmlNode,
            };
        }

        /// <summary>
        /// 根据坐骑标识，获取坐骑的属性限制xml节点
        /// </summary>
        /// <param name="horseID"></param>
        /// <returns></returns>
        public static SystemXmlItem GetHorsePropLimitXmlNode(int horseID)
        {
            string name = string.Format("Config/Horses/HorsePropLimit.xml");
            XElement xml = GeneralCachingXmlMgr.GetXElement(Global.GameResPath(name));
            if (null == xml)
            {
                return null;
            }

            XElement xmlNode = Global.GetXElement(xml, "Level", "ID", horseID.ToString());
            return new SystemXmlItem()
            {
                XMLNode = xmlNode,
            };
        }

        /// <summary>
        /// 根据坐骑标识，获取坐骑进阶xml节点
        /// </summary>
        /// <param name="horseID"></param>
        /// <returns></returns>
        public static SystemXmlItem GetHorseUpXmlNode(int horseID)
        {
            if (horseID <= 0 || horseID > Global.MaxHorseID)
            {
                return null;
            }

            string name = string.Format("Config/Horses/HorseUp.xml");
            XElement xml = GeneralCachingXmlMgr.GetXElement(Global.GameResPath(name));
            if (null == xml)
            {
                return null;
            }

            XElement xmlNode = Global.GetXElement(xml, "Level", "ID", horseID.ToString());
            return new SystemXmlItem()
            {
                XMLNode = xmlNode,
            };
        }

        /// <summary>
        /// 坐骑属性的名称
        /// </summary>
        public static string[] HorsePropNames = 
        {
            "AttackV",
            "DefenseV",
            "MAttackV",
            "MDefenseV",
            "BurstV",
            "HitV",
            "DodgeV",
            "MaxLifeV",
            "MaxMagicV",
            "BurstPercent",
        };

        /// <summary>
        /// 根据坐骑的属性值计算积分值
        /// </summary>
        /// <param name="extIndex"></param>
        /// <param name="extPropValue"></param>
        /// <returns></returns>
        public static int CalcHorsePropJiFen(HorseExtIndexes extIndex, int extPropValue)
        {
            int horsePropJiFen = 1;
            SystemXmlItem systemXmlItem = Global.GetHorseJiFenXmlNode();
            if (null != systemXmlItem)
            {
                string horsePropName = HorsePropNames[(int)extIndex];
                horsePropJiFen = systemXmlItem.GetIntValue(horsePropName);
            }

            horsePropJiFen = Global.GMax(1, horsePropJiFen);
            return (extPropValue / horsePropJiFen);
        }

        /// <summary>
        /// 计算坐骑全部属性的积分值
        /// </summary>
        /// <param name="horseData"></param>
        /// <returns></returns>
        public static int CalcHorsePropsJiFen(HorseData horseData)
        {
            if (string.IsNullOrEmpty(horseData.PropsVal))
            {
                return 0;
            }

            SystemXmlItem baseXmlNode = Global.GetHorseBasePropXmlNode(horseData.HorseID);
            if (null == baseXmlNode) return 0;

            int totalJiFen = 0;
            string[] fields = horseData.PropsVal.Split(',');
            for (int i = 0; i < fields.Length && i < (int)HorseExtIndexes.MaxVal; i++)
            {
                //获取坐骑基础属性值
                int baseVal = Global.GetHorseBasePropVal(horseData.HorseID, (HorseExtIndexes)i, baseXmlNode);

                int val = SafeConvertToInt32(fields[i]);
                val += baseVal;

                totalJiFen += CalcHorsePropJiFen((HorseExtIndexes)i, val);
            }

            return totalJiFen;
        }

        /// <summary>
        /// 获取坐骑基础属性值
        /// </summary>
        /// <param name="horseID"></param>
        /// <param name="extIndex"></param>
        /// <returns></returns>
        public static int GetHorseBasePropVal(int horseID, HorseExtIndexes extIndex, SystemXmlItem baseXmlNode = null)
        {
            int baseValue = 0;
            if (null == baseXmlNode)
            {
                baseXmlNode = Global.GetHorseBasePropXmlNode(horseID);
            }

            if (null != baseXmlNode)
            {
                string horsePropName = HorsePropNames[(int)extIndex];
                baseValue = Global.GMax(0, baseXmlNode.GetIntValue(horsePropName));
            }

            return baseValue;
        }

        /// <summary>
        /// 获取坐骑属性的上限值
        /// </summary>
        /// <param name="horseID"></param>
        /// <param name="extIndex"></param>
        /// <returns></returns>
        public static int GetHorsePropLimitVal(int horseID, HorseExtIndexes extIndex)
        {
            int limitValue = 0;
            SystemXmlItem limitXmlNode = Global.GetHorsePropLimitXmlNode(horseID);
            if (null != limitXmlNode)
            {
                string horsePropName = HorsePropNames[(int)extIndex];
                limitValue = Global.GMax(0, limitXmlNode.GetIntValue(horsePropName));
            }

            return limitValue;
        }

        /// <summary>
        /// 获取随机的坐骑的形象ID
        /// </summary>
        /// <param name="horseData"></param>
        /// <returns></returns>
        public static int GetRandomHorseNewBodyID()
        {
            return Global.GetRandomNumber(1, 5);
        }

        /// <summary>
        /// 解析需要的进阶道具和数量
        /// </summary>
        /// <param name="xmlNode"></param>
        public static void ParseHorseJinJieFu(int horseID, out int goodsID, out int goodsNum, SystemXmlItem systemHorse = null)
        {
            goodsID = -1;
            goodsNum = 0;

            if (null == systemHorse)
            {
                systemHorse = Global.GetHorseUpXmlNode(horseID);
            }

            if (null == systemHorse) return;

            string str = systemHorse.GetStringValue("GoodsNum");
            if (string.IsNullOrEmpty(str))
            {
                return;
            }

            string[] fields = str.Split(',');
            if (fields.Length != 2) return;

            goodsID = Global.SafeConvertToInt32(fields[0]);
            goodsNum = Global.SafeConvertToInt32(fields[1]);
        }

        /// <summary>
        /// 获取坐骑必定成功的幸运值
        /// </summary>
        /// <param name="horseID"></param>
        /// <returns></returns>
        //public static int GetHorseHorseOneValue(int horseID)
        //{
        //    if (horseID > Global.MaxHorseID)
        //    {
        //        return 0;
        //    }

        //    SystemXmlItem horseUpXmlNode = Global.GetHorseUpXmlNode(horseID);
        //    if (null == horseUpXmlNode)
        //    {
        //        return 0;
        //    }

        //    return (110000 - horseUpXmlNode.GetIntValue("HorseOne"));
        //}

        /// <summary>
        /// 获取坐骑进入真概率的幸运值
        /// </summary>
        /// <param name="horseID"></param>
        /// <returns></returns>
        //public static int GetHorseHorseTwoValue(int horseID)
        //{
        //    if (horseID > Global.MaxHorseID)
        //    {
        //        return 0;
        //    }

        //    SystemXmlItem horseUpXmlNode = Global.GetHorseUpXmlNode(horseID);
        //    if (null == horseUpXmlNode)
        //    {
        //        return 0;
        //    }

        //    return (110000 - horseUpXmlNode.GetIntValue("HorseTwo"));
        //}

        /// <summary>
        /// 获取坐骑进阶的幸运值
        /// </summary>
        /// <param name="horseID"></param>
        /// <returns></returns>
        public static int GetHorseHorseBlessPoint(int horseID)
        {
            if (horseID > Global.MaxHorseID)
            {
                return 0;
            }

            SystemXmlItem horseUpXmlNode = Global.GetHorseUpXmlNode(horseID);
            if (null == horseUpXmlNode)
            {
                return 0;
            }

            return horseUpXmlNode.GetIntValue("BlessPoint");
        }

        /// <summary>
        /// 坐骑的名称
        /// </summary>
        public static string[] HorseNamesList = null;

        /// <summary>
        /// 获取坐骑的名称
        /// </summary>
        /// <param name="horseID"></param>
        /// <returns></returns>
        public static string GetHorseNameByID(int horseID)
        {
            if (null == HorseNamesList)
            {
                string str = GameManager.systemParamsList.GetParamValueByName("HorseNames");
                if (!string.IsNullOrEmpty(str))
                {
                    HorseNamesList = str.Split(',');
                }
            }

            if (null == HorseNamesList) return Global.GetLang("未知的坐骑名称");
            if (horseID <= 0) return Global.GetLang("未知的坐骑名称");
            if (horseID > HorseNamesList.Length) return Global.GetLang("未知的坐骑名称");
            return HorseNamesList[horseID - 1];
        }

        /// <summary>
        /// 判断坐骑的属性点是否全部满了
        /// </summary>
        /// <param name="horseData"></param>
        /// <returns></returns>
        public static bool IsHorsePropsFull(HorseData horseData)
        {
            SystemXmlItem baseXmlNode = Global.GetHorseBasePropXmlNode(horseData.HorseID);
            if (null == baseXmlNode) return false;

            /// 将坐骑的扩展数据字符串转成浮点数组
            int[] horseExtIntArray = Global.HorseExtStr2IntArray(horseData.PropsVal);
            for (int i = 0; i < (int)HorseExtIndexes.MaxVal; i++)
            {
                //获取坐骑基础属性值
                int baseVal = Global.GetHorseBasePropVal(horseData.HorseID, (HorseExtIndexes)i, baseXmlNode);

                /// 获取指定的坐骑的指定扩展属性
                double propVal = Global.GetHorseExtFieldIntVal(horseExtIntArray, (HorseExtIndexes)i);
                propVal += baseVal;

                int propLimit = Global.GetHorsePropLimitVal(horseData.HorseID, (HorseExtIndexes)i);
                if (propVal < propLimit)
                {
                    return false;
                }
            }

            return true;
        }

        /// <summary>
        /// 获取角色的临时坐骑ID
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int GetTempHorseID(GameClient client)
        {
            //处理先前的坐骑
            if (client.ClientData.HorseDbID <= 0)
            {
                return 0;
            }

            HorseData horseData = Global.GetHorseDataByDbID(client, client.ClientData.HorseDbID);
            if (null == horseData)
            {
                return 0;
            }

            int horseID = horseData.HorseID;
            if (client.ClientData.StartTempHorseIDTicks <= 0)
            {
                return horseID;
            }

            if (client.ClientData.TempHorseID <= 0)
            {
                return horseID;
            }

            long ticks = TimeUtil.NOW();
            if (ticks - client.ClientData.StartTempHorseIDTicks >= (3 * 60 * 1000))
            {
                return horseID;
            }

            horseID = client.ClientData.TempHorseID;
            return horseID;
        }

        /// <summary>
        /// 改变坐骑的临时ID
        /// </summary>
        /// <param name="tempHorseID"></param>
        public static void ChangeTempHorseID(GameClient client, int tempHorseID)
        {
            client.ClientData.TempHorseID = tempHorseID;
            client.ClientData.StartTempHorseIDTicks = TimeUtil.NOW();

            //获取角色的临时坐骑ID
            tempHorseID = Global.GetTempHorseID(client);
            if (tempHorseID <= 0) return;

            //处理先前的坐骑
            if (client.ClientData.HorseDbID <= 0)
            {
                return;
            }

            HorseData horseData = Global.GetHorseDataByDbID(client, client.ClientData.HorseDbID);
            if (null == horseData)
            {
                return;
            }

            List<Object> objsList = Global.GetAll9Clients(client);
            if (null == objsList) return;

            //通知骑乘的的指令信息
            GameManager.ClientMgr.NotifyHorseCmd(Global._TCPManager.MySocketListener,
                Global._TCPManager.TcpOutPacketPool, client, 0, (int)HorseCmds.On, horseData.DbID, tempHorseID, horseData.BodyID, objsList);
        }

        /// <summary>
        /// 获取坐骑的临时的失败积分
        /// </summary>
        /// <param name="horseData"></param>
        /// <returns></returns>
        public static int GetHorseTempJiFen(HorseData horseData)
        {
            return 0; //暂时取消坐骑进阶的临时幸运点
            //long nowTicks = TimeUtil.NOW();
            //long maxOverTicks = GameManager.systemParamsList.GetParamValueIntByName("HorseTempJiFenTime") * 1000L;
            //if (nowTicks - horseData.JinJieTempTime >= maxOverTicks)
            //{
            //    return 0;
            //}

            //return horseData.JinJieTempNum;

            int dayID = TimeUtil.NowDateTime().DayOfYear;
            if (dayID != horseData.JinJieFailedDayID)
            {
                return 0;
            }

            return horseData.JinJieTempNum;
        }

        /// <summary>
        /// 增加坐骑的临时的失败积分
        /// </summary>
        /// <param name="horseData"></param>
        /// <returns></returns>
        public static void AddHorseTempJiFen(HorseData horseData, int tempNum)
        {
            return; //暂时取消坐骑进阶的临时幸运点
            if (tempNum <= 0) //强制清空临时的积分
            {
                horseData.JinJieTempNum = 0;
                return;
            }

            //long nowTicks = TimeUtil.NOW();
            //long maxOverTicks = GameManager.systemParamsList.GetParamValueIntByName("HorseTempJiFenTime") * 1000L;
            //if (nowTicks - horseData.JinJieTempTime >= maxOverTicks)
            //{
            //    horseData.JinJieTempTime = nowTicks;
            //    horseData.JinJieTempNum = tempNum;
            //    return;
            //}

            //horseData.JinJieTempTime = nowTicks;
            //horseData.JinJieTempNum += tempNum;

            int dayID = TimeUtil.NowDateTime().DayOfYear;
            if (dayID != horseData.JinJieFailedDayID)
            {
                horseData.JinJieFailedDayID = dayID;
                horseData.JinJieTempNum = tempNum;
                return;
            }

            horseData.JinJieTempNum += tempNum;
        }

        /// <summary>
        /// 获取坐骑临时积分的开始时间
        /// </summary>
        /// <param name="horseData"></param>
        /// <returns></returns>
        public static string GetHorseStrTempTime(HorseData horseData)
        {
            try
            {
                return (new DateTime(horseData.JinJieTempTime * 10000L)).ToString("yyyy-MM-dd HH:mm:ss");
            }
            catch (Exception)
            {
            }

            return "1900-01-01 12:00:00";
        }

        /// <summary>
        /// 为坐骑进阶添加积分
        /// </summary>
        /// <param name="horseData"></param>
        /// <param name="addNum"></param>
        /// <returns></returns>
        public static void AddHorseFailedNum(HorseData horseData, int addNum)
        {
            int dayID = TimeUtil.NowDateTime().DayOfYear;
            if (dayID == horseData.JinJieFailedDayID)
            {
                horseData.JinJieFailedNum += addNum;
            }
            else
            {
                horseData.JinJieFailedDayID = dayID;
                horseData.JinJieFailedNum = addNum;
            }

            //horseData.JinJieFailedNum += addNum;
        }

        /// <summary>
        /// 获取坐骑的失败积分
        /// </summary>
        /// <param name="horseData"></param>
        /// <returns></returns>
        public static int GetHorseFailedNum(HorseData horseData)
        {
            int jinJieFailedNum = 0;
            int dayID = TimeUtil.NowDateTime().DayOfYear;
            if (dayID == horseData.JinJieFailedDayID)
            {
                jinJieFailedNum = horseData.JinJieFailedNum;
            }
            else
            {
                jinJieFailedNum = 0;
            }

            //jinJieFailedNum = horseData.JinJieFailedNum;
            return (jinJieFailedNum + Global.GetHorseTempJiFen(horseData));
        }

        /// <summary>
        /// 坐骑的最大强化次数
        /// </summary>
        private static int[] HorseEnchanceNum = 
        {
            0,
            5,
            10,
            15,
            20,
            25,
            30,
            35,
            40,
            45,
            50
        };

        /// <summary>
        /// 坐骑的最大强化次数
        /// </summary>
        public static int GetHorseEnchanceNum(int horseID)
        {
            if (horseID < 0 || horseID >= HorseEnchanceNum.Length)
            {
                return 0;
            }

            return HorseEnchanceNum[horseID];
        }

        /// <summary>
        /// 坐骑的速度
        /// </summary>
        public static double[] HorseSpeedList = null;

        /// <summary>
        /// 获取坐骑增加的速度
        /// </summary>
        /// <param name="horseID"></param>
        /// <returns></returns>
        public static double GetHorseSpeed(int horseID)
        {
            if (null == HorseSpeedList)
            {
                HorseSpeedList = GameManager.systemParamsList.GetParamValueDoubleArrayByName("HorseSpeedList");
            }

            if (null == HorseSpeedList) return 0.0;
            if (horseID <= 0) return 0.0;
            if (horseID > HorseSpeedList.Length) return 0.0;
            return HorseSpeedList[horseID - 1];
        }

        /// <summary>
        /// 获取坐骑增加的速度
        /// </summary>
        /// <param name="horseID"></param>
        /// <returns></returns>
        public static double GetHorseSpeed(GameClient client)
        {
            if (client.ClientData.HorseDbID <= 0)
            {
                return 0.0;
            }

            HorseData horseData = Global.GetHorseDataByDbID(client, client.ClientData.HorseDbID);
            if (null == horseData)
            {
                return 0.0;
            }

            return Global.GetHorseSpeed(horseData.HorseID);
        }

        #endregion 坐骑管理

        #region 宠物管理

        /// <summary>
        /// 添加宠物数据
        /// </summary>
        /// <param name="dbID"></param>
        /// <returns></returns>
        public static void AddPetData(GameClient client, PetData petData)
        {
            if (null == client.ClientData.PetsDataList)
            {
                client.ClientData.PetsDataList = new List<PetData>();
            }

            lock (client.ClientData.PetsDataList) //会跨线程访问
            {
                client.ClientData.PetsDataList.Add(petData);
            }
        }

        /// <summary>
        /// 删除宠物数据通过数据库ID
        /// </summary>
        /// <param name="dbID"></param>
        /// <returns></returns>
        public static void RemovePetDataByDbID(GameClient client, int petDbID)
        {
            if (null == client.ClientData.PetsDataList)
            {
                return;
            }

            lock (client.ClientData.PetsDataList) //会跨线程访问
            {
                for (int i = 0; i < client.ClientData.PetsDataList.Count; i++)
                {
                    if (client.ClientData.PetsDataList[i].DbID == petDbID)
                    {
                        client.ClientData.PetsDataList.RemoveAt(i);
                        break;
                    }
                }
            }
        }

        /// <summary>
        /// 通过数据库ID定位宠物数据
        /// </summary>
        /// <param name="dbID"></param>
        /// <returns></returns>
        public static PetData GetPetDataByDbID(GameClient client, int dbID)
        {
            if (null == client.ClientData.PetsDataList) return null;

            lock (client.ClientData.PetsDataList) //会跨线程访问
            {
                for (int i = 0; i < client.ClientData.PetsDataList.Count; i++)
                {
                    if (client.ClientData.PetsDataList[i].DbID == dbID)
                    {
                        return client.ClientData.PetsDataList[i];
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 数据库命令添加宠物事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public static int AddPetDBCommand(TCPOutPacketPool pool, GameClient client, int petID, string petName, int petType, string props)
        {
            //先DBServer请求扣费
            TCPOutPacket tcpOutPacket = null;
            string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", client.ClientData.RoleID, petID, petName, petType, props);
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, pool, (int)TCPGameServerCmds.CMD_ADDPET, strcmd, out tcpOutPacket, client.ServerId);
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                return -1;
            }

            //添加数据库失败
            if (null == tcpOutPacket)
            {
                return -2;
            }

            //2011.05.29, 从.SendData后边移动到前边来，一是因为加密的原因，发送后会被加密，另外也是因为，这个有问题，一旦先发送，如果快的话，会被收回
            //tcpOutPacket， 自己再处理就会错误了，当时为什么放后边?
            //处理本地精简的好友列表数据
            PetData petData = DataHelper.BytesToObject<PetData>(tcpOutPacket.GetPacketBytes(), 6, tcpOutPacket.PacketDataSize - 6);
            if (null != petData)
            {
                Global.AddPetData(client, petData);
            }

            if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket))
            {
                //
                /*LogManager.WriteLog(LogTypes.Error, string.Format("向用户发送tcp数据失败: ID={0}, Size={1}, RoleID={2}, RoleName={3}",
                    tcpOutPacket.PacketCmdID,
                    tcpOutPacket.PacketDataSize,
                    client.ClientData.RoleID,
                    client.ClientData.RoleName));*/
            }

            return 0;
        }

        /// <summary>
        /// 数据库命令撵走宠物事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="client"></param>
        /// <param name="horseID"></param>
        /// <param name="props"></param>
        /// <returns></returns>
        public static int RemovePetDBCommand(TCPOutPacketPool pool, GameClient client, int dbID)
        {
            //先DBServer请求扣费
            TCPOutPacket tcpOutPacket = null;

            //roleID, PetDbID, "petname", "pettype", "feednum", "realivenum", "props", "isdel", "addtime", "level" };
            string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}", client.ClientData.RoleID, dbID, "*", "*", "*", "*", "*", 1, "*", "*");
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, pool, (int)TCPGameServerCmds.CMD_MODPET, strcmd, out tcpOutPacket, client.ServerId);
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                return -1;
            }

            //添加数据库失败
            if (null == tcpOutPacket)
            {
                return -2;
            }

            if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket))
            {
                //
                /*LogManager.WriteLog(LogTypes.Error, string.Format("向用户发送tcp数据失败: ID={0}, Size={1}, RoleID={2}, RoleName={3}",
                    tcpOutPacket.PacketCmdID,
                    tcpOutPacket.PacketDataSize,
                    client.ClientData.RoleID,
                    client.ClientData.RoleName));*/
            }

            //更新本地的数量
            Global.RemovePetDataByDbID(client, dbID);
            return 0;
        }

        /// <summary>
        /// 数据库命令更新宠物名称事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="client"></param>
        /// <param name="horseID"></param>
        /// <param name="props"></param>
        /// <returns></returns>
        public static int UpdatePetNameDBCommand(TCPOutPacketPool pool, GameClient client, PetData petData)
        {
            //先DBServer请求扣费
            TCPOutPacket tcpOutPacket = null;

            //roleID, PetDbID, "petname", "pettype", "feednum", "realivenum", "props", "isdel", "addtime", "level" };
            string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}", client.ClientData.RoleID, petData.DbID, petData.PetName, "*", "*", "*", "*", "*", "*", "*");
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, pool, (int)TCPGameServerCmds.CMD_MODPET, strcmd, out tcpOutPacket, client.ServerId);
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                return -1;
            }

            //添加数据库失败
            if (null == tcpOutPacket)
            {
                return -2;
            }

            if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket))
            {
                //
                /*LogManager.WriteLog(LogTypes.Error, string.Format("向用户发送tcp数据失败: ID={0}, Size={1}, RoleID={2}, RoleName={3}",
                    tcpOutPacket.PacketCmdID,
                    tcpOutPacket.PacketDataSize,
                    client.ClientData.RoleID,
                    client.ClientData.RoleName));*/
            }

            return 0;
        }

        /// <summary>
        /// 数据库命令增加喂养次数事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="client"></param>
        /// <param name="horseID"></param>
        /// <param name="props"></param>
        /// <returns></returns>
        public static int FeedPetDBCommand(TCPOutPacketPool pool, GameClient client, PetData petData, int feedNum)
        {
            petData.FeedNum += feedNum;
            int level = Global.GetPetLevel(petData);
            petData.Level = Global.GMax(petData.Level, level); //取最大值，防止回退

            //先DBServer请求扣费
            TCPOutPacket tcpOutPacket = null;

            //roleID, PetDbID, "petname", "pettype", "feednum", "realivenum", "props", "isdel", "addtime", "level" };
            string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}", client.ClientData.RoleID, petData.DbID, "*", "*", petData.FeedNum, "*", "*", "*", "*", petData.Level);
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, pool, (int)TCPGameServerCmds.CMD_MODPET, strcmd, out tcpOutPacket, client.ServerId);
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                return -1;
            }

            //添加数据库失败
            if (null == tcpOutPacket)
            {
                return -2;
            }

            if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket))
            {
                //
                /*LogManager.WriteLog(LogTypes.Error, string.Format("向用户发送tcp数据失败: ID={0}, Size={1}, RoleID={2}, RoleName={3}",
                    tcpOutPacket.PacketCmdID,
                    tcpOutPacket.PacketDataSize,
                    client.ClientData.RoleID,
                    client.ClientData.RoleName));*/
            }

            return 0;
        }

        /// <summary>
        /// 数据库命令升级为高级宠物事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="client"></param>
        /// <param name="horseID"></param>
        /// <param name="props"></param>
        /// <returns></returns>
        public static int UpLevelPetDBCommand(TCPOutPacketPool pool, GameClient client, PetData petData)
        {
            petData.PetType = 1;

            //先DBServer请求扣费
            TCPOutPacket tcpOutPacket = null;

            //roleID, PetDbID, "petname", "pettype", "feednum", "realivenum", "props", "isdel", "addtime", "level" };
            string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}", client.ClientData.RoleID, petData.DbID, "*", petData.PetType, "*", "*", "*", "*", "*", "*");
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, pool, (int)TCPGameServerCmds.CMD_MODPET, strcmd, out tcpOutPacket, client.ServerId);
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                return -1;
            }

            //添加数据库失败
            if (null == tcpOutPacket)
            {
                return -2;
            }

            if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket))
            {
                //
                /*LogManager.WriteLog(LogTypes.Error, string.Format("向用户发送tcp数据失败: ID={0}, Size={1}, RoleID={2}, RoleName={3}",
                    tcpOutPacket.PacketCmdID,
                    tcpOutPacket.PacketDataSize,
                    client.ClientData.RoleID,
                    client.ClientData.RoleName));*/
            }

            return 0;
        }

        /// <summary>
        /// 数据库命令增加复活次数事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="client"></param>
        /// <param name="horseID"></param>
        /// <param name="props"></param>
        /// <returns></returns>
        public static int RealivePetDBCommand(TCPOutPacketPool pool, GameClient client, PetData petData)
        {
            DateTime now = TimeUtil.NowDateTime();
            string today = now.ToString("yyyy-MM-dd HH$mm$ss");
            long ticks = (now.Ticks / 10000);

            petData.AddDateTime = ticks;
            petData.FeedNum = 0;
            petData.ReAliveNum = petData.ReAliveNum + 1;

            //先DBServer请求扣费
            TCPOutPacket tcpOutPacket = null;

            //roleID, PetDbID, "petname", "pettype", "feednum", "realivenum", "props", "isdel", "addtime", "level" };
            string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}", client.ClientData.RoleID, petData.DbID, "*", "*", petData.FeedNum, petData.ReAliveNum, "*", "*", today, "*");
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, pool, (int)TCPGameServerCmds.CMD_MODPET, strcmd, out tcpOutPacket, client.ServerId);
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                return -1;
            }

            //添加数据库失败
            if (null == tcpOutPacket)
            {
                return -2;
            }

            if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket))
            {
                //
                /*LogManager.WriteLog(LogTypes.Error, string.Format("向用户发送tcp数据失败: ID={0}, Size={1}, RoleID={2}, RoleName={3}",
                    tcpOutPacket.PacketCmdID,
                    tcpOutPacket.PacketDataSize,
                    client.ClientData.RoleID,
                    client.ClientData.RoleName));*/
            }

            return 0;
        }

        /// <summary>
        /// 数据库命令宠物放出事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="client"></param>
        /// <param name="horseID"></param>
        /// <param name="props"></param>
        /// <returns></returns>
        public static int PetOutDBCommand(TCPOutPacketPool pool, GameClient client, int dbID)
        {
            //先DBServer请求扣费
            string[] dbFields = null;
            string strcmd = string.Format("{0}:{1}", client.ClientData.RoleID, dbID);
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, pool, (int)TCPGameServerCmds.CMD_DB_PETOUT, strcmd, out dbFields, client.ServerId);
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                return -1;
            }

            if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[0]) < 0)
            {
                return -2;
            };

            return 0;
        }

        /// <summary>
        /// 数据库命令宠物收回事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="client"></param>
        /// <param name="horseID"></param>
        /// <param name="props"></param>
        /// <returns></returns>
        public static void PetInDBCommand(TCPOutPacketPool pool, GameClient client, int dbID)
        {
            //更新上线状态
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_PETIN,
                string.Format("{0}:{1}", client.ClientData.RoleID, dbID),
                null, client.ServerId);
        }

        /// <summary>
        /// 获取宠物的生命值
        /// </summary>
        /// <param name="petData"></param>
        /// <returns></returns>
        public static int GetPetLifeV(PetData petData)
        {
            if (null == petData) return 0;
            return 100;

            //long ticks = TimeUtil.NOW();
            //long totalTicks = ticks - petData.AddDateTime;
            //long totalDays = totalTicks / (60 * 60 * 24 * 1000);

            //int needLifeV = 100 - (int)totalDays * 35;
            //int feedLifeV = petData.FeedNum * 30;
            //return (needLifeV + feedLifeV);
        }

        /// <summary>
        /// 判断宠物的仓库功能被封掉了
        /// </summary>
        /// <param name="petData"></param>
        /// <returns></returns>
        public static bool IsPetNotUseGoods(PetData petData)
        {
            return (GetPetLifeV(petData) <= 35);
        }

        /// <summary>
        /// 判断宠物是否死掉了
        /// </summary>
        /// <param name="petData"></param>
        /// <returns></returns>
        public static bool IsPetDead(PetData petData)
        {
            return (GetPetLifeV(petData) <= 0);
        }

        /// <summary>
        /// 获取宠物的级别
        /// </summary>
        /// <param name="petData"></param>
        /// <returns></returns>
        public static int GetPetLevel(PetData petData)
        {
            if (petData.FeedNum <= 0)
            {
                return 1;
            }

            if (petData.FeedNum >= 1 && petData.FeedNum < 3)
            {
                return 2;
            }

            if (petData.FeedNum >= 3 && petData.FeedNum < 6)
            {
                return 3;
            }

            if (petData.FeedNum >= 6 && petData.FeedNum < 10)
            {
                return 4;
            }

            if (petData.FeedNum >= 10 && petData.FeedNum < 15)
            {
                return 5;
            }

            if (petData.FeedNum >= 15 && petData.FeedNum < 20)
            {
                return 6;
            }

            if (petData.FeedNum >= 20 && petData.FeedNum < 25)
            {
                return 7;
            }

            if (petData.FeedNum >= 25 && petData.FeedNum < 30)
            {
                return 8;
            }

            if (petData.FeedNum >= 30 && petData.FeedNum < 35)
            {
                return 9;
            }

            return 10;
        }

        #endregion 宠物管理

        #region 移动仓库物品管理

        /// <summary>
        /// 移动仓库最大的格子数---正好两页
        /// </summary>
        public static int MaxPortableGridNum = 120; // MU改成120 [3/13/2014 LiaoWei]

        /// <summary>
        /// 扩展单个移动仓库格子需要的元宝，固定每个格子50元宝，这个配置文件可以配置
        /// </summary>
        public static int OnePortableGridYuanBao = 5;

        /// <summary>
        /// 随身背包最大的格子数量 正好两页 每页36个,角色创建时默认开启48个
        /// </summary>
        public static int MaxBagGridNum = 100;

        /// <summary>
        /// 新角色默认开启50个背包格子
        /// </summary>
        public static int DefaultBagGridNum = 50;

        /// <summary>
        /// 新角色默认开启42个移动仓库格子
        /// </summary>
        public static int DefaultPortableGridNum = 60;  // MU改成60

        /// <summary>
        /// 扩展单个背包格子需要的元宝基数，没增加一个格子序号，消耗元宝加一个基数
        /// </summary>
        public static int OneBagGridYuanBao = 10;

        /// <summary>
        /// 金蛋仓库的最大格子数 40 * 20,正好20页
        /// </summary>
        public static int MaxJinDanGridNum = 240;   // MU 改成240 

        /// <summary>
        /// 精灵装备栏，最大格子数
        /// </summary>
        public static int MaxDamonGridNum = 4;   // MU 改成4 

        //每钻石对应多少开启时间
        public const int OpenGridSecondPerYuanBao = 300;

        /// <summary>
        /// 初始化背包相关参数 MaxPortableGridNum, OnePortableGridYuanBao, DefaultPortableGridNum, MaxBagGridNum, OneBagGridYuanBao, DefaultBagGridNum
        /// </summary>
        /// <returns></returns>
        public static void InitBagParams()
        {
            int[] bagGridParams = GameManager.systemParamsList.GetParamValueIntArrayByName("BagGridParams");

            if (null != bagGridParams && 6 == bagGridParams.Length)
            {
                if (bagGridParams[0] > 0)
                {
                    MaxPortableGridNum = bagGridParams[0];
                }

                if (bagGridParams[1] > 0)
                {
                    OnePortableGridYuanBao = bagGridParams[1];
                }

                if (bagGridParams[2] > 0)
                {
                    DefaultPortableGridNum = bagGridParams[2];
                }

                if (bagGridParams[3] > 0)
                {
                    MaxBagGridNum = bagGridParams[3];
                }

                if (bagGridParams[4] > 0)
                {
                    OneBagGridYuanBao = bagGridParams[4];
                }

                if (bagGridParams[5] > 0)
                {
                    DefaultBagGridNum = bagGridParams[5];
                }
            }
        }

        /// <summary>
        /// 返回扩展随身背包需要的元宝数量
        /// </summary>
        /// <param name="addNum"></param>
        /// <returns></returns>
        public static int GetExtBagGridNeedYuanBao(GameClient client, int addNum)
        {
            int bagCapacity = Global.GetSelfBagCapacity(client);

            //扩展起始格子 和 结束格子
            int extStartGrid = bagCapacity + 1;
            int extEndGrid = bagCapacity + addNum;

            int needYuanBao = 0;
            //循环叠加每个格子需要的元宝
            for (int pos = extStartGrid; pos <= extEndGrid; pos++)
            {
                needYuanBao += GetOneBagGridExtendNeedYuanBao(pos);//元宝数量是随位置叠加的，越往后开，基数越大
            }

            return needYuanBao;
        }

        /// <summary>
        /// 扩展单个背包需要的元宝数量
        /// </summary>
        /// <param name="?"></param>
        /// <returns></returns>
        public static int GetOneBagGridExtendNeedYuanBao(int extendPos)
        {
            int needYuanBao = (extendPos - DefaultBagGridNum) * OneBagGridYuanBao; // 元宝数量是随位置叠加的，越往后开，基数越大,最多不超过1000元宝
            if (needYuanBao > 10 * OneBagGridYuanBao)
            {
                needYuanBao = 10 * OneBagGridYuanBao;
            }

            return needYuanBao;
        }

        /// </summary>
        /// <param name="pool"></param>
        /// <param name="client"></param>
        /// <param name="horseID"></param>
        /// <param name="props"></param>
        /// <returns></returns>
        public static int ExtGridPortableBagDBCommand(TCPOutPacketPool pool, GameClient client, int addGridNum)
        {
            int bagCapacity = Global.GetPortableBagCapacity(client);
            if (bagCapacity >= MaxPortableGridNum)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(Global.GetLang("随身仓库最大格子数为{0}, 你的最大格子数已满"), MaxPortableGridNum), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.NoBagGrid);
                return -1;
            }

            if ((bagCapacity + addGridNum) > MaxPortableGridNum) //每个移动仓库限制为最大的个格子
            {
                if (MaxPortableGridNum - bagCapacity >= 5)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(Global.GetLang("随身仓库最大格子数为{0}, 请使用【5格仓库栏】来扩充"), MaxPortableGridNum), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                }
                else
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(Global.GetLang("随身仓库最大格子数为{0}, 请使用【1格仓库栏】来扩充"), MaxPortableGridNum), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                }

                return -2;
            }

            client.ClientData.MyPortableBagData.ExtGridNum += addGridNum;

            //通知数据库修改
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEPBINFO,
                string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.MyPortableBagData.ExtGridNum),
                null, client.ServerId);

            //将新的随身仓库数据通知自己
            GameManager.ClientMgr.NotifyPortableBagData(client);
            return 0;
        }

        // 增加接口开启仓库背包格子 [3/13/2014 LiaoWei]
        /// <summary>
        /// 取得需要的钻石
        /// </summary>
        /// <param name="addNum"></param>
        /// <returns></returns>
        public static int GetExtBagGridNeedYuanBaoForStorage(GameClient client, int addNum)
        {
            int bagCapacity = Global.GetPortableBagCapacity(client);

            //扩展起始格子 和 结束格子
            int extStartGrid = bagCapacity + 1;
            int extEndGrid = bagCapacity + addNum;

            int needYuanBao = 0;
            //循环叠加每个格子需要的元宝
            for (int pos = extStartGrid; pos <= extEndGrid; pos++)
            {
                needYuanBao += GetOneBagGridExtendNeedYuanBaoForStorage(pos);//元宝数量是随位置叠加的，越往后开，基数越大
            }

            return needYuanBao;
        }

        /// <summary>
        /// 取得开启单个仓库格子需要的钻石
        /// </summary>
        /// <param name="?"></param>
        /// <returns></returns>
        public static int GetOneBagGridExtendNeedYuanBaoForStorage(int extendPos)
        {
            int needYuanBao = (extendPos - DefaultPortableGridNum) * OnePortableGridYuanBao; // 元宝数量是随位置叠加的，越往后开，基数越大,最多不超过1000元宝
            if (needYuanBao > 10 * OnePortableGridYuanBao)
            {
                needYuanBao = 10 * OnePortableGridYuanBao;
            }

            return needYuanBao;
        }

        /// <summary>
        /// 使用元宝扩展移动仓库
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="client"></param>
        /// <param name="addGridNum"></param>
        /// <returns></returns>
        public static int ExtGridPortableBagWithYuanBao(TCPOutPacketPool pool, GameClient client, int addGridNum, int nUseZuanShi)
        {
            int bagCapacity = Global.GetPortableBagCapacity(client);
            if (bagCapacity >= MaxPortableGridNum)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(Global.GetLang("随身仓库最大格子数为{0}, 你的最大格子数已满"), MaxPortableGridNum), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                return -1;
            }

            addGridNum = Global.Clamp(addGridNum, 0, MaxPortableGridNum - bagCapacity);
            if (addGridNum <= 0)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(Global.GetLang("格子扩展数量{0}非法"), addGridNum), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                return -2;
            }

            //扩展单个格子需要的金币数量 * 扩展数量
            int needYuanBao = GetExtBagGridNeedYuanBaoForStorage(client, addGridNum);//OnePortableGridYuanBao * addGridNum;

            // 在线时长能够让玩家少花钱 [3/13/2014 LiaoWei]
            needYuanBao -= client.ClientData.OpenPortableGridTime / Global.OpenGridSecondPerYuanBao;

            //扣除元宝
            if (needYuanBao > 0)
            {
                if (nUseZuanShi >= 0 && nUseZuanShi < needYuanBao)
                {
                    client.sendCmd((int)TCPGameServerCmds.CMD_SPR_QUERYOPENPORTABLEGRIDTICK, string.Format("{0}", client.ClientData.OpenPortableGridTime));
                    return -2;
                }

                //自动扣除元宝
                //先DBServer请求扣费
                //扣除用户点卷
                if (!GameManager.ClientMgr.SubUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, needYuanBao, "扩充移动仓库"))
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(Global.GetLang("格子扩展所需钻石不足")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.NoZuanShi);
                    return -170;
                }

                //必须花费元宝才能扩展背包
                client.ClientData.MyPortableBagData.ExtGridNum += addGridNum;

                // 时间重置
                client.ClientData.OpenPortableGridTime = 0;

                Global.SaveRoleParamsInt64ValueToDB(client, RoleParamName.OpenPortableGridTick, client.ClientData.OpenPortableGridTime, true);

                //通知数据库修改
                GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEPBINFO, string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.MyPortableBagData.ExtGridNum), null, client.ServerId);

                //将新的随身仓库数据通知自己
                GameManager.ClientMgr.NotifyPortableBagData(client);
            }

            return 1;
        }

        /// <summary>
        /// 使用元宝扩展背包
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="client"></param>
        /// <param name="addGridNum"></param>
        /// <returns></returns>
        public static int ExtRoleBagNumWithYuanBao(TCPOutPacketPool pool, GameClient client, int addGridNum, int nUseZuanShi)
        {
            int bagCapacity = Global.GetSelfBagCapacity(client);
            if (bagCapacity >= MaxBagGridNum)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(Global.GetLang("随身仓库最大格子数为{0}, 你的最大格子数已满"), MaxBagGridNum), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                return -1;
            }

            addGridNum = Global.Clamp(addGridNum, 0, MaxBagGridNum - bagCapacity);

            if (addGridNum <= 0)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(Global.GetLang("格子扩展数量{0}非法"), addGridNum), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                return -2;
            }

            //扩展单个格子需要的金币数量 * 扩展数量
            int needYuanBao = GetExtBagGridNeedYuanBao(client, addGridNum);

            // 在线时长能够让玩家少花钱 [3/13/2014 LiaoWei]
            //long lTime = 0;
            //long nowTicks = TimeUtil.NOW();
            //long lTick = Global.GetRoleParamsInt64FromDB(client, RoleParamName.OpenGridTick);

            needYuanBao -= client.ClientData.OpenGridTime / Global.OpenGridSecondPerYuanBao;

            //扣除元宝
            if (needYuanBao > 0)
            {
                if (nUseZuanShi >= 0 && nUseZuanShi < needYuanBao)
                {
                    client.sendCmd((int)TCPGameServerCmds.CMD_SPR_QUERYOPENGRIDTICK, string.Format("{0}", client.ClientData.OpenGridTime));
                    return -2;
                }

                //自动扣除元宝
                //先DBServer请求扣费
                //扣除用户点卷
                if (!GameManager.ClientMgr.SubUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, needYuanBao, "扩充背包"))
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, pool, client, StringUtil.substitute(Global.GetLang("格子扩展所需钻石不够")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.NoZuanShi);
                    return -170;
                }
            }

            client.ClientData.BagNum += addGridNum;

            //通知数据库修改
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEROLEBAGNUM, string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.BagNum), null, client.ServerId);

            // 时间重置
            client.ClientData.OpenGridTime = 0;

            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.OpenGridTick, client.ClientData.OpenGridTime, true);

            return 1;
        }

        /// <summary>
        /// 根据物品DbID获取移动仓库物品的信息
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public static GoodsData GetPortableGoodsDataByDbID(GameClient client, int id)
        {
            if (null == client.ClientData.PortableGoodsDataList)
            {
                return null;
            }

            lock (client.ClientData.PortableGoodsDataList)
            {
                for (int i = 0; i < client.ClientData.PortableGoodsDataList.Count; i++)
                {
                    if (client.ClientData.PortableGoodsDataList[i].Id == id)
                    {
                        return client.ClientData.PortableGoodsDataList[i];
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 添加移动仓库物品
        /// </summary>
        /// <param name="goodsData"></param>
        public static void AddPortableGoodsData(GameClient client, GoodsData goodsData)
        {
            if (goodsData.Site != (int)SaleGoodsConsts.PortableGoodsID) return;

            /// 改变内存中对应的物品的数量
            Global.UpdatePortableGoodsNum(client, 1);

            if (null == client.ClientData.PortableGoodsDataList)
            {
                client.ClientData.PortableGoodsDataList = new List<GoodsData>();
            }

            lock (client.ClientData.PortableGoodsDataList)
            {
                client.ClientData.PortableGoodsDataList.Add(goodsData);
            }
        }

        /// <summary>
        /// 添加物品到移动仓库队列中
        /// </summary>
        /// <param name="client"></param>
        public static GoodsData AddPortableGoodsData(GameClient client, int id, int goodsID, int forgeLevel, int quality, int goodsNum, int binding, int site, string jewelList, string endTime,
            int addPropIndex, int bornIndex, int lucky, int strong, int ExcellenceProperty, int nAppendPropLev, int nEquipChangeLife)
        {
            GoodsData gd = new GoodsData()
            {
                Id = id,
                GoodsID = goodsID,
                Using = 0,
                Forge_level = forgeLevel,
                Starttime = "1900-01-01 12:00:00",
                Endtime = endTime,
                Site = site,
                Quality = quality,
                Props = "",
                GCount = goodsNum,
                Binding = binding,
                Jewellist = jewelList,
                BagIndex = 0,
                AddPropIndex = addPropIndex,
                BornIndex = bornIndex,
                Lucky = lucky,
                Strong = strong,
                ExcellenceInfo = ExcellenceProperty,
                AppendPropLev = nAppendPropLev,
                ChangeLifeLevForEquip = nEquipChangeLife,
            };

            Global.AddPortableGoodsData(client, gd);
            return gd;
        }

        /// <summary>
        /// 删除移动仓库物品
        /// </summary>
        /// <param name="goodsData"></param>
        public static void RemovePortableGoodsData(GameClient client, GoodsData goodsData)
        {
            /// 改变内存中对应的物品的数量
            Global.UpdatePortableGoodsNum(client, -1);

            if (null == client.ClientData.PortableGoodsDataList) return;

            lock (client.ClientData.PortableGoodsDataList)
            {
                client.ClientData.PortableGoodsDataList.Remove(goodsData);
            }
        }

        /// <summary>
        /// 移动仓库是否已经满？是否可以添加指定的物品
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static bool CanPortableAddGoods(GameClient client, int goodsID, int newGoodsNum, int binding)
        {
            int totalGridNum = client.ClientData.MyPortableBagData.GoodsUsedGridNum;
            int totalMaxGridCount = Global.GetPortableBagCapacity(client);
            return (totalGridNum < totalMaxGridCount);
        }

        /// <summary>
        /// 改变内存中宠物对应的物品的数量
        /// </summary>
        /// <param name="dbRoleInfo"></param>
        /// <param name="dbID"></param>
        /// <param name="added"></param>
        public static void UpdatePortableGoodsNum(GameClient client, int addNum)
        {
            //addNum 可以是负数
            client.ClientData.MyPortableBagData.GoodsUsedGridNum += addNum;
        }

        /// <summary>
        /// 获取移动仓库的容量
        /// </summary>
        /// <param name="petData"></param>
        /// <returns></returns>
        public static int GetPortableBagCapacity(GameClient client)
        {
            return client.ClientData.MyPortableBagData.ExtGridNum;
        }

        /// <summary>
        /// 获取随身背包的容量
        /// </summary>
        /// <param name="petData"></param>
        /// <returns></returns>
        public static int GetSelfBagCapacity(GameClient client)
        {
            return client.ClientData.BagNum;
        }

        /// <summary>
        /// 整理用户的移动仓库
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static void ResetPortableBagAllGoods(GameClient client)
        {
            if (null != client.ClientData.PortableGoodsDataList)
            {
                lock (client.ClientData.PortableGoodsDataList)
                {
                    Dictionary<string, GoodsData> oldGoodsDict = new Dictionary<string, GoodsData>();
                    List<GoodsData> toRemovedGoodsDataList = new List<GoodsData>();
                    for (int i = 0; i < client.ClientData.PortableGoodsDataList.Count; i++)
                    {
                        if (client.ClientData.PortableGoodsDataList[i].Using > 0)
                        {
                            continue;
                        }

                        client.ClientData.PortableGoodsDataList[i].BagIndex = 1;
                        int gridNum = Global.GetGoodsGridNumByID(client.ClientData.PortableGoodsDataList[i].GoodsID);
                        if (gridNum <= 1)
                        {
                            continue;
                        }

                        GoodsData oldGoodsData = null;
                        string key = string.Format("{0}_{1}_{2}", client.ClientData.PortableGoodsDataList[i].GoodsID,
                            client.ClientData.PortableGoodsDataList[i].Binding, Global.DateTimeTicks(client.ClientData.PortableGoodsDataList[i].Endtime));
                        if (oldGoodsDict.TryGetValue(key, out oldGoodsData))
                        {
                            int toAddNum = Global.GMin((gridNum - oldGoodsData.GCount), client.ClientData.PortableGoodsDataList[i].GCount);

                            oldGoodsData.GCount += toAddNum;

                            client.ClientData.PortableGoodsDataList[i].GCount -= toAddNum;
                            client.ClientData.PortableGoodsDataList[i].BagIndex = 1;
                            oldGoodsData.BagIndex = 1;
                            if (!ResetBagGoodsData(client, client.ClientData.PortableGoodsDataList[i]))
                            {
                                //出错, 停止整理
                                break;
                            }

                            if (oldGoodsData.GCount >= gridNum) //旧的物品已经加满
                            {
                                if (client.ClientData.PortableGoodsDataList[i].GCount > 0)
                                {
                                    oldGoodsDict[key] = client.ClientData.PortableGoodsDataList[i];
                                }
                                else
                                {
                                    oldGoodsDict.Remove(key);
                                    toRemovedGoodsDataList.Add(client.ClientData.PortableGoodsDataList[i]);
                                }
                            }
                            else
                            {
                                if (client.ClientData.PortableGoodsDataList[i].GCount <= 0)
                                {
                                    toRemovedGoodsDataList.Add(client.ClientData.PortableGoodsDataList[i]);
                                }
                            }
                        }
                        else
                        {
                            oldGoodsDict[key] = client.ClientData.PortableGoodsDataList[i];
                        }
                    }

                    for (int i = 0; i < toRemovedGoodsDataList.Count; i++)
                    {
                        client.ClientData.PortableGoodsDataList.Remove(toRemovedGoodsDataList[i]);
                    }

                    //按照物品分类排序
                    client.ClientData.PortableGoodsDataList.Sort(delegate(GoodsData x, GoodsData y)
                    {
                        //return (Global.GetGoodsCatetoriy(y.GoodsID) - Global.GetGoodsCatetoriy(x.GoodsID));
                        return (y.GoodsID - x.GoodsID);
                    });

                    int index = 0;
                    for (int i = 0; i < client.ClientData.PortableGoodsDataList.Count; i++)
                    {
                        if (client.ClientData.PortableGoodsDataList[i].Using > 0)
                        {
                            continue;
                        }

                        if (false && GameManager.Flag_OptimizationBagReset)
                        {
                            bool godosCountChanged = client.ClientData.PortableGoodsDataList[i].BagIndex > 0;
                            client.ClientData.PortableGoodsDataList[i].BagIndex = index++;
                            if (godosCountChanged)
                            {
                                if (!Global.ResetBagGoodsData(client, client.ClientData.PortableGoodsDataList[i]))
                                {
                                    //出错, 停止整理
                                    break;
                                }
                            }
                        }
                        else
                        {
                            client.ClientData.PortableGoodsDataList[i].BagIndex = index++;
                            if (!Global.ResetBagGoodsData(client, client.ClientData.PortableGoodsDataList[i]))
                            {
                                //出错, 停止整理
                                break;
                            }
                        }
                    }
                }
            }

            TCPOutPacket tcpOutPacket = null;

            if (null != client.ClientData.PortableGoodsDataList)
            {
                //先锁定
                lock (client.ClientData.PortableGoodsDataList)
                {
                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(client.ClientData.PortableGoodsDataList, Global._TCPManager.TcpOutPacketPool, (int)TCPGameServerCmds.CMD_SPR_RESETPORTABLEBAG);
                }
            }
            else
            {
                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(client.ClientData.PortableGoodsDataList, Global._TCPManager.TcpOutPacketPool, (int)TCPGameServerCmds.CMD_SPR_RESETPORTABLEBAG);
            }

            Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket);
        }

        /// <summary>
        /// 丢弃物品,丢弃到某个格子内部,成功返回true， 失败返回false
        /// </summary>
        /// <param name="goodsData"></param>
        public static bool AbandonGoods(GameClient client, GoodsData goodsData, int toGridX, int toGridY)
        {
            if (goodsData.Binding > 0)
            {
                return false;
            }

            GameManager.GoodsPackMgr.ProcessRoleAbandonGoods(Global._TCPManager.MySocketListener,
                Global._TCPManager.TcpOutPacketPool, client, goodsData, toGridX, toGridY);
            return true;
        }

        #endregion 移动仓库物品管理

        #region 金蛋仓库物品管理

        /// <summary>
        /// 根据物品DbID获取金蛋仓库物品的信息
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public static GoodsData GetJinDanGoodsDataByDbID(GameClient client, int id)
        {
            if (null == client.ClientData.JinDanGoodsDataList)
            {
                return null;
            }

            lock (client.ClientData.JinDanGoodsDataList)
            {
                for (int i = 0; i < client.ClientData.JinDanGoodsDataList.Count; i++)
                {
                    if (client.ClientData.JinDanGoodsDataList[i].Id == id)
                    {
                        return client.ClientData.JinDanGoodsDataList[i];
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 添加金蛋仓库物品
        /// </summary>
        /// <param name="goodsData"></param>
        public static void AddJinDanGoodsData(GameClient client, GoodsData goodsData)
        {
            if (goodsData.Site != (int)SaleGoodsConsts.JinDanGoodsID) return;

            if (null == client.ClientData.JinDanGoodsDataList)
            {
                client.ClientData.JinDanGoodsDataList = new List<GoodsData>();
            }

            lock (client.ClientData.JinDanGoodsDataList)
            {
                client.ClientData.JinDanGoodsDataList.Add(goodsData);
            }
        }

        /// <summary>
        /// 添加物品到金蛋仓库队列中
        /// </summary>
        /// <param name="client"></param>
        public static GoodsData AddJinDanGoodsData(GameClient client, int id, int goodsID, int forgeLevel, int quality, int goodsNum, int binding, int site, string jewelList, string endTime,
            int addPropIndex, int bornIndex, int lucky, int strong, int ExcellenceProperty, int nAppendPropLev, int nEquipChangeLife)
        {
            GoodsData gd = new GoodsData()
            {
                Id = id,
                GoodsID = goodsID,
                Using = 0,
                Forge_level = forgeLevel,
                Starttime = "1900-01-01 12:00:00",
                Endtime = endTime,
                Site = site,
                Quality = quality,
                Props = "",
                GCount = goodsNum,
                Binding = binding,
                Jewellist = jewelList,
                BagIndex = 0,
                AddPropIndex = addPropIndex,
                BornIndex = bornIndex,
                Lucky = lucky,
                Strong = strong,
                ExcellenceInfo = ExcellenceProperty,
                AppendPropLev = nAppendPropLev,
                ChangeLifeLevForEquip = nEquipChangeLife,
            };

            Global.AddJinDanGoodsData(client, gd);
            return gd;
        }

        /// <summary>
        /// 删除金蛋仓库物品
        /// </summary>
        /// <param name="goodsData"></param>
        public static void RemoveJinDanGoodsData(GameClient client, GoodsData goodsData)
        {
            if (null == client.ClientData.JinDanGoodsDataList) return;

            lock (client.ClientData.JinDanGoodsDataList)
            {
                client.ClientData.JinDanGoodsDataList.Remove(goodsData);
            }
        }

        /// <summary>
        /// 整理用户的金蛋仓库
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static void ResetJinDanBagAllGoods(GameClient client)
        {
            if (null != client.ClientData.JinDanGoodsDataList)
            {
                lock (client.ClientData.JinDanGoodsDataList)
                {
                    Dictionary<string, GoodsData> oldGoodsDict = new Dictionary<string, GoodsData>();
                    List<GoodsData> toRemovedGoodsDataList = new List<GoodsData>();
                    for (int i = 0; i < client.ClientData.JinDanGoodsDataList.Count; i++)
                    {
                        if (client.ClientData.JinDanGoodsDataList[i].Using > 0)
                        {
                            continue;
                        }

                        client.ClientData.JinDanGoodsDataList[i].BagIndex = 1;
                        int gridNum = Global.GetGoodsGridNumByID(client.ClientData.JinDanGoodsDataList[i].GoodsID);
                        if (gridNum <= 1)
                        {
                            continue;
                        }

                        GoodsData oldGoodsData = null;
                        string key = string.Format("{0}_{1}_{2}", client.ClientData.JinDanGoodsDataList[i].GoodsID,
                            client.ClientData.JinDanGoodsDataList[i].Binding, Global.DateTimeTicks(client.ClientData.JinDanGoodsDataList[i].Endtime));
                        if (oldGoodsDict.TryGetValue(key, out oldGoodsData))
                        {
                            int toAddNum = Global.GMin((gridNum - oldGoodsData.GCount), client.ClientData.JinDanGoodsDataList[i].GCount);

                            oldGoodsData.GCount += toAddNum;

                            client.ClientData.JinDanGoodsDataList[i].GCount -= toAddNum;
                            client.ClientData.JinDanGoodsDataList[i].BagIndex = 1;
                            oldGoodsData.BagIndex = 1;
                            if (!ResetBagGoodsData(client, client.ClientData.JinDanGoodsDataList[i]))
                            {
                                //出错, 停止整理
                                break;
                            }

                            if (oldGoodsData.GCount >= gridNum) //旧的物品已经加满
                            {
                                if (client.ClientData.JinDanGoodsDataList[i].GCount > 0)
                                {
                                    oldGoodsDict[key] = client.ClientData.JinDanGoodsDataList[i];
                                }
                                else
                                {
                                    oldGoodsDict.Remove(key);
                                    toRemovedGoodsDataList.Add(client.ClientData.JinDanGoodsDataList[i]);
                                }
                            }
                            else
                            {
                                if (client.ClientData.JinDanGoodsDataList[i].GCount <= 0)
                                {
                                    toRemovedGoodsDataList.Add(client.ClientData.JinDanGoodsDataList[i]);
                                }
                            }
                        }
                        else
                        {
                            oldGoodsDict[key] = client.ClientData.JinDanGoodsDataList[i];
                        }
                    }

                    for (int i = 0; i < toRemovedGoodsDataList.Count; i++)
                    {
                        client.ClientData.JinDanGoodsDataList.Remove(toRemovedGoodsDataList[i]);
                    }

                    //按照物品分类排序
                    client.ClientData.JinDanGoodsDataList.Sort(delegate(GoodsData x, GoodsData y)
                    {
                        //return (Global.GetGoodsCatetoriy(y.GoodsID) - Global.GetGoodsCatetoriy(x.GoodsID));
                        return (y.GoodsID - x.GoodsID);
                    });

                    int index = 0;
                    for (int i = 0; i < client.ClientData.JinDanGoodsDataList.Count; i++)
                    {
                        if (client.ClientData.JinDanGoodsDataList[i].Using > 0)
                        {
                            continue;
                        }

                        if (false && GameManager.Flag_OptimizationBagReset)
                        {
                            bool godosCountChanged = client.ClientData.JinDanGoodsDataList[i].BagIndex > 0;
                            client.ClientData.JinDanGoodsDataList[i].BagIndex = index++;
                            if (godosCountChanged)
                            {
                                if (!Global.ResetBagGoodsData(client, client.ClientData.JinDanGoodsDataList[i]))
                                {
                                    //出错, 停止整理
                                    break;
                                }
                            }
                        }
                        else
                        {
                            client.ClientData.JinDanGoodsDataList[i].BagIndex = index++;
                            if (!Global.ResetBagGoodsData(client, client.ClientData.JinDanGoodsDataList[i]))
                            {
                                //出错, 停止整理
                                break;
                            }
                        }
                    }
                }
            }

            TCPOutPacket tcpOutPacket = null;

            if (null != client.ClientData.JinDanGoodsDataList)
            {
                //先锁定
                lock (client.ClientData.JinDanGoodsDataList)
                {
                    tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(client.ClientData.JinDanGoodsDataList, Global._TCPManager.TcpOutPacketPool, (int)TCPGameServerCmds.CMD_SPR_RESETJINDANBAG);
                }
            }
            else
            {
                tcpOutPacket = DataHelper.ObjectToTCPOutPacket<List<GoodsData>>(client.ClientData.JinDanGoodsDataList, Global._TCPManager.TcpOutPacketPool, (int)TCPGameServerCmds.CMD_SPR_RESETJINDANBAG);
            }

            Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket);
        }

        /// <summary>
        /// 金蛋仓库是否已经满？是否可以添加指定的物品
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static bool CanAddGoodsToJinDanCangKu(GameClient client, int goodsID, int newGoodsNum, int binding, string endTime = Global.ConstGoodsEndTime, bool canUseOld = true)
        {
            if (client.ClientData.JinDanGoodsDataList == null)
            {
                return true;
            }

            /// 获取物品是否可以叠加的值
            int gridNum = GetGoodsGridNumByID(goodsID);
            gridNum = Global.GMax(gridNum, 1);

            bool findOldGrid = false;
            int totalGridNum = 0;
            lock (client.ClientData.JinDanGoodsDataList)
            {
                for (int i = 0; i < client.ClientData.JinDanGoodsDataList.Count; i++)
                {
                    totalGridNum++;
                    if (canUseOld && gridNum > 1) //是否可以共占
                    {
                        if (client.ClientData.JinDanGoodsDataList[i].GoodsID == goodsID &&
                            client.ClientData.JinDanGoodsDataList[i].Binding == binding &&
                            Global.DateTimeEqual(client.ClientData.JinDanGoodsDataList[i].Endtime, endTime))
                        {
                            if ((client.ClientData.JinDanGoodsDataList[i].GCount + newGoodsNum) <= gridNum)
                            {
                                findOldGrid = true;
                                break;
                            }
                        }
                    }
                }
            }

            if (findOldGrid)
            {
                return true;
            }

            int totalMaxGridCount = GetJinDanBagCapacity(client);
            return (totalGridNum < totalMaxGridCount);
        }

        /// <summary>
        ///  获取金蛋仓库的容量===容量默认就是最大容量===>金蛋仓库的容量值默认就是最大值
        /// </summary>
        /// <returns></returns>
        public static int GetJinDanBagCapacity(GameClient client)
        {
            return Global.MaxJinDanGridNum;
        }

        #endregion 金蛋仓库物品管理

        #region AOI(Area Of Interest)九宫格子移动管理

        /// <summary>
        /// 获取怪物对象的字符串唯一ID
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        //public static string GetMonsterStringID(int monsterID)
        //{
        //    return string.Format("Monster_{0}", monsterID);
        //}

        /// <summary>
        /// 获取精灵对象的字符串唯一ID
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        //public static string GetObjectStringID(Object obj)
        //{
        //    if (obj is GameClient)
        //    {
        //        return string.Format("Role_{0}", (obj as GameClient).ClientData.RoleID);
        //    }

        //    if (obj is Monster)
        //    {
        //        return string.Format("Monster_{0}", (obj as Monster).RoleID);
        //    }

        //    if (obj is GoodsPackItem)
        //    {
        //        return string.Format("GP_{0}", (obj as GoodsPackItem).AutoID);
        //    }

        //    if (obj is BiaoCheItem)
        //    {
        //        return string.Format("BC_{0}", (obj as BiaoCheItem).BiaoCheID);
        //    }

        //    if (obj is JunQiItem)
        //    {
        //        return string.Format("JQ_{0}", (obj as JunQiItem).JunQiID);
        //    }

        //    if (obj is NPC)
        //    {
        //        return string.Format("NPC_{0}", (obj as NPC).NpcID);
        //    }

        //    if (obj is Decoration)
        //    {
        //        return string.Format("Deco_{0}", (obj as Decoration).AutoID);
        //    }

        //    return "UnkownID_0";
        //}

        /// <summary>
        /// 获取精灵对象的整数ID
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        //public static int GetObjectIntID(Object obj)
        //{
        //    if (obj is GameClient)
        //    {
        //        return (obj as GameClient).ClientData.RoleID;
        //    }

        //    if (obj is Monster)
        //    {
        //        return (obj as Monster).RoleID;
        //    }

        //    if (obj is GoodsPackItem)
        //    {
        //        return (obj as GoodsPackItem).AutoID;
        //    }

        //    if (obj is BiaoCheItem)
        //    {
        //        return (obj as BiaoCheItem).BiaoCheID;
        //    }

        //    if (obj is JunQiItem)
        //    {
        //        return (obj as JunQiItem).JunQiID;
        //    }

        //    if (obj is NPC)
        //    {
        //        return (obj as NPC).NpcID;
        //    }

        //    if (obj is Decoration)
        //    {
        //        return (obj as Decoration).AutoID;
        //    }

        //    return -1;
        //}

        /// <summary>
        /// 获取精灵对象的位置
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        //public static Point GetObjectPosition(Object obj)
        //{
        //    if (obj is GameClient)
        //    {
        //        return new Point((obj as GameClient).ClientData.PosX, (obj as GameClient).ClientData.PosY);
        //    }

        //    if (obj is Monster)
        //    {
        //        return (obj as Monster).SafeCoordinate;
        //    }

        //    if (obj is GoodsPackItem)
        //    {
        //        return (obj as GoodsPackItem).FallPoint;
        //    }

        //    if (obj is BiaoCheItem)
        //    {
        //        return new Point((obj as BiaoCheItem).PosX, (obj as BiaoCheItem).PosY);
        //    }

        //    if (obj is JunQiItem)
        //    {
        //        return new Point((obj as JunQiItem).PosX, (obj as JunQiItem).PosY);
        //    }

        //    if (obj is NPC)
        //    {
        //        GameMap gameMap = GameManager.MapMgr.DictMaps[(obj as NPC).MapCode];
        //        return new Point((obj as NPC).GridPoint.X * gameMap.MapGridWidth + gameMap.MapGridWidth / 2, (obj as NPC).GridPoint.Y * gameMap.MapGridHeight + gameMap.MapGridHeight / 2);
        //    }

        //    if (obj is Decoration)
        //    {
        //        return (obj as Decoration).Pos;
        //    }

        //    return new Point(-1, -1);
        //}

        /// <summary>
        /// 获取精灵对象的现在所在的格子
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        //public static Point GetObjectGrid(Object obj, MapGrid mapGrid)
        //{
        //    if (null == obj) return new Point(-1, -1);
        //    Point pt = Global.GetObjectPosition(obj);
        //    if (-1 == pt.X && -1 == pt.Y)
        //    {
        //        return pt;
        //    }

        //    int centerCridX = (int)pt.X / mapGrid.MapGridWidth;
        //    int centerCridY = (int)pt.Y / mapGrid.MapGridHeight;
        //    return new Point(centerCridX, centerCridY);
        //}

        /// <summary>
        /// 根据ID获取对象
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        //public static Object GetObjectByIntID(int mapCode, string key)
        //{
        //    string[] fields = key.Split('_');
        //    if (fields.Length != 2) return null;

        //    int id = Global.SafeConvertToInt32(fields[1]);

        //    if (fields[0] == "Role")
        //    {
        //        return GameManager.ClientMgr.FindClient(id);
        //    }
        //    else if (fields[0] == "Monster")
        //    {
        //        return GameManager.MonsterMgr.FindMonster(mapCode, id);
        //    }
        //    else if (fields[0] == "GP")
        //    {
        //        return GameManager.GoodsPackMgr.FindGoodsPackItem(id);
        //    }
        //    else if (fields[0] == "BC")
        //    {
        //        return BiaoCheManager.FindBiaoCheByID(id);
        //    }
        //    else if (fields[0] == "JQ")
        //    {
        //        return JunQiManager.FindJunQiByID(id);
        //    }
        //    else if (fields[0] == "NPC")
        //    {
        //        return NPCGeneralManager.FindNPC(mapCode, id);
        //    }
        //    else if (fields[0] == "Deco")
        //    {
        //        return DecorationManager.FindDeco(id);
        //    }

        //    return null;
        //}

        /// <summary>
        /// 根据格子的键值获取格子的X和Y坐标
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        //public static Point GetGridXYByKey(string key)
        //{
        //    string[] fields = key.Split('_');
        //    if (fields.Length != 2) return new Point(-1, -1);

        //    int x = Global.SafeConvertToInt32(fields[0]);
        //    int y = Global.SafeConvertToInt32(fields[1]);
        //    return new Point(x, y);
        //}

        /// <summary>
        /// 九宫格中缓存的格子X大小
        /// </summary>
        public static int MaxCache9XGridNum = 10; //12 => 10 节省184 个格子的运算 => 8 进一步节省152个格子运算 =>10，8太小了。

        /// <summary>
        /// 九宫格中缓存的格子Y大小
        /// </summary>
        public static int MaxCache9YGridNum = 7; //12 => 10 节省184 个格子的运算 => 8 进一步节省152个格子运算 =>10，8太小了。
        //怪物搜寻敌人的时间差
        public static int MonsterSearchTimer = 1000; //用于怪物搜寻可视范围内敌人的时间基本值
        public static int MonsterSearchRandomTimer = 3000; //用于怪物搜寻可视范围内敌人的时间随机值

        /// <summary>
        /// 计算当前的九宫格子边界
        /// </summary>
        /// <param name="mapGrid"></param>
        /// <param name="centerCridX"></param>
        /// <param name="centerCridY"></param>
        /// <param name="startGridX"></param>
        /// <param name="startGridY"></param>
        /// <param name="endGridX"></param>
        /// <param name="endGridY"></param>
        private static void GetCurrent9Grid(MapGrid mapGrid, int centerCridX, int centerCridY, out int startGridX, out int startGridY, out int endGridX, out int endGridY)
        {
            startGridX = 0;
            startGridY = 0;
            endGridX = 0;
            endGridY = 0;

            //根据主角当前位置来加载周边地图切片
            /*if (centerCridX == 0)
            {
                startGridX = 0; endGridX = 2;
            }
            else if (centerCridX == mapGrid.MapGridXNum - 1)
            {
                startGridX = centerCridX - 2; endGridX = centerCridX;
            }
            else
            {
                startGridX = centerCridX - 1; endGridX = centerCridX + 1;
            }

            if (centerCridY == 0)
            {
                startGridY = 0; endGridY = 2;
            }
            else if (centerCridY == mapGrid.MapGridYNum - 1)
            {
                startGridY = centerCridY - 2; endGridY = centerCridY;
            }
            else
            {
                startGridY = centerCridY - 1; endGridY = centerCridY + 1;
            }*/

            startGridX = centerCridX - Global.MaxCache9XGridNum; endGridX = centerCridX + Global.MaxCache9XGridNum;

            // 横屏，没有必要是正方形
            startGridY = centerCridY - Global.MaxCache9YGridNum; endGridY = centerCridY + Global.MaxCache9YGridNum;

            startGridX = Global.GMax(startGridX, 0);
            startGridY = Global.GMax(startGridY, 0);
            endGridX = Global.GMin(endGridX, mapGrid.MapGridXNum - 1);
            endGridY = Global.GMin(endGridY, mapGrid.MapGridYNum - 1);
        }

        /// <summary>
        /// 查看自己的格子是否在对方的九宫格方位内
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="otherX"></param>
        /// <param name="otherY"></param>
        /// <returns></returns>
        private static bool In9Grid(int myX, int myY, int centerCridX, int centerCridY, int maxGridX, int maxGridY)
        {
            int startGridX = 0, startGridY = 0, endGridX = 0, endGridY = 0;

            //根据主角当前位置来加载周边地图切片
            /*if (centerCridX == 0)
            {
                startGridX = 0; endGridX = 2;
            }
            else if (centerCridX == maxGridX - 1)
            {
                startGridX = centerCridX - 2; endGridX = centerCridX;
            }
            else
            {
                startGridX = centerCridX - 1; endGridX = centerCridX + 1;
            }

            if (centerCridY == 0)
            {
                startGridY = 0; endGridY = 2;
            }
            else if (centerCridY == maxGridY - 1)
            {
                startGridY = centerCridY - 2; endGridY = centerCridY;
            }
            else
            {
                startGridY = centerCridY - 1; endGridY = centerCridY + 1;
            }

            startGridX = Global.GMax(startGridX, 0);
            startGridY = Global.GMax(startGridY, 0);
            endGridX = Global.GMin(endGridX, maxGridX - 1);
            endGridY = Global.GMin(endGridY, maxGridY - 1);*/

            startGridX = centerCridX - Global.MaxCache9XGridNum; endGridX = centerCridX + Global.MaxCache9XGridNum;
            startGridY = centerCridY - Global.MaxCache9YGridNum; endGridY = centerCridY + Global.MaxCache9YGridNum;

            startGridX = Global.GMax(startGridX, 0);
            startGridY = Global.GMax(startGridY, 0);
            endGridX = Global.GMin(endGridX, maxGridX - 1);
            endGridY = Global.GMin(endGridY, maxGridY - 1);

            for (int x = startGridX; x <= endGridX; x++)
            {
                for (int y = startGridY; y <= endGridY; y++)
                {
                    if (myX == x && myY == y)
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        //暂时保留备用的代码
        /*if (null != oldObjsDict && oldObjsDict.Count > 0)
        {
            List<string> prevRemoveObjList = new List<string>();
            foreach (var key in oldObjsDict.Keys)
            {
                Object obj = Global.GetObjectByIntID(client.ClientData.MapCode, key);
                if (null == obj)
                {
                    continue;
                }

                //获取精灵对象的现在所在的格子
                Point gridPoint = GetObjectGrid(obj, mapGrid);
                string newKey = string.Format("{0}_{1}", gridPoint.X, gridPoint.Y);
                if (null == oldGridsDict || !oldGridsDict.ContainsKey(newKey)) //如果旧的格子字典不存在，或者对象的现在位置在旧的格子字典中不存在了，则认为对象已经离开
                {
                    prevRemoveObjList.Add(key);
                }
            }

            for (int i = 0; i < prevRemoveObjList.Count; i++)
            {
                oldObjsDict.Remove(prevRemoveObjList[i]);
            }
        }*/

        /*
         * 1. 九宫格如果不记录当前给将谁发送给了自己，则会发生，一旦对方移动走了，如果对方正好是在地图边缘，不通知自己删除, 就是对方能看到自己，
         * 而自己看不到对方的情况，那么自己移动时从格子中动态查找要删除的对象时，就无法找到对方了，这样，导致，一直有一个对方的形象留在自己的场景中。
         * 2. 九宫格如果简单记录是否已经发送给自己了，则，如果对方主动离开，告诉自己场景删除了，恰恰隔开一个格子，这样自己再走过去，不会通知自己的场景中
         * 重新加载对方。
         */

        /*
        /// <summary>
        /// 处理角色移动时的获取场景中九宫格附近的对象的操作
        /// </summary>
        /// <param name="client"></param>
        /// <param name="toRemoveObjsList"></param>
        /// <param name="toAddObjsList"></param>
        public static void Get9GridObjects(GameClient client, out List<Object> toRemoveObjsList, out List<Object> toAddObjsList)
        {
            toRemoveObjsList = null;
            toAddObjsList = null;

            MapGrid mapGrid = GameManager.MapGridMgr.DictGrids[client.ClientData.MapCode];
            int centerCridX = client.ClientData.PosX / mapGrid.MapGridWidth;
            int centerCridY = client.ClientData.PosY / mapGrid.MapGridHeight;
            if (centerCridX == client.ClientData.CurrentGridX && centerCridY == client.ClientData.CurrentGridY)
            {
                return;
            }

            toRemoveObjsList = new List<Object>();
            toAddObjsList = new List<Object>();

            Dictionary<string, bool> oldObjsDict = client.ClientData.CurrentObjsDict;
            Dictionary<string, bool> newObjsDict = new Dictionary<string, bool>();

            Dictionary<string, bool> oldGridsDict = client.ClientData.CurrentGridsDict;
            Dictionary<string, bool> newGridsDict = new Dictionary<string, bool>();

            int startGridX = 0, startGridY = 0, endGridX = 0, endGridY = 0;

            //根据主角当前位置来加载周边地图切片
            Global.GetCurrent9Grid(mapGrid, centerCridX, centerCridY, out startGridX, out startGridY, out endGridX, out endGridY);

            for (int x = startGridX; x <= endGridX; x++)
            {
                for (int y = startGridY; y <= endGridY; y++)
                {
                    string key = string.Format("{0}_{1}", x, y);
                    if (!newGridsDict.ContainsKey(key))
                    {
                        newGridsDict.Add(key, true);
                    }

                    List<Object> objsList = mapGrid.FindObjects(x, y);
                    if (null == objsList)
                    {
                        continue;
                    }

                    for (int i = 0; i < objsList.Count; i++)
                    {
                        string objStringID = Global.GetObjectStringID(objsList[i]);

                        //如果是新的格子，则将对象加入新的列表(如果A后到，B先到，B离开到新的九宫格，则A追过去，此时必须执行此操作，否则A会看不到B)
                        if (null == oldGridsDict || !oldGridsDict.ContainsKey(key))
                        {
                            toAddObjsList.Add(objsList[i]);
                        }
                        else //如果是旧的格子, 则判断是否已经存在，否则也加入对象列表
                        {
                            if (null == oldObjsDict || !oldObjsDict.ContainsKey(objStringID))
                            {
                                toAddObjsList.Add(objsList[i]);
                            }
                        }

                        if (!newObjsDict.ContainsKey(objStringID))
                        {
                            newObjsDict.Add(objStringID, true);
                        }
                    }
                }
            }

            //对比新旧的对象字典，找出要删除的对象管理的加入删除列表
            if (null != oldObjsDict)
            {
                foreach (var key in oldObjsDict.Keys)
                {
                    if (!newObjsDict.ContainsKey(key))
                    {
                        Object obj = Global.GetObjectByIntID(client.ClientData.MapCode, key);
                        if (null != obj)
                        {
                            toRemoveObjsList.Add(obj);
                        }
                    }
                }
            }

            //对比新旧的格子字典, 找出要丢弃的格子，找出要丢弃格子中现存的对象，加入删除列表
            if (null != oldGridsDict && null != oldObjsDict)
            {
                foreach (var key in oldGridsDict.Keys)
                {
                    if (!newGridsDict.ContainsKey(key)) //如果是要丢弃的格子
                    {
                        //根据格子的键值获取格子的X和Y坐标
                        Point pt = Global.GetGridXYByKey(key);
                        if (-1 == (int)pt.X || -1 == (int)pt.Y)
                        {
                            continue;
                        }

                        List<Object> objsList = mapGrid.FindObjects((int)pt.X, (int)pt.Y);
                        if (null == objsList)
                        {
                            continue;
                        }

                        for (int i = 0; i < objsList.Count; i++)
                        {
                            string objStringID = Global.GetObjectStringID(objsList[i]);
                            if (oldObjsDict.ContainsKey(objStringID))
                            {
                                continue;
                            }

                            toRemoveObjsList.Add(objsList[i]);
                        }
                    }
                }
            }

            client.ClientData.CurrentGridX = centerCridX;
            client.ClientData.CurrentGridY = centerCridY;

            client.ClientData.CurrentObjsDict = newObjsDict;
            client.ClientData.CurrentGridsDict = newGridsDict;

            /// 转换对象列表
            toRemoveObjsList = ConvertObjsList(client.ClientData.MapCode, client.ClientData.CopyMapID, toRemoveObjsList);
            toAddObjsList = ConvertObjsList(client.ClientData.MapCode, client.ClientData.CopyMapID, toAddObjsList);
        }
        */


        private static readonly short[] ClientViewGridArray_and = {
            0,0,1,0,0,1,0,-1,-1,0,-1,1,1,-1,0,-2,2,0,0,2,-1,-1,1,1,-2,0,-2,1,-2,-1,-1,-2,0,-3,-3,0,1,-2,1,2,
            -1,2,0,3,2,-1,3,0,2,1,-4,0,0,-4,-3,-1,-1,-3,-1,3,-2,-2,3,-1,1,3,2,2,0,4,-3,1,1,-3,-2,2,2,-2,4,0,
            3,1,-5,0,2,-3,3,2,-3,-2,4,1,-4,-1,-4,1,1,-4,5,0,2,3,1,4,-3,2,-1,4,3,-2,-1,-4,-2,-3,-2,3,0,5,4,-1,
            0,-5,-6,0,4,-2,2,-4,-4,2,-3,-3,-4,-2,-2,-4,5,-1,-3,3,-1,5,3,-3,-5,-1,-2,4,0,6,1,5,-5,1,4,2,5,1,6,0,
            1,-5,-1,-5,0,-6,2,4,3,3,-7,0,-6,1,-2,-5,0,7,-1,-6,4,-3,-5,-2,-3,4,-6,-1,-2,5,1,-6,5,-2,-4,-3,-3,-4,2,-5,
            7,0,4,3,3,4,-5,2,2,5,1,6,-1,6,6,1,0,-7,6,-1,3,-4,-4,3,5,2,2,6,7,1,-1,7,5,-3,0,8,-2,6,7,-1,
            8,0,3,5,4,4,6,-2,6,2,1,7,5,3,2,-6,-1,-7,1,-7,-6,2,-4,4,4,-4,-5,3,3,-5,0,-8,-4,-4,-2,-6,-3,-5,-7,-1,
            -7,1,-5,-3,-6,-2,-3,5,-8,0,-1,8,3,-6,6,-3,7,-2,-6,3,-7,2,5,-4,2,-7,-4,5,4,-5,-5,4,-3,6,0,9,0,-9,-2,7,
            1,-8,-1,9,1,-9,-4,6,6,-4,2,-8,-5,5,4,-6,-6,4,-3,7,-2,8,5,-5,3,-7,5,-6,-4,7,3,-8,-2,9,-3,8,4,-7,1,-10,
            -1,10,2,-9,-5,6,-4,8,4,-8,-2,10,3,-9,2,-10,-3,9,-2,11,2,-11,-3,10,3,-10,
        };

        private const int ClientViewGridArray_and_Length = 193 * 2; //ClientViewGridArray_and.Length;//

        private static readonly short[] ClientViewGridArray_12 = {
            8,-1,2,7,1,8,5,4,6,3,3,6,7,2,8,1,4,5,9,0,9,-1,0,10,9,1,8,2,4,6,7,3,7,-3,5,5,6,4,8,-2,
            10,0,3,7,2,8,1,9,0,11,11,0,1,10,6,5,5,6,4,7,8,3,9,2,2,9,10,-1,9,-2,8,-3,6,-5,7,-4,12,0,7,-5,
            8,-4,6,-6,5,-7,0,12,11,-1,-1,11,9,-3,10,-2,8,-5,11,-2,7,-6,12,-1,4,-9,5,-8,-1,12,9,-4,6,-7,10,-3,-2,12,
        };

        private const int ClientViewGridArray_12_Length = 59 * 2; //ClientViewGridArray_12.Length;//

        private static readonly short[] ClientViewGridArray_21 = {
            -3,-6,-7,-2,-8,-1,-4,-5,-9,0,-2,-7,-1,-8,-8,1,-6,-3,-5,-4,-5,-5,-6,-4,-7,-3,-7,3,-8,2,-3,-7,-2,-8,-1,-9,-10,0,-9,1,
            0,-10,-4,-6,-9,-1,-8,-2,-8,3,-7,4,-6,5,-6,-5,-5,-6,-4,-7,0,-11,-11,0,-1,-10,-10,1,-9,2,-8,-3,-9,-2,-2,-9,-11,1,1,-11,
            -10,2,-9,3,-8,4,-12,0,-7,5,0,-12,-6,6,-5,7,-9,4,1,-12,-5,8,-6,7,-10,3,-11,2,-8,5,-4,9,-12,1,-7,6,2,-12,
        };

        //================================================================================
        public static readonly short[] ClientViewGridArray1 = {0,0,0,1,1,0,1,1,-1,-1,-1,0,-1,1,-1,2,0,-1,0,2,1,-1,1,2,2,-1,2,0,2,1,2,2,-2,-2,-2,-1,-2,0,-2,1,
            -2,2,-2,3,-1,-2,-1,3,0,-2,0,3,1,-2,1,3,2,-2,2,3,3,-2,3,-1,3,0,3,1,3,2,3,3,-3,-3,-3,-2,-3,-1,-3,0,-3,1,-3,2,-3,3,-3,4,-2,-3,-2,4,-1,-3,-1,4,0,-3,0,
            4,1,-3,1,4,2,-3,2,4,3,-3,3,4,4,-3,4,-2,4,-1,4,0,4,1,4,2,4,3,4,4,-4,-4,-4,-3,-4,-2,-4,-1,-4,0,-4,1,-4,2,-4,3,-4,4,-4,5,-3,-4,-3,5,-2,-4,-2,5,-1,-4,
            -1,5,0,-4,0,5,1,-4,1,5,2,-4,2,5,3,-4,3,5,4,-4,4,5,5,-4,5,-3,5,-2,5,-1,5,0,5,1,5,2,5,3,5,4,5,5,-5,-5,-5,-4,-5,-3,-5,-2,-5,-1,-5,0,-5,1,-5,2,-5,3,-5,
            4,-5,5,-5,6,-4,-5,-4,6,-3,-5,-3,6,-2,-5,-2,6,-1,-5,-1,6,0,-5,0,6,1,-5,1,6,2,-5,2,6,3,-5,3,6,4,-5,4,6,5,-5,5,6,6,-5,6,-4,6,-3,6,-2,6,-1,6,0,6,1,6,2,
            6,3,6,4,6,5,6,6,-6,-6,-6,-5,-6,-4,-6,-3,-6,-2,-6,-1,-6,0,-6,1,-6,2,-6,3,-6,4,-6,5,-6,6,-6,7,-5,-6,-5,7,-4,-6,-4,7,-3,-6,-3,7,-2,-6,-2,7,-1,-6,-1,7,
            0,-6,0,7,1,-6,1,7,2,-6,2,7,3,-6,3,7,4,-6,4,7,5,-6,5,7,6,-6,6,7,7,-6,7,-5,7,-4,7,-3,7,-2,7,-1,7,0,7,1,7,2,7,3,7,4,7,5,7,6,7,7,-7,-7,-7,-6,-7,-5,-7,
            -4,-7,-3,-7,-2,-7,-1,-7,0,-7,1,-7,2,-7,3,-7,4,-7,5,-7,6,-7,7,-7,8,-6,-7,-6,8,-5,-7,-5,8,-4,-7,-4,8,-3,-7,-3,8,-2,-7,-2,8,-1,-7,-1,8,0,-7,0,8,1,-7,
            1,8,2,-7,2,8,3,-7,3,8,4,-7,4,8,5,-7,5,8,6,-7,6,8,7,-7,7,8,8,-7,8,-6,8,-5,8,-4,8,-3,8,-2,8,-1,8,0,8,1,8,2,8,3,8,4,8,5,8,6,8,7,8,8,-8,-8,-8,-7,-8,-6,
            -8,-5,-8,-4,-8,-3,-8,-2,-8,-1,-8,0,-8,1,-8,2,-8,3,-8,4,-8,5,-8,6,-8,7,-8,8,-8,9,-7,-8,-7,9,-6,-8,-6,9,-5,-8,-5,9,-4,-8,-4,9,-3,-8,-3,9,-2,-8,-2,9,
            -1,-8,-1,9,0,-8,0,9,1,-8,1,9,2,-8,2,9,3,-8,3,9,4,-8,4,9,5,-8,5,9,6,-8,6,9,7,-8,7,9,8,-8,8,9,9,-8,9,-7,9,-6,9,-5,9,-4,9,-3,9,-2,9,-1,9,0,9,1,9,2,9,
            3,9,4,9,5,9,6,9,7,9,8,9,9,-9,-9,-9,-8,-9,-7,-9,-6,-9,-5,-9,-4,-9,-3,-9,-2,-9,-1,-9,0,-9,1,-9,2,-9,3,-9,4,-9,5,-9,6,-9,7,-9,8,-9,9,-9,10,-8,-9,-8,10,
            -7,-9,-7,10,-6,-9,-6,10,-5,-9,-5,10,-4,-9,-4,10,-3,-9,-3,10,-2,-9,-2,10,-1,-9,-1,10,0,-9,0,10,1,-9,1,10,2,-9,2,10,3,-9,3,10,4,-9,4,10,5,-9,5,10,6,-9
             ,6,10,7,-9,7,10,8,-9,8,10,9,-9,9,10,10,-9,10,-8,10,-7,10,-6,10,-5,10,-4,10,-3,10,-2,10,-1,10,0,10,1,10,2,10,3,10,4,10,5,10,6,10,7,10,8,10,9,10,10,
            -10,-10,-10,-9,-10,-8,-10,-7,-10,-6,-10,-5,-10,-4,-10,-3,-10,-2,-10,-1,-10,0,-10,1,-10,2,-10,3,-10,4,-10,5,-10,6,-10,7,-10,8,-10,9,-10,10,-10,11,-9,-10,
            -9,11,-8,-10,-8,11,-7,-10,-7,11,-6,-10,-6,11,-5,-10,-5,11,-4,-10,-4,11,-3,-10,-3,11,-2,-10,-2,11,-1,-10,-1,11,0,-10,0,11,1,-10,1,11,2,-10,2,11,3,-10,3,11,
            4,-10,4,11,5,-10,5,11,6,-10,6,11,7,-10,7,11,8,-10,8,11,9,-10,9,11,10,-10,10,11,11,-10,11,-9,11,-8,11,-7,11,-6,11,-5,11,-4,11,-3,11,-2,11,-1,11,0,11,1,11,2,
            11,3,11,4,11,5,11,6,11,7,11,8,11,9,11,10,11,11,-11,-11,-11,-10,-11,-9,-11,-8,-11,-7,-11,-6,-11,-5,-11,-4,-11,-3,-11,-2,-11,-1,-11,0,-11,1,-11,2,-11,3,-11,4,
            -11,5,-11,6,-11,7,-11,8,-11,9,-11,10,-11,11,-11,12,-10,-11,-10,12,-9,-11,-9,12,-8,-11,-8,12,-7,-11,-7,12,-6,-11,-6,12,-5,-11,-5,12,-4,-11,-4,12,-3,-11,-3,12,
            -2,-11,-2,12,-1,-11,-1,12,0,-11,0,12,1,-11,1,12,2,-11,2,12,3,-11,3,12,4,-11,4,12,5,-11,5,12,6,-11,6,12,7,-11,7,12,8,-11,8,12,9,-11,9,12,10,-11,10,12,11,-11,
            11,12,12,-11,12,-10,12,-9,12,-8,12,-7,12,-6,12,-5,12,-4,12,-3,12,-2,12,-1,12,0,12,1,12,2,12,3,12,4,12,5,12,6,12,7,12,8,12,9,12,10,12,11,12,12,-12,-12,-12,-11,
            -12,-10,-12,-9,-12,-8,-12,-7,-12,-6,-12,-5,-12,-4,-12,-3,-12,-2,-12,-1,-12,0,-12,1,-12,2,-12,3,-12,4,-12,5,-12,6,-12,7,-12,8,-12,9,-12,10,-12,11,-12,12,-12,13,
            -11,-12,-11,13,-10,-12,-10,13,-9,-12,-9,13,-8,-12,-8,13,-7,-12,-7,13,-6,-12,-6,13,-5,-12,-5,13,-4,-12,-4,13,-3,-12,-3,13,-2,-12,-2,13,-1,-12,-1,13,0,-12,0,13,1,
            -12,1,13,2,-12,2,13,3,-12,3,13,4,-12,4,13,5,-12,5,13,6,-12,6,13,7,-12,7,13,8,-12,8,13,9,-12,9,13,10,-12,10,13,11,-12,11,13,12,-12,12,13,13,-12,13,-11,13,-10,13,
            -9,13,-8,13,-7,13,-6,13,-5,13,-4,13,-3,13,-2,13,-1,13,0,13,1,13,2,13,3,13,4,13,5,13,6,13,7,13,8,13,9,13,10,13,11,13,12,13,13,-13,-13,-13,-12,-13,-11,-13,-10,-13,
            -9,-13,-8,-13,-7,-13,-6,-13,-5,-13,-4,-13,-3,-13,-2,-13,-1,-13,0,-13,1,-13,2,-13,3,-13,4,-13,5,-13,6,-13,7,-13,8,-13,9,-13,10,-13,11,-13,12,-13,13,-13,14,-12,-13,
            -12,14,-11,-13,-11,14,-10,-13,-10,14,-9,-13,-9,14,-8,-13,-8,14,-7,-13,-7,14,-6,-13,-6,14,-5,-13,-5,14,-4,-13,-4,14,-3,-13,-3,14,-2,-13,-2,14,-1,-13,-1,14,0,-13,0,
            14,1,-13,1,14,2,-13,2,14,3,-13,3,14,4,-13,4,14,5,-13,5,14,6,-13,6,14,7,-13,7,14,8,-13,8,14,9,-13,9,14,10,-13,10,14,11,-13,11,14,12,-13,12,14,13,-13,13,14,14,-13,
            14,-12,14,-11,14,-10,14,-9,14,-8,14,-7,14,-6,14,-5,14,-4,14,-3,14,-2,14,-1,14,0,14,1,14,2,14,3,14,4,14,5,14,6,14,7,14,8,14,9,14,10,14,11,14,12,14,13,14,14,-14,-14,
            -14,-13,-14,-12,-14,-11,-14,-10,-14,-9,-14,-8,-14,-7,-14,-6,-14,-5,-14,-4,-14,-3,-14,-2,-14,-1,-14,0,-14,1,-14,2,-14,3,-14,4,-14,5,-14,6,-14,7,-14,8,-14,9,-14,10,
            -14,11,-14,12,-14,13,-14,14,-14,15,-13,-14,-13,15,-12,-14,-12,15,-11,-14,-11,15,-10,-14,-10,15,-9,-14,-9,15,-8,-14,-8,15,-7,-14,-7,15,-6,-14,-6,15,-5,-14,-5,15,-4,
            -14,-4,15,-3,-14,-3,15,-2,-14,-2,15,-1,-14,-1,15,0,-14,0,15,1,-14,1,15,2,-14,2,15,3,-14,3,15,4,-14,4,15,5,-14,5,15,6,-14,6,15,7,-14,7,15,8,-14,8,15,9,-14,9,15,10,-14,
            10,15,11,-14,11,15,12,-14,12,15,13,-14,13,15,14,-14,14,15,15,-14,15,-13,15,-12,15,-11,15,-10,15,-9,15,-8,15,-7,15,-6,15,-5,15,-4,15,-3,15,-2,15,-1,15,0,15,1,15,2,15,3,
            15,4,15,5,15,6,15,7,15,8,15,9,15,10,15,11,15,12,15,13,15,14,15,15 };
        public const int ClientViewGridArray_Length1 = 900 * 2;
        //================================================================================

        private const int ClientViewGridArray_21_Length = 59 * 2; //ClientViewGridArray_21.Length;//

        public static readonly short[] ClientViewGridArray = {
                    0,0,1,0,0,1,0,-1,-1,0,-1,1,1,-1,0,-2,2,0,0,2,-1,-1,1,1,-2,0,-2,1,-2,-1,-1,-2,0,-3,-3,0,1,-2,1,2,
                    -1,2,0,3,2,-1,3,0,2,1,-4,0,0,-4,-3,-1,-1,-3,-1,3,-2,-2,3,-1,1,3,2,2,0,4,-3,1,1,-3,-2,2,2,-2,4,0,
                    3,1,-5,0,2,-3,3,2,-3,-2,4,1,-4,-1,-4,1,1,-4,5,0,2,3,1,4,-3,2,-1,4,3,-2,-1,-4,-2,-3,-2,3,0,5,4,-1,
                    0,-5,-6,0,4,-2,2,-4,-4,2,-3,-3,-4,-2,-2,-4,5,-1,-3,3,-1,5,3,-3,-5,-1,-2,4,0,6,1,5,-5,1,4,2,5,1,6,0,
                    1,-5,-1,-5,0,-6,2,4,3,3,-7,0,-6,1,-2,-5,0,7,-1,-6,4,-3,-5,-2,-3,4,-6,-1,-2,5,1,-6,5,-2,-4,-3,-3,-4,2,-5,
                    7,0,4,3,3,4,-5,2,2,5,1,6,-1,6,6,1,0,-7,6,-1,3,-4,-4,3,5,2,2,6,7,1,-1,7,5,-3,0,8,-2,6,7,-1,
                    8,0,3,5,4,4,6,-2,6,2,1,7,5,3,2,-6,-1,-7,1,-7,-6,2,-4,4,4,-4,-5,3,3,-5,0,-8,-4,-4,-2,-6,-3,-5,-7,-1,
                    -7,1,-5,-3,-6,-2,-3,5,-8,0,-1,8,8,-1,3,-6,2,7,6,-3,1,8,7,-2,-6,3,5,4,-7,2,6,3,5,-4,2,-7,3,6,-4,5,
                    7,2,4,-5,-5,4,-3,6,8,1,0,9,0,-9,-2,7,4,5,9,0,1,-8,9,-1,-1,9,0,10,1,-9,-4,6,6,-4,2,-8,9,1,8,2,
                    -5,5,4,-6,4,6,-6,4,-3,7,7,3,7,-3,5,5,6,4,-2,8,8,-2,10,0,5,-5,3,-7,3,7,2,8,1,9,0,11,11,0,1,10,
                    6,5,5,6,4,7,8,3,9,2,2,9,10,-1,5,-6,9,-2,-4,7,3,-8,-2,9,8,-3,-3,8,4,-7,1,-10,6,-5,-1,10,2,-9,7,-4,
                    -5,6,12,0,7,-5,8,-4,-4,8,6,-6,5,-7,0,12,4,-8,-2,10,3,-9,11,-1,-1,11,2,-10,9,-3,-3,9,10,-2,-2,11,8,-5,11,-2,
                    2,-11,7,-6,12,-1,4,-9,5,-8,-1,12,9,-4,6,-7,-3,10,3,-10,10,-3,-2,12,-11,2,-11,3,-10,3,-9,4,-9,5,-8,5,-8,6,-7,6,
                    -7,7,-6,7,-5,8,-5,9,-4,9,-4,10,-10,2,-9,3,-8,4,-7,5,-6,6,-5,7,-9,2,-8,3,-7,4,-6,5,-10,1,-9,1,-8,2,-7,3,
                    -8,1,-9,0,};

        public const int GoodsPackFallGridArray_Length = 100 * 2; //半径为7(100),半径为8(145)

        /// <summary>
        /// 282为最小的可见矩形区域,310为上下扩展1格,349为上下左右各扩展1格
        /// </summary>
        public const int ClientViewGridArray_Length = 282 * 2;

        public const int ClientViewOtherObject9GridNum = 252 * 2; //角色可以看到其他对象的格子范围索引数

        public const int ClientViewRole9GridMinNum = 150 * 2; //可看到其他角色的最小的可见范围(此值以后再调)
        public const int ClientViewRole9GridNormalNum = 282 * 2; //可看到其他角色的正常的可见范围参考值,矩形范围
        public const int ClientViewRole9GridCurrentNum = 282 * 2; //可看到其他角色的正常的可见范围参考值,矩形范围
        public static int ClientViewRoleGridlimitRoleNum = 1000; //单个格子显示的人数限制,当前无限制

        public const int ClientViewFakeRole9GridMinNum = 100 * 2;//可看到假人的最小的可见范围(此值以后再调)
        public const int ClientViewFakeRole9GridLimitNum = 252 * 2; //可看到其他角色的正常的可见范围参考值,16:9全屏幕可见
        public const int ClientViewFakeRole9GridCurrentNum = 252 * 2; //可看到其他角色的正常的可见范围参考值,16:9全屏幕可见
        public static int ClientViewFakeRoleGridlimitRoleNum = 10; //当前显示的假人限制每格子10个

        /// <summary>
        /// 处理角色移动时的获取场景中九宫格附近的对象的操作
        /// </summary>
        /// <param name="client"></param>
        /// <param name="toRemoveObjsList"></param>
        /// <param name="toAddObjsList"></param>
        /// 
        private static List<object> m_toAddObjsList_const = null;
        public static List<Object> m_toAddObjsList
        {
            get
            {
                if(m_toAddObjsList_const==null)
                {m_toAddObjsList_const=new List<object>();}
                return m_toAddObjsList_const;
            }
        }

        public static void RemoveFromAddObjsList(GameClient client)
        {
            if (null != m_toAddObjsList && null!=client)
            {
                for (int i = 0; i < m_toAddObjsList.Count; i++)
                {
                    if (client.ClientData.RoleID == (m_toAddObjsList[i] as GameClient).ClientData.RoleID)
                    {
                        m_toAddObjsList.RemoveAt(i);
                    }
                }
            }
        }

        public static void GetMapAllGameClient(int mapCode, out List<object> _GameClientList)
        {
            MapGrid mapGrid = GameManager.MapGridMgr.DictGrids[mapCode];
            mapGrid.GetGridClientForConsole(out _GameClientList);
        }
        //  
        public static void Get9GridObjects(GameClient client, out List<Object> toRemoveObjsList, out List<Object> toAddObjsList)
        {
            toRemoveObjsList = null;
            toAddObjsList = null;

            MapGrid mapGrid = GameManager.MapGridMgr.DictGrids[client.ClientData.MapCode];
            int centerCridX = client.ClientData.PosX / mapGrid.MapGridWidth;
            int centerCridY = client.ClientData.PosY / mapGrid.MapGridHeight;

            ///重置所有的值为0
            lock (client.ClientData.VisibleGrid9Objects)
            {
                List<Object> keysList = client.ClientData.VisibleGrid9Objects.Keys.ToList<Object>();
                int keysListCount = keysList.Count;

                for (int i = 0; i < keysListCount; i++)
                {
                    Object key = keysList[i];
                    client.ClientData.VisibleGrid9Objects[key] = 0;
                }
#if TestGrid2
                keysList = client.ClientData.VisibleMeGrid9GameClients.Keys.ToList<Object>();
                keysListCount = keysList.Count;
                for (int i = 0; i < keysListCount; i++)
                {
                    Object key = keysList[i];
                    client.ClientData.VisibleMeGrid9GameClients[key] = 0;
                }
#endif
            }
#if oldGrid
            //当前的九宫格范围坐标信息
            int startGridX = 0, startGridY = 0, endGridX = 0, endGridY = 0;

            //根据主角当前位置来加载周边地图切片
            Global.GetCurrent9Grid(mapGrid, centerCridX, centerCridY, out startGridX, out startGridY, out endGridX, out endGridY);

            for (int x = startGridX; x <= endGridX; x++)
            {
                for (int y = startGridY; y <= endGridY; y++)
#elif TestGrid2
            int fakeRoleGrid9Num = 0;
            for (int k = 0; k < ClientViewGridArray_and_Length; k += 2)
            {
                int x = ClientViewGridArray_and[k] + centerCridX;
                int y = ClientViewGridArray_and[k + 1] + centerCridY;
                if (x >= 0 && y >= 0 && x < mapGrid.MapGridXNum && y < mapGrid.MapGridYNum)
#else
            for (int k = 0; k < ClientViewGridArray_Length1; k += 2)
            {
                int x = ClientViewGridArray1[k] + centerCridX;
                int y = ClientViewGridArray1[k + 1] + centerCridY;
                if (x >= 0 && y >= 0 && x < mapGrid.MapGridXNum && y < mapGrid.MapGridYNum)
#endif
                {
                    //不管新旧格子，都需要处理，所以先获取
                    List<Object> objsList = mapGrid.FindObjects(x, y);
                    if (null == objsList || objsList.Count <= 0)
                    {
                        continue;
                    }

                    //更新状态值
                    lock (client.ClientData.VisibleGrid9Objects)
                    {
                        //依次判断各个对象
                        for (int i = 0; i < objsList.Count; i++)
                        {
                            IObject iObj = (objsList[i]) as IObject;
                            if (iObj.ObjectType != ObjectTypes.OT_NPC) //不是npc才可以, npc不区分副本
                            {
                                if (iObj.CurrentCopyMapID != client.CurrentCopyMapID) //这里就要跳过不同副本，否则，血色城堡这样的会非常极端，里面出现几万只怪物
                                {
                                    continue;
                                }
                            }

                            if (client.ClientData.VisibleGrid9Objects.ContainsKey(objsList[i]))
                            {
                                client.ClientData.VisibleGrid9Objects[objsList[i]] = 1;
                            }
                            else
                            {
                                client.ClientData.VisibleGrid9Objects[objsList[i]] = 2;
                            }
#if TestGrid2
                            //下面仅处理玩家对象
                            if (iObj.ObjectType == ObjectTypes.OT_CLIENT)
                            {
                                client.ClientData.VisibleMeGrid9GameClients[objsList[i]] = 1;
                            }
#endif
                        }
                    }
                }
            }

#if TestGrid2
            //处理自己能看到,但对方看不到自己的对象
            int fakeRoleGrid9Num2 = 0;
            for (int k = 0; k < ClientViewGridArray_12_Length; k += 2)
            {
                int x = ClientViewGridArray_12[k] + centerCridX;
                int y = ClientViewGridArray_12[k + 1] + centerCridY;
                if (x >= 0 && y >= 0 && x < mapGrid.MapGridXNum && y < mapGrid.MapGridYNum)
                {
                    //不管新旧格子，都需要处理，所以先获取
                    List<Object> objsList = mapGrid.FindObjects(x, y);
                    if (null == objsList || objsList.Count <= 0)
                    {
                        continue;
                    }

                    //更新状态值
                    lock (client.ClientData.VisibleGrid9Objects)
                    {
                        //依次判断各个对象
                        for (int i = 0; i < objsList.Count; i++)
                        {
                            IObject iObj = (objsList[i]) as IObject;
                            if (iObj.ObjectType != ObjectTypes.OT_NPC) //不是npc才可以, npc不区分副本
                            {
                                if (iObj.CurrentCopyMapID != client.CurrentCopyMapID) //这里就要跳过不同副本，否则，血色城堡这样的会非常极端，里面出现几万只怪物
                                {
                                    continue;
                                }
                            }

                            if (client.ClientData.VisibleGrid9Objects.ContainsKey(objsList[i]))
                            {
                                client.ClientData.VisibleGrid9Objects[objsList[i]] = 1;
                            }
                            else
                            {
                                client.ClientData.VisibleGrid9Objects[objsList[i]] = 2;
                            }
                        }
                    }
                }
            }

            //处理自己看不到但对付能看到自己的玩家对象
            for (int k = 0; k < ClientViewGridArray_21_Length; k += 2)
            {
                int x = ClientViewGridArray_21[k] + centerCridX;
                int y = ClientViewGridArray_21[k + 1] + centerCridY;
                if (x >= 0 && y >= 0 && x < mapGrid.MapGridXNum && y < mapGrid.MapGridYNum)
                {
                    //不管新旧格子，都需要处理，所以先获取
                    List<Object> objsList = mapGrid.FindGameClient(x, y);
                    if (null == objsList || objsList.Count <= 0)
                    {
                        continue;
                    }

                    //更新状态值
                    lock (client.ClientData.VisibleGrid9Objects)
                    {
                        for (int i = 0; i < objsList.Count; i++)
                        {
                            IObject iObj = (objsList[i]) as IObject;
                            if (iObj.ObjectType == ObjectTypes.OT_CLIENT && iObj.CurrentCopyMapID == client.CurrentCopyMapID) //相同副本地图才可见
                            {
                                client.ClientData.VisibleMeGrid9GameClients[objsList[i]] = 1;
                            }
                        }
                    }
                }
            }
#endif

            toRemoveObjsList = new List<Object>();
            toAddObjsList = new List<Object>();
            List<Object> toRemoveObjsList2 = new List<Object>();

            lock (client.ClientData.VisibleGrid9Objects)
            {
                //处理自己能看到的对象列表
                foreach (var key in client.ClientData.VisibleGrid9Objects.Keys)
                {
                    int value = client.ClientData.VisibleGrid9Objects[key];
                    if (0 == value)
                    {
                        //设置怪物的可见角色个数
                        if (key is Monster)
                        {
                            if ((key as Monster).CurrentCopyMapID == client.ClientData.CopyMapID)
                            {
                                (key as Monster).VisibleClientsNum--;
                            }
                        }

                        toRemoveObjsList.Add(key);
                    }
                    else if (2 == value)
                    {
                        //设置怪物的可见角色个数
                        if (key is Monster)
                        {
                            if ((key as Monster).CurrentCopyMapID == client.ClientData.CopyMapID)
                            {
                                (key as Monster).VisibleClientsNum++;
                            }
                        }

                        toAddObjsList.Add(key);
                    }
                }

                for (int i = 0; i < toRemoveObjsList.Count; i++)
                {
                    client.ClientData.VisibleGrid9Objects.Remove(toRemoveObjsList[i]);
                }

#if TestGrid2
                //处理能看到自己的玩家列表
                foreach (var key in client.ClientData.VisibleMeGrid9GameClients.Keys)
                {
                    int value = client.ClientData.VisibleMeGrid9GameClients[key];
                    if (0 == value)
                    {
                        toRemoveObjsList2.Add(key);
                    }
                }

                for (int i = 0; i < toRemoveObjsList2.Count; i++)
                {
                    client.ClientData.VisibleGrid9Objects.Remove(toRemoveObjsList2[i]);
                }
#endif
            }

            /// 转换对象列表
            /// 切换副本的时候可能被ConvertObjsList函数中的CurrentCopyMapID != copyMapID删除掉
            //toRemoveObjsList = ConvertObjsList(client.ClientData.MapCode, client.ClientData.CopyMapID, toRemoveObjsList);
            toAddObjsList = ConvertObjsList(client.ClientData.MapCode, client.ClientData.CopyMapID, toAddObjsList);
        }

        /// <summary>
        /// 获取所有的9宫格中的对象
        /// </summary>
        /// <param name="client"></param>
        /// <param name="objsList"></param>
        public static List<Object> GetAll9GridObjects(IObject obj)
        {
            if (null == obj)
            {
                return null;
            }

            List<Object> list = null;
            if (obj is GameClient) //直接利用visibleObjects
            {
                //获取角色周围所有的9宫格中的对象
                //HX_Server    
                return Global.GetAll9GridObjectsForClient(obj as GameClient);
            }

            GameMap gameMap = GameManager.MapMgr.DictMaps[obj.CurrentMapCode];
            Point grid = obj.CurrentGrid;
            int posX = (int)(grid.X * gameMap.MapGridWidth + gameMap.MapGridWidth / 2);
            int posY = (int)(grid.Y * gameMap.MapGridHeight + gameMap.MapGridHeight / 2);
            list = GetAll9GridObjects2(obj.CurrentMapCode, posX, posY, obj.CurrentCopyMapID);

            return list;
        }

        /// <summary>
        /// 获取可以看到此对象的玩家列表,梯形范围
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public static List<Object> GetAll9GridGameClient(IObject obj)
        {
            if (null == obj)
            {
                return null;
            }

            List<Object> list = null;
            if (obj is GameClient) //直接利用visibleObjects
            {
                //获取角色周围所有的9宫格中的对象
                return Global.GetAll9GridGameClientForClient(obj as GameClient);
            }

            GameMap gameMap = GameManager.MapMgr.DictMaps[obj.CurrentMapCode];
            Point grid = obj.CurrentGrid;
            int posX = (int)(grid.X * gameMap.MapGridWidth + gameMap.MapGridWidth / 2);
            int posY = (int)(grid.Y * gameMap.MapGridHeight + gameMap.MapGridHeight / 2);
            list = GetAll9GridGameClient(obj.CurrentMapCode, posX, posY, obj.CurrentCopyMapID); //换成更省格子的方法

            return list;
        }

        /// <summary>
        /// 获取角色周围所有的9宫格中的对象
        /// </summary>
        /// <param name="client"></param>
        /// <param name="objsList"></param>
        public static List<Object> GetAll9GridObjectsForClient(GameClient client)
        {
            List<Object> objsList = new List<Object>();

            lock (client.ClientData.VisibleGrid9Objects)
            {
                List<Object> keysList = client.ClientData.VisibleGrid9Objects.Keys.ToList<Object>();
                for (int i = 0; i < keysList.Count; i++)
                {
                    var obj = keysList[i];
                    objsList.Add(obj);
                }
            }

            if (objsList.Count <= 0)
            {
                objsList = null;
            }

            /// 转换对象列表
            objsList = ConvertObjsList(client.CurrentMapCode, client.CurrentCopyMapID, objsList);
            return objsList;
        }

        public static List<Object> GetAll9GridGameClientForClient(GameClient client)
        {
            List<Object> objsList = new List<Object>();

            lock (client.ClientData.VisibleGrid9Objects)
            {
                List<Object> keysList = client.ClientData.VisibleMeGrid9GameClients.Keys.ToList<Object>();
                for (int i = 0; i < keysList.Count; i++)
                {
                    var obj = keysList[i];
                    objsList.Add(obj);
                }
            }

            if (objsList.Count <= 0)
            {
                objsList = null;
            }

            /// 转换对象列表
            objsList = ConvertObjsList(client.CurrentMapCode, client.CurrentCopyMapID, objsList);
            return objsList;
        }

        /// <summary>
        /// 获取所有的9宫格中的对象
        /// </summary>
        /// <param name="client"></param>
        /// <param name="objsList"></param>
        public static List<Object> GetAll9GridObjects2(int mapCode, int toX, int toY, int copyMapID)
        {
            List<Object> objsList = new List<Object>();
            MapGrid mapGrid = GameManager.MapGridMgr.DictGrids[mapCode];
            int centerCridX = toX / mapGrid.MapGridWidth;
            int centerCridY = toY / mapGrid.MapGridHeight;

#if oldGrid
            int startGridX = 0, startGridY = 0, endGridX = 0, endGridY = 0;

            //根据主角当前位置来加载周边地图切片
            Global.GetCurrent9Grid(mapGrid, centerCridX, centerCridY, out startGridX, out startGridY, out endGridX, out endGridY);

            for (int x = startGridX; x <= endGridX; x++)
            {
                for (int y = startGridY; y <= endGridY; y++)
#else
            int roleGrid9Num = 0;
            int fakeRoleGrid9Num = 0;
            for (int k = 0; k < ClientViewGridArray_Length1; k += 2)
            {
                int x = ClientViewGridArray1[k] + centerCridX;
                int y = ClientViewGridArray1[k + 1] + centerCridY;
                if (x >= 0 && y >= 0 && x < mapGrid.MapGridXNum && y < mapGrid.MapGridYNum)
#endif
                {
                    List<Object> tempObjsList = mapGrid.FindObjects((int)x, (int)y);
                    if (null == tempObjsList)
                    {
                        continue;
                    }

                    for (int i = 0; i < tempObjsList.Count; i++)
                    {
                        if (!(tempObjsList[i] is NPC)) //防止大量刷怪的副本中的遍历量过大
                        {
                            if ((tempObjsList[i] as IObject).CurrentCopyMapID != copyMapID)
                            {
                                continue;
                            }
                        }
#if TestGrid2
                        ObjectTypes objType = (tempObjsList[i] as IObject).ObjectType;
                        if (objType == ObjectTypes.OT_FAKEROLE)
                        {
                            if (k > ClientViewFakeRole9GridCurrentNum)
                            {
                                continue;
                            }
                            if (fakeRoleGrid9Num++ > ClientViewFakeRoleGridlimitRoleNum)
                            {
                                continue;
                            }
                        }
                        //else if (objType == ObjectTypes.OT_CLIENT)
                        //{
                        //    if (k > ClientViewRole9GridCurrentNum)
                        //    {
                        //        continue;
                        //    }
                        //    if (roleGrid9Num++ > ClientViewRoleGridlimitRoleNum)
                        //    {
                        //        continue;
                        //    }
                        //}
#endif
                        objsList.Add(tempObjsList[i]);
                    }
                }
            }

            if (objsList.Count <= 0)
            {
                objsList = null;
            }

            /// 转换对象列表
            objsList = ConvertObjsList(mapCode, copyMapID, objsList);

            return objsList;
        }

        /// <summary>
        /// 获取9宫格内的对象列表,梯形范围,所有看得到这个格子的对象
        /// </summary>
        /// <param name="mapCode"></param>
        /// <param name="toX"></param>
        /// <param name="toY"></param>
        /// <param name="copyMapID"></param>
        /// <returns></returns>
        public static List<Object> GetAll9GridObjects2BeVisible(int mapCode, int toX, int toY, int copyMapID)
        {
            List<Object> objsList = new List<Object>();
            MapGrid mapGrid = GameManager.MapGridMgr.DictGrids[mapCode];
            int centerCridX = toX / mapGrid.MapGridWidth;
            int centerCridY = toY / mapGrid.MapGridHeight;

#if oldGrid
            int startGridX = 0, startGridY = 0, endGridX = 0, endGridY = 0;

            //根据主角当前位置来加载周边地图切片
            Global.GetCurrent9Grid(mapGrid, centerCridX, centerCridY, out startGridX, out startGridY, out endGridX, out endGridY);

            for (int x = startGridX; x <= endGridX; x++)
            {
                for (int y = startGridY; y <= endGridY; y++)
#else
            int roleGrid9Num = 0;
            int fakeRoleGrid9Num = 0;
            for (int k = 0; k < ClientViewOtherObject9GridNum; k += 2)
            {
                int x = centerCridX - ClientViewGridArray[k];
                int y = centerCridY - ClientViewGridArray[k + 1];
                if (x >= 0 && y >= 0 && x < mapGrid.MapGridXNum && y < mapGrid.MapGridYNum)
#endif
                {
                    List<Object> tempObjsList = mapGrid.FindObjects((int)x, (int)y);
                    if (null == tempObjsList)
                    {
                        continue;
                    }

                    for (int i = 0; i < tempObjsList.Count; i++)
                    {
                        if (!(tempObjsList[i] is NPC)) //防止大量刷怪的副本中的遍历量过大
                        {
                            if ((tempObjsList[i] as IObject).CurrentCopyMapID != copyMapID)
                            {
                                continue;
                            }
                        }
#if TestGrid2
                        ObjectTypes objType = (tempObjsList[i] as IObject).ObjectType;
                        if (objType == ObjectTypes.OT_FAKEROLE)
                        {
                            if (k > ClientViewFakeRole9GridCurrentNum)
                            {
                                continue;
                            }
                            if (fakeRoleGrid9Num++ > ClientViewFakeRoleGridlimitRoleNum)
                            {
                                continue;
                            }
                        }
                        //else if (objType == ObjectTypes.OT_CLIENT)
                        //{
                        //    if (k > ClientViewRole9GridCurrentNum)
                        //    {
                        //        continue;
                        //    }
                        //    if (roleGrid9Num++ > ClientViewRoleGridlimitRoleNum)
                        //    {
                        //        continue;
                        //    }
                        //}
#endif
                        objsList.Add(tempObjsList[i]);
                    }
                }
            }

            if (objsList.Count <= 0)
            {
                objsList = null;
            }

            /// 转换对象列表
            objsList = ConvertObjsList(mapCode, copyMapID, objsList);

            return objsList;
        }

        /// <summary>
        /// 获取9宫格内的玩家列表,梯形范围,所有看得到这个格子的玩家
        /// </summary>
        /// <param name="mapCode"></param>
        /// <param name="toX"></param>
        /// <param name="toY"></param>
        /// <param name="copyMapID"></param>
        /// <returns></returns>
        public static List<Object> GetAll9GridGameClient(int mapCode, int toX, int toY, int copyMapID)
        {
            List<Object> objsList = new List<Object>();
            MapGrid mapGrid = GameManager.MapGridMgr.DictGrids[mapCode];
            int centerCridX = toX / mapGrid.MapGridWidth;
            int centerCridY = toY / mapGrid.MapGridHeight;

            for (int k = 0; k < ClientViewOtherObject9GridNum; k += 2)
            {
                int x = centerCridX - ClientViewGridArray[k];
                int y = centerCridY - ClientViewGridArray[k + 1];
                if (x >= 0 && y >= 0 && x < mapGrid.MapGridXNum && y < mapGrid.MapGridYNum)
                {
                    List<Object> tempObjsList = mapGrid.FindGameClient((int)x, (int)y);
                    if (null == tempObjsList)
                    {
                        continue;
                    }

                    for (int i = 0; i < tempObjsList.Count; i++)
                    {
                        if ((tempObjsList[i] is GameClient)) //防止大量刷怪的副本中的遍历量过大
                        {
                            objsList.Add(tempObjsList[i]);
                        }
                    }
                }
            }

            if (objsList.Count <= 0)
            {
                objsList = null;
            }

            /// 转换对象列表
            objsList = ConvertObjsList(mapCode, copyMapID, objsList);

            return objsList;
        }

        /// <summary>
        /// 获取9宫格中的所有角色对象
        /// </summary>
        /// <param name="client"></param>
        /// <param name="objsList"></param>
        public static List<Object> GetAll9Clients(IObject obj)
        {
            //Point pos = obj.CurrentPos;
#if TestGrid2
            return Global.GetAll9GridGameClient(obj);
#else
            return Global.GetAll9GridObjects(obj);
#endif
        }

        /// <summary>
        /// 获取9宫格中的所有角色对象
        /// 查找梯形范围的对象,能看到自己的所有人
        /// </summary>
        /// <param name="client"></param>
        /// <param name="objsList"></param>
        public static List<Object> GetAll9Clients2(int mapCode, int toX, int toY, int copyMapID)
        {
            //List<Object> objsList = new List<Object>();

            //List<Object> mapObjsList = GameManager.ClientMgr.GetMapClients(mapCode);
            //if (null == mapObjsList || mapObjsList.Count <= 0)
            //{
            //    return objsList;
            //}

            //GameMap gameMap = GameManager.MapMgr.DictMaps[mapCode];
            //Point objGrid = new Point((int)(toX / gameMap.MapGridWidth), (int)(toY / gameMap.MapGridHeight));
            //int objCurrentCopyMapID = copyMapID;

            //GameClient client = null;
            //for (int i = 0; i < mapObjsList.Count; i++)
            //{
            //    client = mapObjsList[i] as GameClient;
            //    if (client.CurrentCopyMapID != objCurrentCopyMapID) //过滤副本角色
            //    {
            //        continue;
            //    }

            //    Point clientGrid = new Point((int)(client.ClientData.PosX / gameMap.MapGridWidth), (int)(client.ClientData.PosY / gameMap.MapGridHeight));
            //    if (Math.Abs(clientGrid.X - objGrid.X) <= Global.MaxCache9GridNum &&
            //        Math.Abs(clientGrid.Y - objGrid.Y) <= Global.MaxCache9GridNum)
            //    {
            //        objsList.Add(client);
            //    }
            //}

            //return objsList;
#if TestGrid2
            return Global.GetAll9GridGameClient(mapCode, toX, toY, copyMapID); //使用这个专用的函数获取,梯形范围,以减少消耗
#else
            return Global.GetAll9GridObjects2(mapCode, toX, toY, copyMapID);
#endif
        }

        /// <summary>
        /// 转换对象列表
        /// </summary>
        /// <param name="objsList"></param>
        /// <returns></returns>
        public static List<Object> ConvertObjsList(int mapCode, int copyMapID, List<Object> objsList, bool onlyGameClient = false)
        {
            if (copyMapID <= 0) //不进行过滤
            {
                return objsList;
            }

            MapTypes mapType = GetMapType(mapCode);
            if (MapTypes.Normal == mapType)
            {
                return objsList;
            }

            if (null == objsList) return null;

            List<Object> newObjsList = new List<Object>();
            for (int i = 0; i < objsList.Count; i++)
            {
                if (onlyGameClient && !(objsList[i] is GameClient))
                {
                    continue;
                }

                if (!(objsList[i] is IObject))
                {
                    continue;
                }

                if (!(objsList[i] is NPC))
                {
                    if ((objsList[i] as IObject).CurrentCopyMapID != copyMapID)
                    {
                        continue;
                    }
                }

                newObjsList.Add(objsList[i]);
            }

            if (newObjsList.Count <= 0)
            {
                newObjsList = null;
            }

            return newObjsList;
        }

        /// <summary>
        /// 对象列表中去除重复的GameClient
        /// </summary>
        /// <param name="objsList"></param>
        /// <returns></returns>
        public static List<GameClient> DistinctGameClientList(List<GameClient> objsList)
        {
            if (null == objsList) return null;

            HashSet<int> objHashSet = new HashSet<int>();
            List<GameClient> newObjsList = new List<GameClient>();
            for (int i = 0; i < objsList.Count; i++)
            {
                GameClient client = objsList[i] as GameClient;
                if (null != client && !objHashSet.Contains(client.ClientData.RoleID))
                {
                    objHashSet.Add(client.ClientData.RoleID);
                    newObjsList.Add(client);
                }
            }

            if (newObjsList.Count <= 0)
            {
                newObjsList = null;
            }

            return newObjsList;
        }

        /// <summary>
        /// 过滤隐身的用户
        /// </summary>
        /// <param name="objsList"></param>
        /// <returns></returns>
        public static List<Object> FilterHideObjsList(List<Object> objsList)
        {
            if (null == objsList) return objsList;

            List<Object> newObjsList = new List<object>();
            for (int i = 0; i < objsList.Count; i++)
            {
                //if (objsList[i] is GameClient)
                //{
                //    if ((objsList[i] as GameClient).ClientData.HideSelf > 0)
                //    {
                //        continue;
                //    }

                //    if ((objsList[i] as GameClient).ClientData.HideGM > 0) //GM隐身
                //    {
                //        continue;
                //    }
                //}

                newObjsList.Add(objsList[i]);
            }

            return newObjsList;
        }

        /// <summary>
        /// 玩家进行了移动
        /// </summary>
        public static void GameClientMoveGrid(GameClient client)
        {
           // if (client.ClientData.WaitingForChangeMap) //这里才是地图切换完成
           // {
           //     return;
           /// }

            //System.Diagnostics.Debug.WriteLine(string.Format("client.Grid={0}", client.CurrentGrid));

            /// 处理角色移动时的获取场景中九宫格附近的对象的操作
            List<Object> toRemoveObjsList = null;
            List<Object> toAddObjsList = null;
            
            Get9GridObjects(client, out toRemoveObjsList, out toAddObjsList);
            for (int i = 0; i < m_toAddObjsList.Count; i++)
            {
                if (client.ClientData.RoleID == (m_toAddObjsList[i] as GameClient).ClientData.RoleID)
                {
                    m_toAddObjsList.RemoveAt(i);
                }
            }
          //  SysConOut.WriteLine("九宫格获取的对象个数 === "+ toAddObjsList.Count.ToString());
            // m_toAddObjsList.Add(client);

            // toAddObjsList = m_toAddObjsList;
            //  if (null != toRemoveObjsList && toRemoveObjsList.Count > 0)
            //  {
            //玩家进行了移动, 处理旧对象
            //  GameClientHandleOldObjs(client, toRemoveObjsList);
            //  }
            if (null != toRemoveObjsList && toRemoveObjsList.Count > 0)
            {
                //玩家进行了移动, 处理旧对象
                GameClientHandleOldObjs(client, toRemoveObjsList);
            }

            if (null != toAddObjsList && toAddObjsList.Count > 0)
            {
                //玩家进行了移动, 处理新对象
                GameClientHandleNewObjs(client, toAddObjsList);
            }
    }

        /// <summary>
        /// 玩家进行了移动, 处理新对象
        /// </summary>
        public static void GameClientHandleNewObjs(GameClient client, List<Object> objsList)
        {
            List<Object> noHideSelfObjsList = null;
            try
            {
                // 过滤隐身的用户
                noHideSelfObjsList = FilterHideObjsList(objsList);
                //先通知自己所有其他人的数据
                // int sendRoleNum = GameManager.ClientMgr.NotifySelfOnlineOthers(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, noHideSelfObjsList, (int)TCPGameServerCmds.CMD_OTHER_ROLE);
                int sendRoleNum = GameManager.ClientMgr.NotifySelfOnlineOthers(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, noHideSelfObjsList, (int)CommandID.CMD_OTHER_ROLE);
            }
            catch(Exception ex)
            {
                SysConOut.WriteLine("先通知自己所有其他人的数据 异常 == " + ex.Message);
            }
            try
            {
                /// 通知自己其他人的移动
                GameManager.ClientMgr.NotifyMyselfOthersMoving(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, noHideSelfObjsList);

            }
            catch (Exception ex)
            {
                SysConOut.WriteLine("通知自己其他人的移动 异常 == " + ex.Message);
            }
            try
            {
                //再通知自己当前地图所有怪物的数据
                //HX_Server 怪物测试
                List<Object> testmonster = Global.GetAll9GridObjectsForClient(client);
                // int sendMonsterNum = GameManager.MonsterMgr.SendMonstersToClient(Global._TCPManager.MySocketListener, client, Global._TCPManager.TcpOutPacketPool, testmonster, (int)TCPGameServerCmds.CMD_SYSTEM_MONSTER);
                int sendMonsterNum = GameManager.MonsterMgr.SendMonstersToClient(Global._TCPManager.MySocketListener, client, Global._TCPManager.TcpOutPacketPool, testmonster, (int)CommandID.CMD_SYSTEM_MONSTER);
            }
            catch (Exception ex)
            {
                SysConOut.WriteLine("再通知自己当前地图所有怪物的数据 异常 == " + ex.Message);
            }
         
           
            /// 将其他所有在线的人的宠物数据通知自己(同一个地图才需要通知)
           // GameManager.ClientMgr.NotifyMySelfOnlineOtherPets(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, noHideSelfObjsList);

            /// 将其他所有在线的人的骑乘状态通知自己(同一个地图才需要通知)
           // GameManager.ClientMgr.NotifySelfOthersHorse(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, noHideSelfObjsList);

          
            //if (null != testmonster)
            //{
            //    for (int i = 0; i < testmonster.Count; i++)
            //    {
            //        System.Console.WriteLine(String.Format("testmonster {0} ID {1} ({2},{3})",
            //            i, (testmonster[i] as IObject).GetObjectID(), (int)(testmonster[i] as IObject).CurrentPos.X, (int)(testmonster[i] as IObject).CurrentPos.Y));
            //    }
            //}
            //通知自己怪物们的移动
            GameManager.ClientMgr.NotifyMyselfMonstersMoving(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);

            /// 发送已经掉落的包裹到用户
           // GameManager.GoodsPackMgr.SendMySelfGoodsPackItems(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);

            //发送镖车到给自己
            //BiaoCheManager.SendMySelfBiaoCheItems(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);

            //发送帮旗到给自己
           // JunQiManager.SendMySelfJunQiItems(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);

            //发送NPC 给自己
          //  NPCGeneralManager.SendMySelfNPCs(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);

            //发送Deco 给自己
          //  DecorationManager.SendMySelfDecos(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);

            //假人发送
          //  FakeRoleManager.SendMySelfFakeRoleItems(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList, (sendRoleNum + sendMonsterNum));

            //如果自己隐身，则不通知其他人
            /*if (client.ClientData.HideSelf > 0)
            {
                return;
            }*/

            //如果自己GM隐身，则不通知其他人
            /*if (client.ClientData.HideGM > 0)
            {
                return;
            }*/

            //再通知其他人自己上线了   
            GameManager.ClientMgr.NotifyOthersIamComing(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList, (int)CommandID.CMD_OTHER_ROLE);

            //判断如果是在移动中
            /*if (client.ClientData.CurrentAction == (int)GActions.Walk || client.ClientData.CurrentAction == (int)GActions.Run)
            {
                //通知其他人自己正在移动
                GameManager.ClientMgr.NotifyOthersMyMoving(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, client.ClientData.MapCode,
                    client.ClientData.CurrentAction, (int)client.ClientData.DestPoint.X, (int)client.ClientData.DestPoint.Y,
                    (int)TCPGameServerCmds.CMD_SPR_MOVE, client.ClientData.MoveSpeed, 0, objsList);
            }*/
        }

        /// <summary>
        /// 玩家进行了移动, 处理旧对象
        /// </summary>
        public static void GameClientHandleOldObjs(GameClient client, List<Object> objsList)
        {
            //如果自己隐身或者GM隐身，则不通知其他人
            //隐身模式下，多通知些没有关系，反正不会出错

            //通知自己所在的地图，其他的所有用户，自己离开了
            GameManager.ClientMgr.NotifyOthersLeave(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);

            /// 退出时删除角色放出的宠物
            //GameManager.ClientMgr.RemoveRolePet(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList, false);

            /// 通知自己其他角色离线(同一个地图才需要通知)
            GameManager.ClientMgr.NotifyMyselfLeaveOthers(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);

            /// 将其他所有在线的人的宠物数据离开通知自己(同一个地图才需要通知)
            //GameManager.ClientMgr.NotifySelfPetsOfflines(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);

            /// 通知自己怪物离开自己(同一个地图才需要通知)
            GameManager.ClientMgr.NotifyMyselfLeaveMonsters(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);

            /// 删除自己哪儿掉落的包裹
            GameManager.GoodsPackMgr.DelMySelfGoodsPackItems(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);

            /// 删除离开视线的npc
            NPCGeneralManager.DelMySelfNpcs(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);

            /// 删除离开视线的deco
            DecorationManager.DelMySelfDecos(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);

            // 删除自己哪儿的镖车
            //BiaoCheManager.DelMySelfBiaoCheItems(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);

            // 删除自己哪儿的帮旗
            JunQiManager.DelMySelfJunQiItems(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);

            // 删除自己哪儿的假人
            FakeRoleManager.DelMySelfFakeRoleItems(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, objsList);
        }

        /// <summary>
        /// 处理怪物移动时的获取场景中九宫格附近的对象的操作===>修改
        /// </summary>
        /// <param name="monster"></param>
        /// <param name="toRemoveObjsList"></param>
        /// <param name="toAddObjsList"></param>
        //public static void Get9GridObjects(Monster monster, out List<Object> toRemoveObjsList, out List<Object> toAddObjsList, Boolean force = false)
        //{
        //    toRemoveObjsList = null;
        //    toAddObjsList = null;

        //    MapGrid mapGrid = GameManager.MapGridMgr.DictGrids[monster.MonsterZoneNode.MapCode];
        //    int centerCridX = (int)monster.SafeCoordinate.X / mapGrid.MapGridWidth;
        //    int centerCridY = (int)monster.SafeCoordinate.Y / mapGrid.MapGridHeight;

        //    //如果某格子已经搜寻过，则不再进行搜寻
        //    if (centerCridX == monster.CurrentGridX && centerCridY == monster.CurrentGridY)
        //    {
        //        if (!force)
        //        {
        //            return;
        //        }
        //    }

        //    toRemoveObjsList = new List<Object>();
        //    toAddObjsList = new List<Object>();

        //    //当前的九宫格范围坐标信息
        //    int startGridX = 0, startGridY = 0, endGridX = 0, endGridY = 0;

        //    //上一次的范围坐标信息,默认值全部-1
        //    int lastStartGridX = -1, lastStartGridY = -1, lastEndGridX = -1, lastEndGridY = -1;

        //    //根据主角当前位置来加载周边地图切片
        //    Global.GetCurrent9Grid(mapGrid, centerCridX, centerCridY, out startGridX, out startGridY, out endGridX, out endGridY);

        //    //根据主角当前位置来加载上次计算的周边地图切片
        //    if (monster.CurrentGridX >= 0 && monster.CurrentGridY >= 0)
        //    {
        //        Global.GetCurrent9Grid(mapGrid, monster.CurrentGridX, monster.CurrentGridY, out lastStartGridX, out lastStartGridY, out lastEndGridX, out lastEndGridY);
        //    }

        //    //求循环判断范围，其中有属于旧九宫格的，属于新九宫格的，还有多不属于的，需要一一过滤
        //    int minGridX = Global.GMin(startGridX, lastStartGridX);
        //    int maxGridX = Global.GMax(endGridX, lastEndGridX);
        //    int minGridY = Global.GMin(startGridY, lastStartGridY);
        //    int maxGridY = Global.GMax(endGridY, lastEndGridY);

        //    //最小值不允许小于0
        //    minGridX = Global.GMax(0, minGridX);
        //    minGridY = Global.GMax(0, minGridY);

        //    Boolean isInOld9Grid = false;
        //    Boolean isInNow9Grid = false;

        //    for (int x = minGridX; x <= maxGridX; x++)
        //    {
        //        for (int y = minGridY; y <= maxGridY; y++)
        //        {
        //            //点 是否 在旧格子里面，
        //            isInOld9Grid = x >= lastStartGridX && x <= lastEndGridX && y >= lastStartGridY && y <= lastEndGridY;
        //            //点 是否 在新格子里面
        //            isInNow9Grid = x >= startGridX && x <= endGridX && y >= startGridY && y <= endGridY;

        //            //不在旧格子，也不在新格子，则继续循环
        //            if (!isInOld9Grid && !isInNow9Grid)
        //            {
        //                continue;
        //            }

        //            //既在旧格子，又在新格子的，不进行任何处理
        //            if (isInOld9Grid && isInNow9Grid)
        //            {
        //                continue;
        //            }

        //            //不管新旧格子，都需要处理，所以先获取
        //            List<Object> objsList = mapGrid.FindObjects(x, y);
        //            if (null == objsList || objsList.Count <= 0)
        //            {
        //                continue;
        //            }

        //            //依次判断各个对象
        //            for (int i = 0; i < objsList.Count; i++)
        //            {
        //                //不在旧格子，但在新格子，添加新对象
        //                if (!isInOld9Grid && isInNow9Grid)
        //                {
        //                    if (toAddObjsList.IndexOf(objsList[i]) < 0)
        //                    {
        //                        toAddObjsList.Add(objsList[i]);
        //                    }
        //                }
        //                else if (isInOld9Grid && !isInNow9Grid)//在旧格子，但不在新格子,移除
        //                {
        //                    if (toRemoveObjsList.IndexOf(objsList[i]) < 0)
        //                    {
        //                        toRemoveObjsList.Add(objsList[i]);
        //                    }
        //                }
        //            }
        //        }
        //    }

        //    monster.CurrentGridX = centerCridX;
        //    monster.CurrentGridY = centerCridY;

        //    /// 转换对象列表
        //    toRemoveObjsList = ConvertObjsList(monster.MonsterZoneNode.MapCode, monster.CopyMapID, toRemoveObjsList);
        //    toAddObjsList = ConvertObjsList(monster.MonsterZoneNode.MapCode, monster.CopyMapID, toAddObjsList);
        //}

        /*
        /// <summary>
        /// 处理怪物移动时的获取场景中九宫格附近的对象的操作
        /// </summary>
        /// <param name="monster"></param>
        /// <param name="toRemoveObjsList"></param>
        /// <param name="toAddObjsList"></param>
        public static void Get9GridObjects(Monster monster, out List<Object> toRemoveObjsList, out List<Object> toAddObjsList, Boolean force = false)
        {
            toRemoveObjsList = null;
            toAddObjsList = null;

            MapGrid mapGrid = GameManager.MapGridMgr.DictGrids[monster.MonsterZoneNode.MapCode];
            int centerCridX = (int)monster.SafeCoordinate.X / mapGrid.MapGridWidth;
            int centerCridY = (int)monster.SafeCoordinate.Y / mapGrid.MapGridHeight;
            if (centerCridX == monster.CurrentGridX && centerCridY == monster.CurrentGridY)
            {
                if (!force)
                {
                    return;
                }
            }

            //if (monster.MonsterInfo.ExtensionID == 38)
            //{
            //    System.Diagnostics.Debug.WriteLine(string.Format("Get9GridObjects, monster={0}, X={1}, Y={2}, centerGridX={3}, centerGridY={4}",
            //        monster.MonsterInfo.ExtensionID, monster.SafeCoordinate.X, monster.SafeCoordinate.Y, centerCridX, centerCridY));
            //}

            toRemoveObjsList = new List<Object>();
            toAddObjsList = new List<Object>();

            Dictionary<string, bool> oldObjsDict = monster.CurrentObjsDict;
            Dictionary<string, bool> newObjsDict = new Dictionary<string, bool>();

            Dictionary<string, bool> oldGridsDict = monster.CurrentGridsDict;
            Dictionary<string, bool> newGridsDict = new Dictionary<string, bool>();

            int startGridX = 0, startGridY = 0, endGridX = 0, endGridY = 0;

            //根据主角当前位置来加载周边地图切片
            Global.GetCurrent9Grid(mapGrid, centerCridX, centerCridY, out startGridX, out startGridY, out endGridX, out endGridY);

            for (int x = startGridX; x <= endGridX; x++)
            {
                for (int y = startGridY; y <= endGridY; y++)
                {
                    string key = string.Format("{0}_{1}", x, y);
                    if (!newGridsDict.ContainsKey(key))
                    {
                        newGridsDict.Add(key, true);
                    }

                    List<Object> objsList = mapGrid.FindObjects(x, y);
                    if (null == objsList)
                    {
                        continue;
                    }

                    for (int i = 0; i < objsList.Count; i++)
                    {
                        string objStringID = Global.GetObjectStringID(objsList[i]);

                        //如果是新的格子，则将对象加入新的列表(如果A后到，B先到，B离开到新的九宫格，则A追过去，此时必须执行此操作，否则A会看不到B)
                        if (null == oldGridsDict || !oldGridsDict.ContainsKey(key))
                        {
                            toAddObjsList.Add(objsList[i]);
                        }
                        else //如果是旧的格子, 则判断是否已经存在，否则也加入对象列表
                        {
                            if (null == oldObjsDict || !oldObjsDict.ContainsKey(objStringID))
                            {
                                toAddObjsList.Add(objsList[i]);
                            }
                        }

                        if (!newObjsDict.ContainsKey(objStringID))
                        {
                            newObjsDict.Add(objStringID, true);
                        }
                    }
                }
            }

            //对比新旧的对象字典，找出漏管理的加入删除列表
            if (null != oldObjsDict)
            {
                foreach (var key in oldObjsDict.Keys)
                {
                    if (!newObjsDict.ContainsKey(key))
                    {
                        Object obj = Global.GetObjectByIntID(monster.MonsterZoneNode.MapCode, key);
                        if (null != obj)
                        {
                            toRemoveObjsList.Add(obj);
                        }
                    }
                }
            }

            //对比新旧的格子字典, 找出要丢弃的格子，找出要丢弃格子中现存的对象，加入删除列表
            if (null != oldGridsDict && null != oldObjsDict)
            {
                foreach (var key in oldGridsDict.Keys)
                {
                    if (!newGridsDict.ContainsKey(key)) //如果是要丢弃的格子
                    {
                        //根据格子的键值获取格子的X和Y坐标
                        Point pt = Global.GetGridXYByKey(key);
                        if (-1 == (int)pt.X || -1 == (int)pt.Y)
                        {
                            continue;
                        }

                        List<Object> objsList = mapGrid.FindObjects((int)pt.X, (int)pt.Y);
                        if (null == objsList)
                        {
                            continue;
                        }

                        for (int i = 0; i < objsList.Count; i++)
                        {
                            string objStringID = Global.GetObjectStringID(objsList[i]);
                            if (oldObjsDict.ContainsKey(objStringID))
                            {
                                continue;
                            }

                            toRemoveObjsList.Add(objsList[i]);
                        }
                    }
                }
            }

            monster.CurrentGridX = centerCridX;
            monster.CurrentGridY = centerCridY;

            monster.CurrentObjsDict = newObjsDict;
            monster.CurrentGridsDict = newGridsDict;

            /// 转换对象列表
            toRemoveObjsList = ConvertObjsList(monster.MonsterZoneNode.MapCode, monster.CopyMapID, toRemoveObjsList);
            toAddObjsList = ConvertObjsList(monster.MonsterZoneNode.MapCode, monster.CopyMapID, toAddObjsList);
        }

        */
        /// <summary>
        /// 怪物进行了移动
        /// </summary>
        //public static void MonsterMoveGrid(Monster monster, Boolean force = false)
        //{
        //    /// 处理怪物移动时的获取场景中九宫格附近的对象的操作
        //    List<Object> toRemoveObjsList = null;
        //    List<Object> toAddObjsList = null;
        //    Get9GridObjects(monster, out toRemoveObjsList, out toAddObjsList, force);

        //    if (null != toRemoveObjsList && toRemoveObjsList.Count > 0)
        //    {
        //        //怪物进行了移动, 处理旧对象
        //        MonsterHandleOldObjs(monster, toRemoveObjsList);
        //    }

        //    if (null != toAddObjsList && toAddObjsList.Count > 0)
        //    {
        //        //怪物进行了移动, 处理新对象
        //        MonsterHandleNewObjs(monster, toAddObjsList);
        //    }
        //}

        /// <summary>
        /// 怪物进行了移动, 处理新对象
        /// </summary>
        //public static void MonsterHandleNewObjs(Monster monster, List<Object> objsList)
        //{
        //    //System.Diagnostics.Debug.WriteLine(string.Format("九宫格: 怪物通知客户端加载: {0}, {1}", monster.VSName, monster.Name));

        //    //再通知玩家们自己的数据
        //    GameManager.MonsterMgr.SendMonsterToClients(Global._TCPManager.MySocketListener, monster, Global._TCPManager.TcpOutPacketPool, objsList, (int)TCPGameServerCmds.CMD_SYSTEM_MONSTER);

        //    //判断如果是在移动中
        //    //再通知玩家们自己的的移动
        //    /*if (monster.SafeAction == GActions.Walk || monster.SafeAction == GActions.Run)
        //    {
        //        GameManager.ClientMgr.NotifyOthersToMoving(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, monster.MonsterZoneNode.MapCode, monster.CopyMapID,
        //            monster.RoleID,  (int)monster.SafeCoordinate.X, (int)monster.SafeCoordinate.Y, (int)monster.SafeAction, (int)monster.DestPoint.X, (int)monster.DestPoint.Y, (int)TCPGameServerCmds.CMD_SPR_MOVE, objsList);
        //    }*/
        //}

        /// <summary>
        /// 怪物进行了移动, 处理旧对象
        /// </summary>
        //public static void MonsterHandleOldObjs(Monster monster, List<Object> objsList)
        //{
        //    //System.Diagnostics.Debug.WriteLine(string.Format("九宫格: 怪物通知客户端离开: {0}, {1}", monster.VSName, monster.Name));

        //    //通知客户端怪物离开
        //    GameManager.ClientMgr.NotifyOthersMonsterLeave(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, monster, objsList);
        //}

        /// <summary>
        /// 处理其他玩家被地图加载进去内存事件
        /// </summary>
        /// <param name="client"></param>
        /// <param name="otherClient"></param>
        public static void HandleGameClientLoaded(GameClient client, GameClient otherClient)
        {
            GameManager.ClientMgr.NotifyMyselfOtherLoadAlready(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                otherClient.ClientData.RoleID, otherClient.ClientData.MapCode,
                Global.GetClientStartMoveTicks(otherClient),
                otherClient.ClientData.PosX, otherClient.ClientData.PosY, otherClient.ClientData.RoleDirection,
                otherClient.ClientData.CurrentAction,
                (int)otherClient.ClientData.DestPoint.X, (int)otherClient.ClientData.DestPoint.Y,
                otherClient.ClientData.MoveSpeed, 0, StoryBoard4Client.GetStoryBoardPathIndex(otherClient.ClientData.RoleID));

            /// 将其他人的宠物数据通知自己(同一个地图才需要通知)
            GameManager.ClientMgr.NotifyMySelfOnlineOtherPet(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, otherClient);

            /// 将其他人的骑乘状态通知自己(同一个地图才需要通知)
            GameManager.ClientMgr.NotifySelfOtherHorse(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, otherClient);
        }

        /// <summary>
        /// 处理怪物被地图加载进去内存事件
        /// </summary>
        /// <param name="client"></param>
        /// <param name="otherClient"></param>
        public static void HandleMonsterLoaded(GameClient client, Monster monster)
        {
            //System.Diagnostics.Debug.WriteLine(string.Format("九宫格: 发送加载怪物给客户端: {0}, {1}", monster.VSName, monster.Name));

            //通知到当前的状态
            GameManager.ClientMgr.NotifyMyselfMonsterLoadAlready(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                monster.RoleID,
                monster.MonsterZoneNode.MapCode,
                Global.GetMonsterStartMoveTicks(monster),
                (int)monster.SafeCoordinate.X,
                (int)monster.SafeCoordinate.Y,
                (int)monster.SafeDirection,
                (int)monster.SafeAction,
                (int)monster.DestPoint.X,
                (int)monster.DestPoint.Y,
                monster.MoveSpeed, 0, ""/*monster.PathString*/);
        }

        /// <summary>
        /// 判断某个点是否在角色的九宫格子内
        /// </summary>
        /// <param name="client"></param>
        /// <param name="pos"></param>
        /// <returns></returns>
        public static bool JugePointAtClientGrids(GameClient client, Monster monster, Point pos)
        {
            //if (monster.VLife <= 0) return false;
            //if (!monster.Alive) return false;

            //MapGrid mapGrid = GameManager.MapGridMgr.DictGrids[client.ClientData.MapCode];

            //int centerCridX = (int)pos.X / mapGrid.MapGridWidth;
            //int centerCridY = (int)pos.Y / mapGrid.MapGridHeight;

            //string key = string.Format("{0}_{1}", centerCridX, centerCridY);
            //Dictionary<string, bool> gridsDict = client.ClientData.CurrentGridsDict;
            //if (null == gridsDict) return false;

            //return gridsDict.ContainsKey(key);

            //if (monster.VLife <= 0) return false;
            //if (!monster.Alive) return false;

            //上边两行代码会导致怪物死亡后立即被删除

            MapGrid mapGrid = GameManager.MapGridMgr.DictGrids[client.ClientData.MapCode];

            int gridX = (int)pos.X / mapGrid.MapGridWidth;
            int gridY = (int)pos.Y / mapGrid.MapGridHeight;

            int startGridX = 0, startGridY = 0, endGridX = 0, endGridY = 0;

            Point grid = client.CurrentGrid;
            int currentGridX = (int)grid.X;
            int currentGridY = (int)grid.Y;

            //根据主角当前位置来加载周边地图切片
            Global.GetCurrent9Grid(mapGrid, currentGridX, currentGridY, out startGridX, out startGridY, out endGridX, out endGridY);
            if (gridX >= startGridX && gridX <= endGridX && gridY >= startGridY && gridY <= endGridY)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 根据九宫格判断怪物是否可以随机移动
        /// </summary>
        /// <param name="monster"></param>
        public static bool CanMonsterRandomMove(Monster monster)
        {
            MapGrid mapGrid = GameManager.MapGridMgr.DictGrids[monster.MonsterZoneNode.MapCode];
            int centerCridX = (int)(monster.SafeCoordinate.X / mapGrid.MapGridWidth);
            int centerCridY = (int)(monster.SafeCoordinate.Y / mapGrid.MapGridHeight);

            int startGridX = 0, startGridY = 0, endGridX = 0, endGridY = 0;

            //根据主角当前位置来加载周边地图切片
            Global.GetCurrent9Grid(mapGrid, centerCridX, centerCridY, out startGridX, out startGridY, out endGridX, out endGridY);

            for (int x = startGridX; x <= endGridX; x++)
            {
                for (int y = startGridY; y <= endGridY; y++)
                {
                    if (mapGrid.GetRoleNum(x, y) > 0)
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        #endregion AOI(Area Of Interest)九宫格子移动管理

        #region 副本管理

        /// <summary>
        /// 根据副本ID获取副本的数据
        /// </summary>
        /// <param name="client"></param>
        /// <param name="fuBenID"></param>
        /// <returns></returns>
        public static FuBenData GetFuBenData(GameClient client, int fuBenID)
        {
            if (null == client.ClientData.FuBenDataList) return null;

            lock (client.ClientData.FuBenDataList)
            {
                for (int i = 0; i < client.ClientData.FuBenDataList.Count; i++)
                {
                    if (client.ClientData.FuBenDataList[i].FuBenID == fuBenID)
                    {
                        return client.ClientData.FuBenDataList[i];
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 添加一个新的副本数据
        /// </summary>
        /// <param name="fuBenID"></param>
        /// <param name="dayID"></param>
        /// <param name="enterNum"></param>
        /// <returns></returns>
        public static FuBenData AddFuBenData(GameClient client, int fuBenID, int dayID, int enterNum, int nQuickPassTime, int nFinishNum)
        {
            if (null == client.ClientData.FuBenDataList)
            {
                client.ClientData.FuBenDataList = new List<FuBenData>();
            }

            FuBenData fuBenData = new FuBenData()
            {
                FuBenID = fuBenID,
                DayID = dayID,
                EnterNum = enterNum,
                QuickPassTimer = nQuickPassTime,
                FinishNum = nFinishNum,
            };

            lock (client.ClientData.FuBenDataList)
            {
                client.ClientData.FuBenDataList.Add(fuBenData);
            }

            return fuBenData;
        }

        /// <summary>
        /// 获取数据数据已经进入的次数
        /// </summary>
        /// <param name="fuBenData"></param>
        /// <returns></returns>
        public static int GetFuBenEnterNum(FuBenData fuBenData, out int nFinishNum)
        {
            nFinishNum = 0;
            if (null == fuBenData)
            {
                return 0;
            }

            int dayID = TimeUtil.NowDateTime().DayOfYear;
            if (fuBenData.DayID == dayID)
            {
                nFinishNum = fuBenData.FinishNum;
                return fuBenData.EnterNum;
            }

            return 0;
        }

        public static int GetFuBenCopyType(int fuBenID)
        {
            //获取副本的数据
            SystemXmlItem systemFuBenItem = null;
            if (!GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(fuBenID, out systemFuBenItem))
            {
                return -1;
            }

            return systemFuBenItem.GetIntValue("CopyType");
        }

        /// <summary>
        /// 更新副本的数据  -- 副本改造 增加最快通关时间  add by liaowei
        /// </summary>
        /// <param name="client"></param>
        public static void UpdateFuBenData(GameClient client, int fuBenID, int addDayNum = 1, int addFinishNum = 0)
        {
            FuBenData fuBenData = Global.GetFuBenData(client, fuBenID);
            int dayID = TimeUtil.NowDateTime().DayOfYear;

            //判断是否超过了最大的上限次数
            if (null == fuBenData)
            {
                fuBenData = Global.AddFuBenData(client, fuBenID, dayID, addDayNum, 0, 0);
            }
            else
            {
                if (fuBenData.DayID == dayID)
                {
                    fuBenData.EnterNum += addDayNum;
                    fuBenData.FinishNum += addFinishNum;
                }
                else
                {
                    fuBenData.DayID = dayID;
                    fuBenData.EnterNum = addDayNum;
                    fuBenData.FinishNum = addFinishNum;
                }
            }

            //进入次数和完成次数都为0,则不需要更新数据库
            if (fuBenData.EnterNum != 0 || fuBenData.FinishNum != 0)
            {
                //更新DBServer的日跑环数据
                GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEFUBENDATA,
                     string.Format("{0}:{1}:{2}:{3}:{4}:{5}",
                     client.ClientData.RoleID,
                     fuBenData.FuBenID,
                     fuBenData.DayID,
                     fuBenData.EnterNum,
                     fuBenData.QuickPassTimer,
                     fuBenData.FinishNum),
                     null, client.ServerId);
            }

            //将新的副本的数据通知自己
            GameManager.ClientMgr.NotifyFuBenData(client, fuBenData);
        }

        /// <summary>
        /// 更新副本的数据  -- 用于更新最快通关时间
        /// </summary>
        /// <param name="client"></param>
        /// <param name="fuBenID"></param>
        /// <param name="nSec"></param>
        /// <param name="addNum">增加副本次数,如果跨天完成,不需增加,传0</param>
        public static void UpdateFuBenDataForQuickPassTimer(GameClient client, int fuBenID, int nSec, int addNum)
        {
            FuBenData fuBenData = Global.GetFuBenData(client, fuBenID);
            int dayID = TimeUtil.NowDateTime().DayOfYear;

            if (null == fuBenData)
                fuBenData = Global.AddFuBenData(client, fuBenID, dayID, addNum, nSec, 0);

            if (nSec > 0)
            {
                if (fuBenData.QuickPassTimer <= 0 || nSec < fuBenData.QuickPassTimer)
                    fuBenData.QuickPassTimer = nSec;
            }

            Global.UpdateFuBenData(client, fuBenID, 0, addNum);
        }

        /// <summary>
        /// 利用最快通关时间判断是否通关过  add by ChenXiaojun
        /// </summary>
        /// <param name="client"></param>
        public static bool FuBenPassed(GameClient client, int fuBenID)
        {
            FuBenData fuBenData = Global.GetFuBenData(client, fuBenID);

            if (null == fuBenData)
            {
                return false;
            }

            if (fuBenData.QuickPassTimer > 0)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 给玩家副本的奖励 -- 根据积分取FuBenPingFen.xml数据  add by liaowei
        /// </summary>
        /// <param name="client"></param>
        public static FuBenTongGuanData GiveCopyMapGiftForScore(GameClient client, int fuBenID, int MapCode, int nMaxTime, int nFinishTimer, int killedNormalNum, int nDieCount, int nExp, int nMoney, FuBenMapItem fuBenMapItem, string strName = null)
        {
            FuBenTongGuanData fuBenTongGuanData = new FuBenTongGuanData();
            List<int> goodsID = new List<int>();
            List<CopyScoreDataInfo> tmpCopyScore = null;

            if (!(Data.CopyScoreDataInfoList.TryGetValue(fuBenID, out tmpCopyScore)))
                return null;

            if (tmpCopyScore == null)
                return null;

            //获取副本的数据
            SystemXmlItem systemFuBenItem = null;
            if (!GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(fuBenID, out systemFuBenItem))
                return null;

            double dExpModulus = 1.0;
            double dMoneyModulus = 1.0;
            int nScore0 = (nMaxTime - nFinishTimer) * 20;
            int nScore1 = 2000 - Global.GMin(10, nDieCount) * 200;
            int nScore2 = killedNormalNum * 100;
            int nScore3 = (int)nScore0 + nScore1 + nScore2;

            fuBenTongGuanData.FuBenID = fuBenID;
            fuBenTongGuanData.TotalScore = nScore3;
            fuBenTongGuanData.KillNum = killedNormalNum;
            fuBenTongGuanData.KillScore = nScore2;
            fuBenTongGuanData.MaxKillScore = nScore2; //击杀数=最大击杀数
            fuBenTongGuanData.UsedSecs = nFinishTimer;
            fuBenTongGuanData.TimeScore = nScore0;
            fuBenTongGuanData.MaxTimeScore = nMaxTime * 20;
            fuBenTongGuanData.DieCount = nDieCount;
            fuBenTongGuanData.DieScore = nScore1;
            fuBenTongGuanData.MaxDieScore = 2000;
            fuBenTongGuanData.GoodsIDList = goodsID;
            fuBenTongGuanData.MapCode = MapCode;
            fuBenTongGuanData.AwardRate = 1.0;

            int copyType = systemFuBenItem.GetIntValue("CopyType");
            if (Global.ConstTeamCopyType == copyType)
            {
                JieRiMultAwardActivity activity = HuodongCachingMgr.GetJieRiMultAwardActivity();
                if (null != activity)
                {
                    JieRiMultConfig config = activity.GetConfig((int)MultActivityType.TeamCopyMap);//企划说情侣副本先不加
                    if (null != config)
                    {
                        fuBenTongGuanData.AwardRate *= config.GetMult() + 1;
                    }
                }
            }

            if (LuoLanFaZhenCopySceneManager.IsLuoLanFaZhen(fuBenID))
            {
                fuBenTongGuanData.AwardRate *= LuoLanFaZhenCopySceneManager.getAwardRate(fuBenID, client.ClientData.FuBenSeqID);
            }
            else if (fuBenID == MoRi.MoRiJudgeConsts.CopyId)
            {
                fuBenTongGuanData.AwardRate *= MoRi.MoRiJudgeManager.Instance().GetCopyAwardRate(client.ClientData.FuBenSeqID);
            }

            // 藏宝秘境副本
            fuBenTongGuanData.TreasureEventID = OnePieceManager.getInstance().GiveCopyMapGift(client, fuBenID);

            // 根据积分给物品
            for (int i = 0; i < tmpCopyScore.Count; ++i)
            {
                int nMax = tmpCopyScore[i].MaxScore;
                int nMin = tmpCopyScore[i].MinScore;

                if (nMin <= nScore3 && nScore3 <= nMax)
                {
                    dExpModulus = tmpCopyScore[i].ExpModulus;
                    dMoneyModulus = tmpCopyScore[i].MoneyModulus;

                    List<GoodsData> goodsDataList = null;
                    if (tmpCopyScore[i].AwardType == 1)
                    {
                        int awardMoJing = Global.GetRandomNumber(tmpCopyScore[i].MinMoJing, tmpCopyScore[i].MaxMoJing + 1);
                        client.ClientData.FuBenPingFenAwardMoJing = awardMoJing;
                        fuBenTongGuanData.AwardMoJing = awardMoJing;
                    }
                    else if (tmpCopyScore[i].AwardType == 2)
                    {
                        //副本通关的抽奖物品列表
                        int FallPacketID = tmpCopyScore[i].FallPacketID;
                        goodsDataList = GoodsBaoXiang.FetchGoodListBaseFallPacketID(client, FallPacketID, 1);
                    }

                    if (null != fuBenMapItem.GoodsDataList)
                    {
                        //副本通关的普通物品奖励列表
                        List<GoodsData> goodNormal = new List<GoodsData>(fuBenMapItem.GoodsDataList);

                        // 如果背包格子不够 就发邮件-附件带物品给玩家
                        if (!Global.CanAddGoodsNum(client, goodNormal.Count))
                        {
                            foreach (var item in goodNormal)
                                UseMailGivePlayerAward(client, item, "副本通关奖励", "副本通关奖励", fuBenTongGuanData.AwardRate);

                        }
                        else
                        {
                            foreach (var item in goodNormal)
                            {
                                GoodsData goodsData = new GoodsData()
                                {
                                    Id = -1,
                                    GoodsID = item.GoodsID,
                                    Using = 0,
                                    Forge_level = item.Forge_level,
                                    Starttime = "1900-01-01 12:00:00",
                                    Endtime = Global.ConstGoodsEndTime,
                                    Site = 0,
                                    Quality = item.Quality,
                                    Props = item.Props,
                                    GCount = item.GCount,
                                    Binding = item.Binding,
                                    Jewellist = item.Jewellist,
                                    BagIndex = 0,
                                    AddPropIndex = item.AddPropIndex,
                                    BornIndex = item.BornIndex,
                                    Lucky = item.Lucky,
                                    Strong = item.Strong,
                                    ExcellenceInfo = item.ExcellenceInfo,
                                    AppendPropLev = item.AppendPropLev,
                                    ChangeLifeLevForEquip = item.ChangeLifeLevForEquip,
                                };

                                goodsData.GCount = (int)(goodsData.GCount * fuBenTongGuanData.AwardRate);

                                //向DBServer请求加入某个新的物品到背包中
                                //添加物品
                                goodsData.Id = Global.AddGoodsDBCommand_Hook(Global._TCPManager.TcpOutPacketPool, client, goodsData.GoodsID, goodsData.GCount, goodsData.Quality, goodsData.Props, goodsData.Forge_level, goodsData.Binding, 0, goodsData.Jewellist, true, 1, "副本通关获取物品",
                                                                                true, goodsData.Endtime, goodsData.AddPropIndex, goodsData.BornIndex, goodsData.Lucky, goodsData.Strong, goodsData.ExcellenceInfo, goodsData.AppendPropLev, goodsData.ChangeLifeLevForEquip, true); // 卓越信息 [12/13/2013 LiaoWei]
                            }

                        }
                    }
                    else
                    {
                        // 不配道具奖励是正常的
                        //LogManager.WriteLog(LogTypes.Error, string.Format("GiveCopyMapGiftForScore: null == fuBenMapItem.GoodsDataList FuBenID={0}, MapCode={1}", fuBenMapItem.FuBenID, fuBenMapItem.MapCode));
                    }

                    // 注意 只会有一个
                    if (null != goodsDataList)
                    {
                        //for (int n = 0; n < goodsDataList.Count; ++n)
                        goodsID.Add(goodsDataList[0].GoodsID);

                        // 保存住物品ID 客户端点击时 再给
                        client.ClientData.CopyMapAwardTmpGoods = goodsDataList[0];
                    }

                    // 奖励经验、钱
                    nExp = (int)Math.Round(nExp * dExpModulus);
                    nMoney = (int)Math.Round(nMoney * dMoneyModulus);

                    fuBenTongGuanData.AwardExp = nExp;
                    fuBenTongGuanData.AwardJinBi = nMoney;

                    nExp = (int)(nExp * fuBenTongGuanData.AwardRate);
                    nMoney = (int)(nMoney * fuBenTongGuanData.AwardRate);

                    fuBenTongGuanData.AwardZhanGong = GameManager.GuildCopyMapMgr.GetZhanGongAward(client, fuBenID, fuBenMapItem.nZhanGongaward);

                    if (fuBenTongGuanData.AwardZhanGong > 0)
                    {
                        if (GameManager.ClientMgr.AddBangGong(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, ref fuBenTongGuanData.AwardZhanGong, AddBangGongTypes.BGBOSS))
                        {
                            //[bing] 记录战功增加流向log
                            if (0 != fuBenTongGuanData.AwardZhanGong)
                                GameManager.logDBCmdMgr.AddDBLogInfo(-1, "战功", "给玩家副本的奖励", "系统", client.ClientData.RoleName, "增加", fuBenTongGuanData.AwardZhanGong, client.ClientData.ZoneID, client.strUserID, client.ClientData.BangGong, client.ServerId);
                        }
                        GameManager.SystemServerEvents.AddEvent(string.Format("角色获取帮贡, roleID={0}({1}), BangGong={2}, newBangGong={3}", client.ClientData.RoleID, client.ClientData.RoleName, client.ClientData.BangGong, fuBenTongGuanData.AwardZhanGong), EventLevels.Record);
                    }
                    // 战盟系统发现已经领取过了，那么金币和经验就都不给了
                    else if (fuBenTongGuanData.AwardZhanGong < 0)
                    {
                        fuBenTongGuanData.AwardZhanGong = 0;
                        fuBenTongGuanData.AwardExp = 0;
                        fuBenTongGuanData.AwardJinBi = 0;
                        nExp = 0;
                        nMoney = 0;
                    }

                    GameManager.ClientMgr.ProcessRoleExperience(client, nExp, true, true);

                    GameManager.ClientMgr.AddMoney1(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, nMoney, "副本" + fuBenID + "通关奖励", false);

                    if (fuBenMapItem.YuanSuFenMoaward > 0)
                    {
                        int YuanSuFenMoaward = (int)(fuBenMapItem.YuanSuFenMoaward * fuBenTongGuanData.AwardRate);
                        if (YuanSuFenMoaward > 0)
                            GameManager.ClientMgr.ModifyYuanSuFenMoValue(client, YuanSuFenMoaward, "副本通关获得元素粉末", true);
                    }

                    if (fuBenMapItem.LightAward > 0)
                    {
                        int lightAward = (int)(fuBenMapItem.LightAward * fuBenTongGuanData.AwardRate);
                        if (lightAward > 0)
                            GameManager.FluorescentGemMgr.AddFluorescentPoint(client, lightAward, "副本通关获得荧光粉末");
                    }

                    // 广播消息
                    /*if (tmpCopyScore[i].ScoreName == "3S")
                    {
                        string broadCastMsg = "";
                        if(strName != null)
                            broadCastMsg = StringUtil.substitute(Global.GetLang("{0}【{1}】勇猛无敌，以{2}级评分通过{3}，获得了{4}经验奖励"),Global.GetServerLineName2(),
                                                                                Global.FormatRoleName(client, client.ClientData.RoleName), tmpCopyScore[i].ScoreName, strName, nExp);
                        else
                            broadCastMsg = StringUtil.substitute(Global.GetLang("{0}【{1}】勇猛无敌，以{2}级评分通关，获得了{3}经验奖励"), Global.GetServerLineName2(),
                                                                                Global.FormatRoleName(client, client.ClientData.RoleName), tmpCopyScore[i].ScoreName, nExp);

                        //播放用户行为消息
                        Global.BroadcastRoleActionMsg(null, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
                    }*/

                    break;
                }
            }

            GameManager.CopyMapMgr.AddAwardState(client.ClientData.RoleID, client.ClientData.FuBenSeqID, client.ClientData.MapCode, 1);
            return fuBenTongGuanData;
        }

        /// <summary>
        /// 用户登陆时处理副本每天的次数更新
        /// </summary>
        /// <param name="?"></param>
        public static void ProcessUpdateFuBenData(GameClient client)
        {
            if (null == client.ClientData.FuBenDataList) return;

            //保存今天之前时间的数据
            lock (client.ClientData.OldFuBenDataList)
            {
                client.ClientData.OldFuBenDataList.Clear();
                foreach (var item in client.ClientData.FuBenDataList)
                {
                    if (item == null)
                        continue;
                    FuBenData info = new FuBenData()
                    {
                        DayID = item.DayID,
                        EnterNum = item.EnterNum,
                        FinishNum = item.FinishNum,
                        FuBenID = item.FuBenID
                    };
                    client.ClientData.OldFuBenDataList.Add(info);
                }
            }

            lock (client.ClientData.FuBenDataList)
            {
                for (int i = 0; i < client.ClientData.FuBenDataList.Count; i++)
                {
                    Global.UpdateFuBenData(client, client.ClientData.FuBenDataList[i].FuBenID, 0);
                }
            }
        }

        /// <summary>
        /// 进入到下一层副本地图
        /// </summary>
        /// <param name="client"></param>
        public static void ProcessGoToNextFuBenMap(GameClient client)
        {
            //判断如果本层地图的怪物还没有被杀光，则提示用户无法进入下一层
            if (Global.GetLeftMonsterByCopyMapID(client.ClientData.CopyMapID) > 0)
            {
                GameManager.ClientMgr.NotifyImportantMsg(
                    Global._TCPManager.MySocketListener,
                    Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(Global.GetLang("请将场景中的怪物全部消灭后，才能进入下一层副本地图")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                return;
            }

            //查找下一层副本的地图编号
            int toMapCode = FuBenManager.FindNextMapCodeByFuBenID(client.ClientData.MapCode);
            if (toMapCode < 0)
            {
                GameManager.ClientMgr.NotifyImportantMsg(
                    Global._TCPManager.MySocketListener,
                    Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(Global.GetLang("这是最后一层副本地图，无法进入下一层副本地图了")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                return;
            }

            GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                client, toMapCode, -1, -1, -1);
        }

        /// <summary>
        /// 获取本层副本地图的奖励
        /// </summary>
        /// <param name="client"></param>
        public static bool ProcessFuBenMapGetAward(GameClient client, bool notifyClient = false)
        {
            //判断如果本层地图的怪物还没有被杀光，则提示用户无法领取奖励
            if (Global.GetLeftMonsterByCopyMapID(client.ClientData.CopyMapID) > 0)
            {
                GameManager.ClientMgr.NotifyImportantMsg(
                    Global._TCPManager.MySocketListener,
                    Global._TCPManager.TcpOutPacketPool, client, StringUtil.substitute(Global.GetLang("请将场景中的怪物全部消灭后，才能领取奖励")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                return false;
            }

            //处理用户获取到的奖励
            return FuBenManager.ProcessFuBenMapAwards(client, notifyClient);
        }

        /// <summary>
        /// 根据副本ID获取剩余的或者的怪物的个数
        /// </summary>
        /// <param name="copyMapID"></param>
        /// <returns></returns>
        public static int GetLeftMonsterByCopyMapID(int copyMapID)
        {
            CopyMap copyMap = GameManager.CopyMapMgr.FindCopyMap(copyMapID);
            if (null == copyMap)
            {
                return 0;
            }

            int totalAliveCount = 0;
            if (copyMap.KilledNormalNum <= 0 && copyMap.KilledBossNum <= 0)
            {
                totalAliveCount += (copyMap.TotalNormalNum - copyMap.KilledNormalNum);
                totalAliveCount += (copyMap.TotalBossNum - copyMap.KilledBossNum);
                return totalAliveCount;
            }

            //如果怪物已经全部死亡了
            int aliveMonsterCount = GameManager.MonsterMgr.GetCopyMapIDMonstersCount(copyMapID, 0);
            return aliveMonsterCount;
        }

        /// <summary>
        /// 根据副本ID已经杀死的怪物的个数
        /// </summary>
        /// <param name="copyMapID"></param>
        /// <returns></returns>
        public static int GetKilledMonsterNumByCopyMapID(int copyMapID, MonsterTypes monsterType)
        {
            CopyMap copyMap = GameManager.CopyMapMgr.FindCopyMap(copyMapID);
            if (null == copyMap)
            {
                return 0;
            }

            if (MonsterTypes.Noraml == monsterType)
            {
                return copyMap.KilledNormalNum;
            }

            return copyMap.KilledBossNum;
        }

        /// <summary>
        /// 根据副本ID总的怪物的个数
        /// </summary>
        /// <param name="copyMapID"></param>
        /// <returns></returns>
        public static int GetTotalMonsterNumByCopyMapID(int copyMapID, MonsterTypes monsterType)
        {
            CopyMap copyMap = GameManager.CopyMapMgr.FindCopyMap(copyMapID);
            if (null == copyMap)
            {
                return 0;
            }

            if (MonsterTypes.Noraml == monsterType)
            {
                return copyMap.TotalNormalNum;
            }

            return copyMap.TotalBossNum;
        }

        /// <summary>
        /// 获取副本的名称
        /// </summary>
        /// <param name="fuBenID"></param>
        /// <returns></returns>
        public static string GetFuBenName(int fuBenID)
        {
            //获取副本的数据
            SystemXmlItem systemFuBenItem = null;
            if (!GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(fuBenID, out systemFuBenItem))
            {
                return "";
            }

            string copyName = systemFuBenItem.GetStringValue("CopyName");
            if (string.IsNullOrEmpty(copyName)) return copyName;

            copyName = copyName.Replace("【", "『");
            copyName = copyName.Replace("】", "』");

            string[] fields = copyName.Split('|');
            if (fields.Length <= 1) return copyName;
            return fields[0];
        }

        /// <summary>
        /// 通过级别获取试炼谈副本ID
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static SystemXmlItem FindShiLianTaFuBenIDByLevel(GameClient client, out int myMinLevel)
        {
            myMinLevel = 1000000;

            int[] jingYanTaFuBenIDs = GameManager.systemParamsList.GetParamValueIntArrayByName("JingYanTaFuBenIDs");
            if (null == jingYanTaFuBenIDs || jingYanTaFuBenIDs.Length <= 0)
            {
                return null;
            }

            //获取副本的数据
            SystemXmlItem systemFuBenItem = null;
            for (int i = 0; i < jingYanTaFuBenIDs.Length; i++)
            {
                if (!GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(jingYanTaFuBenIDs[i], out systemFuBenItem))
                {
                    continue;
                }

                int minLevel = systemFuBenItem.GetIntValue("MinLevel");
                int maxLevel = systemFuBenItem.GetIntValue("MaxLevel");
                if (maxLevel <= 0)
                {
                    maxLevel = 1000; //表示无限制
                }

                if (myMinLevel > minLevel)
                {
                    myMinLevel = minLevel;
                }

                if (client.ClientData.Level >= minLevel && client.ClientData.Level <= maxLevel)
                {
                    return systemFuBenItem;
                }
            }

            return null;
        }

        /// <summary>
        /// 通过地图编码获取试炼谈副本配置项
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static SystemXmlItem FindShiLianTaFuBenItemByMapCode(GameClient client)
        {
            int fuBenID = FuBenManager.FindFuBenIDByMapCode(client.ClientData.MapCode);
            if (fuBenID <= 0)
            {
                return null;
            }

            int[] jingYanTaFuBenIDs = GameManager.systemParamsList.GetParamValueIntArrayByName("JingYanTaFuBenIDs");
            if (null == jingYanTaFuBenIDs || jingYanTaFuBenIDs.Length <= 0)
            {
                return null;
            }

            //获取副本的数据
            SystemXmlItem systemFuBenItem = null;
            for (int i = 0; i < jingYanTaFuBenIDs.Length; i++)
            {
                if (!GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(jingYanTaFuBenIDs[i], out systemFuBenItem))
                {
                    continue;
                }

                int tmpFuBenID = systemFuBenItem.GetIntValue("ID");

                if (tmpFuBenID == fuBenID)
                {
                    return systemFuBenItem;
                }
            }

            return null;
        }

        /// <summary>
        /// //处理限时副本的通知信息
        /// </summary>
        /// <param name="client"></param>
        public static void ProcessLimitFuBenMapNotifyMsg(GameClient client)
        {
            int fuBenID = FuBenManager.FindFuBenIDByMapCode(client.ClientData.MapCode);
            if (fuBenID < 0)
            {
                return; //非副本，不提示
            }

            FuBenMapItem fuBenMapItem = FuBenManager.FindMapCodeByFuBenID(fuBenID, client.ClientData.MapCode);
            if (null == fuBenMapItem)
            {
                return;
            }

            int minutes = fuBenMapItem.MaxTime;
            string msgText = string.Format(Global.GetLang("您只有{0}分钟时间清除副本中的怪物"), minutes);

            if (!(client.ClientData.MapCode == JingJiChangManager.getInstance().getJingJiMapCode()) &&
                !Global.IsBloodCastleSceneID(client.ClientData.MapCode) &&
                !Global.IsDaimonSquareSceneID(client.ClientData.MapCode) &&
                !LuoLanFaZhenCopySceneManager.IsLuoLanFaZhenMap(client.ClientData.MapCode))
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                client, msgText, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.ErrAndBox, 0);
            }

            //奖励用户经验
            //异步写数据库，写入经验和级别
            int experience = fuBenMapItem.Experience;
            if (experience > 0)
            {
                // 去掉提示 [1/11/2014 LiaoWei]
                /*msgText = string.Format(Global.GetLang("完成本副本您可以获得{0}点经验奖励"), experience);
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                    client, msgText, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.ErrAndBox, 0);*/
            }
        }

        /// <summary>
        /// 处理自动获取副本经验和铜钱的奖励的操作
        /// </summary>
        /// <param name="client"></param>
        public static void ProcessAutoGetFuBenExpAndMoneyAwards(GameClient client)
        {
            //如果是试练塔副本，则不处理
            if (null != Global.FindShiLianTaFuBenItemByMapCode(client))
            {
                return;
            }

            if (!FuBenManager.CanAutoGetFuBenMapAwards(client))
            {
                return;
            }

            //获取本层副本地图的奖励
            Global.ProcessFuBenMapGetAward(client, true);
        }

        #endregion 副本管理

        #region 地图副本系统

        /// <summary>
        /// 判断玩家是否能再次进入副本
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool CanReEnterCopyMap(int mapCode, int fuBenSeqID)
        {
            /// 获取副本地图对象
            CopyMap copyMap = GameManager.CopyMapMgr.FindCopyMap(mapCode, fuBenSeqID);
            if (null == copyMap) return false;

            //如果用户离开地图的时间已经超过了5分钟
            long nowTicks = TimeUtil.NOW();
            if ((nowTicks - copyMap.GetLastLeaveClientTicks()) >= (60 * 5 * 1000))
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// 初始化玩家的副本地图
        /// </summary>
        /// <param name="client"></param>
        public static void InitCopyMap(GameClient client)
        {
            //记录场景类型，避免每次从字典查询
            SceneUIClasses sceneType = Global.GetMapSceneType(client.ClientData.MapCode);
            client.SceneType = (int)sceneType;
            if (client.CheckCheatData.GmGotoShadowMapCode == client.ClientData.MapCode)
            {
                client.CheckCheatData.GmGotoShadowMapCode = 0;
                return;
            }

            MapTypes mapType = GetMapType(client.ClientData.MapCode);
            if (MapTypes.Normal == mapType)
            {
                client.ClientData.CopyMapID = -1;
                return; //常规地图，则退出不处理
            }

            /// 获取副本地图对象
            CopyMap copyMap = GameManager.CopyMapMgr.GetCopyMap(client, mapType);
            if (null == copyMap)
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("切换地图时创建副本对象失败, RoleID={0}, MapCode={1}", client.ClientData.RoleID, client.ClientData.MapCode));
                return;
            }

            client.ClientData.CopyMapID = copyMap.CopyMapID;
            client.ClientData.FuBenID = copyMap.FubenMapID;
        }

        /// <summary>
        /// 切换地图或者退出时清空副本
        /// </summary>
        /// <param name="client"></param>
        public static void ClearCopyMap(GameClient client, bool bLogout = false)
        {
            if (client.ClientData.CopyMapID <= 0)
            {
                return;
            }

            /// 获取副本地图对象
            CopyMap copyMap = GameManager.CopyMapMgr.FindCopyMap(client.ClientData.CopyMapID);
            if (null == copyMap)
            {
                return;
            }

            //只有副本剩余角色数大于1时才发送
            if (copyMap.GetGameClientCount() > 1)
            {
                //通知副本内其他人人数(和怪物数)
                GameManager.ClientMgr.NotifyAllFuBenMonstersNum(client, false);
            }

            copyMap.RemoveGameClient(client);
            if (!bLogout)
            {
                client.ClientData.CopyMapID = -1;

                // 删除个人副本
                SceneUIClasses sceneType = Global.GetMapSceneType(copyMap.MapCode);
                if (SceneUIClasses.NormalCopy == sceneType || SceneUIClasses.TaskCopy == sceneType)
                {
                    copyMap.bNeedRemove = true;
                }
            }
        }

        #endregion 地图副本系统

        #region 地图管理

        /// <summary>
        /// 是否记录位置信息
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool CanRecordPos(GameClient client)
        {
            //如果是大乱斗，则不写入数据库
            //if (Global.InBattling(client))
            //{
            //    return false;
            //}

            SceneUIClasses sceneType = Global.GetMapSceneType(client.ClientData.MapCode);
            switch (sceneType)
            {
                case SceneUIClasses.BloodCastle:
                case SceneUIClasses.Demon:
                    return true;
            }

            MapTypes mapType = GetMapType(client.ClientData.MapCode);
            switch (mapType)
            {
                case MapTypes.Normal:
                case MapTypes.NormalCopy:
                case MapTypes.CaiShenMiaoCopy:
                case MapTypes.TaskCopy:
                case MapTypes.MarriageCopy:
                case MapTypes.HuanYingSiYuan:
                    return true;
            }

            return false;
        }

        /// <summary>
        /// 判断地图是否存在
        /// </summary>
        /// <param name="mapCode"></param>
        /// <returns></returns>
        public static bool MapExists(int mapCode)
        {
            if (mapCode < 0) return false;
            return GameManager.MapMgr.DictMaps.ContainsKey(mapCode);
        }

        /// <summary>
        /// 是否能切换到目标地图和坐标
        /// </summary>
        /// <param name="client"></param>
        /// <param name="mapCode"></param>
        /// <param name="posX"></param>
        /// <param name="posY"></param>
        /// <returns></returns>
        public static bool CanChangeMap(GameClient client, int mapCode, int posX, int posY, bool normalMapOlny = true)
        {
            if (normalMapOlny && MapTypes.Normal != Global.GetMapType(mapCode) || SceneUIClasses.Normal != Global.GetMapSceneType(mapCode))
            {
                return false;
            }
            if (!Global.CanChangeMapCode(client, mapCode))
            {
                return false;
            }

            GameMap gameMap = GameManager.MapMgr.GetGameMap(mapCode);
            if (null == gameMap)
            {
                return false;
            }

            if (posX < 0 || posX >= gameMap.MapWidth || posY < 0 || posY >= gameMap.MapHeight)
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// 获取地图编号的地图类型
        /// </summary>
        /// <param name="mapCode"></param>
        /// <returns></returns>
        public static MapTypes GetMapType(int mapCode)
        {
            if (mapCode < 0) return MapTypes.Normal;

            GameMap gameMap = null;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(mapCode, out gameMap))
            {
                return MapTypes.Normal;
            }

            if (gameMap.IsolatedMap < (int)MapTypes.Normal || gameMap.IsolatedMap >= (int)MapTypes.Max)
            {
                return MapTypes.Normal;
            }

            return (MapTypes)gameMap.IsolatedMap;
        }

        /// <summary>
        /// 判断玩家是否可以切换到新地图上(例如，如果是组队副本，个人则无法进入等)
        /// </summary>
        /// <param name="client"></param>
        /// <param name="toMapCode"></param>
        public static bool CanChangeMapCode(GameClient client, int toMapCode)
        {
            SceneUIClasses sceneType = Global.GetMapSceneType(toMapCode);
            if (sceneType == SceneUIClasses.ShuiJingHuanJing)
            {
                //判断是否开启了水晶幻境功能
                if (!GlobalNew.IsGongNengOpened(client, GongNengIDs.CrystalCollect))
                    return false;
            }

            MapTypes mapType = GetMapType(toMapCode);
            if (MapTypes.Normal == mapType)
            {
                return true; //常规地图，则退出不处理
            }
            else if (MapTypes.NormalCopy == mapType)
            {
                if (client.ClientData.FuBenSeqID <= 0)
                {
                    return false;
                }
            }
            else if (MapTypes.DianJiangCopy == mapType)
            {
                if (client.ClientData.FuBenSeqID <= 0)
                {
                    return false;
                }
            }
            else if (MapTypes.CaiShenMiaoCopy == mapType)
            {
                if (client.ClientData.FuBenSeqID <= 0)
                {
                    return false;
                }
            }
            else if (MapTypes.TaskCopy == mapType)
            {
                if (client.ClientData.FuBenSeqID <= 0)
                {
                    return false;
                }
            }
            else if (MapTypes.MarriageCopy == mapType)
            {
                if (client.ClientData.FuBenSeqID <= 0)
                {
                    return false;
                }
            }

            return true;
        }

        public static bool CanEnterMap(GameClient client, int toMapCode)
        {
            GameMap toGameMap;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out toGameMap))
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("ProcessSpriteGoToMapCmd mapCode Error, mapCode={0}", toMapCode));
                return false;
            }

            if (Global.GetUnionLevel(client) < Global.GetUnionLevel(toGameMap.MinZhuanSheng, toGameMap.MinLevel))
            {
                return false;
            }

            return true;
        }

        public static bool GotoMap(GameClient client, int toMapCode)
        {
            TCPManager tcpMgr = TCPManager.getInstance();
            TCPOutPacketPool pool = TCPOutPacketPool.getInstance();

            if (!GameManager.MapMgr.DictMaps.ContainsKey(toMapCode))
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("ProcessSpriteGoToMapCmd mapCode Error, mapCode={0}", toMapCode));
                return false;
            }

            //处理VIP月卡
            if (DBRoleBufferManager.ProcessMonthVIP(client) <= 0.0) //无VIP月卡
            {
                /*
                //先确认是否有传送卷
                GoodsData goodsData = Global.GetGoodsByID(client, Global.MapTransGoodsID2);
                if (null != goodsData)
                {
                    //从用户物品中扣除消耗的数量
                    if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData.Id, false))
                    {
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                }
                else
                {
                    goodsData = Global.GetGoodsByID(client, Global.MapTransGoodsID);
                    if (null != goodsData)
                    {
                        //从用户物品中扣除消耗的数量
                        if (!GameManager.ClientMgr.NotifyUseGoods(tcpMgr.MySocketListener, tcpClientPool, pool, client, goodsData.Id, false))
                        {
                            return TCPProcessCmdResults.RESULT_OK;
                        }
                    }
                    else
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(Global.GetLang("背包中没有【{0}】，无法立即传送到【{1}】"), Global.GetGoodsNameByID(Global.MapTransGoodsID), Global.GetMapName(toMapCode)), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.NoChuanSongJuan);
                        return TCPProcessCmdResults.RESULT_OK;
                    }
                }
                */
                //如果不是VIP,扣除金币(绑定金币优先)
                int needMoney = Global.GetMapTransNeedMoney(toMapCode);
                if (!Global.SubBindTongQianAndTongQian(client, needMoney, "地图传送"))
                {
                    // 金币不够
                    GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(Global.GetLang("金币不足【{0}】,无法传送到【{1}】!"), needMoney, Global.GetMapName(toMapCode)), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.NoTongQian);
                    return false;
                }
                else if (needMoney > 0)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(tcpMgr.MySocketListener, pool, client, StringUtil.substitute(Global.GetLang("传送到【{1}】消耗了【{0}】金币!"), needMoney, Global.GetMapName(toMapCode)), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                }
            }

            if (client.ClientSocket.IsKuaFuLogin)
            {
                Global.ModifyMapRecordData(client, (ushort)toMapCode, 0, 0, (int)MapRecordIndexes.InitGameMapPostion);

                //目前,跨服状态切换地图,强制切换回原服务器
                KuaFuManager.getInstance().GotoLastMap(client);
                return true;
            }
            else if (KuaFuManager.getInstance().IsKuaFuMap(toMapCode))
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("GotoMap denied, mapCode={0},IsKuaFuLogin={1}", toMapCode, client.ClientSocket.IsKuaFuLogin));
                return false;
            }

            GameMap gameMap = null;
            if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
            {
                //从配置根据地图取默认位置
                int toMapX = -1;
                int toMapY = -1;
                int toDirection = Global.GetRandomNumber(0, 8);

                GameManager.ClientMgr.NotifyChangeMap(tcpMgr.MySocketListener, pool, client, toMapCode, toMapX, toMapY, toDirection);
            }

            return true;
        }

        /// <summary>
        /// 切换到上一个地图（只能是常规地图）
        /// </summary>
        /// <param name="self"></param>
        /// <returns></returns>
        public static bool GotoLastMap(GameClient client, int relife = 1)
        {
            if (null == client)
            {
                return false;
            }

            int toMapCode = GameManager.MainMapCode;
            int toPosX = -1;
            int toPosY = -1;

            //判断下，如果上一次的地图为空，或则不是普通地图，则强制回主城
            if (client.ClientData.LastMapCode != -1 && client.ClientData.LastPosX != -1 && client.ClientData.LastPosY != -1
                && SceneUIClasses.Normal == Global.GetMapSceneType(client.ClientData.LastMapCode))
            {
                if (MapTypes.Normal == Global.GetMapType(client.ClientData.LastMapCode))
                {
                    if (GameManager.BattleMgr.BattleMapCode != client.ClientData.LastMapCode
                        && GameManager.ArenaBattleMgr.BattleMapCode != client.ClientData.LastMapCode
                        )
                    {
                        toMapCode = client.ClientData.LastMapCode;
                        toPosX = client.ClientData.LastPosX;
                        toPosY = client.ClientData.LastPosY;
                    }
                }
            }

            GameMap gameMap = null;
            if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
            {
                return GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toMapCode, toPosX, toPosY, relife);
            }

            return false;
        }

        /// <summary>
        /// 获取地图的图片配置编号
        /// </summary>
        /// <param name="mapCode"></param>
        /// <returns></returns>
        public static int GetMapPicCodeByCode(int mapCode)
        {
            if (null == Global.XmlInfo[Global.GAME_CONFIG_SETTINGS_NAME]) return mapCode; //如果没有找到，则返回和地图编号相同的地图图片配置编号
            XElement xmlItem = null;
            try
            {
                xmlItem = Global.GetXElement(Global.XmlInfo[Global.GAME_CONFIG_SETTINGS_NAME], "Map", "Code", mapCode.ToString());
            }
            catch (Exception ex)
            {
                throw new Exception(string.Format("{0} MapCode={1}", ex.Message.ToString(), mapCode));
            }

            if (null == xmlItem) return mapCode; //如果没有找到，则返回和地图编号相同的地图图片配置编号

            return (int)Global.GetSafeAttributeLong(xmlItem, "PicCode");
        }

        /// <summary>
        /// 判断地图是否允许掉落装备
        /// </summary>
        /// <param name="mapCode"></param>
        /// <returns></returns>
        public static bool CanMapLostEquip(int mapCode)
        {
            int disableDropDown = GameManager.GameConfigMgr.GetGameConfigItemInt("disable-drop-down", 0); //是否禁止掉落身上的物品
            if (disableDropDown > 0)
            {
                return false;
            }

            GameMap gameMap = null;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(mapCode, out gameMap))
            {
                return false;
            }

            if (gameMap.NotLostEquip <= 0)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 根据地图编号获取地图的名称
        /// </summary>
        /// <param name="mapCode"></param>
        /// <returns></returns>
        public static string GetMapName(int mapCode)
        {
            string mapName = "";
            if (!Data.MapNamesDict.TryGetValue(mapCode, out mapName))
            {
                return "";
            }

            return mapName;
        }

        /// <summary>
        /// 判断在指定的地图上是否在许可的时间段内
        /// </summary>
        /// <param name="mapCode"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static bool CanMapInLimitTimes(int mapCode, DateTime dateTime)
        {
            GameMap gameMap = null;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(mapCode, out gameMap))
            {
                return true;
            }

            if (null == gameMap.LimitTimes || gameMap.LimitTimes.Length <= 0)
            {
                return true;
            }

            int endMinute = 0;
            return Global.JugeDateTimeInTimeRange(dateTime, gameMap.LimitTimes, out endMinute);
        }

        /// <summary>
        /// 判断在指定的地图上是否可以使用指定的物品
        /// </summary>
        /// <param name="mapCode"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static bool CanMapUseGoods(int mapCode, int goodsID)
        {
            GameMap gameMap = null;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(mapCode, out gameMap))
            {
                return true;
            }

            if (null == gameMap.LimitGoodsIDs || gameMap.LimitGoodsIDs.Length <= 0)
            {
                return true;
            }

            for (int i = 0; i < gameMap.LimitGoodsIDs.Length; i++)
            {
                if (goodsID == gameMap.LimitGoodsIDs[i])
                {
                    return false;
                }
            }

            return true;
        }

        /// <summary>
        /// 判断在指定的地图上是否可以使用指定的Buffer
        /// </summary>
        /// <param name="mapCode"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static bool CanMapUseBuffer(int mapCode, int bufferID)
        {
            switch (bufferID)
            {
                case (int)BufferItemTypes.MU_ANGELTEMPLEBUFF1:
                case (int)BufferItemTypes.MU_ANGELTEMPLEBUFF2:
                    return Global.IsGuWuMap(mapCode);
                    break;
            }

            GameMap gameMap = null;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(mapCode, out gameMap))
            {
                return true;
            }

            if (null == gameMap.LimitBufferIDs || gameMap.LimitBufferIDs.Length <= 0)
            {
                return true;
            }

            for (int i = 0; i < gameMap.LimitBufferIDs.Length; i++)
            {
                if (bufferID == gameMap.LimitBufferIDs[i])
                {
                    return false;
                }
            }

            return true;
        }

        /// <summary>
        /// 判断在指定的地图上是否可以挂机
        /// </summary>
        /// <param name="mapCode"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static bool CanMapAutoFight(int mapCode)
        {
            GameMap gameMap = null;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(mapCode, out gameMap))
            {
                return true;
            }

            return (gameMap.LimitAuotFight >= 1);
        }

        /// <summary>
        /// 判断在指定的地图上是否可以使用指定的Magic
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static bool CanMapUseMagic(GameClient client, int magicCode)
        {
            return true;//HX_SERVER CLOSED FOR TEST
            if (null == client)
                return false;

            GameMap gameMap = null;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(client.ClientData.MapCode, out gameMap))
            {
                return true;
            }

            //如果对方在安全区
            if (gameMap.InSafeRegionList(client.CurrentGrid))
            {
                return false;
            }

            if (null == gameMap.LimitMagicIDs || gameMap.LimitMagicIDs.Length <= 0)
            {
                return true;
            }

            for (int i = 0; i < gameMap.LimitMagicIDs.Length; i++)
            {
                if (magicCode == gameMap.LimitMagicIDs[i])
                {
                    return false;
                }
            }

            return true;
        }

        public static void TestRoleRandomPosition(GameClient client)
        {
            RoleDataEx roleData = client.ClientData.GetRoleData();

            if (0 == GameManager.TestGamePerformanceMapMode)
            {
                roleData.MapCode = GameManager.TestGamePerformanceMapCode;
            }
            else if (GameManager.TestGamePerformanceMapMode == 2)
            {
                Point newPos;
                if (Global.GetRandomNumber(0, 2) % 2 == 0)
                {
                    roleData.MapCode = 1;
                    newPos = GameManager.TestBirthPointList1[Global.GetRandomNumber(0, GameManager.TestBirthPointList1.Count)];
                }
                else
                {
                    roleData.MapCode = 2;
                    newPos = GameManager.TestBirthPointList2[Global.GetRandomNumber(0, GameManager.TestBirthPointList2.Count)];
                }
                roleData.PosX = (int)newPos.X;
                roleData.PosY = (int)newPos.Y;
            }
            else if (GameManager.TestGamePerformanceMapMode == 3)
            {
                client.ClientData.IsFlashPlayer = 0;
                roleData.MapCode = Global.GetRandomNumber(0, 11) * 10 + Global.GetRandomNumber(1, 4);
                roleData.PosX = 5378;
                roleData.PosY = 6256;
            }
        }

        /// <summary>
        /// 玩家的格子是否发生了变化
        /// </summary>
        /// <param name="client"></param>
        /// <param name="posX"></param>
        /// <param name="posY"></param>
        public static bool IsSpriteMapGridChanged(GameClient client, MapGrid mapGrid, int mapCode, int posX, int posY)
        {
            if (Math.Abs(posX - client.ClientData.PosX) >= mapGrid.MapGridWidth || Math.Abs(posY - client.ClientData.PosY) >= mapGrid.MapGridHeight || mapCode != client.ClientData.MapCode)
            {
                return true;
            }
            return false;
        }

        #endregion 地图管理

        #region 点将台管理

        /// <summary>
        /// 点将台地图编号
        /// </summary>
        public static int DianJiangTaiMapCode = 1001;

        #endregion 点将台管理

        #region 角色内力系统

        #endregion 角色内力系统

        #region 角色经脉

        /// <summary>
        /// 经脉的最大重数
        /// </summary>
        public static int MaxJingMaiBodyLevel = 9;

        /// <summary>
        /// 经脉穴位的最大个数
        /// </summary>
        public static int MaxJingMaiLevel = 25;

        /// <summary>
        /// 每日冲穴的最大次数
        /// </summary>
        public static int MaxDailyJingMaiNum = 10;

        /// <summary>
        /// 每个经脉灵芝增加的成功率
        /// </summary>
        public static int JingMaiLingZhiLuckyNum = 10;

        /// <summary>
        /// 脉的名称
        /// </summary>
        private static string[] JingMaiNames = 
        {
            Global.GetLang("阳维脉"),
            Global.GetLang("阴维脉"),
            Global.GetLang("阳跷脉"),
            Global.GetLang("阴跷脉"),
            Global.GetLang("带脉"),
            Global.GetLang("冲脉"),
            Global.GetLang("任脉"),
            Global.GetLang("督脉"),
        };

        /// <summary>
        /// 获取经脉的名称
        /// </summary>
        /// <param name="jingMaiID"></param>
        /// <returns></returns>
        public static string GetJingMaiName(int jingMaiID)
        {
            if (jingMaiID < 0 || jingMaiID >= (int)JingMaiTypes.Max)
            {
                return "";
            }

            return Global.GetLang(JingMaiNames[jingMaiID]);
        }

        /// <summary>
        /// 脉的修炼重数名称
        /// </summary>
        public static string[] JingMaiBodyLevelNames = 
        {
            Global.GetLang("醒我"),
            Global.GetLang("蜕凡"),
            Global.GetLang("识藏"),
            Global.GetLang("御空"),
            Global.GetLang("涅盘"),
            Global.GetLang("长生"),
            Global.GetLang("蕴神"),
            Global.GetLang("入神"),
            Global.GetLang("归神"),
        };

        /// <summary>
        /// 获取经脉修炼重数的名称
        /// </summary>
        /// <param name="jingMaiID"></param>
        /// <returns></returns>
        public static string GetJingMaiBodyLevelName(int jingMaiBodyLevel)
        {
            if (jingMaiBodyLevel < 0 || jingMaiBodyLevel >= Global.JingMaiBodyLevelNames.Length)
            {
                return "";
            }

            return Global.GetLang(JingMaiBodyLevelNames[jingMaiBodyLevel]);
        }

        /// <summary>
        /// 获取经脉的Xml项
        /// </summary>
        /// <param name="xmlItem"></param>
        /// <returns></returns>
        public static SystemXmlItem GetJingMaiXmlItem(int jingMaiID, int occupation, int level)
        {
            return JingMaiCacheManager.GetJingMaiItem(occupation, jingMaiID, level);
        }

        /// <summary>
        /// 根据经脉的类型获取经脉的数据库ID
        /// </summary>
        /// <param name="jingMaiID"></param>
        /// <returns></returns>
        public static int GetJingMaiDbIDByJMID(GameClient client, int jingMaiBodyLevel, int jingMaiID)
        {
            if (null == client.ClientData.JingMaiDataList) return -1;

            lock (client.ClientData.JingMaiDataList)
            {
                for (int i = 0; i < client.ClientData.JingMaiDataList.Count; i++)
                {
                    if (client.ClientData.JingMaiDataList[i].JingMaiID == jingMaiID &&
                        client.ClientData.JingMaiDataList[i].JingMaiBodyLevel == jingMaiBodyLevel)
                    {
                        return client.ClientData.JingMaiDataList[i].DbID;
                    }
                }
            }

            return -1;
        }

        /// <summary>
        /// 根据经脉的类型获取经脉的数据库ID
        /// </summary>
        /// <param name="jingMaiID"></param>
        /// <returns></returns>
        public static JingMaiData GetJingMaiDataByJMID(GameClient client, int jingMaiBodyLevel, int jingMaiID)
        {
            if (null == client.ClientData.JingMaiDataList) return null;

            lock (client.ClientData.JingMaiDataList)
            {
                for (int i = 0; i < client.ClientData.JingMaiDataList.Count; i++)
                {
                    if (client.ClientData.JingMaiDataList[i].JingMaiID == jingMaiID &&
                        client.ClientData.JingMaiDataList[i].JingMaiBodyLevel == jingMaiBodyLevel)
                    {
                        return client.ClientData.JingMaiDataList[i];
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 根据经脉的数据库ID获取经脉数据
        /// </summary>
        /// <param name="jingMaiID"></param>
        /// <returns></returns>
        public static JingMaiData GetJingMaiDataByDbID(GameClient client, int dbID)
        {
            if (null == client.ClientData.JingMaiDataList) return null;

            lock (client.ClientData.JingMaiDataList)
            {
                for (int i = 0; i < client.ClientData.JingMaiDataList.Count; i++)
                {
                    if (client.ClientData.JingMaiDataList[i].DbID == dbID)
                    {
                        return client.ClientData.JingMaiDataList[i];
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 获取冲穴到下一个需要消耗的灵力
        /// </summary>
        /// <param name="client"></param>
        /// <param name="jingMaiBodyLevel"></param>
        /// <param name="jingMaiID"></param>
        /// <param name="NextLevel"></param>
        /// <returns></returns>
        public static int GetUpJingMaiNeedLingLi(GameClient client, SystemXmlItem systemJingMaiItem, int jingMaiBodyLevel, int jingMaiID)
        {
            return systemJingMaiItem.GetIntValue("LingLi");
        }

        /// <summary>
        /// 获取冲穴到下一个需要角色级别
        /// </summary>
        /// <param name="client"></param>
        /// <param name="jingMaiBodyLevel"></param>
        /// <param name="jingMaiID"></param>
        /// <param name="NextLevel"></param>
        /// <returns></returns>
        public static int GetUpJingMaiNeedLevel(GameClient client, SystemXmlItem systemJingMaiItem, int jingMaiBodyLevel, int jingMaiID)
        {
            return systemJingMaiItem.GetIntValue("LevelLimit");
        }

        /// <summary>
        /// 处理角色经脉升级操作
        /// </summary>
        /// <param name="client"></param>
        /// <param name="jingMaiID"></param>
        /// <returns></returns>
        public static int ProcessUpJingmaiLevel(GameClient client, int jingMaiBodyLevel, int jingMaiID, ref int jingMaiLevel, int luckyPercent)
        {
            if (jingMaiBodyLevel != client.ClientData.JingMaiBodyLevel)
            {
                return -100000;
            }

            if (jingMaiBodyLevel > Global.MaxJingMaiBodyLevel)
            {
                return -10000;
            }

            int dbID = -1;
            int nextLevel = 1;
            JingMaiData jingMaiData = null;
            if (jingMaiLevel == -1) //根据配置文件顺序升级
            {
                jingMaiData = Global.GetJingMaiDataByJMID(client, jingMaiBodyLevel, jingMaiID);
                if (null != jingMaiData)
                {
                    dbID = jingMaiData.DbID;
                    nextLevel = jingMaiData.JingMaiLevel + 1;
                    if (nextLevel > MaxJingMaiLevel) nextLevel = -1;
                }
            }
            else
            {
                nextLevel = jingMaiLevel;
                jingMaiData = Global.GetJingMaiDataByJMID(client, jingMaiBodyLevel, jingMaiID);
                if (null != jingMaiData)
                {
                    dbID = jingMaiData.DbID;
                }

                if (nextLevel > MaxJingMaiLevel) nextLevel = -1;
            }

            //已经到顶级
            if (nextLevel < 0)
            {
                return -1000;
            }

            if (jingMaiLevel == -1) //根据配置文件顺序升级
            {
                //今日是否还有剩余的冲穴次数
                if (!Global.TodayCanChongXue(client))
                {
                    return -11000;
                }
            }

            // 属性改造 加上一级属性公式 区分职业[8/15/2013 LiaoWei]
            int nOcc = Global.CalcOriginalOccupationID(client);

            SystemXmlItem systemJingMai = Global.GetJingMaiXmlItem(jingMaiID, nOcc, jingMaiBodyLevel - 1);
            if (null == systemJingMai)
            {
                return -1;
            }

            //获取冲穴到下一个需要的角色级别
            int needRoleLevel = Global.GetUpJingMaiNeedLevel(client, systemJingMai, jingMaiBodyLevel, jingMaiID);
            if (client.ClientData.Level < needRoleLevel)
            {
                return -200;
            }

            if (jingMaiLevel == -1) //根据配置文件顺序升级
            {
                //获取冲穴到下一个需要消耗的灵力
                int needLingLi = Global.GetUpJingMaiNeedLingLi(client, systemJingMai, jingMaiBodyLevel, jingMaiID);
                if (needLingLi < 0)
                {
                    return -2;
                }

                if (client.ClientData.InterPower < needLingLi)
                {
                    return -3; //内力不足
                }

                //先消耗内力值
                //扣除角色的内力
                if (!GameManager.ClientMgr.SubInterPower(client, needLingLi))
                {
                    return -4; //内力不足
                }

                int chongXueGoodsID = systemJingMai.GetIntValue("GoodsID");
                if (Global.GetTotalGoodsCountByID(client, chongXueGoodsID) <= 0)
                {
                    return -104;
                }

                bool usedBinding = false;
                bool usedTimeLimited = false;

                //从用户物品中扣除消耗的数量
                if (!GameManager.ClientMgr.NotifyUseGoods(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool,
                    client, chongXueGoodsID, 1, false, out usedBinding, out usedTimeLimited))
                {
                    return -104;
                }

                //修改今日冲穴次数
                Global.UpdateDailyJingMaiData(client);

                //luckyPercent = Global.GMin(100, luckyPercent);
                //int jingMaiRandNum = (int)systemJingMai.GetDoubleValue("SucceedRecte");
                //if (luckyPercent > jingMaiRandNum)
                //{
                //    int needJingMaiLingZhiNum = luckyPercent - jingMaiRandNum;
                //    needJingMaiLingZhiNum = (needJingMaiLingZhiNum - 1) / Global.JingMaiLingZhiLuckyNum + 1;
                //    if (needJingMaiLingZhiNum > 0)
                //    {
                //        int jingMaiLingZhiGoodsID = (int)GameManager.systemParamsList.GetParamValueIntByName("LingZhiGoodsID");
                //        if (Global.GetTotalGoodsCountByID(client, jingMaiLingZhiGoodsID) < needJingMaiLingZhiNum)
                //        {
                //            return -5; //经脉灵芝个数不足
                //        }

                //        usedBinding = false;
                //        usedTimeLimited = false;

                //        //从用户物品中扣除消耗的数量
                //        if (!GameManager.ClientMgr.NotifyUseGoods(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool,
                //            client, jingMaiLingZhiGoodsID, needJingMaiLingZhiNum, false, out usedBinding, out usedTimeLimited))
                //        {
                //            return -6; //扣除经脉灵芝时失败
                //        }

                //        jingMaiRandNum = luckyPercent; //增加成功率
                //    }
                //}

                //if (client.ClientData.TempJMChongXueRate != 1) //临时测试加成功率
                //{
                //    jingMaiRandNum *= client.ClientData.TempJMChongXueRate;
                //    jingMaiRandNum = Global.GMin(100, jingMaiRandNum);
                //}

                //计算随机数
                //int rndNum = Global.GetRandomNumber(0, 101);
                //if (rndNum > jingMaiRandNum)
                //{
                //    //冲脉的失败次数
                //    //if (client.ClientData.ChongXueFailedNum < 9) //控制最大的连续失败次数不能超过10次
                //    {
                //        //冲脉的失败次数
                //        client.ClientData.ChongXueFailedNum += 1;
                //        return -10;
                //    }
                //}
            }

            //冲脉的失败次数
            client.ClientData.ChongXueFailedNum = 0; //只要成功就重置

            string strcmd = "";

            //向DBServer请求修改物品2
            string[] dbFields = null;
            strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", client.ClientData.RoleID, dbID, jingMaiBodyLevel, jingMaiID, nextLevel);
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool,
                (int)TCPGameServerCmds.CMD_DB_UPJINGMAI_LEVEL, strcmd, out dbFields, client.ServerId);
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                return -20;
            }

            if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[0]) < 0)
            {
                return -21;
            }

            dbID = Convert.ToInt32(dbFields[0]);

            if (null == client.ClientData.JingMaiDataList)
            {
                client.ClientData.JingMaiDataList = new List<JingMaiData>();
            }

            int addXueWeiNum = 0;
            int oldJingMaiLevel = 0, newJingMaiLevel = 0;

            //更新本地数据
            lock (client.ClientData.JingMaiDataList)
            {
                if (null == jingMaiData)
                {
                    jingMaiData = new JingMaiData()
                    {
                        DbID = dbID,
                        JingMaiID = jingMaiID,
                        JingMaiLevel = nextLevel,
                        JingMaiBodyLevel = jingMaiBodyLevel,
                    };

                    client.ClientData.JingMaiDataList.Add(jingMaiData);
                    addXueWeiNum = nextLevel;
                    newJingMaiLevel = jingMaiData.JingMaiLevel;
                }
                else
                {
                    addXueWeiNum = nextLevel - jingMaiData.JingMaiLevel;

                    oldJingMaiLevel = jingMaiData.JingMaiLevel;

                    jingMaiData.JingMaiLevel = nextLevel;

                    newJingMaiLevel = jingMaiData.JingMaiLevel;
                }
            }

            //写入角色冲脉成功的日志
            Global.AddRoleJingMaiEvent(client, client.ClientData.JingMaiBodyLevel, jingMaiID, oldJingMaiLevel, newJingMaiLevel);

            //增加已经冲穴成功的个数
            client.ClientData.RoleXueWeiNum += addXueWeiNum;

            //经脉某条贯通
            Global.BroadcastJingMaiLevelOk(client, jingMaiData);

            //通知角色经脉列表数据的指令信息
            //GameManager.ClientMgr.NotifyJingMaiListCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

            //已经冲通的穴位的个数
            int totalJingMaiXueWeiNum = client.ClientData.RoleXueWeiNum;

            //计算经脉的重数
            if (client.ClientData.JingMaiBodyLevel < Global.MaxJingMaiBodyLevel)
            {
                int oldJingMaiBodyLevel = client.ClientData.JingMaiBodyLevel;
                Global.CalcJingMaiBodyLevel(client, totalJingMaiXueWeiNum);

                //经脉某重通玄
                Global.BroadcastJingMaiBodyLevelOk(client, oldJingMaiBodyLevel);
            }

            //加入等待执行的命令
            Global.AddRoleQueueCmd(client, QueueCmdIDs.NotifyEndJingMai, TimeUtil.NOW() * 10000 + (2L * 1000L * 10000L));

            jingMaiLevel = nextLevel;
            return dbID;
        }

        /// <summary>
        /// 处理结束冲脉成功的状态
        /// </summary>
        /// <param name="client"></param>
        public static void ProcessEndUpJingMai(GameClient client)
        {
            //通知播放冲穴加经验的特效
            //通知其自己和其他人，自己开始播放特效(同一个地图才需要通知)
            //通知角色结束冲穴状态的指令信息
            GameManager.ClientMgr.NotifyEndChongXueCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

            //通知客户端属性变化
            GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

            // 总生命值和魔法值变化通知(同一个地图才需要通知)
            GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

            //通知角色经脉综合信息的指令信息
            GameManager.ClientMgr.NotifyJingMaiInfoCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

            //if (jingMaiLevel == -1) //根据配置文件顺序升级, 才有经验
            {
                //给自己添加冲穴成功的经验
                AddSelfJingMaiExp(client);

                //给自己周围的人添加冲穴成功的经验
                AddOthersJingMaiExp(client);
            }
        }

        /// <summary>
        /// 给角色添加冲穴成功的经验
        /// </summary>
        private static void AddRoleJingMaiExp(GameClient client, int jingMaiExp)
        {
            //处理角色经验
            GameManager.ClientMgr.ProcessRoleExperience(client, jingMaiExp, true, false);
        }

        /// <summary>
        /// 增加快速冲脉经验
        /// </summary>
        /// <param name="client"></param>
        public static void AddSelfQuickJingMaiExp(GameClient client)
        {
            //多给一个穴位的经验，这儿应该是24倍，因为还有一条异步给的经验
            Global.AddSelfJingMaiExp(client, 25);
        }

        /// <summary>
        /// 给自己添加冲穴成功的经验,nMultiple表示经验加成次数，对于经脉神通丹，先增加24倍单条经验
        /// </summary>
        private static void AddSelfJingMaiExp(GameClient client, int nMultiple = 1)
        {
            if (nMultiple < 1)
            {
                nMultiple = 1;
            }

            //给自己添加经验
            SystemXmlItem systemJingMaiExp = null;
            if (GameManager.systemJingMaiExpMgr.SystemXmlItemDict.TryGetValue(client.ClientData.JingMaiBodyLevel, out systemJingMaiExp))
            {
                int selfRoleExp = (int)systemJingMaiExp.GetIntValue("SelfRoleExp") * nMultiple;
                AddRoleJingMaiExp(client, selfRoleExp);

                client.ClientData.TotalJingMaiExp += selfRoleExp;

                //更新指定玩家获取的经脉经验数据
                GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEJINGMAIEXP,
                    string.Format("{0}:{1}:{2}", client.ClientData.RoleID, selfRoleExp, client.ClientData.JingMaiExpNum),
                    null, client.ServerId);

                //通知其他角色，获取的冲脉经验和剩余的获取次数
                GameManager.ClientMgr.NotifyOtherJingMaiExp(client);
            }
        }

        /// <summary>
        /// 给自己周围的人添加冲穴成功的经验
        /// </summary>
        private static void AddOthersJingMaiExp(GameClient client)
        {
            // 查找指定圆周范围内的角色
            List<Object> clientList = new List<Object>();
            GameManager.ClientMgr.LookupRolesInCircle(client, client.ClientData.MapCode, client.ClientData.PosX, client.ClientData.PosY, 250, clientList);
            if (clientList.Count <= 0) return;

            //给自己添加经验
            SystemXmlItem systemJingMaiExp = null;
            for (int i = 0; i < clientList.Count; i++)
            {
                GameClient otherClient = clientList[i] as GameClient;

                systemJingMaiExp = null;
                if (!GameManager.systemJingMaiExpMgr.SystemXmlItemDict.TryGetValue(otherClient.ClientData.JingMaiBodyLevel, out systemJingMaiExp))
                {
                    continue;
                }

                //判断是否能接受经验添加
                int canGetExpNum = GetLeftAddJingMaiExpNum(otherClient);
                if (canGetExpNum <= 0)
                {
                    continue;
                }

                otherClient.ClientData.JingMaiExpNum += 1;

                int othersRoleExp = (int)systemJingMaiExp.GetIntValue("OthersRoleExp");
                AddRoleJingMaiExp(otherClient, othersRoleExp);

                otherClient.ClientData.TotalJingMaiExp += othersRoleExp;

                //更新指定玩家获取的经脉经验数据
                GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEJINGMAIEXP,
                    string.Format("{0}:{1}:{2}", otherClient.ClientData.RoleID, othersRoleExp, otherClient.ClientData.JingMaiExpNum),
                    null, otherClient.ServerId);

                //通知其他角色，获取的冲脉经验和剩余的获取次数
                GameManager.ClientMgr.NotifyOtherJingMaiExp(otherClient);
            }
        }

        /// <summary>
        /// 获取剩余经脉经验加入次数
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int GetLeftAddJingMaiExpNum(GameClient client)
        {
            long ticks = TimeUtil.NOW();
            long canGetExpNum = ((ticks - client.ClientData.RegTime) / (60 * 60 * 24 * 1000)) * 20;
            canGetExpNum += 20;
            canGetExpNum -= client.ClientData.JingMaiExpNum;
            return (int)canGetExpNum;
        }

        /// <summary>
        /// 将经脉的列表属性加入Buffer中
        /// </summary>
        /// <param name="client"></param>
        public static void UpdateJingMaiListProps(GameClient client, bool toAdd = true)
        {
            Dictionary<string, int> jingMaiPropsDict = new Dictionary<string, int>();

            if (null != client.ClientData.JingMaiDataList)
            {
                lock (client.ClientData.JingMaiDataList)
                {
                    for (int i = 0; i < client.ClientData.JingMaiDataList.Count; i++)
                    {
                        JingMaiData jingMaiData = client.ClientData.JingMaiDataList[i];
                        UpdateJingMaiProps(client, jingMaiData, jingMaiPropsDict, toAdd);
                    }
                }
            }

            int canGetExpNum = GetLeftAddJingMaiExpNum(client);
            jingMaiPropsDict["JiaChengCiShu"] = (int)canGetExpNum;

            jingMaiPropsDict["LeiJiJingYan"] = (int)client.ClientData.TotalJingMaiExp;
            client.ClientData.JingMaiPropsDict = jingMaiPropsDict;
        }

        /// <summary>
        /// 计算经脉的属性
        /// </summary>
        /// <param name="systemJingMaiItem"></param>
        /// <param name="jingMaiData"></param>
        /// <returns></returns>
        private static int CalcJingMaiProp(SystemXmlItem systemJingMaiItem, JingMaiData jingMaiData)
        {
            int property = systemJingMaiItem.GetIntValue("Property");
            return property;
        }

        /// <summary>
        /// 计算从低级到高级的经脉的属性值
        /// </summary>
        /// <param name="jingMaiData"></param>
        /// <returns></returns>
        private static void CalcLevelsJingMaiProp(GameClient client, JingMaiData jingMaiData, ref Dictionary<string, int> propsDict)
        {
            string propName = "";
            int property = 0;

            // 属性改造 加上一级属性公式 区分职业[8/15/2013 LiaoWei]
            int nOcc = Global.CalcOriginalOccupationID(client);

            SystemXmlItem systemJingMai = null;
            systemJingMai = Global.GetJingMaiXmlItem(jingMaiData.JingMaiID, nOcc, jingMaiData.JingMaiBodyLevel - 1);
            if (null == systemJingMai)
            {
                return;
            }

            property = CalcJingMaiProp(systemJingMai, jingMaiData);
            propName = systemJingMai.GetStringValue("EnglishName");
            for (int i = 1; i <= jingMaiData.JingMaiLevel; i++)
            {
                if (!propsDict.ContainsKey(propName))
                {
                    propsDict[propName] = 0;
                }

                propsDict[propName] += property;
            }
        }

        /// <summary>
        /// 将经脉的属性加入Buffer中
        /// </summary>
        /// <param name="client"></param>
        private static void UpdateJingMaiProps(GameClient client, JingMaiData jingMaiData, Dictionary<string, int> jingMaiPropsDict, bool toAdd)
        {
            Dictionary<string, int> propsDict = new Dictionary<string, int>();
            CalcLevelsJingMaiProp(client, jingMaiData, ref propsDict);
            if (propsDict.Count <= 0)
            {
                return;
            }

            foreach (var propName in propsDict.Keys)
            {
                int value = propsDict[propName];
                if (!jingMaiPropsDict.ContainsKey(propName))
                {
                    jingMaiPropsDict[propName] = 0;
                }

                if (toAdd)
                {
                    jingMaiPropsDict[propName] = jingMaiPropsDict[propName] + value;
                }
                else
                {
                    jingMaiPropsDict[propName] = jingMaiPropsDict[propName] - value;
                }
            }
        }

        /// <summary>
        /// 计算经脉的冲过的累加穴位个数
        /// </summary>
        /// <param name="client"></param>
        public static int CalcJingMaiXueWeiNum(SafeClientData clientData)
        {
            if (null == clientData.JingMaiDataList)
            {
                return 0;
            }

            int totalNum = 0;

            lock (clientData.JingMaiDataList)
            {
                for (int i = 0; i < clientData.JingMaiDataList.Count; i++)
                {
                    totalNum += clientData.JingMaiDataList[i].JingMaiLevel;
                }
            }

            return totalNum;
        }

        /// <summary>
        /// 计算经脉的冲通的脉的个数
        /// </summary>
        /// <param name="client"></param>
        public static int CalcJingMaiOkNum(SafeClientData clientData)
        {
            if (null == clientData.JingMaiDataList)
            {
                return 0;
            }

            int totalNum = 0;

            lock (clientData.JingMaiDataList)
            {
                for (int i = 0; i < clientData.JingMaiDataList.Count; i++)
                {
                    if (clientData.JingMaiDataList[i].JingMaiLevel >= Global.MaxJingMaiLevel)
                    {
                        totalNum += 1;
                    }
                }
            }

            return totalNum;
        }

        /// <summary>
        /// 计算经脉的重数
        /// </summary>
        /// <param name="client"></param>
        public static void CalcJingMaiBodyLevel(GameClient client, int totalJingMaiXueWeiNum = -1)
        {
            int totalNum = totalJingMaiXueWeiNum;
            if (totalNum < 0)
            {
                totalNum = client.ClientData.RoleXueWeiNum;
            }

            client.ClientData.JingMaiBodyLevel = totalNum / (Global.MaxJingMaiLevel * (int)JingMaiTypes.Max) + 1;
        }

        /// <summary>
        /// 获取一个角色今日已经冲脉的次数
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int GetDailyJingMaiNum(GameClient client)
        {
            //判断是否超过了最大的上限次数
            if (null == client.ClientData.MyDailyJingMaiData)
            {
                return 0;
            }

            string today = TimeUtil.NowDateTime().ToString("yyyy-MM-dd");
            DailyJingMaiData dailyJingMaiData = client.ClientData.MyDailyJingMaiData;
            if (dailyJingMaiData.JmTime != today)
            {
                return 0;
            }

            return dailyJingMaiData.JmNum;
        }

        /// <summary>
        /// 今日剩余的冲穴次数
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int TodayChongXueNum(GameClient client)
        {
            //获取一个角色今日已经冲脉的次数
            int dailyJingMaiNum = Global.GetDailyJingMaiNum(client);
            return (Global.MaxDailyJingMaiNum - dailyJingMaiNum);
        }

        /// <summary>
        /// 今日是否还能冲穴
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool TodayCanChongXue(GameClient client)
        {
            if (Global.TodayChongXueNum(client) <= 0)
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// 更新今日经脉冲穴的次数数据
        /// </summary>
        /// <param name="client"></param>
        public static void UpdateDailyJingMaiData(GameClient client, int num = 1)
        {
            bool reset = false;
            string today = TimeUtil.NowDateTime().ToString("yyyy-MM-dd");

            //判断是否超过了最大的上限次数
            if (null == client.ClientData.MyDailyJingMaiData)
            {
                reset = true;
            }
            else
            {
                if (client.ClientData.MyDailyJingMaiData.JmTime == today)
                {
                    client.ClientData.MyDailyJingMaiData.JmNum += num;
                }
                else
                {
                    reset = true;
                }
            }

            if (reset)
            {
                client.ClientData.MyDailyJingMaiData = new DailyJingMaiData()
                {
                    JmTime = today,
                    JmNum = num,
                };
            }

            //更新DBServer的日跑环数据
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEDAILYJINGMAI,
                string.Format("{0}:{1}:{2}",
                client.ClientData.RoleID,
                client.ClientData.MyDailyJingMaiData.JmTime,
                client.ClientData.MyDailyJingMaiData.JmNum),
                null, client.ServerId);

            //将新的每日冲穴次数数据通知自己
            GameManager.ClientMgr.NotifyDailyJingMaiData(client);
        }

        #endregion 角色经脉

        #region 地图传送管理

        /// <summary>
        /// 地图间传送需要的物品ID
        /// </summary>
        public static int MapTransGoodsID = 32000; //传送石

        /// <summary>
        /// 地图间传送需要的物品ID
        /// </summary>
        public static int MapTransGoodsID2 = 32003; //新手传送石

        /// <summary>
        /// 获取今日的免费传送次数
        /// </summary>
        /// <param name="client"></param>
        public static int GetFreeChuanSongNum(GameClient client)
        {
            int dayID = TimeUtil.NowDateTime().DayOfYear;
            int freeCSDayID = Global.GetRoleParamsInt32FromDB(client, RoleParamName.FreeCSDayID);
            int freeCSNum = Math.Max(0, Global.GetRoleParamsInt32FromDB(client, RoleParamName.FreeCSNum));

            int maxTimes = (int)GameManager.systemParamsList.GetParamValueIntByName("FreeCSMaxTimes");

            if (freeCSDayID == dayID)
            {
                return (maxTimes - freeCSNum);
            }

            return maxTimes;
        }

        /// <summary>
        /// 增加今日的免费传送次数
        /// </summary>
        /// <param name="client"></param>
        public static void AddFreeChuanSongNum(GameClient client)
        {
            int dayID = TimeUtil.NowDateTime().DayOfYear;
            int freeCSDayID = Global.GetRoleParamsInt32FromDB(client, RoleParamName.FreeCSDayID);
            int freeCSNum = Math.Max(0, Global.GetRoleParamsInt32FromDB(client, RoleParamName.FreeCSNum));

            if (freeCSDayID == dayID)
            {
                freeCSNum++;
            }
            else
            {
                freeCSDayID = dayID;
                freeCSNum = 1;
            }

            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.FreeCSDayID, freeCSDayID, true);
            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.FreeCSNum, freeCSNum, true);
        }


        /// <summary>
        /// 获取世界地图传送所需金币数
        /// </summary>
        /// <param name="mapCode"></param>
        /// <returns></returns>
        public static int GetMapTransNeedMoney(int mapCode)
        {
            int needMoney = 0;

            if (Data.MapTransNeedMoneyDict.ContainsKey(mapCode))
            {
                needMoney = Data.MapTransNeedMoneyDict[mapCode];
            }
            else
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("GetMapTransNeedMoney mapCode Error, mapCode={0}", mapCode));
            }

            return needMoney;
        }

        #endregion 地图传送管理

        #region 与DBServer通讯

        public static T1 SendToNameServer<T, T1>(TCPClient tcpClient, int cmdId, T cmdInfo)
        {
            T1 fieldsData = default(T1);
            byte[] bytesCmd = DataHelper.ObjectToBytes<T>(cmdInfo);

            //获取
            TCPOutPacket tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(TCPOutPacketPool.getInstance(), bytesCmd, 0, bytesCmd.Length, cmdId);
            if (null != tcpOutPacket)
            {
                byte[] bytesData = Global.SendAndRecvData(tcpClient, tcpOutPacket);

                if (null == bytesData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)cmdId));
                    return fieldsData;
                }

                //解析返回的信息
                fieldsData = DataHelper.BytesToObject<T1>(bytesData, 6, bytesData.Length - 6);
                PushBackTcpOutPacket(tcpOutPacket);
            }

            return fieldsData;
        }

        public static byte[] SendAndRecvData(TCPClient tcpClient, TCPOutPacket tcpOutPacket)
        {
            byte[] bytesData = null;

            //查询
            try
            {
                //获取
                if (null != tcpClient)
                {
                    bytesData = tcpClient.SendData(tcpOutPacket);
                }

                if (null != bytesData && bytesData.Length >= 6)
                {
                    UInt16 returnCmdID = BitConverter.ToUInt16(bytesData, 4);
                    if ((UInt16)TCPGameServerCmds.CMD_DB_ERR_RETURN == returnCmdID) //返回失败的错误信息
                    {
                        //告诉外边失败
                        bytesData = null;
                        LogManager.WriteLog(LogTypes.Error, "与NameServer 通讯时返回错误 CMD_DB_ERR_RETURN");
                    }
                }
            }
            catch (Exception ex)
            {
                LogManager.WriteLog(LogTypes.Error, "与NameServer 通讯时发生异常" + ex);
            }

            return bytesData;
        }

        public static byte[] SendAndRecvData(TCPOutPacket tcpOutPacket, int serverId, int PoolId)
        {
            TCPClient tcpClient = null;
            byte[] bytesData = null;

            //查询
            try
            {
                //获取
                tcpClient = GlobalNew.PopGameDbClient(serverId, PoolId);
                if (null != tcpClient)
                {
                    bytesData = tcpClient.SendData(tcpOutPacket);
                }

                if (null != bytesData && bytesData.Length >= 6)
                {
                    UInt16 returnCmdID = BitConverter.ToUInt16(bytesData, 4);
                    if ((UInt16)TCPGameServerCmds.CMD_DB_ERR_RETURN == returnCmdID) //返回失败的错误信息
                    {
                        //告诉外边失败
                        bytesData = null;
                        LogManager.WriteLog(LogTypes.Error, "与DBServer 通讯时返回错误 CMD_DB_ERR_RETURN");
                    }
                }
            }
            finally
            {
                //还回
                if (null != tcpClient)
                {
                    GlobalNew.PushGameDbClient(serverId, tcpClient, PoolId);
                }
            }

            return bytesData;
        }
        //public static byte[] ProtocolSerialize<T>(this T obj)
        //where T : global::ProtoBuf.IExtensible
        //{
        //    try
        //    {
        //        using (MemoryStream ms = new MemoryStream())
        //        {
        //            Serializer.Serialize<T>(ms, obj);
        //            return ms.ToArray();//序列化结果
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        SysConOut.WriteLine(e.Message);
        //        return null;
        //    }

        //}

        public static TCPProcessCmdResults RequestToDBServer(TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] CmdData, int serverId, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            try
            {
                byte[] bytesData = Global.SendAndRecvData(nID, CmdData, serverId);
                if (null == bytesData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                Int32 length = BitConverter.ToInt32(bytesData, 0);
                UInt16 cmd = BitConverter.ToUInt16(bytesData, 4);

                tcpOutPacket = pool.Pop();
                tcpOutPacket.PacketCmdID = (UInt16)cmd;
                tcpOutPacket.FinalWriteData(bytesData, 6, length - 2);

                
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteExceptionLogEx(ex, "RequestToDBServer");
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }
        /// <summary>
        /// 请求DBServer进行处理
        /// </summary>
        /// <param name="tcpClientPool"></param>
        /// <param name="tcpRandKey"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        public static TCPProcessCmdResults RequestToDBServer(TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] CmdData, out string[] fields, int serverId)
        {
            fields = null;

            try
            {
                byte[] bytesData = Global.SendAndRecvData(nID, CmdData, serverId);
                if (null == bytesData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                Int32 length = BitConverter.ToInt32(bytesData, 0);
                string strData = new UTF8Encoding().GetString(bytesData, 6, length - 2);

                //解析客户端的指令
                fields = strData.Split(':');
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteExceptionLogEx(ex, "RequestToDBServer");
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }
        public static TCPProcessCmdResults RequestToDBServer(TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, string strcmd, out string[] fields, int serverId)
        {
            fields = null;

            try
            {
                byte[] bytesData = Global.SendAndRecvData(nID, strcmd, serverId);
                if (null == bytesData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                Int32 length = BitConverter.ToInt32(bytesData, 0);
                string strData = new UTF8Encoding().GetString(bytesData, 6, length - 2);

                //解析客户端的指令
                fields = strData.Split(':');
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteExceptionLogEx(ex, "RequestToDBServer");
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 将指令数据发送给DB,并接收返回的数据
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="cmdId"></param>
        /// <param name="data"></param>
        /// <param name="serverId"></param>
        /// <param name="PoolId">0 GameDbServer,1 LogDbServer</param>
        /// <returns></returns>
        public static byte[] SendAndRecvData<T>(int cmdId, T data, int serverId, int PoolId = 0)
        {
            byte[] bytesData = null;
            TCPOutPacket tcpOutPacket = null;
            TCPOutPacketPool pool = TCPOutPacketPool.getInstance();

            if (null != pool)
            {
                //查询
                try
                {
                    //获取
                    if (data is string)
                    {
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, data as string, cmdId);
                    }
                    else if (data is byte[])
                    {
                        tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, data as byte[], cmdId);
                    }
                    else
                    {
                        byte[] cmdData = DataHelper.ObjectToBytes<T>(data);
                        if (null != cmdData)
                        {
                            tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, cmdData, cmdId);
                        }
                    }

                    if (null != tcpOutPacket)
                    {
                        bytesData = Global.SendAndRecvData(tcpOutPacket, serverId, PoolId);
                    }
                }
                finally
                {
                    //还回
                    if (null != tcpOutPacket)
                    {
                        pool.Push(tcpOutPacket);
                    }
                }
            }

            return bytesData;
        }

        /// <summary>
        /// 向DB请求
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="cmdId"></param>
        /// <param name="cmd"></param>
        /// <returns></returns>
        public static T1 sendToDB<T1, T2>(int cmdId, T2 cmd, int serverId)
        {
            try
            {
                byte[] bytesData = Global.SendAndRecvData(cmdId, cmd, serverId);

                if (null == bytesData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)cmdId));
                    return default(T1);
                }

                Int32 length = BitConverter.ToInt32(bytesData, 0);

                T1 obj = DataHelper.BytesToObject<T1>(bytesData, 6, length - 2);

                return obj;
            }
            catch (Exception ex)
            {
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "sendToDB", false);
            }

            return default(T1);
        }

        /// <summary>
        /// 执行与DBServer的通讯指令，返回字符串数组结果， 失败返回NULL
        /// </summary>
        /// <param name="nID"></param>
        /// <param name="strcmd"></param>
        /// <returns></returns>
        public static string[] SendToDB<T>(int nCmdID, T CmdInfo, int serverId)
        {
            byte[] bytesCmd = DataHelper.ObjectToBytes<T>(CmdInfo);
            byte[] bytesData = Global.SendAndRecvData(nCmdID, bytesCmd, serverId);

            if (null == bytesData)
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nCmdID));
                return null;
            }

            string[] fieldsData = null;
            Int32 length = BitConverter.ToInt32(bytesData, 0);
            string strData = new UTF8Encoding().GetString(bytesData, 6, length - 2);

            //解析客户端的指令
            fieldsData = strData.Split(':');
            if (null == fieldsData || fieldsData.Length <= 0)
            {
                return null;
            }

            return fieldsData;
        }


        /// <summary>
        /// 请求DBServer进行处理
        /// </summary>
        /// <param name="tcpClientPool"></param>
        /// <param name="tcpRandKey"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        public static TCPProcessCmdResults RequestToDBServer2(TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, string strcmd, out TCPOutPacket tcpOutPacket, int serverId)
        {
            tcpOutPacket = null;

            try
            {
                byte[] bytesData = Global.SendAndRecvData(nID, strcmd, serverId);
                if (null == bytesData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                Int32 length = BitConverter.ToInt32(bytesData, 0);
                UInt16 cmd = BitConverter.ToUInt16(bytesData, 4);

                tcpOutPacket = pool.Pop();
                tcpOutPacket.PacketCmdID = (UInt16)cmd;
                tcpOutPacket.FinalWriteData(bytesData, 6, length - 2);
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "RequestToDBServer2", false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 请求DBServer进行处理
        /// </summary>
        /// <param name="tcpClientPool"></param>
        /// <param name="tcpRandKey"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        public static TCPProcessCmdResults RequestToDBServer3(TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, string strcmd, out byte[] bytesData, int serverId)
        {
            bytesData = null;

            try
            {
                bytesData = Global.SendAndRecvData(nID, strcmd, serverId);
                if (null == bytesData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "RequestToDBServer3", false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 请求DBServer进行处理
        /// </summary>
        /// <param name="tcpClientPool"></param>
        /// <param name="tcpRandKey"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        public static TCPProcessCmdResults RequestToDBServer4(TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, string strcmd, out byte[] bytesData, out int dataStartPos, out int dataLen, int serverId)
        {
            bytesData = null;
            dataStartPos = 0;
            dataLen = 0;

            try
            {
                bytesData = Global.SendAndRecvData(nID, strcmd, serverId);
                if (null == bytesData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                Int32 length = BitConverter.ToInt32(bytesData, 0);

                dataStartPos = 6;
                dataLen = length - 2;

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, "RequestToDBServer4", false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 将请求转到DBServer进行处理
        /// </summary>
        /// <param name="tcpClientPool"></param>
        /// <param name="tcpRandKey"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        public static TCPProcessCmdResults TransferRequestToDBServer(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket, int serverId)
        {
            tcpOutPacket = null;

            try
            {
                byte[] bytesData = Global.SendAndRecvData(nID, data, socket.ServerId);
                if (null == bytesData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                Int32 length = BitConverter.ToInt32(bytesData, 0);
                UInt16 cmd = BitConverter.ToUInt16(bytesData, 4);

                tcpOutPacket = pool.Pop();
                tcpOutPacket.PacketCmdID = (UInt16)cmd;
                tcpOutPacket.FinalWriteData(bytesData, 6, length - 2);

                //Console.WriteLine("========================TransferRequestToDBServer================");
                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
               // Console.WriteLine("========================TransferRequestToDBServer Exception================");
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 将请求转到DBServer进行处理
        /// </summary>
        /// <param name="tcpClientPool"></param>
        /// <param name="tcpRandKey"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        public static TCPProcessCmdResults TransferRequestToDBServer2(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPRandKey tcpRandKey, TCPOutPacketPool pool, int nID, byte[] data, int count, out byte[] bytesData, int serverId)
        {
            bytesData = null;

            try
            {
                bytesData = Global.SendAndRecvData(nID, data, socket.ServerId);
                if (null == bytesData)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }

                return TCPProcessCmdResults.RESULT_DATA;
            }
            catch (Exception ex)
            {
                //System.Windows.Application.Current.Dispatcher.Invoke((MethodInvoker)delegate
                //{
                // 格式化异常错误信息
                DataHelper.WriteFormatExceptionLog(ex, Global.GetDebugHelperInfo(socket), false);
                //throw ex;
                //});
            }

            return TCPProcessCmdResults.RESULT_FAILED;
        }

        /// <summary>
        /// 执行与DBServer的通讯指令，返回字符串数组结果， 失败返回NULL
        /// </summary>
        /// <param name="nID"></param>
        /// <param name="strcmd"></param>
        /// <returns></returns>
        public static string[] ExecuteDBCmd(int nID, string strcmd, int serverId)
        {
            string[] fieldsData = null;
            if (TCPProcessCmdResults.RESULT_FAILED == Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool,
                nID, strcmd, out fieldsData, serverId))
            {
                return null;
            }

            if (null == fieldsData || fieldsData.Length <= 0)
            {
                return null;
            }

            return fieldsData;
        }
        public static string[] ExecuteDBCmd(int nID, byte[]CmdData, int serverId)
        {
            string[] fieldsData = null;
            if (TCPProcessCmdResults.RESULT_FAILED == Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool,
                nID, CmdData, out fieldsData, serverId))
            {
                return null;
            }

            if (null == fieldsData || fieldsData.Length <= 0)
            {
                return null;
            }

            return fieldsData;
        }

        /// <summary>
        /// 从GameDBServer查询用户的userid和钱数
        /// </summary>
        /// <param name="roleID"></param>
        /// <param name="otherRoleName"></param>
        /// <param name="userMoney"></param>
        /// <param name="realMoney"></param>
        /// <returns></returns>
        public static string QueryUserMoneyFromDB(int roleID, string otherRoleName, out int userMoney, out int realMoney, int serverId)
        {
            userMoney = 0;
            realMoney = 0;
            if (string.IsNullOrEmpty(otherRoleName))
            {
                return null;
            }

            //从DBServer获取角色的所在的线路
            string[] dbFields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_SPR_QUERYUMBYNAME, string.Format("{0}:{1}", roleID, otherRoleName), serverId);
            if (null == dbFields || dbFields.Length < 4)
            {
                if (null == dbFields)
                {
                    return null;
                }
            }
            else
            {
                userMoney = Global.SafeConvertToInt32(dbFields[2]);
                realMoney = Global.SafeConvertToInt32(dbFields[3]);
            }

            return dbFields[1];
        }

        public static string QueryUserMoneyFromDB(int roleID, string otherRoleName, int serverId = GameManager.LocalServerId)
        {
            int userMoney = 0;
            int realMoney = 0;
            if (string.IsNullOrEmpty(otherRoleName))
            {
                return null;
            }

            //从DBServer获取角色的所在的线路
            string[] dbFields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_SPR_QUERYUMBYNAME, string.Format("{0}:{1}", roleID, otherRoleName), serverId);
            if (null == dbFields || dbFields.Length < 4)
            {
                if (null == dbFields)
                {
                    return null;
                }
            }
            else
            {
                //userMoney = Global.SafeConvertToInt32(dbFields[2]);
                //realMoney = Global.SafeConvertToInt32(dbFields[3]);
            }

            return dbFields[1];
        }

        public static string[] QeuryUserActivityInfo(GameClient client, string keyStr, int activityType, string tag = "0")
        {
            string strcmd = string.Format("{0}:{1}:{2}:{3}", client.ClientData.RoleID, keyStr, activityType, tag);
            return Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_QUERY_USERACTIVITYINFO, strcmd, client.ServerId);
        }

        public static string[] UpdateUserActivityInfo(GameClient client, string keyStr, int activityType, long hasGetTimes, string lastGetTime)
        {
            string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", client.ClientData.RoleID, keyStr, activityType, hasGetTimes, lastGetTime);
            return Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATE_USERACTIVITYINFO, strcmd, client.ServerId);
        }

        #endregion 与DBServer通讯

        #region 服务器心跳管理

        //2011-05-31 精简指令，减少DBServer端的压力，和CMD_DB_GET_CHATMSGLIST合并
        /// <summary>
        /// 发送的心跳的次数(便于DBServer识别是否是重新上线的服务器)
        /// </summary>
        public static int SendServerHeartCount = 0;

        #endregion 服务器心跳管理

        #region 账户管理

        public static int GetSwitchServerWaitSecs(TMSKSocket socket)
        {
            //只有每天0点前后3分钟才做限制
            TimeSpan timeOfDay = TimeUtil.NowDateTime().TimeOfDay;
            if (timeOfDay.TotalMinutes >= GameManager.ConstCheckServerTimeDiffMinutes && timeOfDay.TotalMinutes < TimeSpan.FromDays(1).TotalMinutes - GameManager.ConstCheckServerTimeDiffMinutes)
            {
                return 0;
            }

            long waitSecs = (socket.session.LastLogoutServerTicks - TimeUtil.NOW()) / 1000;
            if (waitSecs < 0 || waitSecs > 60)
            {
                if (waitSecs > 60 && waitSecs < 60 * 60)
                {
                    //超过60秒误差的，属于系统故障、测试环境或配置错误
                    LogManager.WriteLog(LogTypes.Error, string.Format("账号登陆时检测，服务器时间误差可能超过60秒，本次登录比上次下线时间早{0}秒", waitSecs));
                }
                waitSecs = 0;
            }

            return (int)waitSecs;
        }

        /// <summary>
        /// 将用户ID注册到DBServer上，如果失败，则拒绝登陆
        /// </summary>
        /// <param name="userID"></param>
        /// <returns></returns>
        public static int RegisterUserIDToDBServer(string userID, int state, int serverId, ref long logoutServerTicks)
        {
            logoutServerTicks = 0;
            string[] fieldsData = null;
            long startTicks = TimeUtil.NOW();
            int count = 0;

            do
            {
                if (TCPProcessCmdResults.RESULT_FAILED == Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool,
                    (int)TCPGameServerCmds.CMD_DB_REGUSERID, string.Format("{0}:{1}:{2}", userID, GameManager.ServerLineID, state), out fieldsData, serverId))
                {
                    if (state == 0)
                    {
                        //最少重试5次,60秒
                        if (count++ < 5 || Math.Abs(TimeUtil.NOW() - startTicks) < 60000)
                        {
                            Thread.Sleep(100);
                            continue; //失败必须重试，直至成功，否则会导致无法登录或多重登录的严重后果
                        }
                    }

                    return -1;
                }

                if (null == fieldsData || fieldsData.Length <= 0) //如果数据错误，就当做时不在线了
                {
                    return -2;
                }

                break;
            } while (true);

            if (fieldsData.Length >= 2)
            {
                logoutServerTicks = Convert.ToInt64(fieldsData[1]);
            }

            return Convert.ToInt32(fieldsData[0]);
        }

        #endregion 账户管理

        #region 角色封锁

        /// <summary>
        /// 将角色登陆禁止到DBServer上
        /// </summary>
        /// <param name="userID"></param>
        /// <returns></returns>
        public static void BanRoleNameToDBServer(string roleName, int banVal)
        {
            //请求数据库操作
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_BANROLENAME,
                string.Format("{0}:{1}", roleName, banVal),
                null, GameManager.LocalServerId);
        }

        #endregion 角色封锁

        #region 聊天封锁

        /// <summary>
        /// 将角色聊天禁止到DBServer上
        /// </summary>
        /// <param name="userID"></param>
        /// <returns></returns>
        public static void BanRoleChatToDBServer(string roleName, int banHour)
        {
            //请求数据库操作
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_BANROLECHAT,
                string.Format("{0}:{1}", roleName, banHour),
                null, GameManager.LocalServerId);
        }

        #endregion 聊天封锁

        #region 公告管理

        /// <summary>
        /// 将公告发布到DBServer
        /// </summary>
        /// <param name="msgID"></param>
        /// <param name="toPlayNum"></param>
        /// <param name="bulletinText"></param>
        public static void AddDBBulletinMsg(string msgID, int toPlayNum, string bulletinText)
        {
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDBULLMSG,
                string.Format("{0}:{1}:{2}", msgID, toPlayNum, bulletinText),
                null, GameManager.LocalServerId);

        }

        /// <summary>
        /// 从DBServer删除公告
        /// </summary>
        /// <param name="msgID"></param>
        public static void RemoveDBBulletinMsg(string msgID)
        {
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_REMOVEBULLMSG,
                string.Format("{0}", msgID),
                null, GameManager.LocalServerId);
        }

        /// <summary>
        /// 从DBserver加载公告
        /// </summary>
        /// <returns></returns>
        public static Dictionary<string, BulletinMsgData> LoadDBBulletinMsgDict()
        {
            Dictionary<string, BulletinMsgData> dict = null;

            byte[] bytesData = null;
            if (TCPProcessCmdResults.RESULT_FAILED == Global.RequestToDBServer3(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool,
                (int)TCPGameServerCmds.CMD_DB_GETBULLMSGDICT, string.Format("{0}", GameManager.ServerLineID), out bytesData, GameManager.LocalServerId))
            {
                return dict; //如果查询失败，就当做时不在线了
            }

            if (null == bytesData || bytesData.Length <= 6)
            {
                return dict;
            }

            Int32 length = BitConverter.ToInt32(bytesData, 0);

            //获取公告消息字典
            dict = DataHelper.BytesToObject<Dictionary<string, BulletinMsgData>>(bytesData, 6, length - 2);
            return dict;
        }

        #endregion 公告管理

        #region 游戏DB配置参数管理

        /// <summary>
        /// 将配置参数更新到DBServer
        /// </summary>
        /// <param name="msgID"></param>
        /// <param name="toPlayNum"></param>
        /// <param name="bulletinText"></param>
        public static void UpdateDBGameConfigg(string paramName, string paramValue)
        {
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_GAMECONIFGITEM,
                string.Format("{0}:{1}", paramName, paramValue),
                null, GameManager.LocalServerId);
        }

        /// <summary>
        /// 从DBserver加载配置参数
        /// </summary>
        /// <returns></returns>
        public static Dictionary<string, string> LoadDBGameConfigDict()
        {
            Dictionary<string, string> dict = null;

            byte[] bytesData = null;
            if (TCPProcessCmdResults.RESULT_FAILED == Global.RequestToDBServer3(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool,
                (int)TCPGameServerCmds.CMD_DB_GAMECONFIGDICT, string.Format("{0}", GameManager.ServerLineID), out bytesData, GameManager.LocalServerId))
            {
                return dict; //如果查询失败，就当做时不在线了
            }

            if (null == bytesData || bytesData.Length <= 6)
            {
                return dict;
            }

            Int32 length = BitConverter.ToInt32(bytesData, 0);

            //获取公告消息字典
            dict = DataHelper.BytesToObject<Dictionary<string, string>>(bytesData, 6, length - 2);
            return dict;
        }

        #endregion 游戏DB配置参数管理

        #region 防止沉迷管理

        /// <summary>
        /// 过滤奖励
        /// </summary>
        /// <param name="experience"></param>
        /// <returns></returns>
        public static int FilterValue(GameClient client, int value)
        {
            if (client.ClientData.AntiAddictionTimeType <= (int)AntiAddictionTimeTypes.None)
            {
                return value;
            }

            if (client.ClientData.AntiAddictionTimeType <= (int)AntiAddictionTimeTypes.ThreeHours)
            {
                return (int)(value * 0.50);
            }

            return 0;
        }

        /// <summary>
        /// 过滤奖励
        /// </summary>
        /// <param name="experience"></param>
        /// <returns></returns>
        public static long FilterValue(GameClient client, long value)
        {
            if (client.ClientData.AntiAddictionTimeType <= (int)AntiAddictionTimeTypes.None)
            {
                return value;
            }

            if (client.ClientData.AntiAddictionTimeType <= (int)AntiAddictionTimeTypes.ThreeHours)
            {
                return (long)(value * 0.50);
            }

            return 0;
        }

        /// <summary>
        /// 是否掉落物品
        /// </summary>
        /// <param name="experience"></param>
        /// <returns></returns>
        public static bool FilterFallGoods(GameClient client)
        {
            if (client.ClientData.AntiAddictionTimeType <= (int)AntiAddictionTimeTypes.None)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 获取防止沉迷时间的类型
        /// </summary>
        /// <returns></returns>
        public static int GetAntiAddictionTimeType(GameClient client)
        {
            //计算是否是达到了防止沉迷的时间
            int isAdult = GameManager.OnlineUserSession.FindUserAdult(client.ClientSocket);
            if (isAdult > 0) //如果是成人，则退出不处理
            {
                return (int)AntiAddictionTimeTypes.None;
            }

            int hintSecs = GameManager.GameConfigMgr.GetGameConfigItemInt("anti-addiction-hint", 10800);
            hintSecs = Global.GMax(0, hintSecs);

            if (client.ClientData.AntiAddictionSecs < hintSecs)
            {
                return (int)AntiAddictionTimeTypes.None;
            }

            int warningSecs = GameManager.GameConfigMgr.GetGameConfigItemInt("anti-addiction-warning", 18000);
            warningSecs = Global.GMax(0, warningSecs);

            if (client.ClientData.AntiAddictionSecs >= hintSecs && client.ClientData.AntiAddictionSecs < warningSecs)
            {
                return (int)AntiAddictionTimeTypes.ThreeHours;
            }

            return (int)AntiAddictionTimeTypes.FiveHoures;
        }

        /// <summary>
        /// 获取腾讯平台防止沉迷时间的类型
        /// </summary>
        /// <returns></returns>
        public static int GetAntiAddictionTimeType_TengXun(GameClient client)
        {
            //计算是否是达到了防止沉迷的时间
            if (client.ClientData.TengXunFCMRate >= 1.0)
            {
                return (int)AntiAddictionTimeTypes.None;
            }

            if (client.ClientData.TengXunFCMRate >= 0.5 && client.ClientData.TengXunFCMRate < 1.0)
            {
                return (int)AntiAddictionTimeTypes.ThreeHours;
            }

            return (int)AntiAddictionTimeTypes.FiveHoures;
        }

        #endregion 防止沉迷管理

        #region 新手给予的物品处理/数值

        /// <summary>
        /// 自动给予新手物品
        /// </summary>
        public static void AutoGiveNewRoleGoods(GameClient client)
        {
            if (null == GameManager.AutoGiveGoodsIDList)
            {
                int[] autoGiveGoodsIDList = GameManager.systemParamsList.GetParamValueIntArrayByName("AutoGiveGoodsIDList");
                if (null == autoGiveGoodsIDList)
                {
                    autoGiveGoodsIDList = new int[0];
                }

                GameManager.AutoGiveGoodsIDList = autoGiveGoodsIDList.ToList<int>();
            }

            if (null == GameManager.AutoGiveGoodsIDList || GameManager.AutoGiveGoodsIDList.Count <= 0)
            {
                return;
            }

            for (int i = 0; i < GameManager.AutoGiveGoodsIDList.Count; i++)
            {
                SystemXmlItem sytemGoodsItem = null;
                if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(GameManager.AutoGiveGoodsIDList[i], out sytemGoodsItem))
                {
                    LogManager.WriteLog(LogTypes.Warning, string.Format("新手上给予的物品ID不存在: GoodsID={0}", GameManager.AutoGiveGoodsIDList[i]));
                    continue;
                }

                // [4/15/2015 chdeng]
                if (!Global.IsRoleOccupationMatchGoods(client, GameManager.AutoGiveGoodsIDList[i]))
                    continue;

                //                 int toOccupation = sytemGoodsItem.GetIntValue("ToOccupation");
                //                 if (toOccupation >= 0) //如果要区分职业
                //                 {
                //                     // 属性改造 加上一级属性公式 区分职业[8/15/2013 LiaoWei]
                //                     int nOcc = Global.CalcOriginalOccupationID(client);
                // 
                //                     if (nOcc != toOccupation)
                //                     {
                //                         continue;
                //                     }
                //                 }

                //想DBServer请求加入某个新的物品到背包中
                //添加物品
                Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, GameManager.AutoGiveGoodsIDList[i], 1, 0, "", 0, 1, 0, "", true, 1, "自动给予新手物品");
            }
        }



        /// <summary>
        /// 自动给予新手物品到仓库
        /// </summary>
        public static void AutoGiveNewRoleGoodsToPortableBag(GameClient client)
        {
            if (null == GameManager.AutoGiveGoodsIDPortableList)
            {
                int[] AutoGiveGoodsIDPortableList = GameManager.systemParamsList.GetParamValueIntArrayByName("AutoGiveGoodsIDPortableList");
                if (null != AutoGiveGoodsIDPortableList)
                {
                    GameManager.AutoGiveGoodsIDPortableList = AutoGiveGoodsIDPortableList.ToList<int>();
                }
                else
                {
                    GameManager.AutoGiveGoodsIDPortableList = new List<int>();
                }
            }

            if (null == GameManager.AutoGiveGoodsIDPortableList || GameManager.AutoGiveGoodsIDPortableList.Count <= 0)
            {
                return;
            }

            for (int i = 0; i < GameManager.AutoGiveGoodsIDPortableList.Count; i++)
            {
                SystemXmlItem sytemGoodsItem = null;
                if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(GameManager.AutoGiveGoodsIDPortableList[i], out sytemGoodsItem))
                {
                    LogManager.WriteLog(LogTypes.Warning, string.Format("新手上给予的物品ID不存在: GoodsID={0}", GameManager.AutoGiveGoodsIDPortableList[i]));
                    continue;
                }

                // [4/15/2015 chdeng]
                if (!Global.IsRoleOccupationMatchGoods(client, GameManager.AutoGiveGoodsIDPortableList[i]))
                    continue;

                //                 int toOccupation = sytemGoodsItem.GetIntValue("ToOccupation");
                //                 if (toOccupation >= 0) //如果要区分职业
                //                 {
                //                     // 属性改造 加上一级属性公式 区分职业[8/15/2013 LiaoWei]
                //                     int nOcc = Global.CalcOriginalOccupationID(client);
                // 
                //                     if (nOcc != toOccupation)
                //                     {
                //                         continue;
                //                     }
                //                 }

                //向DBServer请求加入某个新的物品到仓库中
                //添加物品
                Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, GameManager.AutoGiveGoodsIDPortableList[i], 1, 0, "", 0, 1, (int)SaleGoodsConsts.PortableGoodsID, "", true, 1, "自动给予新手物品到仓库");
            }
        }

        /// <summary>
        /// 自动给予新手物品
        /// </summary>
        public static void AutoGiveNewRoleOtherValues(GameClient client)
        {
            //自动给予通天令的值
            /*int shiLianLing = GameManager.GameConfigMgr.GetGameConfigItemInt("auto_give_shilianling", 300);
            if (shiLianLing > 0)
            {
                GameManager.ClientMgr.ModifyShiLianLingValue(client, shiLianLing, true, true);
            }*/
        }

        /// <summary>
        /// 俩个数组是否相等
        /// </summary>
        public static bool IsArrayANDArray(int[] aryA, int[] aryB)
        {
            HashSet<int> setA = new HashSet<int>();
            HashSet<int> setB = new HashSet<int>();
            for (int i = 0; i < aryA.Length; i++)
                setA.Add(aryA[i]);

            for (int j = 0; j < aryB.Length; j++)
                setB.Add(aryB[j]);

            return setA.SetEquals(setB);
        }

        /// <summary>
        /// 俩个数组是否交集
        /// </summary>
        public static bool IsArrayORArray(int[] aryA, int[] aryB)
        {
            HashSet<int> setA = new HashSet<int>();
            HashSet<int> setB = new HashSet<int>();
            for (int i = 0; i < aryA.Length; i++)
                setA.Add(aryA[i]);

            for (int j = 0; j < aryB.Length; j++)
                setB.Add(aryB[j]);

            setA.IntersectWith(setB);

            return setA.Count > 0 ? true : false;

        }

        #endregion 新手给予的物品处理/数值

        #region 物品包的管理

        /// <summary>
        /// 判断如果是打包的物品，则返回解开后返回的物品的个数
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static bool CanUpackGoods(GameClient client, SystemXmlItem systemGoodsItem, int goodsID)
        {
            int baoguoID = systemGoodsItem.GetIntValue("BaoguoID");
            if (baoguoID <= 0) return true;

            //根据物品的包裹ID，获取物品列表
            List<GoodsData> goodsDataList = GoodsBaoGuoCachingMgr.FindGoodsBaoGuoByID(baoguoID);
            if (null == goodsDataList) return true;
            return Global.CanAddGoodsNum(client, goodsDataList.Count);
            //return Global.CanAddGoodsDataList(client, goodsDataList); //要减去原来的物品包 减去1, 修正，不能减去1, 否则会导致解包隐藏物品
        }

        /// <summary>
        /// 根据物品ID，判断如果是打包的物品，解开
        /// </summary>
        /// <param name="goodsID"></param>
        public static void UnpackGoodsByID(GameClient client, SystemXmlItem systemGoodsItem, int goodsID)
        {
            int baoguoID = systemGoodsItem.GetIntValue("BaoguoID");
            if (baoguoID <= 0) return;

            //根据物品的包裹ID，获取物品列表
            List<GoodsData> goodsDataList = GoodsBaoGuoCachingMgr.FindGoodsBaoGuoByID(baoguoID);
            if (null == goodsDataList) return;

            for (int i = 0; i < goodsDataList.Count; i++)
            {
                //想DBServer请求加入某个新的物品到背包中
                //添加物品
                Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, goodsDataList[i].GoodsID, goodsDataList[i].GCount, goodsDataList[i].Quality, goodsDataList[i].Props,
                                            goodsDataList[i].Forge_level, goodsDataList[i].Binding, 0, goodsDataList[i].Jewellist, false, 1, "解开包裹", Global.ConstGoodsEndTime, goodsDataList[i].AddPropIndex,
                                            goodsDataList[i].BornIndex, goodsDataList[i].Lucky, goodsDataList[i].Strong, goodsDataList[i].ExcellenceInfo, goodsDataList[i].AppendPropLev, goodsDataList[i].ChangeLifeLevForEquip);
            }
        }
        #endregion 物品包的管理

        #region Buffer数据项管理

        /// <summary>
        /// 初始化BufferDataListHashSet,以优化GetBufferDataByID的效率
        /// </summary>
        /// <param name="client"></param>
        public static void InitBufferDataListHashSet(GameClient client)
        {
            lock (client.ClientData.BufferDataListHashSet)
            {
                if (null != client.ClientData.BufferDataList)
                {
                    lock (client.ClientData.BufferDataList)
                    {
                        foreach (var bufferData in client.ClientData.BufferDataList)
                        {
                            if (!client.ClientData.BufferDataListHashSet.Contains(bufferData.BufferID))
                            {
                                client.ClientData.BufferDataListHashSet.Add(bufferData.BufferID);
                            }
                        }
                    }
                }
            }
        }

        public static void AddIDToBufferDataListHashSet(GameClient client, int bufferID)
        {
            lock (client.ClientData.BufferDataListHashSet)
            {
                if (!client.ClientData.BufferDataListHashSet.Contains(bufferID))
                {
                    client.ClientData.BufferDataListHashSet.Add(bufferID);
                }
            }
        }

        /// <summary>
        /// 根据BufferID 获取buffer的数据
        /// </summary>
        /// <param name="client"></param>
        /// <param name="bufferID"></param>
        public static BufferData GetBufferDataByID(GameClient client, int bufferID)
        {
            lock (client.ClientData.BufferDataListHashSet)
            {
                if (!client.ClientData.BufferDataListHashSet.Contains(bufferID))
                {
                    return null;
                }
            }
            if (null == client.ClientData.BufferDataList)
            {
                return null;
            }

            lock (client.ClientData.BufferDataList)
            {
                for (int i = 0; i < client.ClientData.BufferDataList.Count; i++)
                {
                    if (client.ClientData.BufferDataList[i].BufferID == bufferID)
                    {
                        return client.ClientData.BufferDataList[i];
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 根据ClientData 获取buffer的数据
        /// </summary>
        /// <param name="client"></param>
        /// <param name="bufferID"></param>
        public static BufferData GetBufferDataByClientData(List<BufferData> bufferDataList, int bufferID)
        {
            if (null == bufferDataList)
            {
                return null;
            }

            lock (bufferDataList)
            {
                for (int i = 0; i < bufferDataList.Count; i++)
                {
                    if (bufferDataList[i].BufferID == bufferID)
                    {
                        return bufferDataList[i];
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 根据BufferID 获取buffer的数据
        /// </summary>
        /// <param name="client"></param>
        /// <param name="bufferID"></param>
        public static BufferData GetBufferDataByID(SafeClientData clientData, int bufferID)
        {
            if (null == clientData || null == clientData.BufferDataList)
            {
                return null;
            }

            lock (clientData.BufferDataList)
            {
                for (int i = 0; i < clientData.BufferDataList.Count; i++)
                {
                    if (clientData.BufferDataList[i].BufferID == bufferID)
                    {
                        return clientData.BufferDataList[i];
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 添加buffer数据到列表中
        /// </summary>
        /// <param name="client"></param>
        /// <param name="bufferDbID"></param>
        private static void AddBufferData(GameClient client, BufferData bufferData)
        {
            if (null == client.ClientData.BufferDataList)
            {
                client.ClientData.BufferDataList = new List<BufferData>();
            }

            lock (client.ClientData.BufferDataList)
            {
                client.ClientData.BufferDataList.Add(bufferData);
            }
            AddIDToBufferDataListHashSet(client, bufferData.BufferID);
        }

        /// <summary>
        /// 从buffer数据到列表删除指定的临时Buffer,如果此函数要调用其他函数,注意是否有死锁,请搜索"modified:2014-11-3"
        /// </summary>
        /// <param name="client"></param>
        /// <param name="bufferID"></param>
        public static void RemoveBufferData(GameClient client, int bufferID)
        {
            if (null == client.ClientData.BufferDataList)
            {
                return;
            }

            BufferData bufferData = null;
            lock (client.ClientData.BufferDataList)
            {
                for (int i = 0; i < client.ClientData.BufferDataList.Count; i++)
                {
                    if (client.ClientData.BufferDataList[i].BufferID == bufferID)
                    {
                        bufferData = client.ClientData.BufferDataList[i];
                        bufferData.StartTime = 0;
                        bufferData.BufferSecs = 0;
                        bufferData.BufferVal = 0;
                        break;
                    }
                }
            }

            //没找到Buffer
            if (null == bufferData) return;

            //通知DBServer更新BufferData
            Global.UpdateDBBufferData(client, bufferData);

            //将新的Buffer数据通知自己
            GameManager.ClientMgr.NotifyBufferData(client, bufferData);
        }

        /// <summary>
        /// 删除所有BUFF
        /// </summary>
        /// <param name="client"></param>
        /// <param name="bufferID"></param>
        public static void RemoveAllBufferData(GameClient client)
        {
            if (null == client.ClientData.BufferDataList)
            {
                return;
            }

            BufferData bufferData = null;
            lock (client.ClientData.BufferDataList)
            {
                for (int i = 0; i < client.ClientData.BufferDataList.Count; i++)
                {
                    bufferData = client.ClientData.BufferDataList[i];
                    bufferData.StartTime = 0;
                    bufferData.BufferSecs = 0;
                    bufferData.BufferVal = 0;

                    Global.UpdateDBBufferData(client, bufferData);

                    GameManager.ClientMgr.NotifyBufferData(client, bufferData);
                }
            }
        }

        /// <summary>
        /// 更新BufferData bufferType小于等于0表示数据库buffer，需要记录到数据库，角色重新登陆后如果
        /// 时间有效，则会存在，否则是临时buffer，角色下线或者超时就清除
        /// </summary>
        /// <param name="client"></param>
        /// <param name="bufferItemType"></param>
        /// <param name="actionParams"></param>
        public static void UpdateBufferData(GameClient client, BufferItemTypes bufferItemType, double[] actionParams, int bufferType = 0, bool notifyPropsChanged = true)
        {
            bool isNewData = false;
            BufferData bufferData = Global.GetBufferDataByID(client, (int)bufferItemType);
            if (null == bufferData)
            {
                isNewData = true;
                bufferData = new BufferData()
                {
                    BufferID = (int)bufferItemType,
                    BufferType = bufferType,
                    BufferVal = 0,
                };
            }
            else
            {
                bufferData.BufferType = bufferType;
            }

            //如果是和储量相关的，则追加储量
            if (bufferItemType == BufferItemTypes.LifeVReserve ||
                bufferItemType == BufferItemTypes.MagicVReserve ||
                bufferItemType == BufferItemTypes.LingLiVReserve)
            {
                if (bufferData.BufferVal > 0)
                {
                    //直接追加
                    bufferData.BufferVal += (int)actionParams[0];
                }
                else
                {
                    bufferData.StartTime = (int)actionParams[0];
                    bufferData.BufferVal = (int)actionParams[0];
                }
            }
            else if (bufferItemType == BufferItemTypes.TimeHUZHAONoShow)
            {
                bufferData.StartTime = (int)actionParams[0];
                bufferData.BufferVal = (int)actionParams[0];
            }
            else if (bufferItemType == BufferItemTypes.AntiBoss)
            {
                long nowTicks = TimeUtil.NOW();
                if ((nowTicks - bufferData.StartTime) < (bufferData.BufferSecs * 1000))
                {
                    if ((int)actionParams[1] >= bufferData.BufferVal)
                    {
                        bufferData.StartTime = nowTicks;
                        bufferData.BufferSecs = (int)actionParams[0] * 60;
                        bufferData.BufferVal = (int)actionParams[1];
                    }
                }
                else
                {
                    bufferData.StartTime = nowTicks;
                    bufferData.BufferSecs = (int)actionParams[0] * 60;
                    bufferData.BufferVal = (int)actionParams[1];
                }
            }
            else if (bufferItemType == BufferItemTypes.TimeWUDIHUZHAONoShow)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = 0;
            }
            else if (bufferItemType == BufferItemTypes.AntiRole)
            {
                //直接替换

                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0] * 60;
                bufferData.BufferVal = (int)actionParams[1];
            }
            else if (bufferItemType == BufferItemTypes.TimeExp)
            {
                //直接替换

                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = (int)actionParams[1]; //物品ID
            }
            else if (
                bufferItemType == BufferItemTypes.TimeAddAttack ||
                bufferItemType == BufferItemTypes.TimeAddMAttack ||
                bufferItemType == BufferItemTypes.TimeAddDSAttack ||
                bufferItemType == BufferItemTypes.TimeAddDefense ||
                bufferItemType == BufferItemTypes.TimeAddMDefense ||
                bufferItemType == BufferItemTypes.PKKingBuffer
                )
            {
                //直接替换
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = (int)actionParams[1]; //物品ID
            }
            else if (bufferItemType == BufferItemTypes.TimeAddLifeMagic)
            {
                //直接替换

                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = (int)actionParams[1]; //物品ID
            }
            else if (bufferItemType == BufferItemTypes.TimeAddLifeNoShow || bufferItemType == BufferItemTypes.TimeAddMagicNoShow)
            {
                //直接替换
                //long nowTicks = TimeUtil.NOW();
                //bufferData.StartTime = nowTicks;
                //bufferData.BufferSecs = (int)actionParams[0];
                //bufferData.BufferVal = (int)actionParams[1]; //物品ID

                // 效果叠加 [5/8/2014 LiaoWei]
                long nowTicks = TimeUtil.NOW();

                if (bufferData.BufferVal == (long)actionParams[1])  // 相同物品 [5/16/2014 LiaoWei]
                {
                    if ((nowTicks - bufferData.StartTime) < ((long)bufferData.BufferSecs * 1000))
                    {
                        //直接追加
                        bufferData.BufferSecs += (int)actionParams[0];
                    }
                    else
                    {
                        //重新开始
                        bufferData.StartTime = nowTicks;
                        bufferData.BufferSecs = (int)actionParams[0];
                    }
                }
                else
                {
                    //重新开始
                    bufferData.StartTime = nowTicks;
                    bufferData.BufferSecs = (int)actionParams[0];
                }

                bufferData.BufferVal = (int)actionParams[1];
            }
            else if (bufferItemType == BufferItemTypes.DSTimeAddLifeNoShow)
            {
                //直接替换

                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = (((long)actionParams[1] << 32) | (long)actionParams[2]); //时间间隔(秒) | 每次增加的血量
            }
            else if (bufferItemType == BufferItemTypes.WaWaExp)
            {
                //直接替换

                bufferData.StartTime = (int)actionParams[0];
                bufferData.BufferVal = (int)actionParams[0];

                bufferData.BufferSecs = (int)actionParams[1]; //物品ID
            }
            else if (bufferItemType == BufferItemTypes.FallTianSheng)
            {
                //直接替换

                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[1];
                bufferData.BufferVal = (int)(actionParams[0] * 100); //转成整数
            }
            else if (bufferItemType == BufferItemTypes.ChengJiu || bufferItemType == BufferItemTypes.WuXue)//成就 武学 对应的buffer，buffer value 是goods index
            {
                //直接叠加，并配置修改有效截止时间
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = 24 * 60 * 60;// 默认给一天的时间
                bufferData.BufferVal = (int)(actionParams[0]); //物品索引
            }
            else if (bufferItemType == BufferItemTypes.JieRiChengHao)//节日称号buffer value 是goods index
            {
                //直接叠加，并配置修改有效截止时间
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[1] * 60 * 60;// 持续的时间
                bufferData.BufferVal = (int)(actionParams[0]); //物品索引
            }
            /*
            else if (bufferItemType == BufferItemTypes.JingMai)//采用零时buffer设置就行
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferVal = (int)(actionParams[0]); //物品索引 经脉buffer的 bufferType 是 1
            }
            else if (bufferItemType == BufferItemTypes.ZuanHuang)//采用零时buffer设置就行
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferVal = (int)(actionParams[0]); //物品索引 经脉buffer的 bufferType 是 1
            }
            */
            else if (bufferItemType == BufferItemTypes.MonthVIP)//vip卡处理，月卡 ，季卡，半年卡，不同类型直接覆盖，同类型叠加
            {
                long nowTicks = TimeUtil.NOW();
                if ((nowTicks - bufferData.StartTime) < ((long)bufferData.BufferSecs * 1000))
                {
                    //直接追加
                    bufferData.BufferSecs += (int)actionParams[0] * 60;
                    bufferData.BufferVal = Math.Max((int)actionParams[1], bufferData.BufferVal);
                }
                else //重新开始
                {
                    bufferData.StartTime = nowTicks;
                    bufferData.BufferSecs = (int)actionParams[0] * 60;
                    bufferData.BufferVal = (int)actionParams[1];
                }
            }
            else if (bufferItemType == BufferItemTypes.FiveExperience || bufferItemType == BufferItemTypes.ThreeExperience
                || bufferItemType == BufferItemTypes.DblExperience)//五倍经验 三倍经验，双倍 祝福 直接替换
            {
                //直接替换
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0] * 60;
                bufferData.BufferVal = (int)actionParams[1]; //物品ID
            }
            else if (bufferItemType == BufferItemTypes.MutilExperience)//多倍经验
            {
                //直接替换
                /*long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0] * 60;
                bufferData.BufferVal = (long)actionParams[1]; //物品ID | 经验倍数*/

                // 改造 [5/20/2014 LiaoWei]
                long nowTicks = TimeUtil.NOW();
                int nGoodsID = -1;
                nGoodsID = (int)(bufferData.BufferVal >> 32 & 0xFFFFFFFF);

                if (nGoodsID == ((long)actionParams[1] >> 32 & 0xFFFFFFFF))  // 相同物品 [5/16/2014 LiaoWei]
                {
                    if ((nowTicks - bufferData.StartTime) < ((long)bufferData.BufferSecs * 1000))
                    {
                        //直接追加
                        bufferData.BufferSecs += (int)actionParams[0];
                    }
                    else
                    {
                        //重新开始
                        bufferData.StartTime = nowTicks;
                        bufferData.BufferSecs = (int)actionParams[0];
                    }
                }
                else
                {
                    //重新开始
                    bufferData.StartTime = nowTicks;
                    bufferData.BufferSecs = (int)actionParams[0];
                }

                bufferData.BufferVal = (long)actionParams[1];

            }
            else if (bufferItemType == BufferItemTypes.ErGuoTou)//二锅头酒的经验buffer
            {
                //直接替换
                long nowTicks = TimeUtil.NOW();

                if (bufferData.BufferVal == (long)actionParams[1]) //相同的倍数则覆盖
                {
                    bufferData.BufferSecs += (int)actionParams[0] * 60;
                }
                else //不同的倍数，则替换
                {
                    bufferData.StartTime = nowTicks;
                    bufferData.BufferSecs = (int)actionParams[0] * 60;
                    bufferData.BufferVal = (long)actionParams[1]; //物品ID | 经验倍数
                }
            }
            else if (bufferItemType == BufferItemTypes.ZhuFu)//祝福 可以叠加
            {
                long nowTicks = TimeUtil.NOW();
                if ((nowTicks - bufferData.StartTime) < ((long)bufferData.BufferSecs * 1000))
                {
                    //直接追加
                    bufferData.BufferSecs += (int)actionParams[0] * 60;
                }
                else //重新开始
                {
                    bufferData.StartTime = nowTicks;
                    bufferData.BufferSecs = (int)actionParams[0] * 60;
                }
                bufferData.BufferVal = (int)actionParams[1]; //物品ID
            }
            else if (bufferItemType == BufferItemTypes.GuMuTimeLimit)//古墓限时buffer
            {
                if ((int)actionParams[0] > 0)
                {
                    bufferData.StartTime = TimeUtil.NowDateTime().DayOfYear;
                    bufferData.BufferVal = (int)actionParams[0] * 60;//累加秒数 同时也是消耗秒数
                }

                bufferData.BufferSecs += (int)actionParams[1] * 60;//总的秒数
            }
            else if (bufferItemType == BufferItemTypes.MingJieMapLimit)//冥界地图限时buffer 临时buffer
            {
                //直接替换
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0] * 60;
                bufferData.BufferVal = (int)actionParams[0] * 60;//限时秒数，采用这个字段，跟古墓地图一致
            }
            else if (bufferItemType == BufferItemTypes.DSTimeHideNoShow)
            {
                //直接替换
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
            }
            else if (bufferItemType == BufferItemTypes.DSTimeShiDuNoShow)
            {
                //直接替换
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = (((long)actionParams[1] << 32) | (long)actionParams[2]); //时间间隔(秒) | 每次伤害的血量
            }
            else if (
                bufferItemType == BufferItemTypes.TimeFEIXUENoShow ||
                bufferItemType == BufferItemTypes.TimeZHONGDUNoShow ||
                bufferItemType == BufferItemTypes.TimeLINGHUNoShow ||
                bufferItemType == BufferItemTypes.TimeRANSHAONoShow)
            {
                //直接替换
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = 0;
            }
            else if (bufferItemType == BufferItemTypes.DSTimeAddDefenseNoShow)
            {
                //直接替换
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
            }
            else if (bufferItemType == BufferItemTypes.DSTimeAddMDefenseNoShow)
            {
                //直接替换
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
            }
            else if (bufferItemType == BufferItemTypes.FSAddHuDunNoShow)
            {
                //直接替换
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
            }
            else if (bufferItemType == BufferItemTypes.MU_SUBDAMAGEPERCENTTIMER)
            {
                //直接替换
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
            }
            else if (bufferItemType == BufferItemTypes.MU_SUBDAMAGEPERCENTTIMER1)
            {
                //直接替换
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
            }
            else if (bufferItemType == BufferItemTypes.RongYu)
            {
                //直接替换
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0] * 60;
                bufferData.BufferVal = (int)actionParams[1];
            }
            else if (bufferItemType == BufferItemTypes.MU_JINGJICHANG_JUNXIAN)
            {
                //直接替换
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = 0;// (int)actionParams[0] * 60;
                bufferData.BufferVal = (int)actionParams[0];
            }
            else if (bufferItemType == BufferItemTypes.MU_SPECMACH_EXP)
            {
                //直接替换
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = 0;// (int)actionParams[0] * 60;
                bufferData.BufferVal = (int)actionParams[0];
            }
            else if (bufferItemType == BufferItemTypes.MU_LUOLANCHENGZHAN_QIZHI1 ||
                bufferItemType == BufferItemTypes.MU_LUOLANCHENGZHAN_QIZHI2 ||
                bufferItemType == BufferItemTypes.MU_LUOLANCHENGZHAN_QIZHI3 ||
                bufferItemType == BufferItemTypes.MU_LANGHUNLINGYU_QIZHI1 ||
                bufferItemType == BufferItemTypes.MU_LANGHUNLINGYU_QIZHI2 ||
                bufferItemType == BufferItemTypes.MU_LANGHUNLINGYU_QIZHI3)
            {
                //直接替换
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = (int)actionParams[1];
            }
            else if(bufferItemType == BufferItemTypes.KingOfBattleCrystal ||
                bufferItemType == BufferItemTypes.KingOfBattleBoss_GJDZY ||
                bufferItemType == BufferItemTypes.KingOfBattleBoss_GJDJX ||
                bufferItemType == BufferItemTypes.KingOfBattleBoss_GJDNH)
            {
                //直接替换
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = (int)actionParams[1];
                GameManager.ClientMgr.NotifyOtherBufferData(client, bufferData);
            }
            else if (bufferItemType == BufferItemTypes.MU_WORLDLEVEL)
            {
                //直接替换
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = 0;// (int)actionParams[0] * 60;
                bufferData.BufferVal = (int)actionParams[0];
            }
            else if ((int)bufferItemType >= (int)BufferItemTypes.MU_ZHANMENGBUILD_ZHANQI && (int)bufferItemType <= (int)BufferItemTypes.MU_ZHANMENGBUILD_GUANGHUAN)
            {
                //直接替换
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = (int)actionParams[1];
            }
            else if (bufferItemType == BufferItemTypes.ADDTEMPStrength || bufferItemType == BufferItemTypes.ADDTEMPIntelligsence ||
                        bufferItemType == BufferItemTypes.ADDTEMPDexterity || bufferItemType == BufferItemTypes.ADDTEMPConstitution)  // 属性改造 增加一级属性[8/15/2013 LiaoWei]
            {
                /*// 规则--追加
                long nowTicks = TimeUtil.NOW();
                if ((nowTicks - bufferData.StartTime) < ((long)bufferData.BufferSecs * 1000))
                {
                    //直接追加
                    bufferData.BufferSecs += (int)actionParams[1];
                }
                else
                {
                    //重新开始
                    bufferData.StartTime = nowTicks;
                    bufferData.BufferSecs = (int)actionParams[1];
                }
                
                bufferData.BufferVal = (int)actionParams[0];

                // 放入RoleBuffer里面 节省遍历时间 提升效率
                int nIndex = (int)bufferItemType - (int)BufferItemTypes.ADDTEMPStrength;

                long toTicks = TimeUtil.NOW() * 10000 + bufferData.BufferSecs * 1000L * 10000L; // 注意 变成纳秒！
                client.RoleBuffer.AddTempBaseProp(nIndex, bufferData.BufferVal, toTicks);   // 设置截止时间！*/

                bool toAddProp = false;

                // 修正代码 以上代码  特别注意下 -- 虽然可以达到修改BUFF的目的 但是 不能“追加BUFF”数据 因为_TempProp.BaseProps不支持数据的叠加  [12/17/2013 LiaoWei]
                long nowTicks = TimeUtil.NOW();

                //先锁定,防止和定时删除的线程出现线程同步问题,导致额外加上属性点
                lock (bufferData)
                {
                    if ((nowTicks - bufferData.StartTime) < ((long)bufferData.BufferSecs * 1000))
                    {
                        //追加
                        bufferData.BufferSecs += (int)actionParams[0];
                    }
                    else
                    {
                        //重新开始
                        bufferData.StartTime = nowTicks;
                        bufferData.BufferSecs = (int)actionParams[0];

                        if (bufferData.BufferVal <= 0)
                        {
                            toAddProp = true;
                        }

                        bufferData.BufferVal = (int)actionParams[1];
                    }
                }

                DBRoleBufferManager.RefreshTimePropBuffer(client, bufferItemType);

                client.delayExecModule.SetDelayExecProc(DelayExecProcIds.RecalcProps, DelayExecProcIds.NotifyRefreshProps);
            }
            else if (bufferItemType == BufferItemTypes.ADDTEMPATTACKSPEED || bufferItemType == BufferItemTypes.ADDTEMPLUCKYATTACK
                        || bufferItemType == BufferItemTypes.ADDTEMPFATALATTACK || bufferItemType == BufferItemTypes.ADDTEMPDOUBLEATTACK)  // 属性改造 增加二级属性[8/15/2013 LiaoWei]
            {
                long nowTicks = TimeUtil.NOW();

                if ((nowTicks - bufferData.StartTime) < ((long)bufferData.BufferSecs * 1000))
                {
                    //追加
                    bufferData.BufferSecs += (int)actionParams[0];
                }
                else
                {
                    //重新开始
                    bufferData.StartTime = nowTicks;
                    bufferData.BufferSecs = (int)actionParams[0];
                }
                bufferData.BufferVal = (int)actionParams[1];

                //通知用户数值发生了变化
                GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

                DBRoleBufferManager.RefreshTimePropBuffer(client, bufferItemType);
            }
            else if (bufferItemType == BufferItemTypes.MU_ADDLUCKYATTACKPERCENTTIMER || bufferItemType == BufferItemTypes.MU_ADDFATALATTACKPERCENTTIMER
                        || bufferItemType == BufferItemTypes.MU_ADDDOUBLEATTACKPERCENTTIMER || bufferItemType == BufferItemTypes.MU_ADDLIFERECOVERPERCENT
                            || bufferItemType == BufferItemTypes.MU_ADDMAXHPVALUE || bufferItemType == BufferItemTypes.MU_ADDMAXMPVALUE
                                || bufferItemType == BufferItemTypes.MU_ADDLIFERECOVERPERCENT)
            {
                long nowTicks = TimeUtil.NOW();

                //if (bufferData.BufferVal == (long)actionParams[1])      // 相同的物品 叠加操作
                //{
                //    bufferData.BufferSecs += (int)actionParams[0] * 1000;
                //}
                //else
                {
                    if ((nowTicks - bufferData.StartTime) < ((long)bufferData.BufferSecs * 1000) && bufferData.BufferVal == (int)actionParams[1])
                    {
                        //追加
                        bufferData.BufferSecs += (int)actionParams[0];
                    }
                    else
                    {
                        //重新开始
                        bufferData.StartTime = nowTicks;
                        bufferData.BufferSecs = (int)actionParams[0];
                    }
                }
                bufferData.BufferVal = (int)actionParams[1];
            }
            else if (bufferItemType == BufferItemTypes.MU_ADDMAXLIFEPERCENTANDVALUE // MU 3期新增  1.增加百分比和固定值血量上限[3/13/2014 LiaoWei]
                || bufferItemType == BufferItemTypes.MU_SUBDAMAGEPERCENTVALUETIMER  // 一段时间减少百分比伤害和值
                || bufferItemType == BufferItemTypes.MU_ADDATTACKANDDEFENSEEPERCENTVALUETIMER //一段时间内增加攻击和防御的百分比和值
                || bufferItemType == BufferItemTypes.MU_ADD_HIT_DODGE_PERCENT) // 一段时间增加命中、闪避百分比和固定值 [XSea 2015/5/12]
            {
                /******* 说明 ******* [3/13/2014 LiaoWei]
                 最理想做成 根据当前BUFFER的数据 比如 技能等级 BUFFER影响的数值 来判断要不要顶掉当前已经的同类型BUFFER 
                 但是由于BUFFER的数值没有保存 所以当前版本先做成 同类型BUFFER直接顶掉 以后可以考虑做的更完善
                */

                /*int nID = (int)(bufferData.BufferVal >> 32);
                int nLev = (int)bufferData.BufferVal;
                if (nID == actionParams[1])
                {
                    
                }
                if (bufferData.BufferVal >> 32 & 0xffffffff)*/

                long nowTicks = TimeUtil.NOW();

                // 重新开始
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = (((long)actionParams[1] << 32) | (long)actionParams[2]);

                //通知用户数值发生了变化
                GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

                // 刷新界面
                if (bufferItemType == BufferItemTypes.MU_ADDMAXLIFEPERCENTANDVALUE)
                {
                    client.ClientData.LifeV = (int)RoleAlgorithm.GetMaxLifeV(client);

                    client.ClientData.MagicV = (int)RoleAlgorithm.GetMaxMagicV(client);

                    if (client.ClientData.CurrentLifeV > client.ClientData.LifeV)
                        client.ClientData.CurrentLifeV = client.ClientData.LifeV;

                    if (client.ClientData.CurrentMagicV > client.ClientData.MagicV)
                        client.ClientData.CurrentMagicV = client.ClientData.MagicV;

                    GameManager.ClientMgr.NotifySelfLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                    GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                }

                //DBRoleBufferManager.RefreshTimePropBuffer(client, bufferItemType);
            }
            else if (bufferItemType == BufferItemTypes.MU_ANGELTEMPLEBUFF1 || bufferItemType == BufferItemTypes.MU_ANGELTEMPLEBUFF2)
            {
                long nowTicks = TimeUtil.NOW();

                // 重新开始
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = (int)actionParams[1];

                //通知用户数值发生了变化
                GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

            }
            // MU项目 begin [10/24/2013 LiaoWei]
            else if (bufferItemType == BufferItemTypes.MU_MAXLIFEPERCENT || bufferItemType == BufferItemTypes.MU_ADDDEFENSETIMER ||
                        bufferItemType == BufferItemTypes.MU_ADDATTACKTIMER)
            {
                //替换
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0] * 60;
                bufferData.BufferVal = (int)actionParams[1];

                if (notifyPropsChanged)
                    GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
            }
            else if (bufferItemType == BufferItemTypes.MU_REDNAME_DEBUFF)   // 注意 直接替换之 [5/24/2014 LiaoWei]
            {
                long nowTicks = TimeUtil.NOW();

                bufferData.StartTime = nowTicks;

                bufferData.BufferSecs = (int)actionParams[1] * 60;

                bufferData.BufferVal = ((int)actionParams[0]) + (((long)actionParams[2]) << 32); // 物品ID

            }
            else if (bufferItemType == BufferItemTypes.HysyShengBei)
            {
                bufferData.StartTime = TimeUtil.NOW();
                bufferData.BufferSecs = (int)actionParams[1];
                bufferData.BufferVal = (int)actionParams[0]; // 物品ID
                GameManager.ClientMgr.NotifyOtherBufferData(client, bufferData);
            }
            else if (bufferItemType == BufferItemTypes.LangHunLingYu_ChengHao)
            {
                bufferData.BufferVal = (int)actionParams[0];
                GameManager.ClientMgr.NotifyOtherBufferData(client, bufferData);
            }
            else if (bufferItemType == BufferItemTypes.ZhongShenZhiShen_ChengHao
                || bufferItemType == BufferItemTypes.CoupleArena_YongQi_Buff
                || bufferItemType == BufferItemTypes.CoupleArena_ZhenAi_Buff)
            {
                bufferData.BufferVal = (int)actionParams[0];
                GameManager.ClientMgr.NotifyOtherBufferData(client, bufferData);
            }
            else
            {
                if (bufferData.BufferType <= 0) //DBBuffer
                {
                    long nowTicks = TimeUtil.NOW();
                    if ((nowTicks - bufferData.StartTime) < ((long)bufferData.BufferSecs * 1000))
                    {
                        //直接追加
                        bufferData.BufferSecs += (int)actionParams[0] * 60;
                    }
                    else //重新开始
                    {
                        bufferData.StartTime = nowTicks;
                        bufferData.BufferSecs = (int)actionParams[0] * 60;
                    }
                }
                else //临时Buffer
                {
                    long nowTicks = TimeUtil.NOW();
                    bufferData.StartTime = nowTicks;
                    bufferData.BufferSecs = 0;
                    bufferData.BufferVal = (int)actionParams[0];
                }
            }

            //如果是新增加的，则加入队列中
            if (isNewData)
            {
                Global.AddBufferData(client, bufferData);
            }

            //处理灵力储备
            if (bufferItemType == BufferItemTypes.LingLiVReserve)
            {
                DBRoleBufferManager.ProcessLingLiVReserve2(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, bufferData);
            }
            else if (bufferItemType == BufferItemTypes.UpLifeLimit)
            {
                //添加生命符咒
                DBRoleBufferManager.AddUpLifeLimitStatus(client);
            }
            else if (bufferItemType == BufferItemTypes.AddTempAttack)
            {
                //通知用户数值发生了变化
                DBRoleBufferManager.AddAttackBuffer(client);
            }
            else if (bufferItemType == BufferItemTypes.TimeAddAttack ||
                bufferItemType == BufferItemTypes.TimeAddMAttack ||
                bufferItemType == BufferItemTypes.TimeAddDSAttack ||
                bufferItemType == BufferItemTypes.TimeAddDefense ||
                bufferItemType == BufferItemTypes.TimeAddMDefense ||
                bufferItemType == BufferItemTypes.PKKingBuffer)
            {
                //通知用户数值发生了变化
                DBRoleBufferManager.RefreshTimePropBuffer(client, bufferItemType);
            }
            else if (bufferItemType == BufferItemTypes.AddTempDefense)
            {
                //通知用户数值发生了变化
                DBRoleBufferManager.AddDefenseBuffer(client);
            }
            else if (bufferItemType == BufferItemTypes.SheLiZhiYuan)
            {
                //通知用户数值发生了变化
            }
            else if (bufferItemType == BufferItemTypes.DiWanZhiYou)
            {
                //通知用户数值发生了变化
            }
            else if (bufferItemType == BufferItemTypes.JunQi)
            {
                if (notifyPropsChanged)
                {
                    //通知用户数值发生了变化
                    GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

                    // 总生命值和魔法值变化通知(同一个地图才需要通知)
                    GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                }
            }
            else if (bufferItemType == BufferItemTypes.ChengJiu)
            {
                if (notifyPropsChanged)
                {
                    //通知用户数值发生了变化
                    // 攻击力发生变化的通知(同一个地图才需要通知)
                    //通知客户端属性变化
                    GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                }
            }
            else if (bufferItemType == BufferItemTypes.JingMai)
            {
                if (notifyPropsChanged)
                {
                    //通知用户数值发生了变化
                    // 攻击力发生变化的通知(同一个地图才需要通知)
                    //通知客户端属性变化
                    GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                }
            }
            else if (bufferItemType == BufferItemTypes.WuXue)
            {
                if (notifyPropsChanged)
                {
                    //通知用户数值发生了变化
                    // 攻击力发生变化的通知(同一个地图才需要通知)
                    //通知客户端属性变化
                    GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                }
            }
            else if (bufferItemType == BufferItemTypes.ZuanHuang)
            {
                if (notifyPropsChanged)
                {
                    bufferData.BufferVal = (long)(actionParams[0]); // 物品索引

                    //通知用户数值发生了变化
                    // 攻击力发生变化的通知(同一个地图才需要通知)
                    //通知客户端属性变化
                    GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                }
            }
            else if (bufferItemType == BufferItemTypes.ZhanHun)
            {
                if (notifyPropsChanged)
                {
                    //通知用户数值发生了变化
                    // 攻击力发生变化的通知(同一个地图才需要通知)
                    //通知客户端属性变化
                    GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                }
            }
            else if (bufferItemType == BufferItemTypes.RongYu)
            {
                if (notifyPropsChanged)
                {
                    //通知用户数值发生了变化
                    // 攻击力发生变化的通知(同一个地图才需要通知)
                    //通知客户端属性变化
                    GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                }
            }
            else if ((int)bufferItemType >= (int)BufferItemTypes.MU_ZHANMENGBUILD_ZHANQI && (int)bufferItemType <= (int)BufferItemTypes.MU_ZHANMENGBUILD_GUANGHUAN)
            {
                if (notifyPropsChanged)
                {
                    //通知用户数值发生了变化
                    // 攻击力发生变化的通知(同一个地图才需要通知)
                    //通知客户端属性变化
                    GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                }
            }
            else if (bufferItemType == BufferItemTypes.MU_JINGJICHANG_JUNXIAN)
            {
                if (notifyPropsChanged)
                {
                    //通知用户数值发生了变化
                    // 攻击力发生变化的通知(同一个地图才需要通知)
                    //通知客户端属性变化
                    GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                }
            }
            else if (bufferItemType == BufferItemTypes.JieRiChengHao)
            {
                if (notifyPropsChanged)
                {
                    //通知用户数值发生了变化
                    // 攻击力发生变化的通知(同一个地图才需要通知)
                    //通知客户端属性变化
                    GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                }
            }
            else if (bufferItemType == BufferItemTypes.MU_ADDMAXHPVALUE || bufferItemType == BufferItemTypes.MU_ADDMAXMPVALUE)
            {
                // 客户端人物血 蓝上限有2个值 为了客户端显示正确发2条消息 我也不清楚为啥一定要发2条 [5/14/2014 LiaoWei]
                GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
                GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
            }

            //通知DBServer更新BufferData
            Global.UpdateDBBufferData(client, bufferData);

            //将新的Buffer数据通知自己
            GameManager.ClientMgr.NotifyBufferData(client, bufferData);
        }

        /// <summary>
        /// 通知DBServer更新BufferData
        /// </summary>
        /// <param name="client"></param>
        /// <param name="bufferItemType"></param>
        /// <param name="actionParams"></param>
        public static void UpdateDBBufferData(GameClient client, BufferData bufferData)
        {
            //临时Buffer不更新到数据库中
            if (bufferData.BufferType >= 1)
            {
                return;
            }

            //通知DBServer更新数据库
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEBUFFERITEM,
                string.Format("{0}:{1}:{2}:{3}:{4}", client.ClientData.RoleID, bufferData.BufferID, bufferData.StartTime, bufferData.BufferSecs, bufferData.BufferVal),
                null, client.ServerId);
        }

        /// <summary>
        /// 将BufferData信息更新到DBServer(目前只有储量的需要更新)
        /// </summary>
        /// <param name="client"></param>
        /// <param name="bufferData"></param>
        public static void UpdateAllDBBufferData(GameClient client)
        {
            if (null == client.ClientData.BufferDataList)
            {
                return;
            }

            lock (client.ClientData.BufferDataList)
            {
                for (int i = 0; i < client.ClientData.BufferDataList.Count; i++)
                {
                    BufferItemTypes bufferItemType = (BufferItemTypes)client.ClientData.BufferDataList[i].BufferID;
                    if (bufferItemType == BufferItemTypes.LifeVReserve ||
                        bufferItemType == BufferItemTypes.MagicVReserve ||
                        bufferItemType == BufferItemTypes.LingLiVReserve ||
                        bufferItemType == BufferItemTypes.WaWaExp ||
                        bufferItemType == BufferItemTypes.GuMuTimeLimit ||
                        bufferItemType == BufferItemTypes.ErGuoTou
                        )
                    {
                        Global.UpdateDBBufferData(client, client.ClientData.BufferDataList[i]);
                    }
                }
            }
        }

        /// <summary>
        /// 检测Buffer项的显示是否结束
        /// </summary>
        public static bool IsBufferDataOver(BufferData bufferData, long nowTicks = 0)
        {
            if (bufferData.BufferID == (int)BufferItemTypes.LifeVReserve ||
                bufferData.BufferID == (int)BufferItemTypes.MagicVReserve ||
                bufferData.BufferID == (int)BufferItemTypes.LingLiVReserve)
            {
                //储量设置
                return (bufferData.BufferVal <= 0);
            }
            else if (bufferData.BufferID == (int)BufferItemTypes.WaWaExp)
            {
                return (bufferData.BufferVal <= 0);
            }
            else if (bufferData.BufferID == (int)BufferItemTypes.ErGuoTou)
            {
                return (bufferData.BufferVal <= 0);
            }
            else if (bufferData.BufferID == (int)BufferItemTypes.MU_JINGJICHANG_JUNXIAN)
            {
                return (bufferData.BufferVal < 0);
            }
            else if (bufferData.BufferID == (int)BufferItemTypes.MU_WORLDLEVEL)
            {
                return (bufferData.BufferVal <= 0);
            }
            else if (bufferData.BufferID == (int)BufferItemTypes.ChengJiu)
            {
                return (bufferData.BufferVal < 0);
            }
            else if (bufferData.BufferID == (int)BufferItemTypes.GuMuTimeLimit)
            {
                if (bufferData.StartTime != TimeUtil.NowDateTime().DayOfYear) //日不一样就过期了
                {
                    return (bufferData.BufferSecs <= 0);
                }
                else
                {
                    return ((bufferData.BufferVal + bufferData.BufferSecs) <= 0);
                }
            }
            else if (bufferData.BufferID == (int)BufferItemTypes.MU_ANGELTEMPLEBUFF1 || bufferData.BufferID == (int)BufferItemTypes.MU_ANGELTEMPLEBUFF2)
            {
                nowTicks = TimeUtil.NOW();

                long leftTicks = (long)bufferData.BufferSecs * 1000;
                if ((nowTicks - bufferData.StartTime) < leftTicks)
                    return false;

                return true;
            }
            else if (bufferData.BufferID == (int)BufferItemTypes.LangHunLingYu_ChengHao
                || bufferData.BufferID == (int)BufferItemTypes.ZhongShenZhiShen_ChengHao
                || bufferData.BufferID == (int)BufferItemTypes.CoupleArena_ZhenAi_Buff
                || bufferData.BufferID == (int)BufferItemTypes.CoupleArena_YongQi_Buff)
            {
                return bufferData.BufferVal == 0;
            }
            else
            {
                if (bufferData.BufferType <= 0)
                {
                    //时间设置
                    if (nowTicks <= 0)
                    {
                        nowTicks = TimeUtil.NOW();
                    }

                    long leftTicks = (long)bufferData.BufferSecs * 1000;
                    if ((nowTicks - bufferData.StartTime) < leftTicks)
                    {
                        return false;
                    }
                }
                else //如果是临时buffer，则判断StartTime是否为0，是则过期
                {
                    return (bufferData.StartTime <= 0);
                }
            }

            return true;
        }

        /// <summary>
        /// 角色登录的时候初始化临时Buffer项
        /// </summary>
        /// <param name="client"></param>
        public static void InitTempBuffer(GameClient client)
        {
            double[] actionParams = null;

            /*
            //如果自己是皇帝，则添加舍利之源buffer
            if (HuangChengManager.GetHuangDiRoleID() == client.ClientData.RoleID)
            {
                //更新BufferData
                actionParams = new double[1];
                actionParams[0] = 0;
                Global.UpdateBufferData(client, BufferItemTypes.SheLiZhiYuan, actionParams, 1);
            }

            //如果自己是皇妃，则添加帝王之佑buffer
            if (client.ClientData.HuangHou > 0)
            {
                //更新BufferData
                actionParams = new double[1];
                actionParams[0] = 0;
                Global.UpdateBufferData(client, BufferItemTypes.DiWanZhiYou, actionParams, 1);
            }
            */

            //如果在帮会中，则添加帮旗Buffer
            if (client.ClientData.Faction > 0)
            {
                int junQiLevel = JunQiManager.GetJunQiLevelByBHID(client.ClientData.Faction);

                //更新BufferData
                actionParams = new double[1];
                actionParams[0] = (double)junQiLevel - 1;
                Global.UpdateBufferData(client, BufferItemTypes.JunQi, actionParams, 1, false);
            }

            //经脉buffer
            Global.ActiveJinMaiBuffer(client, false);

            //战魂buffer
            Global.ActiveZhanHunBuffer(client, false);
        }

        /// <summary>
        /// 将BufferData加入字典中保存
        /// </summary>
        /// <param name="client"></param>
        /// <param name="bufferData"></param>
        public static void AddBufferDataIntoDict(GameClient client, int bufferID, BufferData bufferData)
        {
            lock (client.ClientData.BufferDataDict)
            {
                client.ClientData.BufferDataDict[bufferID] = bufferData;
            }
        }

        /// <summary>
        /// 获取BufferData从字典中
        /// </summary>
        /// <param name="client"></param>
        /// <param name="bufferID"></param>
        /// <returns></returns>
        public static BufferData GetBufferDataFromDict(GameClient client, int bufferID)
        {
            BufferData bufferData = null;
            lock (client.ClientData.BufferDataDict)
            {
                client.ClientData.BufferDataDict.TryGetValue(bufferID, out bufferData);
            }

            return bufferData;
        }

        /// <summary>
        /// 添加物品对应的buffer
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static bool AddBufferByGoodsID(GameClient client, int goodsID)
        {
            List<MagicActionItem> lsMagicAction = new List<MagicActionItem>();

            if (GameManager.SystemMagicActionMgr.GoodsActionsDict.TryGetValue(goodsID, out lsMagicAction))
            {
                for (int n = 0; n < lsMagicAction.Count; n++)
                {
                    MagicAction.ProcessAction(client, client, lsMagicAction[n].MagicActionID, lsMagicAction[n].MagicActionParams, -1, -1, 0, 1, 0, 0, -1, -1, goodsID);
                }

                return true;
            }

            return false;
        }

        /// <summary>
        /// Buffer mini 信息 [4/10/2014 LiaoWei]
        /// </summary>
        /// <param name="client"></param>
        public static List<BufferDataMini> GetBufferMiniList(GameClient client)
        {
            if (null == client.ClientData.BufferDataList)
                return null;

            List<BufferDataMini> lBuffMiniList = new List<BufferDataMini>();

            lock (client.ClientData.BufferDataList)
            {
                for (int i = 0; i < client.ClientData.BufferDataList.Count; i++)
                {
                    if (client.ClientData.BufferDataList[i].BufferID == (int)BufferItemTypes.MU_ADDMAXLIFEPERCENTANDVALUE ||
                        client.ClientData.BufferDataList[i].BufferID == (int)BufferItemTypes.MU_SUBDAMAGEPERCENTVALUETIMER ||
                        client.ClientData.BufferDataList[i].BufferID == (int)BufferItemTypes.MU_ADDATTACKANDDEFENSEEPERCENTVALUETIMER ||
                        client.ClientData.BufferDataList[i].BufferID == (int)BufferItemTypes.MU_ADD_HIT_DODGE_PERCENT || // 一段时间增加命中、闪避百分比和固定值 [XSea 2015/5/12]
                        client.ClientData.BufferDataList[i].BufferID == (int)BufferItemTypes.PKKingBuffer ||
                        client.ClientData.BufferDataList[i].BufferID == (int)BufferItemTypes.LangHunLingYu_ChengHao ||
                        client.ClientData.BufferDataList[i].BufferID == (int)BufferItemTypes.ZhongShenZhiShen_ChengHao ||
                        client.ClientData.BufferDataList[i].BufferID == (int)BufferItemTypes.HysyShengBei ||
                        client.ClientData.BufferDataList[i].BufferID == (int)BufferItemTypes.CoupleArena_YongQi_Buff ||
                        client.ClientData.BufferDataList[i].BufferID == (int)BufferItemTypes.CoupleArena_ZhenAi_Buff ||
                        client.ClientData.BufferDataList[i].BufferID == (int)BufferItemTypes.KingOfBattleCrystal ||
                        client.ClientData.BufferDataList[i].BufferID == (int)BufferItemTypes.KingOfBattleBoss_GJDZY ||
                        client.ClientData.BufferDataList[i].BufferID == (int)BufferItemTypes.KingOfBattleBoss_GJDJX ||
                        client.ClientData.BufferDataList[i].BufferID == (int)BufferItemTypes.KingOfBattleBoss_GJDNH)
                    {
                        if (!Global.IsBufferDataOver(client.ClientData.BufferDataList[i]))
                        {
                            BufferDataMini tmpInfo = new BufferDataMini();

                            tmpInfo.BufferID = client.ClientData.BufferDataList[i].BufferID;
                            tmpInfo.StartTime = client.ClientData.BufferDataList[i].StartTime;
                            tmpInfo.BufferVal = client.ClientData.BufferDataList[i].BufferVal;
                            tmpInfo.BufferType = client.ClientData.BufferDataList[i].BufferType;
                            tmpInfo.BufferSecs = client.ClientData.BufferDataList[i].BufferSecs;

                            lBuffMiniList.Add(tmpInfo);
                        }
                    }
                }
            }

            return lBuffMiniList;
        }

        #endregion Buffer数据项管理

        #region 怪物Buffer数据项管理

        /// <summary>
        /// 根据BufferID 获取怪物的buffer的数据
        /// </summary>
        /// <param name="client"></param>
        /// <param name="bufferID"></param>
        public static BufferData GetMonsterBufferDataByID(Monster monster, int bufferID)
        {
            if (null == monster.BufferDataDict)
            {
                return null;
            }

            lock (monster.BufferDataDict)
            {
                BufferData bufferData = null;
                monster.BufferDataDict.TryGetValue(bufferID, out bufferData);
                return bufferData;
            }
        }

        /// <summary>
        /// 添加怪物buffer数据到列表中
        /// </summary>
        /// <param name="client"></param>
        /// <param name="bufferDbID"></param>
        private static void AddMonsterBufferData(Monster monster, BufferData bufferData)
        {
            if (null == monster.BufferDataDict)
            {
                monster.BufferDataDict = new Dictionary<int, BufferData>();
            }

            lock (monster.BufferDataDict)
            {
                monster.BufferDataDict[bufferData.BufferID] = bufferData;
            }
        }

        /// <summary>
        /// 从buffer数据到列表删除指定的临时Buffer
        /// </summary>
        /// <param name="client"></param>
        /// <param name="bufferID"></param>
        public static void RemoveMonsterBufferData(Monster monster, int bufferID)
        {
            if (null == monster.BufferDataDict)
            {
                return;
            }

            lock (monster.BufferDataDict)
            {
                monster.BufferDataDict.Remove(bufferID);
            }
        }

        /// <summary>
        /// 更新怪物的BufferData bufferType小于等于0, 都是临时buffer
        /// </summary>
        /// <param name="client"></param>
        /// <param name="bufferItemType"></param>
        /// <param name="actionParams"></param>
        public static void UpdateMonsterBufferData(Monster monster, BufferItemTypes bufferItemType, double[] actionParams)
        {
            BufferData bufferData = Global.GetMonsterBufferDataByID(monster, (int)bufferItemType);
            if (null == bufferData)
            {
                bufferData = new BufferData()
                {
                    BufferID = (int)bufferItemType,
                    BufferType = 1,
                    BufferVal = 0,
                };
            }

            if (bufferItemType == BufferItemTypes.DSTimeAddLifeNoShow)
            {
                //直接替换

                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = (((long)actionParams[1] << 32) | (long)actionParams[2]); //时间间隔(秒) | 每次增加的血量
            }
            if (bufferItemType == BufferItemTypes.DSTimeShiDuNoShow)
            {
                //直接替换

                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = (((long)actionParams[1] << 32) | (long)actionParams[2]); //时间间隔(秒) | 每次减少的血量
            }
            else if (
                bufferItemType == BufferItemTypes.TimeFEIXUENoShow ||
                bufferItemType == BufferItemTypes.TimeZHONGDUNoShow ||
                bufferItemType == BufferItemTypes.TimeLINGHUNoShow ||
                bufferItemType == BufferItemTypes.TimeRANSHAONoShow)
            {
                //直接替换
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = 0;
            }
            else if (bufferItemType == BufferItemTypes.TimeHUZHAONoShow)
            {
                bufferData.StartTime = (int)actionParams[0];
                bufferData.BufferVal = (int)actionParams[0];
            }
            else if (bufferItemType == BufferItemTypes.TimeWUDIHUZHAONoShow)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;
                bufferData.BufferSecs = (int)actionParams[0];
                bufferData.BufferVal = 0;
            }
            else if (bufferItemType == BufferItemTypes.MU_MARRIAGE_SUBDAMAGEPERCENTTIMER)
            {
                long nowTicks = TimeUtil.NOW();
                bufferData.StartTime = nowTicks;   //[bing] 永久存在                
                bufferData.BufferSecs = (int)actionParams[0] * 60;
                bufferData.BufferVal = (long)(actionParams[1] * 100.0d); //[bing] 百分率吧 0.5 就是50
            }

            //如果是新增加的，则加入队列中
            Global.AddMonsterBufferData(monster, bufferData);
        }

        #endregion 怪物Buffer数据项管理

        #region 根据时间执行更新数据的DBServer执行

        /// <summary>
        /// 最大执行命令的时间间隔
        /// </summary>
        private const long MaxDBCmdSlot = (60 * 60 * 1 * 1000);

        // 更新人物一些信息的间隔 [12/17/2013 LiaoWei]
        /// <summary>
        /// DB更新时间间隔 -- 30分钟
        /// </summary>
        private const long UpdateDBInterval = (30 * 60 * 1 * 1000);

        /// <summary>
        /// 获取指定的命令的上次执行时间
        /// </summary>
        /// <param name="client"></param>
        /// <param name="dbCmdID"></param>
        /// <returns></returns>
        private static long GetLastDBCmdTicks(GameClient client, int dbCmdID, long nowTicks)
        {
            long lastDbCmdTicks = 0;
            lock (client.ClientData.LastDBCmdTicksDict)
            {
                if (client.ClientData.LastDBCmdTicksDict.TryGetValue(dbCmdID, out lastDbCmdTicks))
                {
                    return lastDbCmdTicks;
                }
            }

            return nowTicks;
        }

        /// <summary>
        /// 设置指定的命令的上次执行时间
        /// </summary>
        /// <param name="client"></param>
        /// <param name="dbCmdID"></param>
        public static void SetLastDBCmdTicks(GameClient client, int dbCmdID, long nowTicks)
        {
            lock (client.ClientData.LastDBCmdTicksDict)
            {
                client.ClientData.LastDBCmdTicksDict[dbCmdID] = nowTicks;
            }
        }

        /// <summary>
        /// 执行指定的数据库命令
        /// </summary>
        /// <param name="client"></param>
        public static void ProcessDBCmdByTicks(GameClient client, bool force = false)
        {
            long lastDbCmdTicks = 0;
            DateTime dateTime = TimeUtil.NowDateTime();
            long nowTicks = dateTime.Ticks / 10000;
            bool instantUpdate = Global.InstantDBUpdateRoleStat(dateTime);

            lastDbCmdTicks = Global.GetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_UPDATEMONEY1_CMD, nowTicks);
            if (nowTicks - lastDbCmdTicks >= Global.MaxDBCmdSlot || force)
            {
                //更新游戏币(铜钱)
                string strcmd = string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.Money1);
                GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEMONEY1_CMD,
                    strcmd,
                    null, client.ServerId);

                Global.SetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_UPDATEMONEY1_CMD, nowTicks);
            }

            lastDbCmdTicks = Global.GetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_UPDATE_INTERPOWER, nowTicks);
            if (nowTicks - lastDbCmdTicks >= Global.MaxDBCmdSlot || force)
            {
                GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATE_INTERPOWER,
                    string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.InterPower),
                    null, client.ServerId);

                Global.SetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_UPDATE_INTERPOWER, nowTicks);
            }

            lastDbCmdTicks = Global.GetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_UPDATE_EXPLEVEL, nowTicks);
            if (nowTicks - lastDbCmdTicks >= Global.MaxDBCmdSlot || force || instantUpdate)
            {
                // 新手处理 [12/31/2013 LiaoWei]
                if (client.ClientData.IsFlashPlayer == 1 && force)
                {
                    client.ClientData.Level = 1;
                    client.ClientData.Experience = 0;
                }

                GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATE_EXPLEVEL,
                    string.Format("{0}:{1}:{2}", client.ClientData.RoleID, client.ClientData.Level, client.ClientData.Experience),
                    null, client.ServerId);

                Global.SetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_UPDATE_EXPLEVEL, nowTicks);
            }

            lastDbCmdTicks = Global.GetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_UPDATEPKVAL_CMD, nowTicks);
            if (nowTicks - lastDbCmdTicks >= Global.MaxDBCmdSlot || force)
            {
                GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEPKVAL_CMD,
                    string.Format("{0}:{1}:{2}", client.ClientData.RoleID, client.ClientData.PKValue, client.ClientData.PKPoint),
                    null, client.ServerId);

                Global.SetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_UPDATEPKVAL_CMD, nowTicks);
            }

            lastDbCmdTicks = Global.GetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_UPDATELIANZHAN, nowTicks);
            if (nowTicks - lastDbCmdTicks >= Global.MaxDBCmdSlot || force || instantUpdate)
            {
                GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATELIANZHAN,
                    string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.LianZhan),
                    null, client.ServerId);

                Global.SetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_UPDATELIANZHAN, nowTicks);
            }

            lastDbCmdTicks = Global.GetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_UPDATEKILLBOSS, nowTicks);
            if (nowTicks - lastDbCmdTicks >= Global.MaxDBCmdSlot || force || instantUpdate)
            {
                GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEKILLBOSS,
                    string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.KillBoss),
                    null, client.ServerId);

                Global.SetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_UPDATEKILLBOSS, nowTicks);
            }

            if (null != client.ClientData.MyRoleDailyData)
            {
                lastDbCmdTicks = Global.GetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_UPDATEROLEDAILYDATA, nowTicks);
                if (nowTicks - lastDbCmdTicks >= Global.MaxDBCmdSlot || force)
                {
                    RoleDailyData roleDailyData = client.ClientData.MyRoleDailyData;
                    GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEROLEDAILYDATA,
                        string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}",
                        client.ClientData.RoleID,
                        roleDailyData.ExpDayID,
                        roleDailyData.TodayExp,
                        roleDailyData.LingLiDayID,
                        roleDailyData.TodayLingLi,
                        roleDailyData.KillBossDayID,
                        roleDailyData.TodayKillBoss,
                        roleDailyData.FuBenDayID,
                        roleDailyData.TodayFuBenNum,
                        roleDailyData.WuXingDayID,
                        roleDailyData.WuXingNum
                        ),
                        null, client.ServerId);

                    Global.SetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_UPDATEROLEDAILYDATA, nowTicks);
                }
            }

            lastDbCmdTicks = Global.GetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_UPDATEROLESTAT, nowTicks);
            if (nowTicks - lastDbCmdTicks >= Global.MaxDBCmdSlot || force || instantUpdate)
            {
                GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEROLESTAT,
                    string.Format("{0}:{1}:{2}:{3}:{4}",
                    client.ClientData.RoleID,
                    client.ClientData.RoleEquipJiFen,
                    client.ClientData.RoleXueWeiNum,
                    client.ClientData.TotalLearnedSkillLevelCount,
                    client.ClientData.RoleHorseJiFen
                    ),
                    null, client.ServerId);

                Global.SetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_UPDATEROLESTAT, nowTicks);
            }

            lastDbCmdTicks = Global.GetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_UPDATEBATTLENUM, nowTicks);
            if (nowTicks - lastDbCmdTicks >= Global.MaxDBCmdSlot || force || instantUpdate)
            {
                GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEBATTLENUM,
                    string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.BattleNum),
                    null, client.ServerId);

                Global.SetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_UPDATEBATTLENUM, nowTicks);
            }

            lastDbCmdTicks = Global.GetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_UPDATEHEROINDEX, nowTicks);
            if (nowTicks - lastDbCmdTicks >= Global.MaxDBCmdSlot || force || instantUpdate)
            {
                GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEHEROINDEX,
                    string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.HeroIndex),
                    null, client.ServerId);

                Global.SetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_UPDATEHEROINDEX, nowTicks);
            }

            // 更新一些信息 用于排行榜 -- 里面的数据有自己的存盘机制 为了迎合排行榜需求 每半小时 强制存一下[12/17/2013 LiaoWei]
            lastDbCmdTicks = Global.GetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_EXECUTEUPDATEROLESOMEINFO, nowTicks);
            if (nowTicks - lastDbCmdTicks >= Global.UpdateDBInterval || force) // 下线也存下
            {
                // 计算玩家战斗力
                CalculateCombatForce(client);

                GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_EXECUTEUPDATEROLESOMEINFO,
                    string.Format("{0}:{1}:{2}:{3}:{4}", client.ClientData.RoleID, client.ClientData.CombatForce, client.ClientData.Level,
                                     client.ClientData.ChangeLifeCount, client.ClientData.YinLiang), null, client.ServerId);

                Global.SetLastDBCmdTicks(client, (int)TCPGameServerCmds.CMD_DB_EXECUTEUPDATEROLESOMEINFO, nowTicks);
            }
        }

        #endregion 根据时间执行更新数据的DBServer执行

        #region 根据时间主动提交角色统计数据

        /// <summary>
        /// 上次提交角色统计数据的天
        /// </summary>
        private static int LastDBUpdateRoleStatDay = TimeUtil.NowDateTime().DayOfYear;

        /// <summary>
        /// 上次提交角色统计数据的时间记录
        /// </summary>
        private static int LastDBUpdateRoleStatHour = TimeUtil.NowDateTime().Hour;

        /// <summary>
        /// 上次提交角色统计数据的时间记录
        /// </summary>
        private static int LastDBUpdateRoleStatMinute = TimeUtil.NowDateTime().Minute;

        /// <summary>
        /// 是否立即执行提交统计数据的操作(每天7点之前)
        /// </summary>
        /// <param name="dateTime"></param>
        /// <returns></returns>
        private static bool InstantDBUpdateRoleStat(DateTime dateTime)
        {
            int day = dateTime.DayOfYear;
            int hour = dateTime.Hour;
            int minute = dateTime.Minute;

            if (day != LastDBUpdateRoleStatDay)
            {
                LastDBUpdateRoleStatDay = day;
                LastDBUpdateRoleStatHour = hour;
                LastDBUpdateRoleStatMinute = minute;
                return false;
            }

            //时间相同，不处理
            if (hour == LastDBUpdateRoleStatHour && minute == LastDBUpdateRoleStatMinute)
            {
                return false;
            }

            int lastTime = LastDBUpdateRoleStatHour * 60 + LastDBUpdateRoleStatMinute;
            int nowTime = hour * 60 + minute;

            bool ret = false;

            int itemTime = 6 * 60 + 45; //凌晨6点45提交数据
            if (itemTime > lastTime) //没有广播过了
            {
                if (nowTime >= itemTime)
                {
                    ret = true;
                }
            }

            LastDBUpdateRoleStatDay = day;
            LastDBUpdateRoleStatHour = hour;
            LastDBUpdateRoleStatMinute = minute;

            return ret;
        }

        #endregion 根据时间主动提交角色统计数据

        #region 根据时间执行更新技能数据

        /// <summary>
        /// 最大执行技能命令的时间间隔
        /// </summary>
        private const long MaxDBSkillCmdSlot = (60 * 60 * 2 * 1000);

        /// <summary>
        /// 获取指定的技能命令的上次执行时间
        /// </summary>
        /// <param name="client"></param>
        /// <param name="dbCmdID"></param>
        /// <returns></returns>
        private static long GetLastDBSkillCmdTicks(GameClient client, int skillID)
        {
            long lastDbSkillCmdTicks = 0;

            lock (client.ClientData.LastDBSkillCmdTicksDict)
            {
                if (client.ClientData.LastDBSkillCmdTicksDict.TryGetValue(skillID, out lastDbSkillCmdTicks))
                {
                    return lastDbSkillCmdTicks;
                }
            }

            return 0;
        }

        /// <summary>
        /// 设置指定的技能命令的上次执行时间
        /// </summary>
        /// <param name="client"></param>
        /// <param name="dbCmdID"></param>
        public static void SetLastDBSkillCmdTicks(GameClient client, int skillID, long nowTicks)
        {
            lock (client.ClientData.LastDBSkillCmdTicksDict)
            {
                client.ClientData.LastDBSkillCmdTicksDict[skillID] = nowTicks;
            }
        }

        /// <summary>
        /// 执行指定的技能数据库命令
        /// </summary>
        /// <param name="client"></param>
        public static void ProcessDBSkillCmdByTicks(GameClient client, bool force = false)
        {
            if (null == client.ClientData.SkillDataList) return;

            SkillData skillData = null;
            long lastDbSillCmdTicks = 0;
            long nowTicks = TimeUtil.NOW();

            lock (client.ClientData.SkillDataList)
            {
                for (int i = 0; i < client.ClientData.SkillDataList.Count; i++)
                {
                    skillData = client.ClientData.SkillDataList[i];
                    //跳过无需存盘的技能
                    if (skillData.DbID < 0)
                    {
                        continue;
                    }

                    lastDbSillCmdTicks = Global.GetLastDBSkillCmdTicks(client, skillData.SkillID);
                    if (lastDbSillCmdTicks > 0 && (nowTicks - lastDbSillCmdTicks >= Global.MaxDBSkillCmdSlot || force))
                    {
                        Global.SetLastDBSkillCmdTicks(client, skillData.SkillID, 0);

                        //异步写数据库，写入当前的重新开始闭关的的时间
                        GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPSKILLINFO,
                            string.Format("{0}:{1}:{2}:{3}", client.ClientData.RoleID, skillData.DbID, skillData.SkillLevel, skillData.UsedNum),
                            null, client.ServerId);
                    }
                }
            }
        }

        #endregion 根据时间执行更新技能数据

        #region 根据时间执行更新角色参数的信息

        /// <summary>
        /// 最大执行更新角色的参数命令的时间间隔
        /// </summary>
        private const long MaxDBRoleParamCmdSlot = (60 * 60 * 2 * 1000);

        /// <summary>
        /// 获取指定的角色的参数命令的上次执行时间
        /// </summary>
        /// <param name="client"></param>
        /// <param name="dbCmdID"></param>
        /// <returns></returns>
        private static long GetLastDBRoleParamCmdTicks(GameClient client, string paramName)
        {
            long lastDbRoleParamCmdTicks = 0;
            lock (client.ClientData.LastDBRoleParamCmdTicksDict)
            {
                if (client.ClientData.LastDBRoleParamCmdTicksDict.TryGetValue(paramName, out lastDbRoleParamCmdTicks))
                {
                    return lastDbRoleParamCmdTicks;
                }
            }

            return 0;
        }

        /// <summary>
        /// 设置指定的角色参数命令的上次执行时间
        /// </summary>
        /// <param name="client"></param>
        /// <param name="dbCmdID"></param>
        public static void SetLastDBRoleParamCmdTicks(GameClient client, string paramName, long nowTicks)
        {
            lock (client.ClientData.LastDBRoleParamCmdTicksDict)
            {
                client.ClientData.LastDBRoleParamCmdTicksDict[paramName] = nowTicks;
            }
        }

        /// <summary>
        /// 执行指定的角色参数数据库命令
        /// </summary>
        /// <param name="client"></param>
        public static void ProcessDBRoleParamCmdByTicks(GameClient client, bool force = false)
        {
            if (null == client.ClientData.RoleParamsDict) return;

            long lastDbRoleParamCmdTicks = 0;
            long nowTicks = TimeUtil.NOW();

            lock (client.ClientData.LastDBRoleParamCmdTicksDict)
            {
                String key = "";

                //SetLastDBRoleParamCmdTicks 内部会更改词典的value值，那样会导致foreach 异常，采用循环，即使内部删除了元素，也无所谓
                //最多导致重复操作几次

                List<string> keysList = client.ClientData.LastDBRoleParamCmdTicksDict.Keys.ToList<string>();
                int keysListCount = keysList.Count;

                for (int n = 0; n < keysListCount; n++)
                //foreach (var key in client.ClientData.LastDBRoleParamCmdTicksDict.Keys)
                {
                    key = keysList[n];
                    lastDbRoleParamCmdTicks = client.ClientData.LastDBRoleParamCmdTicksDict[key];

                    if (lastDbRoleParamCmdTicks > 0)
                    {
                        if (nowTicks - lastDbRoleParamCmdTicks >= Global.MaxDBRoleParamCmdSlot || force)
                        {
                            string paramValue = Global.GetRoleParamByName(client, key);
                            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEROLEPARAM,
                                string.Format("{0}:{1}:{2}", client.ClientData.RoleID, key, paramValue), null, client.ServerId);

                            //Global.SetLastDBRoleParamCmdTicks(client, key, nowTicks);
                            Global.SetLastDBRoleParamCmdTicks(client, key, 0); //没有必要再次提交
                        }
                    }
                }
            }
        }

        #endregion 根据时间执行更新角色参数的信息

        #region 根据时间执行更新装备耐久度数据

        /// <summary>
        /// 最大执行装备耐久度命令的时间间隔
        /// </summary>
        public const long MaxDBEquipStrongCmdSlot = (60 * 60 * 2 * 1000);

        /// <summary>
        /// 获取指定的装备耐久度命令的上次执行时间
        /// </summary>
        /// <param name="client"></param>
        /// <param name="dbCmdID"></param>
        /// <returns></returns>
        private static long GetLastDBEquipStrongCmdTicks(GameClient client, int goodsDbID)
        {
            long lastDbEquipStrongCmdTicks = 0;
            lock (client.ClientData.LastDBEquipStrongCmdTicksDict)
            {
                if (client.ClientData.LastDBEquipStrongCmdTicksDict.TryGetValue(goodsDbID, out lastDbEquipStrongCmdTicks))
                {
                    return lastDbEquipStrongCmdTicks;
                }
            }

            return 0;
        }

        /// <summary>
        /// 设置指定的装备耐久度命令的上次执行时间
        /// </summary>
        /// <param name="client"></param>
        /// <param name="dbCmdID"></param>
        public static void SetLastDBEquipStrongCmdTicks(GameClient client, int goodsDbID, long nowTicks, bool forceAdd)
        {
            lock (client.ClientData.LastDBEquipStrongCmdTicksDict)
            {
                //便于外部控制，因为物品太多，如果全部都提交遍历太消耗资源了，应该是改了那个就提交那个
                if (forceAdd)
                {
                    client.ClientData.LastDBEquipStrongCmdTicksDict[goodsDbID] = nowTicks;
                }
                else
                {
                    //如果原来没有值或值为0或新值比旧值小,则更新值
                    long oldTicks;
                    if (!client.ClientData.LastDBEquipStrongCmdTicksDict.TryGetValue(goodsDbID, out oldTicks) || oldTicks <= 0 || oldTicks > nowTicks)
                    {
                        client.ClientData.LastDBEquipStrongCmdTicksDict[goodsDbID] = nowTicks;
                    }
                }
            }
        }

        /// <summary>
        /// 执行指定的装备耐久度数据库命令
        /// </summary>
        /// <param name="client"></param>
        public static void ProcessDBEquipStrongCmdByTicks(GameClient client, bool force = false)
        {
            if (null == client.ClientData.GoodsDataList) return;

            GoodsData goodsData = null;
            long lastDbEquipStrongCmdTicks = 0;
            long nowTicks = TimeUtil.NOW();

            lock (client.ClientData.GoodsDataList)
            {
                for (int i = 0; i < client.ClientData.GoodsDataList.Count; i++)
                {
                    goodsData = client.ClientData.GoodsDataList[i];
                    if (goodsData.Using <= 0)
                    {
                        //不装备在身上的不自动处理
                        continue;
                    }

                    lastDbEquipStrongCmdTicks = Global.GetLastDBEquipStrongCmdTicks(client, goodsData.Id);
                    if (lastDbEquipStrongCmdTicks <= 0)
                    {
                        //从未修改过，所以不处理
                        continue;
                    }

                    if (nowTicks - lastDbEquipStrongCmdTicks >= Global.MaxDBEquipStrongCmdSlot || force)
                    {
                        //更新某个装备的耐久度到数据库中
                        Global.UpdateEquipStrong(client, goodsData);
                    }
                }
            }
        }

        /// <summary>
        /// 更新某个装备的耐久度到数据库中
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsData"></param>
        public static void UpdateEquipStrong(GameClient client, GoodsData goodsData)
        {
            Global.ModGoodsStrongDBCommand(Global._TCPManager.TcpOutPacketPool, client, goodsData);

            //强制时间为0，这样如果将来未再修改，就不用再自动提交了
            Global.SetLastDBEquipStrongCmdTicks(client, goodsData.Id, 0, true);
        }

        #endregion 根据时间执行更新装备耐久度数据

        #region 处理心跳超时的角色

        /// <summary>
        /// 关闭TMSKSocket连接
        /// </summary>
        /// <param name="client"></param>
        public static void ForceCloseClient(GameClient client, string reason = "", bool sync = true)
        {
            if (!string.IsNullOrEmpty(reason))
            {
                /**/reason = string.Format("RoleID={0}, RoleName={1}, 强制关闭:{2}", client.ClientData.RoleID, client.ClientData.RoleName, reason);
            }
            SysConOut.WriteLine("========================ForceCloseClient CloseSocket================" + reason);
            client.ClientData.ClosingClientStep = 1;
            Global._TCPManager.MySocketListener.CloseSocket(client.ClientSocket, reason);
        }

        /// <summary>
        /// 关闭角色连接
        /// </summary>
        /// <param name="client"></param>
        public static void ForceCloseSocket(TMSKSocket socket, string reason = "", bool sync = true)
        {
            //Global._TCPManager.MySocketListener.CloseSocket(socket);
            if ("" != reason || string.IsNullOrEmpty(socket.CloseReason))
            {
                socket.CloseReason = reason;
            }

            Global._TCPManager.ExternalClearSocket(socket);
        }

        /// <summary>
        /// 处理角色的心跳时间, 如果超时，则执行清除工作
        /// </summary>
        /// <param name="client"></param>
        public static void ProcessClientHeart(GameClient client)
        {
            long nowTicks = TimeUtil.NOW();

            //如果90秒前检测客户端有进程加速嫌疑
            if (client.CheckCheatData.ProcessBoosterTicks > 0 && nowTicks - client.CheckCheatData.ProcessBoosterTicks > 90 * TimeUtil.SECOND)
            {
                //查看服务器是否在3分钟内有时间漂移
                if (TimeUtil.HasTimeDrift())
                {
                    client.CheckCheatData.ProcessBoosterTicks = 0;
                }
                else
                {
                    client.CheckCheatData.ProcessBooster = true;
                }
            }

            string detail = "";
            //判断回报位置的心跳时间
            if (nowTicks - client.ClientData.LastClientHeartTicks < (60 * 3 * 1000)) //10分钟，就清除
            {
                if (!client.CheckCheatData.MismatchingMapCode)
                {
                    return;
                }
                else if (nowTicks - client.ClientData.ServerPosTicks < (60 * 1 * 1000)) //允许客户端报告错误地图编号的时间
                {
                    return;
                }
                else
                {
                    /**/detail = "客户端在心跳时间内，但是地图不匹配，并且超出了地图错误的上报时间";
                }
            }
            else
            {
                /**/detail = "客户端心跳超时";
            }

            //关闭无心跳的客户端的步骤
            if (0 == client.ClientData.ClosingClientStep) //如果没有关闭过
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("RoleID={0}, RoleName={1}, IP={2} 已经无心跳", client.ClientData.RoleID, client.ClientData.RoleName, Global.GetSocketRemoteEndPoint(client.ClientSocket)));
                ForceCloseClient(client, detail);
            }
            else if (1 == client.ClientData.ClosingClientStep)
            {
                if (nowTicks - client.ClientData.LastClientHeartTicks >= (60 * 4 * 1000)) //10分钟，就清除
                {
                    client.ClientData.ClosingClientStep = 2;
                    ForceCloseSocket(client.ClientSocket);
                }
            }
        }

        #endregion 处理心跳超时的角色

        #region 系统送礼活动

        /// <summary>
        /// 数据库命令更新活动数据事件
        /// </summary>
        /// <param name="pool"></param>
        /// <param name="client"></param>
        /// <param name="horseID"></param>
        /// <param name="props"></param>
        /// <returns></returns>
        public static void UpdateHuoDongDBCommand(TCPOutPacketPool pool, GameClient client)
        {
            //先DBServer请求
            HuodongData huodongData = client.ClientData.MyHuodongData;
            string StepTimeStr = (new DateTime(huodongData.StepTime * 10000)).ToString("yyyy-MM-dd HH$mm$ss");

            //"roleID", "loginweekid", "logindayid", "loginnum", "newstep", "steptime", "lastmtime", "curmid", "curmtime", "songliid", "logingiftstate", "onlinegiftstate", "lastlimittimehuodongid", 
            //"lastlimittimedayid", "limittimeloginnum", "limittimegiftstate", "everydayonlineawardstep", "geteverydayonlineawarddayid", "serieslogingetawardstep", "seriesloginawarddayid"
            string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}:{11}:{12}:{13}:{14}:{15}:{16}:{17}:{18}:{19}:{20}:{21}",
                client.ClientData.RoleID,
                huodongData.LastWeekID,
                huodongData.LastDayID,
                huodongData.LoginNum,
                huodongData.NewStep,
                StepTimeStr,
                huodongData.LastMTime,
                huodongData.CurMID,
                huodongData.CurMTime,
                huodongData.SongLiID,
                huodongData.LoginGiftState,
                huodongData.OnlineGiftState,
                huodongData.LastLimitTimeHuoDongID,
                huodongData.LastLimitTimeDayID,
                huodongData.LimitTimeLoginNum,
                huodongData.LimitTimeGiftState,
                huodongData.EveryDayOnLineAwardStep,
                huodongData.GetEveryDayOnLineAwardDayID,
                huodongData.SeriesLoginGetAwardStep,
                huodongData.SeriesLoginAwardDayID,
                huodongData.SeriesLoginAwardGoodsID,
                huodongData.EveryDayOnLineAwardGoodsID
                );

            //更新上线状态
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATHUODONGINFO, strcmd, null, client.ServerId);
        }

        /// <summary>
        /// 计算今天是今年的第几周(一周从周日到周六，即周日是第一天)
        /// </summary>
        /// <param name="dt"></param>
        /// <returns></returns>
        //public static int WeekOfYear(DateTime dt)
        //{
        //    DateTime print = new DateTime(dt.Year, 1, 1);
        //    return (dt.DayOfYear + print.DayOfWeek - dt.DayOfWeek - 8) / 7 + 2;
        //}

        /// <summary>
        /// 更新周连续登录的次数
        /// </summary>
        /// <param name="client"></param>
        public static bool UpdateWeekLoginNum(GameClient client)
        {
            // 优化和DB的通信 改造下接口 -- 直接修改client.ClientData.MyHuodongData 在其后进行统一的DB通知 [1/18/2014 LiaoWei]

            //HuodongData huodongData = client.ClientData.MyHuodongData;    这里注释掉

            int weekID = (int)TimeUtil.NowDateTime().DayOfWeek;
            int todayID = TimeUtil.NowDateTime().DayOfYear;

            bool reset = false;
            if (1 != weekID)
            {
                if (client.ClientData.MyHuodongData.LastDayID != todayID.ToString()) //判断如果不是同一天
                {
                    if (client.ClientData.MyHuodongData.LastDayID == TimeUtil.NowDateTime().AddDays(-1).DayOfYear.ToString())
                    {
                        client.ClientData.MyHuodongData.LastDayID = todayID.ToString();
                        client.ClientData.MyHuodongData.LoginNum++;

                        //数据库命令更新活动数据事件
                        //Global.UpdateHuoDongDBCommand(Global._TCPManager.TcpOutPacketPool, client);  这里注释掉
                        return true;
                    }
                    else
                    {
                        ;//中断了不处理了
                        reset = true;
                    }
                }
            }
            else
            {
                reset = true; //周1重新开始计数
            }

            if (reset)
            {
                client.ClientData.MyHuodongData.LoginGiftState = 0;
                client.ClientData.MyHuodongData.LastWeekID = weekID.ToString(); //记录下来，但是没用了
                client.ClientData.MyHuodongData.LastDayID = todayID.ToString();
                client.ClientData.MyHuodongData.LoginNum = 1;

                //数据库命令更新活动数据事件
                //Global.UpdateHuoDongDBCommand(Global._TCPManager.TcpOutPacketPool, client); 这里注释掉
                return true;
            }

            return false;
        }

        /// <summary>
        /// 初始化新手见面礼物的数据
        /// </summary>
        /// <param name="client"></param>
        public static void InitNewStep(GameClient client)
        {
            if (client.ClientData.MyHuodongData.NewStep <= 0)
            {
                if (client.ClientData.MyHuodongData.StepTime <= 0)
                {
                    client.ClientData.MyHuodongData.StepTime = (TimeUtil.NOW());
                }
            }
        }

        /// <summary>
        /// 更新限时累计登录次数
        /// </summary>
        /// <param name="client"></param>
        public static bool UpdateLimitTimeLoginNum(GameClient client)
        {
            // 优化和DB的通信 改造下接口 -- 直接修改client.ClientData.MyHuodongData 在其后进行统一的DB通知 [1/18/2014 LiaoWei]

            // HuodongData huodongData = client.ClientData.MyHuodongData;  这里注释掉

            int todayID = TimeUtil.NowDateTime().DayOfYear;
            int currentHuoDongID = HuodongCachingMgr.GetLimitTimeLoginHuoDongID();

            if (currentHuoDongID > 0) //判断是否在活动期间
            {
                if (currentHuoDongID == client.ClientData.MyHuodongData.LastLimitTimeHuoDongID)
                {
                    if (todayID != client.ClientData.MyHuodongData.LastLimitTimeDayID)
                    {
                        client.ClientData.MyHuodongData.LastLimitTimeDayID = todayID;
                        client.ClientData.MyHuodongData.LimitTimeLoginNum++;

                        //数据库命令更新活动数据事件
                        //Global.UpdateHuoDongDBCommand(Global._TCPManager.TcpOutPacketPool, client); 这里注释掉
                        return true;
                    }
                }
                else
                {
                    client.ClientData.MyHuodongData.LastLimitTimeHuoDongID = currentHuoDongID;
                    client.ClientData.MyHuodongData.LastLimitTimeDayID = todayID;
                    client.ClientData.MyHuodongData.LimitTimeLoginNum = 1;
                    client.ClientData.MyHuodongData.LimitTimeGiftState = 0;

                    //数据库命令更新活动数据事件
                    //Global.UpdateHuoDongDBCommand(Global._TCPManager.TcpOutPacketPool, client); 这里注释掉
                    return true;
                }
            }

            return false;
        }

        #endregion 系统送礼活动

        #region 自己定义的支持超时机制的对象锁定处理

        /// <summary>
        /// 尝试锁定对象
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public static object TryLockObject(object obj, int millisecondsTimeout = 5000)
        {
            bool lockWasTaken = false;
            object tempEnterObj = obj;

            Monitor.TryEnter(tempEnterObj, millisecondsTimeout, ref lockWasTaken);
            if (lockWasTaken) //锁定成功
            {
                return tempEnterObj;
            }

            //锁定超时处理
            //获取当前的堆栈
            try
            {
                System.Diagnostics.StackTrace stackTrace = new System.Diagnostics.StackTrace(1, true);

                //格式化堆栈信息
                DataHelper.WriteFormatStackLog(stackTrace, "");
            }
            catch (Exception)
            {
            }

            return null;
        }

        /// <summary>
        /// 解锁已经锁定的对象
        /// </summary>
        /// <param name="obj"></param>
        public static void FinalUnLockObject(object obj)
        {
            if (null == obj) return;
            Monitor.Exit(obj);
        }

        #endregion 自己定义的支持超时机制的对象锁定处理

        #region 角色移动

        /// <summary>
        /// 获取怪物的开始移动时间
        /// </summary>
        /// <param name="monster"></param>
        /// <returns></returns>
        public static long GetMonsterStartMoveTicks(Monster monster)
        {
            return (TimeUtil.NOW());
        }

        /// <summary>
        /// 获取角色的开始移动时间
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static long GetClientStartMoveTicks(GameClient client)
        {
            //客户端不执行严格的时间校准的情况下，直接使用服务器端时间，才是正确的。
            //if (client.ClientData.RoleStartMoveTicks <= 0)
            {
                return (TimeUtil.NOW());
            }

            return client.ClientData.RoleStartMoveTicks;
        }

        /// <summary>
        /// 获取宠物的开始移动时间
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static long GetPetStartMoveTicks(GameClient client)
        {
            //if (client.ClientData.ReportPetPosTicks <= 0)
            {
                return (TimeUtil.NOW());
            }

            return client.ClientData.ReportPetPosTicks;
        }

        #endregion 角色移动

        #region PK值/PK点管理

        /// <summary>
        /// 一个PK值等于多少PK点
        /// </summary>
        public static int PKValueEqPKPoints = 100;

        /// <summary>
        /// 杀一个红名消减多少PK点
        /// </summary>
        //public static int KillRedNameSubPKPoints = 200;

        /// <summary>
        /// 红名被杀消减多少PK点
        /// </summary>
        //public static int RedNameBeKilledSubPKPoints = 400;

        /// <summary>
        /// 最低的红名PK点个数
        /// </summary>
        public static int MinRedNamePKPoints = 200;

        /// <summary>
        /// 最低的进入牢房的PK点个数
        /// </summary>
        public static int MinEnterJailPKPoints = (PKValueEqPKPoints * 5);

        /// <summary>
        /// 最低的出牢房的PK点个数
        /// </summary>
        public static int MinLeaveJailPKPoints = (PKValueEqPKPoints * 4);

        /// <summary>
        /// 每隔10秒钟减少的PK点数
        /// </summary>
        public static int SubPKPointsPer10Seconds = 10;

        /// <summary>
        /// PK点最大值
        /// </summary>
        public static int MaxPKPointValue = 1000;

        /// <summary>
        /// 根据PK点计算出颜色索引值(0: 白色, 1:黄色, 2:红色)
        /// </summary>
        /// <param name="pkPoints"></param>
        /// <returns></returns>
        public static int GetNameColorIndexByPKPoints(int pkPoints)
        {
            if (pkPoints >= 0 && pkPoints <= 99)
            {
                return 0;
            }
            else if (pkPoints >= 100 && pkPoints <= 199)
            {
                return 1;
            }

            return 2;
        }

        /// <summary>
        /// 牢房的地图ID
        /// </summary>
        public static int LaoFangMapCode = -1;

        /// <summary>
        ///  获取牢房地图ID
        /// </summary>
        /// <returns></returns>
        public static int GetLaoFangMapCode()
        {
            if (-1 == LaoFangMapCode)
            {
                LaoFangMapCode = (int)GameManager.systemParamsList.GetParamValueIntByName("LaoFangMapCode");
            }

            return LaoFangMapCode;
        }

        /// <summary>
        /// 强迫进入牢房地图
        /// </summary>
        public static void ForceChangeToLaoFangMap(RoleDataEx roleDataEx)
        {
            int toMapCode = Global.GetLaoFangMapCode();
            if (-1 == toMapCode)
            {
                return;
            }

            if (roleDataEx.PKPoint < Global.MinEnterJailPKPoints)
            {
                return;
            }

            roleDataEx.MapCode = toMapCode;
            roleDataEx.PosX = 0;
            roleDataEx.PosY = 0;
        }

        /// <summary>
        /// 强迫关入牢房地图
        /// </summary>
        public static void ForceSendToLaoFangMap(GameClient client, int pkPoints)
        {
            if (client.ClientData.MapCode != GameManager.MainMapCode)
            {
                return;
            }

            client.ClientData.PKPoint = pkPoints;

            //设置PK值(限制当前地图)
            GameManager.ClientMgr.SetRolePKValuePoint(Global._TCPManager.MySocketListener,
                Global._TCPManager.TcpOutPacketPool, client, client.ClientData.PKValue, client.ClientData.PKPoint, false);

            int toMapCode = Global.GetLaoFangMapCode();
            if (-1 != toMapCode)
            {
                GameMap gameMap = null;
                if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
                {
                    GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                        client, toMapCode, -1, -1, -1);
                }
            }
        }

        /// <summary>
        /// 从牢房中放出
        /// </summary>
        public static void ForceTakeOutLaoFangMap(GameClient client, int pkPoints)
        {
            if (client.ClientData.MapCode != Global.GetLaoFangMapCode())
            {
                return;
            }

            client.ClientData.PKPoint = pkPoints;

            //设置PK值(限制当前地图)
            GameManager.ClientMgr.SetRolePKValuePoint(Global._TCPManager.MySocketListener,
                Global._TCPManager.TcpOutPacketPool, client, client.ClientData.PKValue, client.ClientData.PKPoint, false);

            int toMapCode = GameManager.MainMapCode;
            if (-1 != toMapCode)
            {
                GameMap gameMap = null;
                if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
                {
                    GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                        client, toMapCode, -1, -1, -1);
                }
            }
        }

        /// <summary>
        /// 存储当天角色击杀红名玩家的记录,每天0点清空
        /// </summary>
        private static HashSet<long> RoleKillRoleSet = new HashSet<long>();

        /// <summary>
        /// 存储当天角色击杀红名玩家的记录
        /// </summary>
        /// <param name="clientID"></param>
        /// <param name="enemyID"></param>
        /// <returns></returns>
        public static bool AddToTodayRoleKillRoleSet(int clientID, int enemyID)
        {
            long key = clientID << 32 + enemyID;
            lock (RoleKillRoleSet)
            {
                if (!RoleKillRoleSet.Contains(key))
                {
                    RoleKillRoleSet.Add(key);
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// 清除前一天色击杀红名玩家的记录
        /// </summary>
        public static void ClearTodayRoleKillRoleSet()
        {
            lock (RoleKillRoleSet)
            {
                RoleKillRoleSet.Clear();
            }
        }

        #endregion PK值/PK点管理

        #region 紫名 红名 管理

        /// <summary>
        /// 紫名的最长时间(毫秒)
        /// </summary>
        public static long MaxPurpleNameTicks = (60 * 1000);

        /// <summary>
        /// 是否是紫名
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool IsPurpleName(GameClient client)
        {
            long ticks = TimeUtil.NOW();
            if (ticks - client.ClientData.StartPurpleNameTicks < Global.MaxPurpleNameTicks)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 判断是否红名
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool IsRedName(GameClient client)
        {
            return client.ClientData.PKPoint >= Global.MinRedNamePKPoints;
        }

        #endregion 紫名管理

        #region 连斩管理

        /// <summary>
        /// 不计算连斩数量的角色和怪物间的级别差距
        /// </summary>
        public static int MaxLianZhanSubLevel = 10;

        /// <summary>
        /// 连斩的数量数组
        /// </summary>
        public static int[] LianZhanNums = 
        {
            0,
            100,
            200,
            300,
            400,
            500,
            600,
            700,
            800,
            900,
            1000000,
        };

        /// <summary>
        /// 连斩的时间间隔
        /// </summary>
        public static double[] LianZhanSecs = 
        {
            12,
            10,
            8,
            6,
            4,
            3,
            2,
            1,
            0.8,
            0.6,
            0.4,
        };

        /// <summary>
        /// 连斩的对于BOSS的伤害效果
        /// </summary>
        public static int[] LianZhanAntiBossNums = 
        {
            0,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            0,
        };

        /// <summary>
        /// 获取连斩的Buffer值
        /// </summary>
        /// <param name="lianZhanNum"></param>
        /// <returns></returns>
        public static int GetLianZhanBufferVal(int lianZhanNum)
        {
            int index = 0;
            for (int i = 0; i < LianZhanNums.Length; i++)
            {
                if (lianZhanNum < LianZhanNums[i])
                {
                    index = (i - 1);
                    break;
                }
            }

            return LianZhanAntiBossNums[index];
        }

        /// <summary>
        /// 获取连斩的时间间隔
        /// </summary>
        /// <param name="lianZhanNum"></param>
        /// <returns></returns>
        public static double GetLianZhanSecs(int lianZhanNum)
        {
            int index = 0;
            for (int i = 0; i < LianZhanNums.Length; i++)
            {
                if (lianZhanNum < LianZhanNums[i])
                {
                    index = (i - 1);
                    break;
                }
            }

            return LianZhanSecs[index];
        }

        /// <summary>
        /// 是否能继续计算连斩
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool CanContinueLianZhan(GameClient client)
        {
            if (client.ClientData.StartLianZhanTicks <= 0)
            {
                return false;
            }

            if (client.ClientData.WaitingLianZhanTicks <= 0)
            {
                return false;
            }

            long ticks = TimeUtil.NOW();
            if (ticks - client.ClientData.StartLianZhanTicks >= client.ClientData.WaitingLianZhanTicks)
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// 连斩的Buffer名称
        /// </summary>
        public static string[] LianZhanBufferNames = 
        {
            Global.GetLang("百连"),
            Global.GetLang("如麻"),
            Global.GetLang("主宰"),
            Global.GetLang("暴走"),
            Global.GetLang("无敌"),
            Global.GetLang("妖孽"),
            Global.GetLang("至尊"),
            Global.GetLang("魔尊"),
            Global.GetLang("魔神"),
        };

        /// <summary>
        /// 获取连斩Buffer的名称
        /// </summary>
        /// <param name="lianZhanNum"></param>
        /// <returns></returns>
        public static string GetLianZhanBufferName(int bufferVal)
        {
            if (bufferVal < 0 || bufferVal >= LianZhanBufferNames.Length)
            {
                return "";
            }

            return Global.GetLang(LianZhanBufferNames[bufferVal]);
        }

        #endregion 连斩管理

        #region 用户行为消息管理

        /// <summary>
        /// 初始化的ID
        /// </summary>
        private static int StartBulletinID = (int)(TimeUtil.NOW());

        /// <summary>
        /// 广播用户的行为消息
        /// </summary>
        /// <param name="msgType"></param>
        /// <param name="msgText"></param>
        /// <param name="sendToOtherLines"></param>
        public static void BroadcastRoleActionMsg(GameClient client, RoleActionsMsgTypes msgType, string msgText, bool sendToOtherLines = true, GameInfoTypeIndexes infoType = GameInfoTypeIndexes.Normal, ShowGameInfoTypes showType = ShowGameInfoTypes.None, int minZhuanSheng = 0, int minLevel = 0)
        {
            int roleID = (null == client) ? -1 : client.ClientData.RoleID;

            // 空消息不发送
            if (String.IsNullOrEmpty(msgText))
            {
                return;
            }

            //系统的公告模式
            if (msgType == RoleActionsMsgTypes.Bulletin)
            {
                Global.StartBulletinID++;
                string msgID = string.Format("{0}_{1}", Global.StartBulletinID, GameManager.ServerLineID);
                int minutes = 0;
                int playNum = 1;

                //添加到公告队列中
                //公告管理消息对象
                BulletinMsgData bulletinMsgData = GameManager.BulletinMsgMgr.AddBulletinMsg(msgID, minutes, playNum, msgText, 1);

                //将本条消息广播给所有在线的客户端
                GameManager.ClientMgr.NotifyAllBulletinMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, null, bulletinMsgData, minZhuanSheng, minLevel);

                //是否要发到其他线
                if (sendToOtherLines)
                {
                    //将半角空格修改为不可见的中文空格
                    msgText = msgText.Replace(" ", "　");

                    string gmCmdData = string.Format("-sysmsg {0} {1} {2} {3}", msgID, minutes, playNum, msgText);

                    //转发GM消息到DBServer
                    GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_SPR_CHAT,
                        string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", roleID, "", 0, "", 0, gmCmdData, 0, 0, GameManager.ServerLineID),
                        null, GameManager.LocalServerId);
                }
            }
            else if (msgType == RoleActionsMsgTypes.HintMsg) //提示信息模式
            {
                GameManager.ClientMgr.NotifyAllImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                    null, msgText, infoType, showType, minZhuanSheng, minLevel);

                //是否要发到其他线
                if (sendToOtherLines)
                {
                    //将半角空格修改为不可见的中文空格
                    msgText = msgText.Replace(" ", "　");

                    string gmCmdData = string.Format("-hintmsg {0} {1} {2}", (int)infoType, (int)showType, msgText);

                    //转发GM消息到DBServer
                    GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_SPR_CHAT,
                        string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", roleID, "", 0, "", 0, gmCmdData, 0, 0, GameManager.ServerLineID),
                        null, GameManager.LocalServerId);
                }
            }
        }

        /// <summary>
        /// 广播消息(帮派内)
        /// </summary>
        /// <param name="msgType"></param>
        /// <param name="msgText"></param>
        /// <param name="sendToOtherLines"></param>
        public static void BroadcastBangHuiMsg(int roleID, int faction, string msgText, bool sendToOtherLines = true, GameInfoTypeIndexes infoType = GameInfoTypeIndexes.Normal, ShowGameInfoTypes showType = ShowGameInfoTypes.None)
        {
            GameManager.ClientMgr.NotifyBangHuiImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                faction, msgText, infoType, showType);

            //是否要发到其他线
            /*if (sendToOtherLines)
            {
                //将半角空格修改为不可见的中文空格
                msgText = msgText.Replace(" ", "　");

                string gmCmdData = string.Format("-hintmsg2 {0} {1} {2} {3}", (int)faction, (int)infoType, (int)showType, msgText);

                //转发GM消息到DBServer
                GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_SPR_CHAT,
                    string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", roleID, "", 0, "", 0, gmCmdData, 0, 0, GameManager.ServerLineID),
                    null);
            }*/
        }

        #endregion 用户行为消息管理

        #region 用户行为消息函数列表

        /// <summary>
        /// 各等级vip单次大礼领取提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastVipOnceAwardHint(GameClient client)
        {
            return; /*tmp*/
            string broadCastMsg = "";
            broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】领取了{2}奖励物品-【查看VIP特权】"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                Global.GetVipTypeNameString(client));

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// vip用户领取元宝提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastVipFetchYuanBaoAwardMsg(GameClient client, int yuanBaoNum)
        {
            return; /*tmp*/
            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】领取了{2}每日福利{3}钻石-【查看VIP特权】"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                Global.GetVipTypeNameString(client),
                yuanBaoNum);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// vip用户领取绑定元宝提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastVipFetchBindYuanBaoAwardMsg(GameClient client, int yuanBaoNum)
        {
            return; /*tmp*/
            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】领取了{2}每日福利{3}绑定钻石-【查看VIP特权】"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                Global.GetVipTypeNameString(client),
                yuanBaoNum);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 谁Kill了谁
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastXKilledY(GameClient client, GameClient enemy)
        {
            //角斗场中杀人不进行播报
            if (client.ClientData.MapCode == GameManager.ArenaBattleMgr.BattleMapCode)
            {
                return;
            }

            string broadCastMsg = "";

            //仙魔战场[旧的隋唐战场]
            if (client.ClientData.MapCode == GameManager.BattleMgr.BattleMapCode)
            {
                broadCastMsg = StringUtil.substitute(Global.GetLang("{0}的【{1}】被{2}的【{3}】击杀"),
                    Global.GetBattleZhenYing(enemy),
                    Global.FormatRoleName(enemy, enemy.ClientData.RoleName),
                    Global.GetBattleZhenYing(client),
                    Global.FormatRoleName(client, client.ClientData.RoleName));
                //播放用户行为消息
                Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox);
                return;
            }

            //王城争霸 在皇宫
            if (Global.IsHuangGongMapCode(client.ClientData.MapCode))
            {
                broadCastMsg = StringUtil.substitute(Global.GetLang("【{0}】在皇宫被【{1}】击杀"),
                    Global.FormatRoleName(enemy, enemy.ClientData.RoleName),
                    Global.FormatRoleName(client, client.ClientData.RoleName));
                //播放用户行为消息
                Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox);
                return;
            }

            //王城争霸 在王城
            if (Global.GetWangChengMapCode() == client.ClientData.MapCode)
            {
                broadCastMsg = StringUtil.substitute(Global.GetLang("【{0}】在王城被【{1}】击杀"),
                    Global.FormatRoleName(enemy, enemy.ClientData.RoleName),
                    Global.FormatRoleName(client, client.ClientData.RoleName));
                //播放用户行为消息
                Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox);
                return;
            }

            /*broadCastMsg = StringUtil.substitute(Global.GetLang("很不幸,{0}{1}【{2}】在『{3}』惨被{4}【{5}】杀害,【{2}】定会一雪前耻"),
                Global.GetServerLineName2(),
                string.IsNullOrEmpty(enemy.ClientData.BHName) ? "" : StringUtil.substitute(Global.GetLang("『{0}』战盟的"), enemy.ClientData.BHName),
                Global.FormatRoleName(enemy, enemy.ClientData.RoleName),
                Global.GetMapName(enemy.ClientData.MapCode),       // fix a bug -- dead man's map  [10/28/2013 LiaoWei]
                string.IsNullOrEmpty(client.ClientData.BHName) ? "" : StringUtil.substitute(Global.GetLang("『{0}』战盟的"), client.ClientData.BHName),
                Global.FormatRoleName(client, client.ClientData.RoleName));*/

            //播放用户行为消息
            //Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox);

            //通知本帮派的所有在线的人，某人加入了本帮派, 且杀人者与被杀者不属于同一帮会，或者杀人者没有帮会，就给提示
            if (enemy.ClientData.Faction > 0 && enemy.ClientData.Faction != client.ClientData.Faction)
            {
                Global.BroadcastBangHuiMsg(enemy.ClientData.RoleID, enemy.ClientData.Faction,
                    StringUtil.substitute(Global.GetLang("很不幸，本战盟成员【{0}】在{1}『{2}』惨被【{3}】杀害，请火速前往支援"),
                    Global.FormatRoleName(enemy, enemy.ClientData.RoleName),
                    Global.GetServerLineName2(),
                    Global.GetMapName(client.ClientData.MapCode),
                    Global.FormatRoleName(client, client.ClientData.RoleName)),
                    true, GameInfoTypeIndexes.Normal, ShowGameInfoTypes.OnlyChatBox);
            }
        }

        /// <summary>
        /// 谁Kill了Boss
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastXKilledMonster(GameClient client, Monster monster)
        {
            //只播报普通地图中的杀怪行为
            if (MapTypes.Normal != Global.GetMapType(monster.CurrentMapCode))
            {
                return;
            }

            string broadCastMsg = null;
            if ((int)MonsterTypes.BOSS == monster.MonsterType)
            {
                broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】在『{2}』成功击杀了『{3}』"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    Global.GetMapName(monster.CurrentMapCode),
                    monster.XMonsterInfo.Name);
            }
           

            //播放用户行为消息
            if (null != broadCastMsg)
            {
                Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
            }
        }

        /// <summary>
        /// 跨10的升级
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastUpLevel(GameClient client, int oldLevel)
        {
            if ((oldLevel / 10) == (client.ClientData.Level / 10))
            {
                return;
            }

            if (client.ClientData.Level / 10 < 3) //30级之前不广播
            {
                return;
            }

            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】成功的升到了『{2}』级"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                client.ClientData.Level);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 经脉某条贯通
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastJingMaiLevelOk(GameClient client, JingMaiData jingMaiData)
        {
            if (jingMaiData.JingMaiLevel < Global.MaxJingMaiLevel)
            {
                return;
            }

            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】将『奇经八脉•{2}』『{3}』成功贯通，获得了大量的经验和属性加成"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                Global.GetJingMaiBodyLevelName(jingMaiData.JingMaiBodyLevel - 1),
                Global.GetJingMaiName(jingMaiData.JingMaiID));

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.SysHintAndChatBox);
        }

        /// <summary>
        /// 经脉某重通玄
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastJingMaiBodyLevelOk(GameClient client, int oldJingMaiBodyLevel)
        {
            if (oldJingMaiBodyLevel == client.ClientData.JingMaiBodyLevel)
            {
                return;
            }

            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】成功突破『奇经八脉•{2}』，获得了大量的经验和属性加成"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                Global.GetJingMaiBodyLevelName(oldJingMaiBodyLevel - 1));

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.SysHintAndChatBox);
        }

        /// <summary>
        /// 提品成功(紫色以上提示)
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastEnchanceOk(GameClient client, GoodsData goodsData)
        {
            if (goodsData.Quality < (int)GoodsQuality.Purple)
            {
                return;
            }

            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】将『{2}』的品质提升到了{3}，实力得到了大的提升"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                Global.GetGoodsNameByID(goodsData.GoodsID),
                Global.GetEnchanceText((GoodsQuality)goodsData.Quality));

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, goodsData.Quality >= (int)GoodsQuality.Purple ? RoleActionsMsgTypes.Bulletin : RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 锻造成功(9级以上提示)
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastForgeOk(GameClient client, GoodsData goodsData)
        {
            if (goodsData.Forge_level < 8)
            {
                return;
            }

            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】成功的将『{2}』强化至『+{3}』，实力得到了大的提升"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                Global.GetGoodsNameByID(goodsData.GoodsID),
                goodsData.Forge_level);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, goodsData.Forge_level >= 6 ? RoleActionsMsgTypes.Bulletin : RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 精炼合成成功(以上提示)
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastJingLianOk(GameClient client, int goodsID)
        {
            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】精炼成功『{2}』，实力得到了大的提升"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                Global.GetGoodsNameByID(goodsID));

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 锻造成功(6级以上提示)[装备增幅]
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastSubForgeOk(GameClient client, GoodsData goodsData)
        {
            int nowAddProIndex = goodsData.AddPropIndex;

            if (nowAddProIndex < 6)
            {
                return;
            }

            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】成功的将『{2}』装备精锻至『+{3}』，实力得到了大的提升"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                Global.GetGoodsNameByID(goodsData.GoodsID),
                nowAddProIndex);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, nowAddProIndex >= 6 ? RoleActionsMsgTypes.Bulletin : RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }


        /// <summary>
        /// 装备天生洗练成功(60以上提示)[装备天生洗练]===>不再提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastEquipBornUpdateComleted(GameClient client, GoodsData goodsData, int oldEquipBornIndex)
        {
            /*
            string oldBornName = Global.GetBornIndexName(oldEquipBornIndex);

            //新旧名称不等，即天生级别上升之后 提示需要进一步完善
            if (oldBornName.CompareTo("ddd") != 0)
            {
                string broadCastMsg = StringUtil.substitute(Global.GetLang("福星高照,{0}【{1}】竟将『{2}』的天生属性洗炼到了『{3}』品质，真令人羡慕！"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    Global.GetGoodsNameByID(goodsData.GoodsID),
                    "");

                //播放用户行为消息
                Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
            }
            */
        }

        /// <summary>
        /// 进阶成功(紫色 + 6级以上提示)
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastEquipUpgradeOk(GameClient client, int oldGoodsID, int newGoodsID, int quality, int forge_Level)
        {
            //神装再现,恭喜[玩家名字]通过神装炼化获得了[装备名字]
            string broadCastMsg = StringUtil.substitute(Global.GetLang("神装再现,恭喜【{0}】通过神装炼化获得了『{1}』"),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                Global.GetGoodsNameByID(newGoodsID));

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
            /*
            if (quality < (int)GoodsQuality.Purple)
            {
                return;
            }

            if (forge_Level < 6)
            {
                return;
            }

            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】将({2}＋{3})的『{4}』进阶到了({5}＋{6})的『{7}』"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                Global.GetEnchanceText((GoodsQuality)quality),
                forge_Level,
                Global.GetGoodsNameByID(oldGoodsID),
                Global.GetEnchanceText((GoodsQuality)quality),
                forge_Level,
                Global.GetGoodsNameByID(newGoodsID));

            RoleActionsMsgTypes msgType = (quality >= (int)GoodsQuality.Purple || forge_Level >= 6) ? RoleActionsMsgTypes.Bulletin : RoleActionsMsgTypes.HintMsg;

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, msgType, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
            */
        }

        /// <summary>
        /// 传承成功
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastChuanChengOk(GameClient client, GoodsData leftGoodsData, GoodsData rightGoodsData)
        {
            //装备属性提示字符串
            string equipProTipString = "";

            //品质
            if (rightGoodsData.Quality >= (int)GoodsQuality.Purple)
            {
                equipProTipString += Global.GetEnchanceText((GoodsQuality)rightGoodsData.Quality);
            }

            //强化
            if (rightGoodsData.Forge_level >= 6)
            {
                if (equipProTipString.Length > 0)
                {
                    equipProTipString += " ";
                }

                equipProTipString += string.Format(Global.GetLang("强化+{0}"), rightGoodsData.Forge_level);
            }

            /*
            //精锻
            if (rightGoodsData.AddPropIndex >= 6)
            {
                if (equipProTipString.Length > 0)
                {
                    equipProTipString += " ";
                }

                equipProTipString += string.Format(Global.GetLang("精锻+{0}"), rightGoodsData.AddPropIndex);
            }

            //天生
            if (rightGoodsData.BornIndex >= 60)
            {
                if (equipProTipString.Length > 0)
                {
                    equipProTipString += " ";
                }

                equipProTipString += string.Format(Global.GetLang("{0}·天生"), Global.GetBornIndexName(rightGoodsData.BornIndex));
            }
            */

            if (string.IsNullOrEmpty(equipProTipString))
            {
                return;
            }

            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】通过装备传承得到了({2})的『{3}』"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                equipProTipString,
                Global.GetGoodsNameByID(rightGoodsData.GoodsID));

            RoleActionsMsgTypes msgType = (rightGoodsData.Quality >= (int)GoodsQuality.Purple || rightGoodsData.Forge_level >= 6) ? RoleActionsMsgTypes.Bulletin : RoleActionsMsgTypes.HintMsg;

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, msgType, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 追加传承成功
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastAppendChuanChengOk(GameClient client, GoodsData leftGoodsData, GoodsData rightGoodsData)
        {
            //装备属性提示字符串
            string equipProTipString = "";

            // 公告跟品质没有关系 ChenXiaojun
            ////品质
            //if (rightGoodsData.Quality >= (int)GoodsQuality.Purple)
            //{
            //    equipProTipString += Global.GetEnchanceText((GoodsQuality)rightGoodsData.Quality);
            //}

            // 追加次数 ChenXiaojun
            if (rightGoodsData.AppendPropLev > 10 && rightGoodsData.AppendPropLev % 10 == 0)
            {
                if (equipProTipString.Length > 0)
                {
                    equipProTipString += " ";
                }

                equipProTipString += string.Format(Global.GetLang("追加+{0}"), rightGoodsData.AppendPropLev);
            }

            if (string.IsNullOrEmpty(equipProTipString))
            {
                return;
            }

            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜【{0}】通过追加装备传承得到了({1})的『{2}』"),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                equipProTipString,
                Global.GetGoodsNameByID(rightGoodsData.GoodsID));

            // 跟品质没关系，统一滚动 ChenXiaojun
            RoleActionsMsgTypes msgType = RoleActionsMsgTypes.HintMsg;// (rightGoodsData.Quality >= (int)GoodsQuality.Purple || rightGoodsData.Forge_level >= 6) ? RoleActionsMsgTypes.Bulletin : RoleActionsMsgTypes.HintMsg;

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, msgType, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 坐骑进阶成功
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastHorseUpgradeOk(GameClient client, int oldHorseID, int newHorseID)
        {
            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】成功的将坐骑从『{2}』进阶到了『{3}』，坐骑属性大幅提升"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                Global.GetHorseNameByID(oldHorseID),
                Global.GetHorseNameByID(newHorseID));

            RoleActionsMsgTypes msgType = (newHorseID >= 5) ? RoleActionsMsgTypes.Bulletin : RoleActionsMsgTypes.HintMsg;

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, msgType, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 坐骑强化完毕
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastHorseEnchanceOk(GameClient client, int horseID)
        {
            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】将坐骑『{2}』的属性完全强化成功，令人羡慕"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                Global.GetHorseNameByID(horseID));

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 宝石合成
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastMergeJewelOk(GameClient client, int goodsID)
        {
            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】成功合成了『{2}』，令人羡慕"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                Global.GetGoodsNameByID(goodsID));

            RoleActionsMsgTypes msgType = (Global.GetJewelLevel(goodsID) >= 6) ? RoleActionsMsgTypes.Bulletin : RoleActionsMsgTypes.HintMsg;

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 副本通关
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        /*public static void BroadcastFuBenOk(GameClient client, int secs, int fuBenID)
        {
            //获取副本的数据
            SystemXmlItem systemFuBenItem = null;
            if (!GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(fuBenID, out systemFuBenItem))
            {
                return;
            }

            if (2 == systemFuBenItem.GetIntValue("Display"))
            {
                return;
            }

            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】花费[{2}分钟{3}秒]成功通关了『{4}』，令人敬佩"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                secs / 60,
                secs % 60,
                Global.GetFuBenName(fuBenID));

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }*/

        /// <summary>
        /// 副本通关获取经验通知
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastFuBenExperience(GameClient client, int fuBenID, int experience)
        {
            //至少50万
            if (experience < 500000)
            {
                return;
            }

            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】成功通关『{2}』后领取了{3}经验"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                Global.GetFuBenName(fuBenID),
                experience);

            //播放用户行为消息（通天塔要横屏滚）
            Global.BroadcastRoleActionMsg(client, (fuBenID < 20) ? RoleActionsMsgTypes.Bulletin : RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 连斩提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastLianZhanNum(GameClient client, int oldLianZhanNum, int newLianZhanNum)
        {
            if (oldLianZhanNum / 100 == newLianZhanNum / 100 || newLianZhanNum <= oldLianZhanNum)
            {
                return;
            }

            //普通地图才提示
            if (MapTypes.Normal != Global.GetMapType(client.ClientData.MapCode))
            {
                return;
            }

            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】在『{2}』的连斩进度达到了『{3}』，击杀BOSS和精英可造成『{4}』倍伤害"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                Global.GetMapName(client.ClientData.MapCode),
                Global.GetLianZhanBufferName((newLianZhanNum / 100) - 1),
                Global.GetLianZhanBufferVal(newLianZhanNum));

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);

            //写入角色的连斩日志
            Global.AddLianZhanEvent(client, newLianZhanNum);
        }

        /// <summary>
        /// 离开牢房的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastLeaveLaoFangHint(GameClient client, int toMapCode)
        {
            if (toMapCode != Global.GetLaoFangMapCode())
            {
                return;
            }

            if (client.ClientData.PKPoint <= 0) //被释放出狱的
            {
                return;
            }

            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】在牢房中衷心悔过，消减PK点到『4800』后成功出狱"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName));

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 离开牢房的提示2
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastLeaveLaoFangHint2(GameClient client, int toMapCode)
        {
            if (toMapCode != Global.GetLaoFangMapCode())
            {
                return;
            }

            //if (client.ClientData.PKPoint <= 0) //被释放出狱的
            //{
            //    return;
            //}

            string broadCastMsg = StringUtil.substitute(Global.GetLang("{0}【{1}】玩家写下保证书，衷心悔过，被放出狱"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName));

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 进入牢房的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastEnterLaoFangHint(GameClient client, int toMapCode)
        {
            if (toMapCode != Global.GetLaoFangMapCode())
            {
                return;
            }

            if (client.ClientData.PKPoint < Global.MinEnterJailPKPoints) //被关入牢房的
            {
                return;
            }

            int pkPoint = client.ClientData.PKPoint - Global.MinLeaveJailPKPoints;
            int jailMinutes = (((pkPoint - 1) / Global.SubPKPointsPer10Seconds + 1) * 10) / 60;

            string broadCastMsg = StringUtil.substitute(Global.GetLang("{0}【{1}】因杀人过多，被关入了牢房，预计『{2}分钟』后出狱"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                jailMinutes);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 镖车被劫杀的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastKillBiaoCheHint(GameClient client, BiaoCheItem biaoCheItem)
        {
            string broadCastMsg = StringUtil.substitute(Global.GetLang("{0}【{1}】将【{2}】的『{3}』劫杀，劫镖成功，获得了大量的银两和经验奖励"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                biaoCheItem.OwnerRoleName,
                Global.GetYaBiaoName(biaoCheItem.YaBiaoID));


            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 镖车运镖成功的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastBiaoCheOkHint(GameClient client, BiaoCheItem biaoCheItem)
        {
            if (null == biaoCheItem) //外部会传入null对象
            {
                return;
            }

            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】长途跋涉完成运镖，获得丰厚的银两和经验奖励"),
                Global.GetServerLineName2(),
                biaoCheItem.OwnerRoleName);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 得到装备的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastGetGoodsHint(GameClient client, GoodsData goodsData, string killedMonsterName, int killedMonsterMap, bool bNeedSend = true)
        {
            if (string.IsNullOrEmpty(killedMonsterName)) return; //非怪物掉落

            killedMonsterName = killedMonsterName.Replace("【BOSS】", "『BOSS』");

            //判断物品是否播报或者记录
            SystemXmlItem systemGoods = Global.CanBroadcastOrEventGoods(goodsData);

            //写入角色物品的掉落物品日志(只有全区播报的物品才写)
            Global.AddFallGoodsEvent(client, goodsData, Global.GetMapName(killedMonsterMap), killedMonsterName, (null != systemGoods));

            if (null == systemGoods) return;

            string broadCastMsg = "";
            int categoriy = systemGoods.GetIntValue("Categoriy");
            string goodsName = systemGoods.GetStringValue("Title");
            int toLevel = systemGoods.GetIntValue("ToLevel");

            //颜色 品质不再显示
            /*if (categoriy >= (int)ItemCategories.Weapon && categoriy < (int)ItemCategories.EquipMax)
            {
                if (goodsData.Forge_level >= 5)
                {
                    broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】在『{2}』地图中击杀『{3}』获得了『{4}级』『{5}』『+{6}』"),
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        Global.GetMapName(killedMonsterMap),
                        killedMonsterName,
                        toLevel,
                        goodsName,
                        goodsData.Forge_level);
                }
                else
                {
                    broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】在『{2}』地图中击杀『{3}』获得了『{4}级』『{5}』"),
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        Global.GetMapName(killedMonsterMap),
                        killedMonsterName,
                        toLevel,
                        goodsName);
                }
                /*
                broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】在『{2}』地图中击杀『{3}』获得了『{4}级』『{5}』『{6}』『+{7}』"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    Global.GetMapName(client.ClientData.MapCode),
                    killedMonsterName,
                    toLevel,
                    goodsName,
                    Global.GetEnchanceText((GoodsQuality)goodsData.Quality),
                    goodsData.Forge_level);
                
            }
            else*/
            {
                broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】在『{2}』地图中击杀『{3}』获得了『{4}』"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    Global.GetMapName(killedMonsterMap),
                    killedMonsterName,
                    goodsName);
            }

            //播放用户行为消息
            if (bNeedSend)
                Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.SysHintAndChatBox);
        }

        /// <summary>
        /// 五行奇阵通关获取经验通知
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastWuXingExperience(GameClient client, int experience)
        {
            //至少50万
            if (experience < 500000)
            {
                return;
            }

            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】成功通关『五行奇阵』后领取了{2}经验"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                experience);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 英雄逐擂过关通知
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastHeroMapOk(GameClient client, int heroIndex, bool isNewHeroIndex)
        {
            SystemXmlItem systemHeroConfigItem = null;
            if (!GameManager.systemHeroConfigMgr.SystemXmlItemDict.TryGetValue(heroIndex, out systemHeroConfigItem))
            {
                return;
            }

            int bossID = systemHeroConfigItem.GetIntValue("BOSSID");

            string broadCastMsg = "";
            string leiZhuName = Global.GetMonsterNameByID(bossID);
            if (isNewHeroIndex)
            {
                string awardName = systemHeroConfigItem.GetStringValue("AwardName");
                broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】完胜『英雄逐擂』副本第『{2}』擂擂主『{3}』, 获得了『{4}』至上荣誉"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    heroIndex,
                    leiZhuName,
                    awardName
                    );
            }
            else
            {
                broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】完胜『英雄逐擂』副本第『{2}』擂擂主『{3}』, 令人佩服"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    heroIndex,
                    leiZhuName
                    );
            }

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 夺取领地的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastLingDiOkHint(string bhName, int mapCode)
        {
            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜『{0}』战盟获得了帮旗战的胜利，战盟成员享有练级经验加成特权，帮旗等级越高，加成越高！"),
                bhName);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(null, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 王城争霸赛的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastHuangChengOkHintEx(String bhName, bool isBattleOver = false)
        {
            string broadCastMsg = "";

            if (!isBattleOver)
            {
                long nSecond = 0;
                if (LuoLanChengZhanManager.getInstance().IsInWangChengFightingTime(TimeUtil.NowDateTime()))
                {
                    nSecond = (LuoLanChengZhanManager.getInstance().GetBattleEndMs() - TimeUtil.NOW()) / 1000;
                }

                broadCastMsg = StringUtil.substitute(Global.GetLang("『{0}』战盟暂时占领了罗兰龙塔，距离罗兰城战结束还有{1}分{2}秒！"), bhName, nSecond / 60, nSecond % 60);
            }
            else
            {
                broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜战盟【{0}】成功占领罗兰王城！可在勇者大陆举办庆功宴！"), bhName); //
            }

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(null, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 夺取皇城的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastHuangChengOkHint(GameClient client)
        {
            /*
            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}『{1}』帮会成功在皇城争夺战中取得胜利，首领【{2}】成为了万人敬仰的本服皇帝"),
                Global.GetServerLineName2(),
                client.ClientData.BHName,
                Global.FormatRoleName(client, client.ClientData.RoleName));

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
            */
        }

        /// <summary>
        /// 皇城流产的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastHuangChengFailedHint()
        {
            string broadCastMsg = StringUtil.substitute(Global.GetLang("{0}很遗憾，没有任何战盟在皇城争夺战中取得胜利，请所有战盟一起努力，争取下次皇城战的胜利"),
                Global.GetServerLineName2());

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(null, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 王城争霸流产的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastWangChengFailedHint()
        {
            string broadCastMsg = StringUtil.substitute(Global.GetLang("很遗憾，本次罗兰城战没有战盟能够占领，请各位勇士再接再厉！"));

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(null, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 皇帝册封皇妃的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastAddHuangFeiHint(string huanDiRoleName, string otherRoleName)
        {
            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】成功被本服皇帝【{2}】册封为皇妃，令万千人羡慕。"),
                Global.GetServerLineName2(),
                otherRoleName,
                huanDiRoleName);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(null, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 皇帝废黜皇妃的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastRemoveHuangFeiHint(string huanDiRoleName, string otherRoleName)
        {
            string broadCastMsg = StringUtil.substitute(Global.GetLang("本服皇帝{0}【{1}】龙颜大怒，皇妃【{2}】惨被废黜，令人心痛"),
                Global.GetServerLineName2(),
                huanDiRoleName,
                otherRoleName);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(null, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 被皇帝关入牢房的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastSendToLaoFangHint(GameClient client, string otherRoleName)
        {
            string broadCastMsg = StringUtil.substitute(Global.GetLang("本服皇帝{0}【{1}】龙颜大怒，【{2}】惨被打入牢房，预计『5分钟』后出狱"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                otherRoleName);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 被皇帝从牢房放出的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastTakeOutLaoFangHint(string huangDiRoleName, string otherRoleName)
        {
            string broadCastMsg = StringUtil.substitute(Global.GetLang("本服皇帝{0}【{1}】龙颜大悦，特赦【{2}】，将其放出牢房"),
                Global.GetServerLineName2(),
                huangDiRoleName,
                otherRoleName);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(null, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 被皇帝禁言的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastBanChatHint(string huangDiRoleName, string otherRoleName)
        {
            string broadCastMsg = StringUtil.substitute(Global.GetLang("本服皇帝{0}【{1}】龙颜大怒，【{2}】惨被禁言，1小时内不得在世界频道喊话"),
                Global.GetServerLineName2(),
                huangDiRoleName,
                otherRoleName);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(null, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 皇帝上线的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastHuangDiLoginHint(GameClient client)
        {
            //if (client.ClientData.RoleID != HuangChengManager.GetHuangDiRoleID())
            if (client.ClientData.Faction != WangChengManager.GetWangZuBHid())
            {
                return;
            }

            //验证申请者是否本帮会的人，且帮主才能播报
            if (client.ClientData.BHZhiWu != 1)
            {
                return;
            }

            string broadCastMsg = StringUtil.substitute(Global.GetLang("万人敬仰的罗兰城主·【{0}】上线了,全民参拜！"),
                Global.FormatRoleName(client, client.ClientData.RoleName));

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 怒斩pk王上线的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastPkKingLoginHint(GameClient client)
        {
            if (!Global.IsPkKing(client))
            {
                return;
            }

            string broadCastMsg = StringUtil.substitute(Global.GetLang("杀气弥漫, PK王【{0}】上线了，令人发颤。"),
                Global.FormatRoleName(client, client.ClientData.RoleName));

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.HintAndBox);
        }

        /// <summary>
        /// 帮旗升级的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastJunQiUpLevelHint(GameClient client, int junQiLevel)
        {
            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}『{1}』战盟成功将其战盟的帮旗升到『{2}级』，战盟盟旗属性加成得到了大的提升"),
                Global.GetServerLineName2(),
                client.ClientData.BHName,
                junQiLevel);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 战盟建筑升级的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastZhanMengBuildUpLevelHint(GameClient client, int buildType, int level)
        {
            string broadCastMsg = "";
            string buildName = "";

            if ((int)ZhanMengBuilds.ZhanQi == buildType)
            {
                buildName = "战旗";
            }
            else if ((int)ZhanMengBuilds.JiTan == buildType)
            {
                buildName = "祭坛";
            }
            else if ((int)ZhanMengBuilds.JunXie == buildType)
            {
                buildName = "军械";
            }
            else if ((int)ZhanMengBuilds.GuangHuan == buildType)
            {
                buildName = "光环";
            }

            broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}『{1}』战盟成功将其战盟的{2}升到『{3}级』，战盟{2}属性加成得到了大的提升"),
                Global.GetServerLineName2(),
                client.ClientData.BHName,
                buildName,
                level);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 扬州城铜钱商店税率调整提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastYangZhouTaxHint(GameClient client, int lingDiID, int tax)
        {
            if (lingDiID != (int)LingDiIDs.YanZhou)
            {
                return;
            }

            string broadCastMsg = StringUtil.substitute(Global.GetLang("本服皇帝{0}【{1}】设置扬州城金币商店的税率为『{2}%』，请大家购买时留意"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                tax);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.SysHintAndChatBox);
        }

        /// <summary>
        /// 杨公宝库成功的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastYangGongBKGoodsHint(GameClient client, GoodsData goodsData)
        {
            //判断物品是否播报或者记录
            SystemXmlItem systemGoods = Global.CanBroadcastOrEventGoods(goodsData);
            if (null == systemGoods) return;

            string broadCastMsg = "";
            int categoriy = systemGoods.GetIntValue("Categoriy");
            string goodsName = systemGoods.GetStringValue("Title");
            int toLevel = systemGoods.GetIntValue("ToLevel");
            RoleActionsMsgTypes mstType = RoleActionsMsgTypes.HintMsg;
            /*if (categoriy >= (int)ItemCategories.Weapon && categoriy < (int)ItemCategories.EquipMax)
            {
                broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】使用『昆仑镜』打开杨公宝库后，获得了『{2}级』『{3}』『{4}』{5}"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    toLevel,
                    goodsName,
                    Global.GetEnchanceText((GoodsQuality)goodsData.Quality),
                    goodsData.BornIndex >= 100 ? Global.GetLang("『天生属性·无双』") : "");

                //mstType = RoleActionsMsgTypes.Bulletin;
            }
            else
            {
                broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】使用『昆仑镜』打开杨公宝库后，获得了『{2}』"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    goodsName);
            }
            */
            //播放用户行为消息
            //Global.BroadcastRoleActionMsg(client, mstType, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.SysHintAndChatBox);
        }

        /// <summary>
        /// 开启乾坤袋成功的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastQianKunDaiGoodsHint(GameClient client, int goodsID, int nActType)
        {
            //判断物品是否播报或者记录
            SystemXmlItem systemGoods = Global.CanBroadcastOrEventGoods(goodsID);
            if (null == systemGoods) return;

            string sMsg = "";
            if (nActType == 1)
                sMsg = "通过祈福活动，";
            else if (nActType == 2)
                sMsg = "参与『幸运抽奖』，";
            else if (nActType == 3)
                sMsg = "参与『月度抽奖』，";

            string broadCastMsg = "";
            int categoriy = systemGoods.GetIntValue("Categoriy");
            string goodsName = systemGoods.GetStringValue("Title");
            int toLevel = systemGoods.GetIntValue("ToLevel");
            RoleActionsMsgTypes mstType = RoleActionsMsgTypes.HintMsg;
            if (categoriy >= (int)ItemCategories.TouKui && categoriy < (int)ItemCategories.EquipMax)
            {
                broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】{2} 获得了『{3}级』『{4}』"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    sMsg,
                    toLevel,
                    goodsName);

                mstType = RoleActionsMsgTypes.Bulletin;
            }
            else
            {
                broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】{2} 获得了『{3}』"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    sMsg,
                    goodsName);
            }

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, mstType, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.SysHintAndChatBox);
        }

        /// <summary>
        /// 挖宝成功的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastWaBaoGoodsHint(GameClient client, GoodsData goodsData)
        {
            //写入角色物品的挖宝的物品日志(只有全区播报的物品才写)
            Global.AddWaBaoGoodsEvent(client, goodsData);

            //判断物品是否播报或者记录
            SystemXmlItem systemGoods = Global.CanBroadcastOrEventGoods(goodsData);
            if (null == systemGoods) return;

            string broadCastMsg = "";
            int categoriy = systemGoods.GetIntValue("Categoriy");
            string goodsName = systemGoods.GetStringValue("Title");
            int toLevel = systemGoods.GetIntValue("ToLevel");
            if (categoriy >= (int)ItemCategories.TouKui && categoriy < (int)ItemCategories.EquipMax)
            {
                broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】使用【无量秘藏】挖宝，获得了『{2}级』『{3}』『{4}』『+{5}』"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    toLevel,
                    goodsName,
                    Global.GetEnchanceText((GoodsQuality)goodsData.Quality),
                    goodsData.Forge_level);
            }
            else
            {
                broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】使用【无量秘藏】挖宝，获得了『{2}』"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    goodsName);
            }

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 钥匙开箱子类挖宝成功的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastYaoShiWaBaoGoodsHint(GameClient client, GoodsData goodsData, int idYaoShi, int idXiangZi)
        {
            //判断物品是否播报或者记录
            SystemXmlItem systemGoods = Global.CanBroadcastOrEventGoods(goodsData);
            if (null == systemGoods) return;

            SystemXmlItem systemGoodsYaoShi = null;
            SystemXmlItem systemGoodsXiangZhi = null;

            //获取Xml项
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(idYaoShi, out systemGoodsYaoShi)) return;
            if (null == systemGoodsYaoShi) return;

            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(idXiangZi, out systemGoodsXiangZhi)) return;
            if (null == systemGoodsXiangZhi) return;

            string broadCastMsg = "";
            int categoriy = systemGoods.GetIntValue("Categoriy");
            string goodsName = systemGoods.GetStringValue("Title");
            int toLevel = systemGoods.GetIntValue("ToLevel");
            if (categoriy >= (int)ItemCategories.TouKui && categoriy < (int)ItemCategories.EquipMax)
            {
                broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】人品大爆发，使用『{2}』开启『{3}』，竟然获得了『{4}级』『{5}』『+{6}』"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    systemGoodsYaoShi.GetStringValue("Title"),
                    systemGoodsXiangZhi.GetStringValue("Title"),
                    toLevel,
                    goodsName,
                    goodsData.Forge_level);
            }
            else
            {
                broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】人品大爆发，使用『{2}』开启『{3}』，竟然获得了『{4}』"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    systemGoodsYaoShi.GetStringValue("Title"),
                    systemGoodsXiangZhi.GetStringValue("Title"),
                    goodsName);
            }

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 开宝箱类挖宝成功的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastFallBaoXiangGoodsHint(GameClient client, GoodsData goodsData, int actionGoodsID)
        {
            //判断物品是否播报或者记录
            SystemXmlItem systemGoods = Global.CanBroadcastOrEventGoods(goodsData);
            if (null == systemGoods) return;

            string broadCastMsg = "";
            int categoriy = systemGoods.GetIntValue("Categoriy");
            string goodsName = systemGoods.GetStringValue("Title");
            int toLevel = systemGoods.GetIntValue("ToLevel");
            if (categoriy >= (int)ItemCategories.TouKui && categoriy < (int)ItemCategories.EquipMax)
            {
                broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】人品大爆发，开启『{2}』，竟然获得了『{3}级』『{4}』『+{5}』"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    Global.GetGoodsNameByID(actionGoodsID),
                    toLevel,
                    goodsName,
                    goodsData.Forge_level);
            }
            else
            {
                broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】人品大爆发，开启『{2}』，竟然获得了『{3}』"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    Global.GetGoodsNameByID(actionGoodsID),
                    goodsName);
            }

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 使用VIP月卡的提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastVIPMonthHint(GameClient client, int vipGoodsID)
        {
            String goodsName = Global.GetGoodsNameByID(vipGoodsID);

            string broadCastMsg = "";
            broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】使用{2}，成为尊贵的『{3}』用户，已可领取『{4}』元宝返还和直接学习高级技能等多项特权【成为VIP】"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName), goodsName,
                Global.GetVipTypeNameString(client),
                Global.GetVipTypeGiveYuanBao(client));

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 首冲大礼领取提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastShouChongDaLiHint(GameClient client)
        {

            string broadCastMsg = "";
            broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】完成了首次充值，领取了丰厚奖品"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName)
                );

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 每日充值大礼领取提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastDayChongDaLiHint(GameClient client)
        {
            string broadCastMsg = "";
            broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】完成了每日充值，领取了丰厚的奖品！"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName));

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 冲级神装领取提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastChongJiLingQuShengZhuangHint(GameClient client, int nBtnIndex, int nItemID)
        {
            int nLev = 0;
            if (nBtnIndex == 1)
                nLev = 50;
            else if (nBtnIndex == 2)
                nLev = 55;
            else if (nBtnIndex == 3)
                nLev = 60;
            else if (nBtnIndex == 4)
                nLev = 65;
            else if (nBtnIndex == 5)
                nLev = 75;
            string broadCastMsg = "";
            String goodsName = Global.GetGoodsNameByID(nItemID);
            broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】成功将等级提升至{2}，领取了极品装备{3}！"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName), nLev, goodsName);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 神装激情回馈领取提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastShengZhuangJiQingHuiKuiHint(GameClient client)
        {
            string broadCastMsg = "";
            broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】成功领取了神装激情回馈的丰厚奖品，让人羡慕不已！"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName));

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }
        /// <summary>
        /// 微端大礼领取提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastTinyClientDaLiHint(GameClient client)
        {
            string broadCastMsg = "";
            broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】完成了微端下载任务，领取了丰厚的奖品！"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName));

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox);
        }

        /// <summary>
        /// 积分大礼领取提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastJiFenDaLiHint(GameClient client)
        {
            string broadCastMsg = "";
            broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】领取了充值积分奖励大礼包，里面包含价值不菲的商城道具"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName));

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 角色生肖运程竞猜赢取大量金币提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastShengXiaoGuessWinHint(GameClient client, int mutiple, string shengXiaoResult, int gainGold)
        {
            string broadCastMsg = "";
            broadCastMsg = StringUtil.substitute(Global.GetLang("天降鸿福，恭喜{0}【{1}】押中{2}倍生肖属相·{3}，获得了{4}商城金币奖励！"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName), mutiple, shengXiaoResult, gainGold);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 帮会创建成功提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastBangHuiCreateOk(GameClient client, String bangHuiName)
        {
            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】成功创建了战盟{2}"), Global.GetServerLineName2(), Global.FormatRoleName(client, client.ClientData.RoleName), bangHuiName);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox);
        }

        /// <summary>
        /// 角斗赛 冠军 公告
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastArenaChampionMsg(bool hasChampion = true, GameClient client = null)
        {
            string broadCastMsg = "";

            if (hasChampion && client != null)
            {
                broadCastMsg = StringUtil.substitute(Global.GetLang("本次PK之王活动结束，恭喜【{0}】夺取了PK之王称号"),
                    //Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName));
            }
            else
            {
                broadCastMsg = StringUtil.substitute(Global.GetLang("本次PK之王活动结束，没有产生PK之王"));
            }

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.HintAndBox);
        }

        /// <summary>
        /// 王城争夺战申请成功提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastCityWarRequestOk(GameClient client, String bangHuiName, int afterDays)
        {
            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】成功申请了战盟{2}的王城争夺战，{3}天后举行"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                bangHuiName, afterDays);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 玩家参与血战地府
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastClientEnterArenaBattle(GameClient client)
        {
            string broadCastMsg = StringUtil.substitute(Global.GetLang("【{0}】进入了PK之王活动地图"),
                Global.FormatRoleName(client, client.ClientData.RoleName));

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox);
        }

        /// <summary>
        /// 兑换神装和护身符，猎杀徽章播报
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastNpcSaleGoods(GameClient client, int goodsID)
        {
            string broadCastMsg = "";
            int categoriy = Global.GetGoodsCatetoriy(goodsID);
            /*if ((int)ItemCategories.ShenBing == categoriy || (int)ItemCategories.ShenJia == categoriy)
            {
                broadCastMsg = StringUtil.substitute(Global.GetLang("神装再现，恭喜{0}【{1}】在『龙城』『NPC·神兵神甲』兑换了『{2}』，获得了超强的属性加成"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    Global.GetGoodsNameByID(goodsID));
            }
            else if ((int)ItemCategories.Decorate == categoriy)
            {
                broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】在『龙城』『NPC·天元大师』兑换了『{2}』，属性得到了大幅提升"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    Global.GetGoodsNameByID(goodsID));
            }
            else if ((int)ItemCategories.ChestProtection == categoriy)
            {
                if ((goodsID - 1316000) > 3)
                {
                    broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】在『龙城』『NPC·万人斩』兑换了『{2}』，属性得到了大幅提升"),
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        Global.GetGoodsNameByID(goodsID));
                }
            }
            else if ((int)ItemCategories.Pet == categoriy)
            {
                if ((goodsID - 180500) > 3)
                {
                    broadCastMsg = StringUtil.substitute(Global.GetLang("惊天地，泣鬼神，{0}【{1}】在『龙城』『NPC·魂器商人』兑换了『{2}』，实力得到了大的提升"),
                        Global.GetServerLineName2(),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        Global.GetGoodsNameByID(goodsID));
                }
            }
            if (string.IsNullOrEmpty(broadCastMsg))
            {
                return;
            }*/

            //播放用户行为消息（通天塔要横屏滚）
            //Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        /// <summary>
        /// 传奇经脉播报
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastClientChuanQiJingMai(GameClient client, int jingMaiLevel)
        {
            if (jingMaiLevel < 3)
            {
                return;
            }

            int goodsID = AdvanceBufferPropsMgr.GetGoodsID(BufferItemTypes.JingMai, Math.Max(0, jingMaiLevel - 1));
            if (goodsID < 0)
            {
                return;
            }

            string goodsName = Global.GetGoodsNameByID(goodsID);

            string broadCastMsg = StringUtil.substitute(Global.GetLang("经脉大成，恭喜{0}【{1}】成功突破了『{2}』境界，属性得到了大的提升"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    goodsName);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox);
        }

        /// <summary>
        /// 传奇武学播报
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastClientChuanQiWuXue(GameClient client, int nNewBufferGoodsIndexID)
        {
            if (nNewBufferGoodsIndexID < 1)
            {
                return;
            }

            int goodsID = AdvanceBufferPropsMgr.GetGoodsID(BufferItemTypes.WuXue, nNewBufferGoodsIndexID);
            if (goodsID < 0)
            {
                return;
            }

            string goodsName = Global.GetGoodsNameByID(goodsID);

            string broadCastMsg = StringUtil.substitute(Global.GetLang("武学大成，恭喜{0}【{1}】成功领悟了『{2}』境界，属性得到了大的提升"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    goodsName);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox);
        }

        /// <summary>
        /// 传奇成就播报
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastClientChuanQiChengJiu(GameClient client, int nNewBufferGoodsIndexID)
        {
            if (nNewBufferGoodsIndexID < 1)
            {
                return;
            }

            int goodsID = AdvanceBufferPropsMgr.GetGoodsID(BufferItemTypes.ChengJiu, nNewBufferGoodsIndexID - 1);
            if (goodsID < 0)
            {
                return;
            }

            string goodsName = Global.GetGoodsNameByID(goodsID);

            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】成功激活了『{2}』成就称号，属性得到了大的提升"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    goodsName);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox);
        }

        /// <summary>
        /// 传奇战魂等级播报
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastClientChuanQiZhanHun(GameClient client, int level)
        {
            if (level < 4)
            {
                return;
            }

            int goodsID = AdvanceBufferPropsMgr.GetGoodsID(BufferItemTypes.ZhanHun, Math.Max(0, level - 1));
            if (goodsID < 0)
            {
                return;
            }

            string goodsName = Global.GetGoodsNameByID(goodsID);

            string broadCastMsg = StringUtil.substitute(Global.GetLang("惊天地，泣鬼神，恭喜{0}【{1}】成功将战魂提升到『{2}』，属性得到了大的提升"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    goodsName);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox);
        }

        /// <summary>
        /// 传奇荣誉等级播报
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastClientChuanQiRongYu(GameClient client, int level)
        {
            if (level < 30)
            {
                return;
            }

            int goodsID = AdvanceBufferPropsMgr.GetGoodsID(BufferItemTypes.RongYu, Math.Max(0, level - 1));
            if (goodsID < 0)
            {
                return;
            }

            string goodsName = Global.GetGoodsNameByID(goodsID);

            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】成功将荣耀提升到『{2}』，属性得到了大的提升"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    goodsName);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox);
        }

        /// <summary>
        /// MU军衔等级播报
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastClientMUShengWang(GameClient client, int level)
        {
            if (level < Global.ConstBroadcastMinJunXianLevel)
            {
                return;
            }

            int goodsID = AdvanceBufferPropsMgr.GetGoodsID(BufferItemTypes.MU_JINGJICHANG_JUNXIAN, Math.Max(0, level - 1));
            if (goodsID < 0)
            {
                return;
            }

            string goodsName = Global.GetGoodsNameByID(goodsID);

            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】成功将军衔提升到『{2}』，属性得到了大的提升"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    goodsName);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox);
        }

        /// <summary>
        /// 领取达到60级奖励的播报
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastClientTo60(GameClient client, int minDay, int maxDay, int yuanBao)
        {
            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】在{2}天内升到了60级，获得了系统赠送的『{3}』绑定元宝奖励，大家为他祝贺！"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    maxDay,
                    yuanBao);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox);
        }

        /// <summary>
        /// 随机获得开服在线奖励的公告
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastClientKaiFuOnlineRandomAward(int zoneID, string roleName, int yuanBao)
        {
            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】被系统抽中，获得了嘉年华在线元宝大奖，获得了『{2}』元宝奖励！"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName3(zoneID, roleName),
                    yuanBao);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(null, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlyChatBox);
        }

        /// <summary>
        /// 充值加送公告
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastJiaSongOk(GameClient client)
        {
            string weaponName = Global.GetLang("荒神");

            // 属性改造 加上一级属性公式 区分职业[8/15/2013 LiaoWei]
            int nOcc = Global.CalcOriginalOccupationID(client);

            if (1 == nOcc)
            {
                weaponName = Global.GetLang("江影沉浮");
            }
            else if (2 == nOcc)
            {
                weaponName = Global.GetLang("惊虹");
            }

            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】领取了充值加送豪礼，获得了高级武器『{2}』"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                weaponName);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.SysHintAndChatBox);
        }

        /// <summary>
        /// 钻皇达到
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastZuanHuangLevelOk(GameClient client, int oldLevel, int newLevel)
        {
            if (oldLevel == newLevel)
            {
                return;
            }

            if (newLevel < 3)
            {
                return;
            }

            string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】成功成为了钻皇『{2}级』用户，获得了钻皇护体状态，属性得到了大幅提升"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                newLevel);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.SysHintAndChatBox);
        }

        /// <summary>
        /// 打开盒子
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastOpenGiveBox(GameClient client, int goodsID)
        {
            string broadCastMsg = "";
            if (goodsID >= 1550 && goodsID <= 1552)
            {
                broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】打开了豪华装备宝盒，获得了丰厚的高级装备奖励"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName));
            }
            else if (1560 == goodsID)
            {
                broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】开启了金蛋大礼盒，获得了海量的金蛋奖励"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName));
            }
            else if (1570 == goodsID)
            {
                broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜{0}【{1}】开启了升级神速大礼盒，获得了丰厚的经验奖励"),
                    Global.GetServerLineName2(),
                    Global.FormatRoleName(client, client.ClientData.RoleName));
            }
            else
            {
                return;
            }

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.SysHintAndChatBox);
        }

        /// <summary>
        /// 转生成功提示
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastChangeLifeSuccess(GameClient client, int nCount)
        {
            string broadCastMsg = "";
            broadCastMsg = StringUtil.substitute(Global.GetLang("转生轮回,恭喜{0}【{1}】成功将转生等级提升至{2}转,令人羡慕不已!"),
                Global.GetServerLineName2(),
                Global.FormatRoleName(client, client.ClientData.RoleName),
                nCount);

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(client, RoleActionsMsgTypes.HintMsg, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
        }

        #endregion 用户行为消息函数列表

        #region 线路管理

        /// <summary>
        /// 线路名称
        /// </summary>
        private static string[] LineNames = 
        {
            Global.GetLang("零线"),
            Global.GetLang("一线"),
            Global.GetLang("二线"),
            Global.GetLang("三线"),
            Global.GetLang("四线"),
            Global.GetLang("五线"),
            Global.GetLang("六线"),
            Global.GetLang("七线"),
            Global.GetLang("八线"),
            Global.GetLang("九线"),
            Global.GetLang("十线"),
        };

        /// <summary>
        /// 获取本服的线路名称
        /// </summary>
        /// <returns></returns>
        public static string GetServerLineName1()
        {
            return Global.GetLang(Global.LineNames[GameManager.ServerLineID]);
        }

        /// <summary>
        /// 获取本服的线路名称
        /// </summary>
        /// <returns></returns>
        public static string GetServerLineName2()
        {
            //string lineName = string.Format("[{0}]", Global.GetLang(Global.LineNames[GameManager.ServerLineID]));
            string lineName = "";
            return lineName;
        }

        #endregion 线路管理

        #region 闯天关/福神庙

        /// <summary>
        /// 进入福神庙
        /// </summary>
        /// <param name="fuBenID"></param>
        public static void EnterCaiShenMiao(GameClient client, int fuBenID, int goodsBinding)
        {
            //获取副本的数据
            SystemXmlItem systemFuBenItem = null;
            if (!GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(fuBenID, out systemFuBenItem))
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener,
                    Global._TCPManager.TcpOutPacketPool, client,
                    StringUtil.substitute(Global.GetLang("进入灵兽峰时错误, 没有找到副本配置")),
                    GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                return;
            }

            int toMapCode = systemFuBenItem.GetIntValue("MapCode");

            //从DBServer获取副本顺序ID
            string[] dbFields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_GETFUBENSEQID, string.Format("{0}", client.ClientData.RoleID), client.ServerId);
            if (null == dbFields || dbFields.Length < 2)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener,
                    Global._TCPManager.TcpOutPacketPool, client,
                    StringUtil.substitute(Global.GetLang("进入灵兽峰时错误, 从DBServer获取副本序号失败")),
                    GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                return;
            }

            int fuBenSeqID = Global.SafeConvertToInt32(dbFields[1]);

            //增加副本今日的进入次数
            Global.UpdateFuBenData(client, fuBenID);

            //通知用户切换地图到副本的地图上
            GameMap gameMap = null;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener,
                    Global._TCPManager.TcpOutPacketPool, client,
                    StringUtil.substitute(Global.GetLang("进入灵兽峰时错误, 地图编号无效")),
                    GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                return;
            }

            //设置角色的副本顺序ID
            client.ClientData.FuBenSeqID = fuBenSeqID;

            //添加一个角色到副本顺序ID的映射
            FuBenManager.AddFuBenSeqID(client.ClientData.RoleID, client.ClientData.FuBenSeqID, goodsBinding, fuBenID);

            GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                client, toMapCode, -1, -1, -1);
        }

        #endregion 创天关/福神庙

        #region 解析时间段限制字符串

        /// <summary>
        /// 解析时间段限制
        /// </summary>
        /// <param name="str"></param>
        /// <returns></returns>
        public static DateTimeRange[] ParseDateTimeRangeStr(string str)
        {
            if (null == str)
            {
                return null;
            }

            str = str.Trim();
            if (string.IsNullOrEmpty(str))
            {
                return null;
            }

            string[] fields1 = str.Split('|');
            if (null == fields1 || fields1.Length <= 0)
            {
                return null;
            }

            DateTimeRange[] dateTimeRangeArray = new DateTimeRange[fields1.Length];
            for (int i = 0; i < fields1.Length; i++)
            {
                string timeRangeStr = fields1[i].Trim();
                if (string.IsNullOrEmpty(timeRangeStr))
                {
                    dateTimeRangeArray[i] = null;
                    continue;
                }

                string[] fields2 = timeRangeStr.Split('-');
                if (null == fields2 || fields2.Length != 2)
                {
                    dateTimeRangeArray[i] = null;
                    continue;
                }

                string timeFieldStr1 = fields2[0].Trim();
                if (string.IsNullOrEmpty(timeFieldStr1))
                {
                    dateTimeRangeArray[i] = null;
                    continue;
                }

                string[] fields3 = timeFieldStr1.Split(':');
                if (null == fields3 || fields3.Length != 2)
                {
                    dateTimeRangeArray[i] = null;
                    continue;
                }

                string timeFieldStr2 = fields2[1].Trim();
                if (string.IsNullOrEmpty(timeFieldStr2))
                {
                    dateTimeRangeArray[i] = null;
                    continue;
                }

                string[] fields4 = timeFieldStr2.Split(':');
                if (null == fields4 || fields4.Length != 2)
                {
                    dateTimeRangeArray[i] = null;
                    continue;
                }

                dateTimeRangeArray[i] = new DateTimeRange()
                {
                    FromHour = Global.SafeConvertToInt32(fields3[0]),
                    FromMinute = Global.SafeConvertToInt32(fields3[1]),
                    EndHour = Global.SafeConvertToInt32(fields4[0]),
                    EndMinute = Global.SafeConvertToInt32(fields4[1]),
                };
            }

            return dateTimeRangeArray;
        }

        /// <summary>
        /// 判断当前时间是否在事件段内
        /// </summary>
        /// <param name="dateTime"></param>
        /// <param name="dateTimeRangeArray"></param>
        /// <returns></returns>
        public static bool JugeDateTimeInTimeRange(DateTime dateTime, DateTimeRange[] dateTimeRangeArray, out int endMinute, bool equalEndTime = true)
        {
            endMinute = 0;

            if (null == dateTimeRangeArray)
            {
                return true;
            }

            int hour = dateTime.Hour;
            int minute = dateTime.Minute;
            for (int i = 0; i < dateTimeRangeArray.Length; i++)
            {
                if (null == dateTimeRangeArray[i])
                {
                    continue;
                }

                int time1 = dateTimeRangeArray[i].FromHour * 60 + dateTimeRangeArray[i].FromMinute;
                int time2 = dateTimeRangeArray[i].EndHour * 60 + dateTimeRangeArray[i].EndMinute;
                int time3 = hour * 60 + minute;

                if (!equalEndTime)
                {
                    time2 -= 1;
                }

                //判断是否在时间段内
                if (time3 >= time1 && time3 <= time2)
                {
                    //记录下结束时间
                    endMinute = time2;
                    return true;
                }
            }

            return false;
        }

        #endregion 解析时间段限制字符串

        #region 押镖管理

        /// <summary>
        /// 每天免费的押镖次数
        /// </summary>
        private static int MaxDayYaBiaoNum = 1;

        /// <summary>
        /// 接到镖后，到交付允许的最大时间
        /// </summary>
        public static int MaxYaBiaoTicks = (40 * 60 * 1000);

        /// <summary>
        /// 获取运镖的银两和经验
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public static void GetYaBiaoReward(int yaBiaoID, out int yinLiang, out int experience, out int yaJin)
        {
            yinLiang = 0;
            experience = 0;
            yaJin = 0;

            SystemXmlItem systemYaBiaoItem = null;
            if (!GameManager.systemYaBiaoMgr.SystemXmlItemDict.TryGetValue(yaBiaoID, out systemYaBiaoItem))
            {
                return;
            }

            yinLiang = systemYaBiaoItem.GetIntValue("RewardYL");
            experience = systemYaBiaoItem.GetIntValue("RewardExp");
            yaJin = systemYaBiaoItem.GetIntValue("YaJin");
        }

        /// <summary>
        /// 获取运镖的限制条件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public static void GetYaBiaoCondition(int yaBiaoID, out int minLevel, out int maxLevel, out int yaJin)
        {
            minLevel = 0;
            maxLevel = 0;
            yaJin = 0;

            SystemXmlItem systemYaBiaoItem = null;
            if (!GameManager.systemYaBiaoMgr.SystemXmlItemDict.TryGetValue(yaBiaoID, out systemYaBiaoItem))
            {
                return;
            }

            minLevel = systemYaBiaoItem.GetIntValue("MinLevel");
            minLevel = Global.GMax(minLevel, 0);
            maxLevel = systemYaBiaoItem.GetIntValue("MaxLevel");
            if (maxLevel < 0)
            {
                maxLevel = 65536;
            }
            yaJin = systemYaBiaoItem.GetIntValue("YaJin");
            yaJin = Global.GMax(yaJin, 0);
        }

        /// <summary>
        /// 是否能接日常押镖
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool CanTakeNormalYaBiao(GameClient client)
        {
            if (null == client.ClientData.MyYaBiaoData) return true;

            int dayID = TimeUtil.NowDateTime().DayOfYear;
            if (client.ClientData.MyYaBiaoData.YaBiaoDayID != dayID)
            {
                return true;
            }

            int maxDayYaBiaoNum = Global.MaxDayYaBiaoNum;

            //处理VIP月卡
            maxDayYaBiaoNum += (int)DBRoleBufferManager.ProcessMonthVIP(client);

            return (client.ClientData.MyYaBiaoData.YaBiaoNum < maxDayYaBiaoNum);
        }

        /// <summary>
        /// 获取运镖投保所需要的银票的数量
        /// </summary>
        /// <param name="yinLiang"></param>
        /// <returns></returns>
        public static int GetTouBaoYinPiaoNum(int yinLiang)
        {
            return yinLiang / 5;
        }

        /// <summary>
        /// 根据ID获取押镖的名称
        /// </summary>
        /// <param name="yaBiaoID"></param>
        /// <returns></returns>
        public static string GetYaBiaoName(int yaBiaoID)
        {
            if (1 == yaBiaoID)
            {
                return Global.GetLang("驮镖毛驴");
            }
            else if (2 == yaBiaoID)
            {
                return Global.GetLang("驮镖白马");
            }
            else if (3 == yaBiaoID)
            {
                return Global.GetLang("驮镖骆驼");
            }

            return "";
        }

        /// <summary>
        /// 镖车项到镖车数据的转换
        /// </summary>
        /// <param name="biaoCheItem"></param>
        /// <returns></returns>
        public static BiaoCheData BiaoCheItem2BiaoCheData(BiaoCheItem biaoCheItem)
        {
            BiaoCheData biaoCheData = new BiaoCheData()
            {
                OwnerRoleID = biaoCheItem.OwnerRoleID,
                BiaoCheID = biaoCheItem.BiaoCheID,
                BiaoCheName = biaoCheItem.BiaoCheName,
                YaBiaoID = biaoCheItem.YaBiaoID,
                MapCode = biaoCheItem.MapCode,
                PosX = biaoCheItem.PosX,
                PosY = biaoCheItem.PosY,
                Direction = biaoCheItem.Direction,
                LifeV = biaoCheItem.LifeV,
                CutLifeV = biaoCheItem.CutLifeV,
                StartTime = biaoCheItem.StartTime,
                BodyCode = biaoCheItem.BodyCode,
                PicCode = biaoCheItem.PicCode,
                CurrentLifeV = biaoCheItem.CurrentLifeV,
                OwnerRoleName = biaoCheItem.OwnerRoleName,
            };

            return biaoCheData;
        }

        /// <summary>
        /// 镖车切换地图
        /// </summary>
        /// <param name="client"></param>
        /// <param name="toMapCode"></param>
        /// <param name="toPosX"></param>
        /// <param name="toPosY"></param>
        public static void HandleBiaoCheChangMap(GameClient client, int toMapCode, int toPosX, int toPosY, int toDiection)
        {
            BiaoCheItem biaoCheItem = BiaoCheManager.FindBiaoCheByRoleID(client.ClientData.RoleID);
            if (null == biaoCheItem) return; //无镖车

            if (!Global.InCircle(new Point(biaoCheItem.PosX, biaoCheItem.PosY), new Point(client.ClientData.PosX, client.ClientData.PosY), 300))
            {
                return; //不在传送范围内
            }

            //通知所有人隐藏镖车
            BiaoCheManager.NotifyOthersHideBiaoChe(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, biaoCheItem);

            //为镖车切换地图
            biaoCheItem.MapCode = toMapCode;
            biaoCheItem.PosX = toPosX;
            biaoCheItem.PosY = toPosY;
            biaoCheItem.Direction = toDiection;

            //通知所有人显示镖车
            BiaoCheManager.NotifyOthersShowBiaoChe(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, biaoCheItem);
        }

        /// <summary>
        /// 获取劫镖后，获取的收入的系数
        /// </summary>
        /// <param name="client"></param>
        /// <param name="biaoCheItem"></param>
        /// <returns></returns>
        public static int GetKillBiaoCheNum(GameClient client, BiaoCheItem biaoCheItem)
        {
            int levelNum = ((client.ClientData.Level - 40) / 10) + 1;
            if (levelNum > biaoCheItem.YaBiaoID)
            {
                return 6;
            }

            return 3;
        }

        /// <summary>
        /// 增加今日的劫镖次数
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int IncTotayJieBiaoNum(GameClient client)
        {
            int dayID = TimeUtil.NowDateTime().DayOfYear;
            if (dayID != client.ClientData.JieBiaoDayID)
            {
                client.ClientData.JieBiaoDayID = dayID;
                client.ClientData.JieBiaoDayNum = 1;
            }
            else
            {
                client.ClientData.JieBiaoDayNum++;
            }

            //将劫镖次数写入数据库中
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEJIEBIAOINFO,
                string.Format("{0}:{1}:{2}", client.ClientData.RoleID, client.ClientData.JieBiaoDayID, client.ClientData.JieBiaoDayNum),
                null, client.ServerId);

            return client.ClientData.JieBiaoDayNum;
        }

        #endregion 押镖管理

        #region 角色排队的命令管理

        /// <summary>
        /// 添加执行角色的排队命令
        /// </summary>
        /// <param name="client"></param>
        /// <param name="queueCmdID"></param>
        public static void AddRoleQueueCmd(GameClient client, QueueCmdIDs queueCmdID, long execTicks)
        {
            QueueCmdItem queueCmdItem = new QueueCmdItem()
            {
                CmdID = (int)queueCmdID,
                ExecTicks = execTicks,
            };

            lock (client.ClientData.QueueCmdItemList)
            {
                client.ClientData.QueueCmdItemList.Add(queueCmdItem);
            }
        }

        /// <summary>
        /// 获取已经可以执行的角色的排队命令
        /// </summary>
        /// <param name="client"></param>
        /// <param name="queueCmdID"></param>
        public static QueueCmdItem GetRoleQueueCmd(GameClient client)
        {
            long nowTicks = TimeUtil.NOW() * 10000;

            QueueCmdItem queueCmdItem = null;
            lock (client.ClientData.QueueCmdItemList)
            {
                for (int i = 0; i < client.ClientData.QueueCmdItemList.Count; i++)
                {
                    queueCmdItem = client.ClientData.QueueCmdItemList[i];
                    if (nowTicks >= queueCmdItem.ExecTicks)
                    {
                        client.ClientData.QueueCmdItemList.RemoveAt(i);
                        return queueCmdItem;
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// 执行角色排队的命令
        /// </summary>
        /// <param name="client"></param>
        public static void ProcessQueueCmds(GameClient client)
        {
            lock (client.ClientData.QueueCmdItemList)
            {
                if (client.ClientData.QueueCmdItemList.Count <= 0) return;
            }

            //获取已经可以执行的角色的排队命令
            QueueCmdItem queueCmdItem = Global.GetRoleQueueCmd(client);
            if (null == queueCmdItem) return;

            //根据命令ID执行操作
            switch ((QueueCmdIDs)queueCmdItem.CmdID)
            {
                case QueueCmdIDs.NotifyEndJingMai:
                    {
                        //处理结束冲脉成功的状态
                        Global.ProcessEndUpJingMai(client);
                    }
                    break;
                default:
                    {
                        ;//
                    }
                    break;
            }
        }

        #endregion 角色排队的命令管理

        #region 角色行为日志
        /// <summary>
        /// 是否将 rid和rname共存的 rname 去掉标识
        /// </summary>
        public static bool WithRname = false;

        /// <summary>
        /// 写入角色登录的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleLoginEvent(GameClient client)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string ip = Global.GetSocketRemoteEndPoint(client.ClientSocket).Replace(":", ".");

            string msg = WithRname ? "{0}	{1}	{2}	{3}	{4}	{5}" : "{0} {1}	{2}	{4}	{5}";
            // rid和rname共存的 去掉rname
            string eventMsg = string.Format(msg,
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                ip
                );

            GameManager.SystemRoleLoginEvents.AddEvent(eventMsg, EventLevels.Important);

            //string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            //string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            //GameManager.DBEventsWriter.CacheEvent_login(-1,
            //    client.ClientData.ZoneID,
            //    userID,
            //    userName,
            //    client.ClientData.RoleID,
            //    client.ClientData.RoleName,
            //    client.ClientData.Level,
            //    ip,
            //    writerTime);
        }

        /// <summary>
        /// 写入角色登出的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleLogoutEvent(GameClient client)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string ip = Global.GetSocketRemoteEndPoint(client.ClientSocket).Replace(":", ".");

            string msg = WithRname ? "{0}	{1}	{2}	{3}	{4}	{5} {6}" : "{0}	{1}	{2}	{4}	{5} {6}";
            // rid和rname共存的 去掉rname
            string eventMsg = string.Format(msg,
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                ip,
                (int)(client.CheckCheatData.MaxClientSpeed * 100)
                );

            GameManager.SystemRoleLogoutEvents.AddEvent(eventMsg, EventLevels.Important);

            //string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            //string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            //GameManager.DBEventsWriter.CacheEvent_logout(-1,
            //    client.ClientData.ZoneID,
            //    userID,
            //    userName,
            //    client.ClientData.RoleID,
            //    client.ClientData.RoleName,
            //    client.ClientData.Level,
            //    ip,
            //    writerTime);
        }

        /// <summary>
        /// 写入角色完成任务的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleTaskEvent(GameClient client, int completeTaskID)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string msg = WithRname ? "{0}	{1}	{2}	{3}	{4}	{5}" : "{0}	{1}	{2}	{4}	{5}";
            // rid和rname共存的 去掉rname
            string eventMsg = string.Format(msg,
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                completeTaskID
                );

            GameManager.SystemRoleTaskEvents.AddEvent(eventMsg, EventLevels.Important);

            //string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            //string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            //GameManager.DBEventsWriter.CacheEvent_task(-1,
            //    client.ClientData.ZoneID,
            //    userID,
            //    userName,
            //    client.ClientData.RoleID,
            //    client.ClientData.RoleName,
            //    client.ClientData.Level,
            //    completeTaskID,
            //    writerTime);
        }

        /// <summary>
        /// 写入角色死亡的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleDeathEvent(GameClient client, string deadMsg)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string msg = WithRname ? "{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}" : "{0}	{1}	{2}	{4}	{5}	{6}	{7}	{8}";
            // rid和rname共存的 去掉rname
            string eventMsg = string.Format(msg,
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                Global.GetMapName(client.ClientData.MapCode),
                client.ClientData.PosX,
                client.ClientData.PosY,
                deadMsg
                );

            GameManager.SystemRoleDeathEvents.AddEvent(eventMsg, EventLevels.Important);

            /*string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheEvent_death(-1,
                client.ClientData.ZoneID,
                userID,
                userName,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                Global.GetMapName(client.ClientData.MapCode),
                client.ClientData.PosX,
                client.ClientData.PosY,
                deadMsg,
                writerTime);*/
        }

        /// <summary>
        /// 写入角色银两增加/减少日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleYinLiangEvent(GameClient client, int oldYinLiang)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string ip = Global.GetSocketRemoteEndPoint(client.ClientSocket).Replace(":", ".");

            string msg = WithRname ? "{0}	{1}	{2}	{3}	{4}	{5}" : "{0}	{1}	{2}	{4}	{5}";
            // rid和rname共存的 去掉rname
            string eventMsg = string.Format(msg,
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                oldYinLiang,
                client.ClientData.YinLiang
                );

            GameManager.SystemRoleYinLiangEvents.AddEvent(eventMsg, EventLevels.Important);

            //string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            //string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            //GameManager.DBEventsWriter.CacheEvent_yinliang(-1,
            //    client.ClientData.ZoneID,
            //    userID,
            //    userName,
            //    client.ClientData.RoleID,
            //    client.ClientData.RoleName,
            //    oldYinLiang,
            //    client.ClientData.YinLiang,
            //    writerTime);
        }

        /// <summary>
        /// 写入角色银两增加/减少日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleYinLiangEvent2(string userID, int roleID, string roleName, int addYinLiang)
        {
            string msg = WithRname ? "{0}	{1}	{2}	{3}	{4}" : "{0}	{1}	{2}	{4}";
            // rid和rname共存的 去掉rname
            string eventMsg = string.Format(msg,
                GameManager.ServerLineID,
                userID,
                roleID,
                roleName,
                addYinLiang
                );

            GameManager.SystemRoleYinLiangEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        /// <summary>
        /// 写入角色金币增加/减少日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleGoldEvent(GameClient client, int oldGold)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string ip = Global.GetSocketRemoteEndPoint(client.ClientSocket).Replace(":", ".");

            string msg = WithRname ? "{0}	{1}	{2}	{3}	{4}	{5}" : "{0}	{1}	{2}	{4}	{5}";
            // rid和rname共存的 去掉rname
            string eventMsg = string.Format(msg,
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                oldGold,
                client.ClientData.Gold
                );

            GameManager.SystemRoleGoldEvents.AddEvent(eventMsg, EventLevels.Important);

            //string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            //string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            //GameManager.DBEventsWriter.CacheEvent_yinliang(-1,
            //    client.ClientData.ZoneID,
            //    userID,
            //    userName,
            //    client.ClientData.RoleID,
            //    client.ClientData.RoleName,
            //    oldYinLiang,
            //    client.ClientData.YinLiang,
            //    writerTime);
        }

        /// <summary>
        /// 写入角色仓库金币日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleStoreYinLiangEvent(GameClient client, long oldYinLiang)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string ip = Global.GetSocketRemoteEndPoint(client.ClientSocket).Replace(":", ".");

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                oldYinLiang,
                client.ClientData.StoreYinLiang
                );

            GameManager.SystemRoleStoreYinLiangEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        /// <summary>
        /// 写入角色仓库绑定金币日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleStoreMoneyEvent(GameClient client, long oldYinLiang)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string ip = Global.GetSocketRemoteEndPoint(client.ClientSocket).Replace(":", ".");

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                oldYinLiang,
                client.ClientData.StoreYinLiang
                );

            GameManager.SystemRoleStoreMoneyEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        /// <summary>
        /// 写入角色天地精元购买的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleBuyWithTianDiJingYuanEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = GameManager.ClientMgr.GetTianDiJingYuanValue(client);
            int moneyType = (int)MoneyTypes.JingYuanZhi;

            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney
                );

            GameManager.SystemRoleBuyWithTianDiJingYuanEvents.AddEvent(eventMsg, EventLevels.Important);

            //更新上线状态+
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDBUYITEMFROMNPC,
                string.Format("{0}:{1}:{2}:{3}:{4}:{5}", client.ClientData.RoleID, goodsID, goodsNum, totalPrice, hasTotalMoney, moneyType),
                null, client.ServerId);

            /*string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheNpcbuy(-1,
                client.ClientData.ZoneID,
                userID,
                userName,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney,
                writerTime,
                Global.GetGoodsNameByID(goodsID),
                moneyType);*/
        }

        /// <summary>
        /// 写入角色猎杀值购买的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleBuyWithLieShaZhiEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = GameManager.ClientMgr.GetLieShaValue(client);
            int moneyType = (int)MoneyTypes.LieShaZhi;

            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney
                );

            GameManager.SystemRoleBuyWithLieShaZhiEvents.AddEvent(eventMsg, EventLevels.Important);

            //更新上线状态+
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDBUYITEMFROMNPC,
                string.Format("{0}:{1}:{2}:{3}:{4}:{5}", client.ClientData.RoleID, goodsID, goodsNum, totalPrice, hasTotalMoney, moneyType),
                null, client.ServerId);

            /*string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheNpcbuy(-1,
                client.ClientData.ZoneID,
                userID,
                userName,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney,
                writerTime,
                Global.GetGoodsNameByID(goodsID),
                moneyType);*/
        }

        /// <summary>
        /// 写入角色装备积分购买的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleBuyWithZhuangBeiJiFenEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = GameManager.ClientMgr.GetZhuangBeiJiFenValue(client);
            int moneyType = (int)MoneyTypes.JiFenZhi;

            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney
                );

            GameManager.SystemRoleBuyWithZhuangBeiJiFenEvents.AddEvent(eventMsg, EventLevels.Important);

            //更新上线状态+
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDBUYITEMFROMNPC,
                string.Format("{0}:{1}:{2}:{3}:{4}:{5}", client.ClientData.RoleID, goodsID, goodsNum, totalPrice, hasTotalMoney, moneyType),
                null, client.ServerId);

            /*string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheNpcbuy(-1,
                client.ClientData.ZoneID,
                userID,
                userName,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney,
                writerTime,
                Global.GetGoodsNameByID(goodsID),
                moneyType);*/
        }

        /// <summary>
        /// 写入角色战魂值购买的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleBuyWithZhanHunEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = GameManager.ClientMgr.GetZhanHunValue(client);
            int moneyType = (int)MoneyTypes.ZhanHun;

            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney
                );

            GameManager.SystemRoleBuyWithZhanHunEvents.AddEvent(eventMsg, EventLevels.Important);

            //更新上线状态+
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDBUYITEMFROMNPC,
                string.Format("{0}:{1}:{2}:{3}:{4}:{5}", client.ClientData.RoleID, goodsID, goodsNum, totalPrice, hasTotalMoney, moneyType),
                null, client.ServerId);

            /*string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheNpcbuy(-1,
                client.ClientData.ZoneID,
                userID,
                userName,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney,
                writerTime,
                Global.GetGoodsNameByID(goodsID),
                moneyType);*/
        }

        /// <summary>
        /// 写入角色军功值购买的行为日志 注意，这个帮会的军贡是不一样的
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleBuyWithJunGongZhiEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = GameManager.ClientMgr.GetJunGongValue(client);
            int moneyType = (int)MoneyTypes.JunGongZhi;

            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney
                );

            GameManager.SystemRoleBuyWithJunGongZhiEvents.AddEvent(eventMsg, EventLevels.Important);

            //更新上线状态+
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDBUYITEMFROMNPC,
                string.Format("{0}:{1}:{2}:{3}:{4}:{5}", client.ClientData.RoleID, goodsID, goodsNum, totalPrice, hasTotalMoney, moneyType),
                null, client.ServerId);

            /*string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheNpcbuy(-1,
                client.ClientData.ZoneID,
                userID,
                userName,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney,
                writerTime,
                Global.GetGoodsNameByID(goodsID),
                moneyType);*/
        }

        /// <summary>
        /// 写入角色铜钱购买的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleBuyWithTongQianEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = client.ClientData.Money1;
            int moneyType = (int)MoneyTypes.TongQian;

            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string msg = WithRname ? "{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}" : "{0}	{1}	{2}	{4}	{5}	{6}	{7}	{8}";
            // rid和rname共存的 去掉rname
            string eventMsg = string.Format(msg,
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney
                );

            GameManager.SystemRoleBuyWithTongQianEvents.AddEvent(eventMsg, EventLevels.Important);

            //更新上线状态+
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDBUYITEMFROMNPC,
                string.Format("{0}:{1}:{2}:{3}:{4}:{5}", client.ClientData.RoleID, goodsID, goodsNum, totalPrice, hasTotalMoney, moneyType),
                null, client.ServerId);

            /*string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheNpcbuy(-1,
                client.ClientData.ZoneID,
                userID,
                userName,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney,
                writerTime,
                Global.GetGoodsNameByID(goodsID),
                moneyType);*/
        }

        /// <summary>
        /// 写入角色银两购买的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleBuyWithYinLiangEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = client.ClientData.YinLiang;
            int moneyType = (int)MoneyTypes.YinLiang;
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney
                );

            GameManager.SystemRoleBuyWithYinLiangEvents.AddEvent(eventMsg, EventLevels.Important);

            //更新上线状态+
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDBUYITEMFROMNPC,
                string.Format("{0}:{1}:{2}:{3}:{4}:{5}", client.ClientData.RoleID, goodsID, goodsNum, totalPrice, client.ClientData.YinLiang, moneyType),
                null, client.ServerId);

            /*string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheNpcbuy(-1,
                client.ClientData.ZoneID,
                userID,
                userName,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney,
                writerTime,
                Global.GetGoodsNameByID(goodsID),
                moneyType);*/
            /*
            //更新上线状态+  不再采用旧的记录方式，采用新的记录方式
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDYINLIANGBUYITEM,
                string.Format("{0}:{1}:{2}:{3}:{4}", client.ClientData.RoleID, goodsID, goodsNum, totalPrice, client.ClientData.YinLiang),
                null);

            string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheYinliangbuy(-1,
                client.ClientData.ZoneID,
                userID,
                userName,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                goodsID,
                goodsNum,
                totalPrice,
                client.ClientData.YinLiang,
                writerTime,
                Global.GetGoodsNameByID(goodsID));
            */
        }

        /// <summary>
        /// 写入角色金币购买的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleBuyWithGlodEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string msg = WithRname ? "{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}" : "{0}	{1}	{2}	{4}	{5}	{6}	{7}	{8}";
            // rid和rname共存的 去掉rname
            string eventMsg = string.Format(msg,
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                client.ClientData.Gold
                );

            GameManager.SystemRoleBuyWithGoldEvents.AddEvent(eventMsg, EventLevels.Important);

            //更新db金币购买记录
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDGOLDBUYITEM,
                string.Format("{0}:{1}:{2}:{3}:{4}", client.ClientData.RoleID, goodsID, goodsNum, totalPrice, client.ClientData.Gold),
                null, client.ServerId);

            //string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            //string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            //GameManager.DBEventsWriter.CacheYinliangbuy(-1,
            //    client.ClientData.ZoneID,
            //    userID,
            //    userName,
            //    client.ClientData.RoleID,
            //    client.ClientData.RoleName,
            //    goodsID,
            //    goodsNum,
            //    totalPrice,
            //    client.ClientData.YinLiang,
            //    writerTime,
            //    Global.GetGoodsNameByID(goodsID));

            /*string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheYinpiaobuy(-1,
                client.ClientData.ZoneID,
                userID,
                userName,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                goodsID,
                goodsNum,
                totalPrice,
                client.ClientData.Gold,
                writerTime,
                Global.GetGoodsNameByID(goodsID));*/
        }

        /// <summary>
        /// 写入角色银票购买的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleBuyWithYinPiaoEvent(GameClient client, int goodsID, int goodsNum, int totalPrice, int yinPiaoGoodsID)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            int leftYinPiaoNum = Global.GetTotalGoodsCountByID(client, yinPiaoGoodsID);
            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                leftYinPiaoNum
                );

            GameManager.SystemRoleBuyWithYinPiaoEvents.AddEvent(eventMsg, EventLevels.Important);

            //更新上线状态
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDYINPIAOBUYITEM,
                string.Format("{0}:{1}:{2}:{3}:{4}", client.ClientData.RoleID, goodsID, goodsNum, totalPrice, leftYinPiaoNum),
                null, client.ServerId);

            /*string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheYinpiaobuy(-1,
                client.ClientData.ZoneID,
                userID,
                userName,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                goodsID,
                goodsNum,
                totalPrice,
                leftYinPiaoNum,
                writerTime,
                Global.GetGoodsNameByID(goodsID));*/
        }

        /// <summary>
        /// 写入角色天地精元的兑换的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleBuyWithTianDiJingYuanEvent(GameClient client, int goodsID, int goodsNum, int totalPrice, int tianDiJingYuanGoodsID)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            int leftNum = Global.GetTotalGoodsCountByID(client, tianDiJingYuanGoodsID);
            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                leftNum
                );

            GameManager.SystemRoleBuyWithTianDiJingYuanEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        /// <summary>
        /// 写入角色军贡购买的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleBuyWithJunGongEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                client.ClientData.BangGong
                );

            GameManager.SystemRoleBuyWithJunGongEvents.AddEvent(eventMsg, EventLevels.Important);

            //更新上线状态
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDBANGGONGBUYITEM,
                string.Format("{0}:{1}:{2}:{3}:{4}", client.ClientData.RoleID, goodsID, goodsNum, totalPrice, client.ClientData.BangGong),
                null, client.ServerId);

            /*string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheBanggongbuy(-1,
                client.ClientData.ZoneID,
                userID,
                userName,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                goodsID,
                goodsNum,
                totalPrice,
                client.ClientData.BangGong,
                writerTime,
                Global.GetGoodsNameByID(goodsID));*/
        }

        /// <summary>
        /// 写入角色元宝购买的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleBuyWithYuanBaoEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                client.ClientData.UserMoney
                );

            GameManager.SystemRoleBuyWithYuanBaoEvents.AddEvent(eventMsg, EventLevels.Important);

            //更新上线状态
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDMALLBUYITEM,
                string.Format("{0}:{1}:{2}:{3}:{4}", client.ClientData.RoleID, goodsID, goodsNum, totalPrice, client.ClientData.UserMoney),
                null, client.ServerId);

            /*string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheMallbuy(-1,
                client.ClientData.ZoneID,
                userID,
                userName,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                goodsID,
                goodsNum,
                totalPrice,
                client.ClientData.UserMoney,
                writerTime,
                Global.GetGoodsNameByID(goodsID));*/
        }

        /// <summary>
        /// 写入角色藏宝积分购买的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleBuyWithTreasureJiFenEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = GameManager.ClientMgr.GetTreasureJiFen(client);
            int moneyType = (int)MoneyTypes.BaoZangJiFen;

            //更新上线状态+
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDBUYITEMFROMNPC,
                string.Format("{0}:{1}:{2}:{3}:{4}:{5}", client.ClientData.RoleID, goodsID, goodsNum, totalPrice, hasTotalMoney, moneyType),
                null, client.ServerId);
        }

        /// <summary>
        /// 写入角色藏宝血钻购买的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleBuyWithTreasureXueZuanEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = GameManager.ClientMgr.GetTreasureXueZuan(client);
            int moneyType = (int)MoneyTypes.BaoZangXueZuan;

            //更新上线状态+
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDBUYITEMFROMNPC,
                string.Format("{0}:{1}:{2}:{3}:{4}:{5}", client.ClientData.RoleID, goodsID, goodsNum, totalPrice, hasTotalMoney, moneyType),
                null, client.ServerId);
        }

        /// <summary>
        /// 写入角色藏宝血钻购买的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleBuyWithZhengBaPointEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = Global.GetRoleParamsInt32FromDB(client, RoleParamName.ZhengBaPoint);
            int moneyType = (int)MoneyTypes.ZhengBaPoint;

            //更新上线状态+
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDBUYITEMFROMNPC,
                string.Format("{0}:{1}:{2}:{3}:{4}:{5}", client.ClientData.RoleID, goodsID, goodsNum, totalPrice, hasTotalMoney, moneyType),
                null, client.ServerId);
        }

        /// <summary>
        /// 写入角色祈福积分购买的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleBuyWithImpetratePointEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = GetZaJinDanJifen(client);
            int moneyType = (int)MoneyTypes.ImpetratePoint;

            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney
                );

            GameManager.SystemRoleBuyWithTianDiJingYuanEvents.AddEvent(eventMsg, EventLevels.Important);

            //更新上线状态+
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDBUYITEMFROMNPC,
                string.Format("{0}:{1}:{2}:{3}:{4}:{5}", client.ClientData.RoleID, goodsID, goodsNum, totalPrice, hasTotalMoney, moneyType),
                null, client.ServerId);

            /*string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheNpcbuy(-1,
                client.ClientData.ZoneID,
                userID,
                userName,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney,
                writerTime,
                Global.GetGoodsNameByID(goodsID),
                moneyType);*/
        }

        /// <summary>
        /// 写入角色战功积分购买的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleBuyWithZhanGongEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = client.ClientData.BangGong;
            int moneyType = (int)MoneyTypes.BangGong;

            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney
                );

            //GameManager.SystemRoleBuyWithTianDiJingYuanEvents.AddEvent(eventMsg, EventLevels.Important);

            //更新上线状态+
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDBUYITEMFROMNPC,
                string.Format("{0}:{1}:{2}:{3}:{4}:{5}", client.ClientData.RoleID, goodsID, goodsNum, totalPrice, hasTotalMoney, moneyType),
                null, client.ServerId);
        }

        /// <summary>
        /// 写入角色精灵积分购买的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleBuyWithPetJiFenEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            int hasTotalMoney = Global.GetRoleParamsInt32FromDB(client, RoleParamName.PetJiFen);
            int moneyType = (int)MoneyTypes.PetJiFen;

            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                hasTotalMoney
                );

            //GameManager.SystemRoleBuyWithTianDiJingYuanEvents.AddEvent(eventMsg, EventLevels.Important);

            //更新上线状态+
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDBUYITEMFROMNPC,
                string.Format("{0}:{1}:{2}:{3}:{4}:{5}", client.ClientData.RoleID, goodsID, goodsNum, totalPrice, hasTotalMoney, moneyType),
                null, client.ServerId);
        }

        /// <summary>
        /// 写入角色元宝在奇珍阁购买的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleQiZhenGeBuyWithYuanBaoEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                client.ClientData.UserMoney
                );

            GameManager.SystemRoleQiZhenGeBuyWithYuanBaoEvents.AddEvent(eventMsg, EventLevels.Important);

            //更新上线状态
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDQIZHENGEBUYITEM,
                string.Format("{0}:{1}:{2}:{3}:{4}", client.ClientData.RoleID, goodsID, goodsNum, totalPrice, client.ClientData.UserMoney),
                null, client.ServerId);

            /*string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheQizhengebuy(-1,
                client.ClientData.ZoneID,
                userID,
                userName,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                goodsID,
                goodsNum,
                totalPrice,
                client.ClientData.UserMoney,
                writerTime,
                Global.GetGoodsNameByID(goodsID));*/
        }

        /// <summary>
        /// 写入角色出售的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleSaleEvent(GameClient client, int goodsID, int goodsNum, int newMoney1, int newYinPiaoNum, int newYuanBaoNum, int yinPiaoGoodsID, int saleOutMoney)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            // rid和rname共存的 去掉rname
            string msg = WithRname ? "{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}	{9}	{10}	{11}	{12}	{13}" : "{0}	{1}	{2}	{4}	{5}	{6}	{7}	{8}	{9}	{10}	{11}	{12}	{13}";
            string eventMsg = string.Format(msg,
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum, //可以是负数
                newMoney1, //可以是负数
                newYinPiaoNum, //可以是负数
                newYuanBaoNum, //可以是负数
                client.ClientData.Money1,
                Global.GetTotalGoodsCountByID(client, yinPiaoGoodsID),
                client.ClientData.UserMoney,
                saleOutMoney //可以是负数
                );

            GameManager.SystemRoleSaleEvents.AddEvent(eventMsg, EventLevels.Important);

            /*string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheEvent_sale(-1,
                client.ClientData.ZoneID,
                userID,
                userName,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                Global.GetGoodsNameByID(goodsID),
                goodsNum,
                newMoney1,
                newYinPiaoNum,
                newYuanBaoNum,
                client.ClientData.Money1,
                Global.GetTotalGoodsCountByID(client, yinPiaoGoodsID),
                client.ClientData.UserMoney,
                writerTime);*/
        }

        /// <summary>
        /// 写入角色出售的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleSaleEvent2(string userID, int roleID, string roleName, int roleLevel, int goodsID, int goodsNum, int newMoney1, int newYinPiaoNum, int newYuanBaoNum, int saleOutMoney)
        {
            // rid和rname共存的 去掉rname
            string msg = WithRname ? "{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}	{9}	{10}" : "{0}	{1}	{2}	{4}	{5}	{6}	{7}	{8}	{9}	{10}";
            string eventMsg = string.Format(msg,
                GameManager.ServerLineID,
                userID,
                roleID,
                roleName,
                roleLevel,
                goodsID,
                goodsNum, //可以是负数
                newMoney1, //可以是负数
                newYinPiaoNum, //可以是负数
                newYuanBaoNum, //可以是负数
                saleOutMoney //可以是负数
                );

            GameManager.SystemRoleSaleEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        /// <summary>
        /// 写入角色交易的行为日志1
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleExchangeEvent1(GameClient client, int goodsID, int goodsNum, int otherRoleID, string otherRoleName, string result)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string msg = WithRname ? "{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}	{9}	{10}" : "{0}	{1}	{2}	{4}	{5}	{6}	{7}	{8}	{9}	{10}";
            // rid和rname共存的 去掉rname
            string eventMsg = string.Format(msg,
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum, //可以是负数
                Global.GetTotalGoodsCountByID(client, goodsID),
                otherRoleID,
                otherRoleName,
                result
                );

            GameManager.SystemRoleExchangeEvents1.AddEvent(eventMsg, EventLevels.Important);

            /*string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheEvent_exchange1(-1,
                client.ClientData.ZoneID,
                userID,
                userName,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                Global.GetGoodsNameByID(goodsID),
                goodsNum,
                Global.GetTotalGoodsCountByID(client, goodsID),
                otherRoleID,
                otherRoleName,
                result,
                writerTime);*/

            //判断物品是否播报或者记录
            SystemXmlItem systemGoods = Global.CanBroadcastOrEventGoods(goodsID);
            if (null != systemGoods)
            {
                GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDEXCHANGE1ITEM,
                    string.Format("{0}:{1}:{2}:{3}:{4}:{5}", client.ClientData.RoleID, goodsID, goodsNum, Global.GetTotalGoodsCountByID(client, goodsID), otherRoleID, result),
                    null, client.ServerId);
            }
        }

        /// <summary>
        /// 写入角色交易的行为日志2
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleExchangeEvent2(GameClient client, int money1, int otherRoleID, string otherRoleName)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string msg = WithRname ?"{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}":"{0}	{1}	{2}	{4}	{5}	{6}	{7}	{8}";
            // rid和rname共存的 去掉rname
            string eventMsg = string.Format(msg,
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                money1, //可以是负数
                client.ClientData.YinLiang,
                otherRoleID,
                otherRoleName
                );

            GameManager.SystemRoleExchangeEvents2.AddEvent(eventMsg, EventLevels.Important);

            /*string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheEvent_exchange2(-1,
                client.ClientData.ZoneID,
                userID,
                userName,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                money1,
                client.ClientData.YinLiang,
                otherRoleID,
                otherRoleName,
                writerTime);*/
        }

        /// <summary>
        /// 写入角色交易的行为日志2
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleExchangeEvent3(GameClient client, int yuanBao, int otherRoleID, string otherRoleName)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string msg = WithRname ?"{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}":"{0}	{1}	{2}	{4}	{5}	{6}	{7}	{8}";
            // rid和rname共存的 去掉rname
            string eventMsg = string.Format(msg,
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                yuanBao, //可以是负数
                client.ClientData.UserMoney,
                otherRoleID,
                otherRoleName
                );

            GameManager.SystemRoleExchangeEvents3.AddEvent(eventMsg, EventLevels.Important);

            /*string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheEvent_exchange3(-1,
                client.ClientData.ZoneID,
                userID,
                userName,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                yuanBao,
                client.ClientData.UserMoney,
                otherRoleID,
                otherRoleName,
                writerTime);*/

            //判断物品是否播报或者记录
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDEXCHANGE3ITEM,
                string.Format("{0}:{1}:{2}:{3}", client.ClientData.RoleID, yuanBao, client.ClientData.UserMoney, otherRoleID),
                null, client.ServerId);
        }

        /// <summary>
        /// 写入角色升级的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleUpgradeEvent(GameClient client, int oldLevel)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string msg = WithRname ? "{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}	{9}" : "{0}	{1}	{2}	{4}	{5}	{6}	{7}	{8}	{9}";
            // rid和rname共存的 去掉rname
            string eventMsg = string.Format(msg,
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                oldLevel,
                client.ClientData.Level,
                client.ClientData.Experience,
                client.ClientData.MapCode,
                client.ClientData.PosX,
                client.ClientData.PosY
                );

            GameManager.SystemRoleUpgradeEvents.AddEvent(eventMsg, EventLevels.Important);

            //string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            //string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            //GameManager.DBEventsWriter.CacheEvent_uplevel(-1,
            //    client.ClientData.ZoneID,
            //    userID,
            //    userName,
            //    client.ClientData.RoleID,
            //    client.ClientData.RoleName,
            //    oldLevel,
            //    client.ClientData.Level,
            //    client.ClientData.Experience,
            //    writerTime);
        }

        /// <summary>
        /// 写入角色物品的得失行为日志(扩展)
        /// </summary>
        /// <param name="client"></param>
        public static void NoDBLogModRoleGoodsEvent(GameClient client, GoodsData goodsData, int AddOrSubGoodsNum, string actionDesc, bool bIsFromMap = false)
        {
            //写入角色物品的得失行为日志
            Global.AddRoleGoodsEvent(client, goodsData.Id, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, goodsData.Quality, goodsData.Forge_level, goodsData.Jewellist, goodsData.Site, goodsData.Endtime, AddOrSubGoodsNum, actionDesc, goodsData.AddPropIndex, goodsData.BornIndex, goodsData.Lucky, goodsData.Strong, goodsData.ExcellenceInfo, goodsData.AppendPropLev, goodsData.ChangeLifeLevForEquip);
        }

        /// <summary>
        /// 写入角色物品的得失行为日志(扩展)
        /// </summary>
        /// <param name="client"></param>
        public static void ModRoleGoodsEvent(GameClient client, GoodsData goodsData, int AddOrSubGoodsNum, string actionDesc, bool bIsFromMap = false)
        {
            if (0 == goodsData.GCount)
            {
                if (bIsFromMap)
                {
                    GameManager.logDBCmdMgr.AddDBLogInfo(goodsData.Id, Global.ModifyGoodsLogName(goodsData), actionDesc, Global.GetMapName(client.ClientData.MapCode), "系统", "销毁", AddOrSubGoodsNum, client.ClientData.ZoneID, client.strUserID, -1, client.ServerId, goodsData);
                }
                else
                {
                    GameManager.logDBCmdMgr.AddDBLogInfo(goodsData.Id, Global.ModifyGoodsLogName(goodsData), actionDesc, client.ClientData.RoleName, "系统", "销毁", AddOrSubGoodsNum, client.ClientData.ZoneID, client.strUserID, -1, client.ServerId, goodsData);
                }
            }
            else
            {
                if (bIsFromMap)
                {
                    GameManager.logDBCmdMgr.AddDBLogInfo(goodsData.Id, Global.ModifyGoodsLogName(goodsData), actionDesc, Global.GetMapName(client.ClientData.MapCode), client.ClientData.RoleName, "修改", AddOrSubGoodsNum, client.ClientData.ZoneID, client.strUserID, -1, client.ServerId, goodsData);
                }
                else
                {
                    GameManager.logDBCmdMgr.AddDBLogInfo(goodsData.Id, Global.ModifyGoodsLogName(goodsData), actionDesc, client.ClientData.RoleName, "系统", "修改", AddOrSubGoodsNum, client.ClientData.ZoneID, client.strUserID, -1, client.ServerId, goodsData);
                }
            }

            //写入角色物品的得失行为日志
            Global.AddRoleGoodsEvent(client, goodsData.Id, goodsData.GoodsID, goodsData.GCount, goodsData.Binding, goodsData.Quality, goodsData.Forge_level, goodsData.Jewellist, goodsData.Site, goodsData.Endtime, AddOrSubGoodsNum, actionDesc, goodsData.AddPropIndex, goodsData.BornIndex, goodsData.Lucky, goodsData.Strong, goodsData.ExcellenceInfo, goodsData.AppendPropLev, goodsData.ChangeLifeLevForEquip);
        }

        /// <summary>
        /// 写入角色物品的得失行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleGoodsEvent(GameClient client, int goodsDbID, int goodsID, int goodsNum, int binding, int quality, int forgeLevel, string jewelList, int site, string endTime,
            int addOrSubGoodsNum, string actionDesc, int addPropIndex, int bornIndex, int lucky, int strong, int ExcellenceProperty, int nAppendPropLev, int nChangeLifeLevForEquip)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            Global.AddRoleGoodsEvent(userID, client.ClientData.RoleID, client.ClientData.RoleName, client.ClientData.Level,
                goodsDbID, goodsID, goodsNum, binding, quality, forgeLevel, jewelList, site, endTime,
                addOrSubGoodsNum, actionDesc, addPropIndex, bornIndex, lucky, strong, ExcellenceProperty, nAppendPropLev, nChangeLifeLevForEquip);

        }

        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleGoodsEvent(string userID, int roleID, string roleName, int roleLevel, int goodsDbID, int goodsID, int goodsNum, int binding, int quality, int forgeLevel, string jewelList, int site, string endTime,
            int addOrSubGoodsNum, string actionDesc, int addPropIndex, int bornIndex, int lucky, int strong, int ExcellenceProperty, int nAppendPropLev, int nChangeLifeLevForEquip)
        {
            string msg = WithRname ? "{0}	{1}	{2} {3}	{4}	{5}	{6}	{7}	{8}	{9}	{10}	{11}	{12}	{13}	{14}	{15}	{16}	{17}	{18}	{19}	{20}	{21}	{22}" : "{0}	{1}	{2}	{4}	{5}	{6}	{7}	{8}	{9}	{10}	{11}	{12}	{13}	{14}	{15}	{16}	{17}	{18}	{19}	{20}	{21}	{22}";
           // rid和rname共存的 去掉rname
            string eventMsg = string.Format(msg,
                GameManager.ServerLineID,
                userID,
                roleID,
                roleName,
                roleLevel,
                goodsDbID,
                goodsID,
                goodsNum, //可以是负数
                binding,
                quality,
                forgeLevel,
                jewelList,
                site,
                endTime,
                addOrSubGoodsNum,
                actionDesc,
                addPropIndex,
                bornIndex,
                lucky,
                strong,
                ExcellenceProperty,
                nAppendPropLev,
                nChangeLifeLevForEquip);

            GameManager.SystemRoleGoodsEvents.AddEvent(eventMsg, EventLevels.Important);

            if (/**/"重置背包索引" != actionDesc)
            {
                //string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
                //string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
                //GameManager.DBEventsWriter.CacheEvent_goods(-1,
                //    client.ClientData.ZoneID,
                //    userID,
                //    userName,
                //    client.ClientData.RoleID,
                //    client.ClientData.RoleName,
                //    goodsDbID,
                //    goodsID,
                //    goodsNum, //可以是负数
                //    binding,
                //    quality,
                //    forgeLevel,
                //    jewelList,
                //    site,
                //    endTime,
                //    addOrSubGoodsNum,
                //    actionDesc,
                //    writerTime);
            }
        }

        /// <summary>
        /// 写入角色物品的掉落物品日志(只有全区播报的物品才写)
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsData"></param>
        public static void AddFallGoodsEvent(GameClient client, GoodsData goodsData, string mapName, string monsterName, bool canDBWriter)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            GameManager.logDBCmdMgr.AddDBLogInfo(/*goodsData.Id*/-1, Global.ModifyGoodsLogName(goodsData), mapName, monsterName, client.ClientData.RoleName, "掉落", goodsData.GCount, client.ClientData.ZoneID, client.strUserID, -1, client.ServerId);
            string msg = WithRname ? "{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}	{9}	{10}	{11}	{12}	{13}	{14}" : "{0}	{1}	{2}	{4}	{5}	{6}	{7}	{8}	{9}	{10}	{11}	{12}	{13}	{14}";
            // rid和rname共存的 去掉rname
            string eventMsg = string.Format(msg,
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsData.Id,
                goodsData.GoodsID,
                goodsData.GCount,
                goodsData.Binding,
                goodsData.Quality,
                goodsData.Forge_level,
                goodsData.Jewellist,
                goodsData.Site,
                mapName,
                monsterName
                );

            GameManager.SystemRoleFallGoodsEvents.AddEvent(eventMsg, EventLevels.Important);

            if (canDBWriter)
            {
                /*string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
                string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
                GameManager.DBEventsWriter.CacheEvent_fallgoods(-1,
                    client.ClientData.ZoneID,
                    userID,
                    userName,
                    client.ClientData.RoleID,
                    client.ClientData.RoleName,
                    goodsData.Id,
                    goodsData.GoodsID,
                    goodsData.GCount,
                    goodsData.Binding,
                    goodsData.Quality,
                    goodsData.Forge_level,
                    goodsData.Jewellist,
                    goodsData.Site,
                    mapName,
                    monsterName,
                    writerTime);*/
            }
        }

        /// <summary>
        /// 写入角色进阶坐骑的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleHorseUpgradeEvent(GameClient client, int horseDbID, int horseID, int jinJieFailedNum, string jinJieTempTime, int jinJieTempNum, int jinJieFailedDayID, string status)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}	{9}	{10}	{11}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                horseDbID,
                horseID,
                jinJieFailedNum,
                jinJieTempTime,
                jinJieTempNum,
                jinJieFailedDayID,
                status
                );

            GameManager.SystemRoleHorseEvents.AddEvent(eventMsg, EventLevels.Important);

            //string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            //string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            //GameManager.DBEventsWriter.CacheEvent_uphorse(-1,
            //    client.ClientData.ZoneID,
            //    userID,
            //    userName,
            //    client.ClientData.RoleID,
            //    client.ClientData.RoleName,
            //    horseDbID,
            //    horseID,
            //    jinJieFailedNum,
            //    jinJieTempTime,
            //    jinJieTempNum,
            //    jinJieFailedDayID,
            //    status,
            //    writerTime);
        }

        /// <summary>
        /// 写入角色帮贡增加/减少日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleBangGongEvent(GameClient client, int oldBangGong)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string ip = Global.GetSocketRemoteEndPoint(client.ClientSocket).Replace(":", ".");
            string msg = WithRname ? "{0}	{1}	{2}	{3}	{4}	{5}" : "{0}	{1}	{2}	{4}	{5}";
            // rid和rname共存的 去掉rname
            string eventMsg = string.Format(msg,
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                oldBangGong,
                client.ClientData.BangGong
                );

            GameManager.SystemRoleBangGongEvents.AddEvent(eventMsg, EventLevels.Important);

            //string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            //string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            //GameManager.DBEventsWriter.CacheEvent_banggong(-1,
            //    client.ClientData.ZoneID,
            //    userID,
            //    userName,
            //    client.ClientData.RoleID,
            //    client.ClientData.RoleName,
            //    oldBangGong,
            //    client.ClientData.BangGong,
            //    writerTime);
        }

        /// <summary>
        /// 写入角色奇珍阁刷新耗费元宝的日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleRefreshQiZhenGeEvent(GameClient client, int oldUserMoney)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string ip = Global.GetSocketRemoteEndPoint(client.ClientSocket).Replace(":", ".");

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                oldUserMoney,
                client.ClientData.UserMoney
                );

            GameManager.SystemRoleRefreshQiZhenGeEvents.AddEvent(eventMsg, EventLevels.Important);

            //更新奇阵阁刷新纪录
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDREFRESHQIZHENREC,
                string.Format("{0}:{1}:{2}", client.ClientData.RoleID, oldUserMoney, client.ClientData.UserMoney),
                null, client.ServerId);

            /*string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheRefreshqizhen(-1,
                client.ClientData.ZoneID,
                userID,
                userName,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                oldUserMoney,
                client.ClientData.UserMoney,
                writerTime);*/
        }

        /// <summary>
        /// 写入角色冲脉成功的日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleJingMaiEvent(GameClient client, int jingMaiBodyLevel, int jingMaiID, int oldXueWeiNum, int nowXueWeiNum)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);
            string ip = Global.GetSocketRemoteEndPoint(client.ClientSocket).Replace(":", ".");

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                jingMaiBodyLevel,
                Global.GetJingMaiName(jingMaiID),
                oldXueWeiNum,
                nowXueWeiNum
                );

            GameManager.SystemRoleJingMaiEvents.AddEvent(eventMsg, EventLevels.Important);

            //string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            //string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            //GameManager.DBEventsWriter.CacheEvent_jingmai(-1,
            //    client.ClientData.ZoneID,
            //    userID,
            //    userName,
            //    client.ClientData.RoleID,
            //    client.ClientData.RoleName,
            //    jingMaiBodyLevel,
            //    Global.GetJingMaiName(jingMaiID),
            //    oldXueWeiNum,
            //    nowXueWeiNum,
            //    writerTime);
        }

        /// <summary>
        /// 写入角色物品的挖宝的物品日志(只有全区播报的物品才写)
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsData"></param>
        public static void AddWaBaoGoodsEvent(GameClient client, GoodsData goodsData)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}	{9}	{10}	{11}	{12}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsData.Id,
                goodsData.GoodsID,
                goodsData.GCount,
                goodsData.Binding,
                goodsData.Quality,
                goodsData.Forge_level,
                goodsData.Jewellist,
                goodsData.Site
                );

            GameManager.SystemRoleWaBaoEvents.AddEvent(eventMsg, EventLevels.Important);

            /*string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheEvent_wuliangdigtreasure(-1,
                client.ClientData.ZoneID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsData.Id,
                goodsData.GoodsID,
                goodsData.GCount,
                goodsData.Binding,
                goodsData.Quality,
                goodsData.Forge_level,
                goodsData.Jewellist,
                goodsData.Site,
                writerTime);*/
        }

        /// <summary>
        /// 写入角色的地图日志
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsData"></param>
        public static void AddMapEvent(GameClient client)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            // rid和rname共存的 去掉rname
            string msg = WithRname ? "{0}	{1}	{2}	{3}	{4}	{5}" : "{0}	{1}	{2}	{4}	{5}";
            string eventMsg = string.Format(msg,
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                Global.GetMapName(client.ClientData.MapCode));

            GameManager.SystemRoleMapEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        /// <summary>
        /// 写入角色的副本奖励日志
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsData"></param>
        public static void AddFuBenAwardEvent(GameClient client, int fuBenID)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                Global.GetMapName(client.ClientData.MapCode),
                fuBenID);

            GameManager.SystemRoleFuBenAwardEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        /// <summary>
        /// 写入角色的五行奇阵奖励日志
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsData"></param>
        public static void AddWuXingAwardEvent(GameClient client, int exp, int horseLucky)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                client.ClientData.HorseDbID,
                Global.GetMapName(client.ClientData.MapCode),
                exp,
                horseLucky);

            GameManager.SystemRoleWuXingAwardEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        /// <summary>
        /// 写入角色的跑环日志
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsData"></param>
        public static void AddPaoHuanEvent(GameClient client, int taskClass)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string msg = WithRname ? "{0}	{1}	{2}	{3}	{4}	{5}" : "{0}	{1}	{2}	{4}	{5}";
            // rid和rname共存的 去掉rname
            string eventMsg = string.Format(msg,
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                taskClass);

            GameManager.SystemRolePaoHuanOkEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        /// <summary>
        /// 写入角色的押镖日志
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsData"></param>
        public static void AddYaBiaoEvent(GameClient client, int yaBiaoID, string action)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                yaBiaoID,
                action);

            GameManager.SystemRoleYaBiaoEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        /// <summary>
        /// 写入角色的连斩日志
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsData"></param>
        public static void AddLianZhanEvent(GameClient client, int lianZhanNum)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                Global.GetMapName(client.ClientData.MapCode),
                lianZhanNum);

            GameManager.SystemRoleLianZhanEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        /// <summary>
        /// 写入角色的活动日志
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsData"></param>
        public static void AddHuoDongEvent(GameClient client, int monsterType, string monsterName)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                Global.GetMapName(client.ClientData.MapCode),
                monsterType,
                monsterName);

            GameManager.SystemRoleHuoDongMonsterEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        /// <summary>
        /// 服务器端角色精雕细琢[钥匙类]挖宝事件
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsData"></param>
        public static void AddDigTreasureWithYaoShiEvent(GameClient client, int idYaoShi, int idXiangZi, int needSubYaoShiNum, int needSubXiangZiNum, int subMoney, int oldMoney, int nowMoney, GoodsData goodsData)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}	{9}	{10} {11}	{12}	{13}	{14}	{15}	{16}	{17} {18}	{19} {20}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                Global.GetMapName(client.ClientData.MapCode),
                idYaoShi, idXiangZi, needSubYaoShiNum, needSubXiangZiNum, subMoney, oldMoney, nowMoney,
                goodsData.Id,
                goodsData.GoodsID,
                goodsData.GCount,
                goodsData.Binding,
                goodsData.Quality,
                goodsData.Forge_level,
                goodsData.Jewellist,
                goodsData.Site);

            GameManager.SystemRoleDigTreasureWithYaoShiEvents.AddEvent(eventMsg, EventLevels.Important);

            /*string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheEvent_yaoshidigtreasure(-1,
                client.ClientData.ZoneID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                Global.GetMapName(client.ClientData.MapCode),
                idYaoShi, idXiangZi, needSubYaoShiNum, needSubXiangZiNum, subMoney, oldMoney, nowMoney,
                goodsData.Id,
                goodsData.GoodsID,
                goodsData.GCount,
                goodsData.Binding,
                goodsData.Quality,
                goodsData.Forge_level,
                goodsData.Jewellist,
                goodsData.Site,
                writerTime);*/
        }

        /// <summary>
        /// 服务器端自动扣除元宝事件
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsData"></param>
        public static void AddAutoSubYuanBaoEvent(GameClient client, int GoodsID, int GoodsNum, int price, int subYuanBao, string reason, int oldMoney, int nowMoney)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}	{9}	{10}	{11}	{12}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                Global.GetMapName(client.ClientData.MapCode),
                GoodsID, GoodsNum, price, subYuanBao, reason, oldMoney, nowMoney);

            GameManager.SystemRoleAutoSubYuanBaoEvents.AddEvent(eventMsg, EventLevels.Important);

            /*string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheEvent_autosubyuanbao(-1,
                client.ClientData.ZoneID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                Global.GetMapName(client.ClientData.MapCode),
                GoodsID, GoodsNum, price, subYuanBao, reason, oldMoney, nowMoney,
                writerTime);*/
        }

        /// <summary>
        /// 服务器端自动扣除金币事件
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsData"></param>
        public static void AddAutoSubGoldEvent(GameClient client, int GoodsID, int GoodsNum, int price, int subGold, string reason, int oldMoney, int nowMoney)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}	{9}	{10}	{11}	{12}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                Global.GetMapName(client.ClientData.MapCode),
                GoodsID, GoodsNum, price, subGold, reason, oldMoney, nowMoney);

            GameManager.SystemRoleAutoSubGoldEvents.AddEvent(eventMsg, EventLevels.Important);

            //string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            //GameManager.DBEventsWriter.CacheEvent_autosubgold(-1,
            //    client.ClientData.ZoneID,
            //    userID,
            //    client.ClientData.RoleID,
            //    client.ClientData.RoleName,
            //    client.ClientData.Level,
            //    Global.GetMapName(client.ClientData.MapCode),
            //    GoodsID, GoodsNum, price, subGold, reason, oldMoney, nowMoney,
            //    writerTime);
        }

        /// <summary>
        /// 服务器端自动扣除金币-元宝事件
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsData"></param>
        public static void AddAutoSubEvent(GameClient client, int GoodsID, int GoodsNum, int price, int subGold, int oldGold, int nowGold, int subYuanBao, int oldYuanBao, int nowYuanBao, string reason)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}	{9}	{10}	{11}	{12}	{13}	{14}	{15}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                Global.GetMapName(client.ClientData.MapCode),
                GoodsID, GoodsNum, price, subGold, oldGold, nowGold, subYuanBao, oldYuanBao, nowYuanBao, reason);

            GameManager.SystemRoleAutoSubEvents.AddEvent(eventMsg, EventLevels.Important);

            //string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            //GameManager.DBEventsWriter.CacheEvent_autosubgold(-1,
            //    client.ClientData.ZoneID,
            //    userID,
            //    client.ClientData.RoleID,
            //    client.ClientData.RoleName,
            //    client.ClientData.Level,
            //    Global.GetMapName(client.ClientData.MapCode),
            //    GoodsID, GoodsNum, price, subGold, reason, oldMoney, nowMoney,
            //    writerTime);
        }

        /// <summary>
        /// 将生肖运程竞猜结果提交给统计数据库
        /// </summary>
        public static void AddShengXiaoGuessHistoryToStaticsDB(GameClient client, int roleID, int guessKey, int mortgage, int resultkey, int gainnum, int nowGold)
        {
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");

            //GameManager.DBEventsWriter.CacheShengxiaoguesshist(-1,
            //    roleID, client != null? client.ClientData.RoleName:"", client !=null? client.ClientData.ZoneID : -1, guessKey, mortgage,
            //    resultkey, gainnum, nowGold, writerTime);
        }

        /// <summary>
        /// 角色提取邮件元宝，银两，铜钱事件
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsData"></param>
        public static void AddRoleFetchMailMoneyEvent(GameClient client, int yuanBao, int yinLiang, int tongQian)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string msg = WithRname ? "{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}" : "{0}	{1}	{2}	{4}	{5}	{6}	{7}	{8}";
            // rid和rname共存的 去掉rname
            string eventMsg = string.Format(msg,
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                Global.GetMapName(client.ClientData.MapCode),
                yuanBao, yinLiang, tongQian);

            GameManager.SystemRoleFetchMailMoneyEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        /// <summary>
        /// 角色领取每日vip奖励的元宝，银两，铜钱事件
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsData"></param>
        public static void AddRoleFetchVipAwardEvent(GameClient client, int yuanBao, int yinLiang, int tongQian, int lingLi, int priority)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string msg = WithRname ? "{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}	{9}	{10}" : "{0}	{1}	{2}	{4}	{5}	{6}	{7}	{8}	{9}	{10}";
            // rid和rname共存的 去掉rname
            string eventMsg = string.Format(msg,
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                Global.GetMapName(client.ClientData.MapCode),
                yuanBao, yinLiang, tongQian, lingLi, priority);

            GameManager.SystemRoleFetchVipAwardEvents.AddEvent(eventMsg, EventLevels.Important);
        }

        /// <summary>
        /// 写入角色生肖运程竞猜结果的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleShengXiaoGuessHistoryEvent(GameClient client, int goodsID, int goodsNum, int totalPrice)
        {
            /*
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                client.ClientData.UserMoney
                );

            GameManager.SystemRoleShengXiaoGuessEvents.AddEvent(eventMsg, EventLevels.Important);

            //更新上线状态
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_ADDQIZHENGEBUYITEM,
                string.Format("{0}:{1}:{2}:{3}:{4}", client.ClientData.RoleID, goodsID, goodsNum, totalPrice, client.ClientData.UserMoney),
                null);

            string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheQizhengebuy(-1,
                client.ClientData.ZoneID,
                userID,
                userName,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                goodsID,
                goodsNum,
                totalPrice,
                client.ClientData.UserMoney,
                writerTime,
                Global.GetGoodsNameByID(goodsID));
            */
        }

        /// <summary>
        /// 写入角色元宝在商城抢购购买的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleQiangGouBuyWithYuanBaoEvent(GameClient client, int goodsID, int goodsNum, int totalPrice, int qiangGouID)
        {
            string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

            string eventMsg = string.Format("{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8} {9}",
                GameManager.ServerLineID,
                userID,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                client.ClientData.Level,
                goodsID,
                goodsNum,
                totalPrice,
                client.ClientData.UserMoney,
                qiangGouID
                );

            GameManager.SystemRoleQiangGouBuyWithYuanBaoEvents.AddEvent(eventMsg, EventLevels.Important);

            /*string userName = GameManager.OnlineUserSession.FindUserName(client.ClientSocket);
            string writerTime = TimeUtil.NowDateTime().ToString("yyyy-MM-dd HH:mm:ss");
            GameManager.DBEventsWriter.CacheQianggoubuy(-1,
                client.ClientData.ZoneID,
                userID,
                userName,
                client.ClientData.RoleID,
                client.ClientData.RoleName,
                goodsID,
                goodsNum,
                totalPrice,
                client.ClientData.UserMoney,
                writerTime,
                Global.GetGoodsNameByID(goodsID),
                qiangGouID);*/
        }

        /// <summary>
        /// 写入角色元宝的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleUserMoneyEvent(GameClient client, string type, int userMoney, string msg)
        {
            try
            {
                int hasTotalMoney = client.ClientData.UserMoney;

                string userID = GameManager.OnlineUserSession.FindUserID(client.ClientSocket);

                // rid和rname共存的 去掉rname
                string msg2 = WithRname ? "{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}" : "{0}	{1}	{2}	{4}	{5}	{6}	{7}	{8}";
                string eventMsg = string.Format(msg2,
                    GameManager.ServerLineID,
                    userID,
                    client.ClientData.RoleID,
                    client.ClientData.RoleName,
                    client.ClientData.Level,
                    type,
                    userMoney,
                    hasTotalMoney,
                    msg
                    );

                GameManager.SystemRoleUserMoneyEvents.AddEvent(eventMsg, EventLevels.Important);
            }
            catch (System.Exception)
            {
            }
        }

        /// <summary>
        /// 写入角色元宝的行为日志
        /// </summary>
        /// <param name="client"></param>
        public static void AddRoleUserMoneyEvent(int roleID, string type, int userMoney, string msg)
        {
            try
            {
                int hasTotalMoney = -1;

                string userID = "";
                // rid和rname共存的 去掉rname
                string msg2 = WithRname ? "{0}	{1}	{2}	{3}	{4}	{5}	{6}	{7}	{8}" : "{0}	{1}	{2}	{4}	{5}	{6}	{7}	{8}";
                string eventMsg = string.Format(msg2,
                    GameManager.ServerLineID,
                    userID,
                    roleID,
                    "",
                    -1,
                    type,
                    userMoney,
                    hasTotalMoney,
                    msg
                    );

                GameManager.SystemRoleUserMoneyEvents.AddEvent(eventMsg, EventLevels.Important);
            }
            catch (System.Exception)
            {

            }
        }

        #endregion 角色行为日志

        #region 角色个人消息，仅仅发送给角色自己

        /// <summary>
        /// 通知经验娃娃经验
        /// </summary>
        /// <param name="client"></param>
        /// <param name="addExp"></param>
        public static void NotifySelfWaWaExp(GameClient client, int addExp)
        {
            String msg = String.Format(Global.GetLang("经验娃娃爆发,获得{0}经验"), addExp);
            GameManager.LuaMgr.NotifyImportantMsg(client, msg, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.ErrAndBox, 0);
        }

        #endregion 角色个人消息，仅仅发送给角色自己

        #region 第一次重置任务管理

        /// <summary>
        /// 提示的充值支线任务ID
        /// </summary>
        public static int GetChongZhiSecondTaskID()
        {
            return (int)GameManager.systemParamsList.GetParamValueIntByName("ChongZhiSecondTaskID");
        }

        /// <summary>
        /// 判断完成充值任务ID
        /// </summary>
        /// <param name="taskID"></param>
        public static void JugeCompleteChongZhiSecondTask(GameClient client, int taskID)
        {
            //if (Global.GetChongZhiSecondTaskID() != taskID)
            //{
            //    return;
            //}

            if (client.ClientData.CZTaskID == taskID) return;
            client.ClientData.CZTaskID = taskID;

            //更新上线状态
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATECZTASKID,
                string.Format("{0}:{1}", client.ClientData.RoleID, taskID),
                null, client.ServerId);
        }

        /// <summary>
        /// 判断在这个区，平台账户是否领取了首充大礼
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool CanGetFirstChongZhiDaLiByUserID(GameClient client)
        {
            //先DBServer请求查询角色
            string[] dbRoleFields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_QUERYFIRSTCHONGZHIBYUSERID, string.Format("{0}", client.ClientData.RoleID), client.ServerId);
            if (null == dbRoleFields || dbRoleFields.Length != 1 || int.Parse(dbRoleFields[0]) <= 0)
            {
                return true;
            }

            return false;
        }

        #endregion 第一次重置任务管理

        #region 每日充值大礼

        /// <summary>
        /// 判断在这个区，平台账户是否领取了每日充值大礼
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool CanGetDayChongZhiDaLi(GameClient client, int nBtnIndex)
        {
            int dayID = 0;
            string strs = Global.GetRoleParamByName(client, RoleParamName.DailyChargeGiftFlags);
            if (string.IsNullOrEmpty(strs))
            {

            }
            else
            {
                string[] giftlist = strs.Split(',');
                dayID = Global.SafeConvertToInt32(giftlist[nBtnIndex - 1]);
            }

            if (dayID == (int)TimeUtil.NowDateTime().DayOfYear)
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// 完成每日充值大礼的领取
        /// </summary>
        /// <param name="client"></param>
        public static void CompleteDayChongZhiDaLi(GameClient client, int nBtnIndex)
        {
            string strs = Global.GetRoleParamByName(client, RoleParamName.DailyChargeGiftFlags);
            string ret = "";
            string[] arglist = null;
            if (string.IsNullOrEmpty(strs))
            {
                int count = ((MeiRiChongZhiActivity)Global.GetActivity(ActivityTypes.MeiRiChongZhiHaoLi)).AwardDict.Count;
                arglist = new string[count];
                for (int i = 0; i < count; i++)
                {
                    arglist[i] = "-1";
                }

            }
            else
            {
                arglist = strs.Split(',');

            }
            arglist[nBtnIndex - 1] = TimeUtil.NowDateTime().DayOfYear.ToString();
            for (int i = 0; i < arglist.Length; i++)
            {
                if (0 == i)
                {
                    ret = arglist[0];
                }
                else
                {
                    ret += "," + arglist[i];
                }
            }
            Global.SaveRoleParamsStringToDB(client, RoleParamName.DailyChargeGiftFlags, ret, true);
        }

        #endregion 每日充值大礼

        // 冲级领取神装相关 begin [7/17/2013 LiaoWei]
        #region 冲级领取神装

        /// <summary>
        /// 判断在这个区，平台账户是否领取了冲级领取神装 gwz 20147.31修改
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool CanGetChongJiLingQuShenZhuang(GameClient client, int nBtnIndex)
        {

            string strs = Global.GetRoleParamByName(client, GameConfigNames.ChongJiGiftList);
            if (string.IsNullOrEmpty(strs))
            {//第一次查询，如果数据库没有记录，初始化数据库记录
                KingActivity instActivity = (KingActivity)Global.GetActivity(ActivityTypes.NewZoneUpLevelMadman);
                int count = instActivity.RoleLimit.Count;//活动奖励分档个数
                for (int i = 0; i < count; i++)
                {
                    if (i == 0)
                    {
                        strs = "0";
                    }
                    else
                    {
                        strs += ",0";
                    }
                }
                Global.SaveRoleParamsStringToDB(client, GameConfigNames.ChongJiGiftList, strs, true);
                return true;
            }
            string[] gflist = strs.Split(',');

            if (gflist[nBtnIndex - 1] == "0")
                return true;
            return false;
            //switch (tmpActType)
            //{
            //    case GiftBtnIndex.BTN1:
            //        {
            //            nValue = Global.GetRoleParamsInt32FromDB(client, GameConfigNames.ChongJiGift1);
            //            break;
            //        }
            //    case GiftBtnIndex.BTN2:
            //        {
            //            nValue = Global.GetRoleParamsInt32FromDB(client, GameConfigNames.ChongJiGift2);
            //            break;
            //        }
            //    case GiftBtnIndex.BTN3:
            //        {
            //            nValue = Global.GetRoleParamsInt32FromDB(client, GameConfigNames.ChongJiGift3);
            //            break;
            //        }
            //    case GiftBtnIndex.BTN4:
            //        {
            //            nValue = Global.GetRoleParamsInt32FromDB(client, GameConfigNames.ChongJiGift4);
            //            break;
            //        }
            //    case GiftBtnIndex.BTN5:
            //        {
            //            nValue = Global.GetRoleParamsInt32FromDB(client, GameConfigNames.ChongJiGift5);
            //            break;
            //        }
            //    default:
            //        break;
            //}
            //if (nValue > 0)
            //    return false;

            //return true;
        }

        /// <summary>
        /// 判断在这个区，平台账户是否领取了冲级领取神装
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool CanGetChongJiLingQuShenZhuangUserID(GameClient client, int nBtnIndex, ActivityTypes ActType)
        {
            int dayID = (int)TimeUtil.NowDateTime().DayOfYear;

            //先DBServer请求查询角色
            string[] dbRoleFields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_QUERYDAYCHONGZHIBYUSERID, string.Format("{0}:{1}:{2}:{3}", client.ClientData.RoleID, dayID, nBtnIndex, ActType), client.ServerId);
            if (null == dbRoleFields || dbRoleFields.Length != 1 || int.Parse(dbRoleFields[0]) <= 0)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 判断在这个区，相应的冲级领取神装是否还有名额 gwz 2014.7.31修改
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int GetChongJiLingQuShenZhuangQuota(GameClient client, int nBtnIndex)
        {
            int nValue = 0;
            string strs = GameManager.GameConfigMgr.GetGameConfigItemStr(GameConfigNames.ChongJiGiftList, "");
            if (string.IsNullOrEmpty(strs))
            {
                KingActivity instact = (KingActivity)Global.GetActivity(ActivityTypes.NewZoneUpLevelMadman);
                strs = "";
                int count = instact.RoleLimit.Count;
                for (int i = 1; i < count + 1; i++)
                {
                    if (i == 1)
                    {
                        strs = "0";
                    }
                    else
                    {
                        strs += ",0";
                    }
                }
                GameManager.GameConfigMgr.SetGameConfigItem(GameConfigNames.ChongJiGiftList, strs);
                Global.UpdateDBGameConfigg(GameConfigNames.ChongJiGiftList, strs);
                return 0;
            }
            else
            {
                nValue = Global.SafeConvertToInt32(strs.Split(',')[nBtnIndex - 1]);

            }
            return nValue;

        }

        /// <summary>
        /// 完成冲级领取神装的领取
        /// </summary>
        /// <param name="client"></param>
        public static void CompleteChongJiLingQuShenZhuang(GameClient client, int nBtnIndex, int nQuota)
        {
            string strs = Global.GetRoleParamByName(client, GameConfigNames.ChongJiGiftList);
            string[] strlist = strs.Split(',');
            if (nBtnIndex > strlist.Length)
                return;
            strlist[nBtnIndex - 1] = "1";
            string giftstr = "";
            for (int i = 0; i < strlist.Length; i++)
            {
                if (i == 0)
                    giftstr = strlist[i];
                else
                    giftstr += "," + strlist[i];
            }

            // 更新 t_roleparams  记录当前玩家有没有领取冲级奖励
            Global.SaveRoleParamsStringToDB(client, GameConfigNames.ChongJiGiftList, giftstr, true);

            //获得冲级狂人配置数据
            string constrs = GameManager.GameConfigMgr.GetGameConfigItemStr(GameConfigNames.ChongJiGiftList, "");
            string[] configlist = constrs.Split(',');
            configlist[nBtnIndex - 1] = nQuota.ToString();
            string ret = "";
            for (int i = 0; i < configlist.Length; i++)
            {
                if (i == 0)
                {
                    ret = configlist[0];
                }
                else
                {
                    ret += "," + configlist[i];
                }
            }
            // 更新 t_config   记录了剩余名额 
            Global.UpdateDBGameConfigg(GameConfigNames.ChongJiGiftList, ret);
        }

        #endregion 冲级领取神装

        // 冲级领取神装相关 end [7/17/2013 LiaoWei]


        // 神装激情回馈相关 begin [7/17/2013 LiaoWei]
        #region 神装激情

        /// <summary>
        /// 取得该玩家神装回馈活动的状态  0--还没资格 1--可以领取但还没领 2--已经领了
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int GetShenZhuangHuiKuiStatus(GameClient client)
        {
            return Global.GetRoleParamsInt32FromDB(client, GameConfigNames.ShenZhuangHuiKuiGift);
        }

        /// <summary>
        /// 完成冲级领取神装的领取
        /// </summary>
        /// <param name="client"></param>
        public static void CompleteShenZhuangHuiKui(GameClient client, int nQuota)
        {
            // 更新 t_roleparams  记录当前玩家神装回馈的状态
            Global.SaveRoleParamsInt32ValueToDB(client, GameConfigNames.ShenZhuangHuiKuiGift, 2, true);

            // 更新 t_config   记录了剩余名额 
            Global.UpdateDBGameConfigg(GameConfigNames.ShenZhuangHuiKuiGift, nQuota.ToString());
        }

        // 神装激情回馈相关 end [7/17/2013 LiaoWei]
        #endregion 神装激情


        // 幸运抽奖相关 begin [7/17/2013 LiaoWei]
        #region 幸运抽奖

        /// <summary>
        /// 取得在这个区，平台账户抽奖的次数
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static string[] GetXingYunChouJiangInfoUserID(GameClient client, int nTpye, int nYuanBaoValue, string FromDate, string ToDate)
        {
            //先DBServer请求查询角色
            return Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_QUERYXINGYUNORYUEDUCHOUJIANGINFO, string.Format("{0}:{1}:{2}:{3}:{4}",
                                            client.ClientData.RoleID, nTpye, nYuanBaoValue, FromDate, ToDate), client.ServerId);

        }

        /// <summary>
        /// 完成一次幸运抽奖
        /// </summary>
        /// <param name="client"></param>
        public static string[] CompleteXingYunChouJiang(GameClient client, int nTpye, int nHasPlayTime, string FromDate, string ToDate)
        {
            // 更新t_huodongawarduserhist 记录玩家已经玩了幸运抽奖的次数
            return Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_EXECUXINGYUNORYUEDUCHOUJIANGINFO, string.Format("{0}:{1}:{2}:{3}:{4}",
                                            client.ClientData.RoleID, nTpye, nHasPlayTime, FromDate, ToDate), client.ServerId);
            //GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_EXECUXINGYUNORYUEDUCHOUJIANGINFO, string.Format("{0}:{1}:{2}", client.ClientData.RoleID, nTpye, nHasPlayTime), null);
        }

        // 幸运抽奖相关 end [7/17/2013 LiaoWei]
        #endregion 幸运抽奖



        // 月度转盘抽奖相关 begin [7/17/2013 LiaoWei]
        #region 月度转盘抽奖

        /*/// <summary>
        /// 请求月度转盘信息
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static string[] GetYunDuChouJiangInfoUserID(GameClient client, int nYuanBaoValue, string FromDate, string ToDate, int nVal, int nParm, int nTotalTime, int nHasPlayTime, int nYuanBao)
        {
            //先DBServer请求查询角色

            if (nParm == 1)
                return Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_SPR_QUERYYUEDUCHOUJIANGHISTORY, string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", client.ClientData.RoleID, nYuanBaoValue, FromDate, ToDate, 0, nTotalTime, nHasPlayTime, nYuanBao));
            else if (nParm == 2)
                return Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_SPR_QUERYSELFQUERYYUEDUCHOUJIANGHISTORY, string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", client.ClientData.RoleID, nYuanBaoValue, FromDate, ToDate, 1, nTotalTime, nHasPlayTime, nYuanBao));

        }

        /// <summary>
        /// 完成一次幸运抽奖
        /// </summary>
        /// <param name="client"></param>
        public static void CompleteYunDuChouJiang(GameClient client, int nHasPlayTime)
        {
            // 更新t_huodongawarduserhist 记录玩家已经玩了幸运抽奖的次数
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_EXECUXINGYUNORYUEDUCHOUJIANGINFO, string.Format("{0}:{1}", client.ClientData.RoleID, nHasPlayTime), null);
        }*/

        // 月度转盘抽奖相关 end [7/17/2013 LiaoWei]
        #endregion 月度转盘抽奖


        #region 角色单次奖励标志位
        /// <summary>
        /// 将领取一次的flag标志提交到dbserver,不用更新到客户端，客户端领取成功后自行更新该标志位，下次登录自然能取到最新标志位
        /// </summary>
        /// <param name="taskID"></param>
        public static void SubmitOnceAwardMaskToDB(GameClient client)
        {
            //更新到dbserver
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATESINGLETIMEAWARDFLAG,
                string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.OnceAwardFlag),
                null, client.ServerId);
        }
        #endregion 角色单次奖励标志位

        #region 掉落物品是否播报或者记录缓存

        /// <summary>
        /// 判断物品是否播报或者记录
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static SystemXmlItem CanBroadcastOrEventGoods(GoodsData goodsData)
        {
            return Global.CanBroadcastOrEventGoods(goodsData.GoodsID);
        }

        /// <summary>
        /// 判断物品是否播报或者记录
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static SystemXmlItem CanBroadcastOrEventGoods(int goodsID)
        {
            SystemXmlItem systemGoods = null;

            //获取Xml项
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsID, out systemGoods))
            {
                return null;
            }

            int infoClass = systemGoods.GetIntValue("InfoClass");
            //int categoriy = systemGoods.GetIntValue("Categoriy");
            //if (categoriy >= (int)ItemCategories.Weapon && categoriy < (int)ItemCategories.EquipMax)
            //{
            //    if (infoClass <= 0)
            //    {
            //        //如果是装备，则必须是紫色或则+6以上才播报
            //        if (goodsData.Quality < (int)GoodsQuality.Purple && goodsData.Forge_level < 6 && goodsData.BornIndex < 100)
            //        {
            //            return null;
            //        }
            //    }
            //}
            //else
            {
                if (infoClass <= 0)
                {
                    return null;
                }
            }

            return systemGoods;
        }

        #endregion 掉落物品是否播报或者记录缓存

        #region 装备和宝石套装加成管理(隐藏属性)

        /// <summary>
        /// 全套品质加成数组
        /// </summary>
        private static double[] AllQualityDecreaseInjurePercents = null;


        /// <summary>
        /// 初始化套装品质加成信息
        /// </summary>
        public static void InitDecreaseInjureInfo()
        {
            if (null == AllQualityDecreaseInjurePercents)
            {
                AllQualityDecreaseInjurePercents = GameManager.systemParamsList.GetParamValueDoubleArrayByName("ZhuoYueBuff");
            }
        }

        /// <summary>
        /// 全套品质加成数组
        /// </summary>
        public static double GetAllQualityDecreaseInjurePercent(int allQualityIndex)
        {
            if (allQualityIndex < 0 || allQualityIndex >= AllQualityDecreaseInjurePercents.Length) return 0;
            return AllQualityDecreaseInjurePercents[allQualityIndex];
        }

        /// <summary>
        /// 全套锻造伤害加成数组
        /// </summary>
        private static double[] AllForgeLevelAttackPercents = null;

        /// <summary>
        /// 全套锻造生命加成数组
        /// </summary>
        private static double[] AllForgeLeveMaxLifePercents = null;


        /// <summary>
        /// 初始化套装强化加成信息
        /// </summary>
        public static void InitAllForgeLevelInfo()
        {
            if (null == AllForgeLevelAttackPercents)
            {
                //[bing] 2015,8,6 改到QiangHuaFuJia.xml专门读取配置
                /*
                string strParam = GameManager.systemParamsList.GetParamValueByName("QiangHuaBuff");
                string [] arrAttackInfo = strParam.Split('|');
                AllForgeLevelAttackPercents = new double[arrAttackInfo.Length];
                AllForgeLeveMaxLifePercents = new double[arrAttackInfo.Length];
                for (int i = 0; i < arrAttackInfo.Length; i++)
                {
                    double[] arrParamInfo = Global.String2DoubleArray(arrAttackInfo[i]);
                    if (null == arrParamInfo || arrParamInfo.Length != 3)
                    {
                        continue;
                    }

                    AllForgeLeveMaxLifePercents[i] = arrParamInfo[1];
                    AllForgeLevelAttackPercents[i] = arrParamInfo[2];
                }
                */
            }

            AllThingsCalcItem.InitAllForgeLevelInfo();
        }

        /// <summary>
        /// 全套锻造伤害加成数组
        /// </summary>
        public static double GetAllForgeLevelAttackPercent(int allForgeLevelIndex)
        {
            if (allForgeLevelIndex < 0 || allForgeLevelIndex >= AllForgeLevelAttackPercents.Length) return 0;
            return AllForgeLevelAttackPercents[allForgeLevelIndex];
        }

        /// <summary>
        /// 全套锻造生命加成数组
        /// </summary>
        public static double GetAllForgeLevelMaxLifePercent(int allForgeLevelIndex)
        {
            if (allForgeLevelIndex < 0 || allForgeLevelIndex >= AllForgeLeveMaxLifePercents.Length) return 0;
            return AllForgeLeveMaxLifePercents[allForgeLevelIndex];
        }

        /// <summary>
        /// 全套宝石加成数组(根据职业加不同的属性的百分比)
        /// </summary>
        private static int[] AllJewelLevelOccupPercents = 
        {
            0,
            0,
            0,
            0,
            10,
            20,
            30,
            40,
            50,
            50,
            50
        };

        /// <summary>
        /// 全套宝石加成数组(根据职业加不同的属性的百分比)
        /// </summary>
        public static int GetAllJewelLevelOccupPercent(int allJewelLevelIndex)
        {
            if (allJewelLevelIndex < 0 || allJewelLevelIndex >= AllJewelLevelOccupPercents.Length) return 0;
            return AllJewelLevelOccupPercents[allJewelLevelIndex];
        }

        /// <summary>
        /// 全套宝石加成数组(根据职业加的属性)
        /// </summary>
        public static ExtPropIndexes GetAllJewelLevelOccupProp(int occupation)
        {
            if (0 == occupation) //弑天
            {
                return ExtPropIndexes.MaxLifeV;
            }
            else if (1 == occupation) //玄法
            {
                return ExtPropIndexes.MaxMagicV;
            }

            return ExtPropIndexes.MaxLifeV; //道士
        }

        /// <summary>
        /// 全套宝石加成数组(根据职业加的属性)
        /// </summary>
        public static string GetAllJewelLevelOccupPropName(int occupation)
        {
            if (0 == occupation) //弑天
            {
                return "生命上限";
            }
            else if (1 == occupation) //玄法
            {
                return "魔法上限";
            }

            return "生命上限"; //道士
        }

        /// <summary>
        /// 全套宝石增加的其他属性(所有职业，对于上面除外的其他属性增加的百分比)
        /// </summary>
        private static int[] AllJewelLevelOtherPercents = 
        {
            0,
            0,
            0,
            0,
            1,
            2,
            3,
            4,
            5,
            5,
            5
        };

        /// <summary>
        /// 全套宝石增加的其他属性(所有职业，对于上面除外的其他属性增加的百分比)
        /// </summary>
        public static int GetAllJewelLevelOtherPercent(int allJewelLevelIndex)
        {
            if (allJewelLevelIndex < 0 || allJewelLevelIndex >= AllJewelLevelOtherPercents.Length) return 0;
            return AllJewelLevelOtherPercents[allJewelLevelIndex];
        }

        /// <summary>
        /// 可以佩戴的最大装备数量
        /// </summary>
        private static int MaxUsingEquipNum = 8;//12;

        /// <summary>
        /// 可以佩戴的最大宝石数量
        /// </summary>
        private static int MaxUsingJewelNum = 72;

        /// <summary>
        /// 根据装备中的计数器获取加成属性值
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        public static void CalcAllThingsCalcItem(AllThingsCalcItem item, out int allQualityIndex, out int allForgeLevelIndex, out int allJewelLevelIndex, out int allZhuoYueNum)
        {
            allQualityIndex = 0;
            allForgeLevelIndex = 0;
            allJewelLevelIndex = 0;
            allZhuoYueNum = 0;
            if (item.TotalPurpleZhuoYueNum >= 8)
            {
                allZhuoYueNum = 3;
            }
            else if (item.TotalBlueZhuoYueNum + item.TotalPurpleZhuoYueNum >= 8)
            {
                allZhuoYueNum = 2;
            }
            else if (item.TotalGreenZhuoYueNum + item.TotalBlueZhuoYueNum + item.TotalPurpleZhuoYueNum >= 8)
            {
                allZhuoYueNum = 1;
            }

            if (item.TotalGoldQualityNum >= (Global.MaxUsingEquipNum))
            {
                allQualityIndex = 2;
            }
            else if ((item.TotalPurpleQualityNum + item.TotalGoldQualityNum) >= (Global.MaxUsingEquipNum))
            {
                allQualityIndex = 1;
            }

            allForgeLevelIndex = item.GetTotalForgeLevelValidIndex();

            if (item.TotalJewel8LevelNum >= (Global.MaxUsingJewelNum))
            {
                allJewelLevelIndex = 8;
            }
            else if ((item.TotalJewel7LevelNum + item.TotalJewel8LevelNum) >= (Global.MaxUsingJewelNum))
            {
                allJewelLevelIndex = 7;
            }
            else if ((item.TotalJewel6LevelNum + item.TotalJewel7LevelNum + item.TotalJewel8LevelNum) >= (Global.MaxUsingJewelNum))
            {
                allJewelLevelIndex = 6;
            }
            else if ((item.TotalJewel5LevelNum + item.TotalJewel6LevelNum + item.TotalJewel7LevelNum + item.TotalJewel8LevelNum) >= (Global.MaxUsingJewelNum))
            {
                allJewelLevelIndex = 5;
            }
            else if ((item.TotalJewel4LevelNum + item.TotalJewel5LevelNum + item.TotalJewel6LevelNum + item.TotalJewel7LevelNum + item.TotalJewel8LevelNum) >= (Global.MaxUsingJewelNum))
            {
                allJewelLevelIndex = 4;
            }
        }

        /// <summary>
        /// 根据装备中的计数器获取加成属性值
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        public static void CalcClientAllThingsCalcItem(GameClient client)
        {
            int allQualityIndex = 0;
            int allForgeLevelIndex = 0;
            int allJewelLevelIndex = 0;
            int allZhuoYueNum = 0;
            Global.CalcAllThingsCalcItem(client.ClientData.MyAllThingsCalcItem,
                out allQualityIndex, out allForgeLevelIndex, out allJewelLevelIndex, out allZhuoYueNum);

            client.ClientData.AllQualityIndex = allQualityIndex;
            client.ClientData.AllForgeLevelIndex = allForgeLevelIndex;
            client.ClientData.AllJewelLevelIndex = allJewelLevelIndex;
            client.ClientData.AllZhuoYueNum = allZhuoYueNum;

            //通知全套加成属性值更新(限制当前地图)
            GameManager.ClientMgr.ChangeAllThingAddPropIndexs(client);
        }

        /// <summary>
        /// 根据装备中的计数器获取加成属性值的Buffer
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        public static void CalcClientAllThingsBuffer(GameClient client)
        {
            client.AllThingsMultipliedBuffer.ClearAllTempExtProps();

            double addVal = Global.GetAllQualityDecreaseInjurePercent(client.ClientData.AllZhuoYueNum - 1);
            if (addVal != 0)
            {
                client.AllThingsMultipliedBuffer.AddTempExtProp((int)ExtPropIndexes.DecreaseInjurePercent, addVal, 0);
            }

            QiangHuaFuJiaItem qiangHuaFuJiaItem = AllThingsCalcItem.GetQiangHuaFuJiaItem(client.ClientData.AllForgeLevelIndex - 1);
            if (null != qiangHuaFuJiaItem)
            {
                client.AllThingsMultipliedBuffer.AddTempExtProp((int)ExtPropIndexes.AddAttackInjurePercent, qiangHuaFuJiaItem.AddAttackInjurePercent, 0);
                client.AllThingsMultipliedBuffer.AddTempExtProp((int)ExtPropIndexes.MaxLifePercent, qiangHuaFuJiaItem.MaxLifePercent, 0);
            }

            /*BufferPropItem tempProp = new BufferPropItem();
            tempProp.ResetProps();

            int addVal = Global.GetAllQualityDefensePercent(client.ClientData.AllQualityIndex);


            addVal = Global.GetAllForgeLevelAttackPercent(client.ClientData.AllForgeLevelIndex);


            addVal = Global.GetAllJewelLevelOccupPercent(client.ClientData.AllJewelLevelIndex);

            //if (0 == client.ClientData.Occupation) //弑天
            {
                tempProp.ExtProps[(int)ExtPropIndexes.MaxLifeV] += ((double)addVal / 100.0);
            }
            //else if (1 == client.ClientData.Occupation) //玄法
            //{
            //    tempProp.ExtProps[(int)ExtPropIndexes.MaxMagicV] += ((double)addVal / 100.0);
            //}
            //else if (2 == client.ClientData.Occupation) //逍遥
            //{
            //    tempProp.ExtProps[(int)ExtPropIndexes.MaxLifeV] += ((double)addVal / 100.0);
            //}

            addVal = GetAllJewelLevelOtherPercent(client.ClientData.AllJewelLevelIndex);
            for (int i = 0; i < (int)ExtPropIndexes.Max; i++)
            {
                //if ((int)ExtPropIndexes.MaxLifeV == i || (int)ExtPropIndexes.MaxMagicV == i)
                //{
                //    continue;
                //}

                tempProp.ExtProps[i] += ((double)addVal / 100.0);
            }

            //套装属性buffer加成（留给廖伟），志祥配置的表不好解析
            for (int i = 0; i < tempProp.ExtProps.Length; i++)
            {
                client.AllThingsMultipliedBuffer.AddTempExtProp(i, tempProp.ExtProps[i], 0);
            }*/
        }

        /// <summary>
        /// 判断是否符合所有隐藏属性
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool IsAllYinCangOk(GameClient client, string yinCangIDs)
        {
            if (string.IsNullOrEmpty(yinCangIDs))
            {
                return false;
            }

            int[] yinCangIDList = Global.String2IntArray(yinCangIDs);
            if (null == yinCangIDList || yinCangIDList.Length <= 0)
            {
                return false;
            }

            for (int i = 0; i < yinCangIDList.Length; i++)
            {
                if (!Global.IsYinCangOk(client, yinCangIDList[i]))
                {
                    return false;
                }
            }

            return true;
        }

        /// <summary>
        /// 判断是否符合隐藏属性
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool IsYinCangOk(GameClient client, int yinCangID)
        {
            bool result = false;
            switch (yinCangID)
            {
                case (int)YinCangIDs.QuanZi:
                    {
                        result = (client.ClientData.AllQualityIndex >= 1);
                    }
                    break;
                case (int)YinCangIDs.QuanJin:
                    {
                        result = (client.ClientData.AllQualityIndex >= 2);
                    }
                    break;
                case (int)YinCangIDs.ManXing5:
                    {
                        result = (client.ClientData.AllForgeLevelIndex >= 1);
                    }
                    break;
                case (int)YinCangIDs.ManXing7:
                    {
                        result = (client.ClientData.AllForgeLevelIndex >= 2);
                    }
                    break;
                case (int)YinCangIDs.ManXing10:
                    {
                        result = (client.ClientData.AllForgeLevelIndex >= 3);
                    }
                    break;
                case (int)YinCangIDs.ManXing13:
                    {
                        result = (client.ClientData.AllForgeLevelIndex >= 4);
                    }
                    break;
                case (int)YinCangIDs.ManXing15:
                    {
                        result = (client.ClientData.AllForgeLevelIndex >= 5);
                    }
                    break;
                case (int)YinCangIDs.BaoShi4:
                    {
                        result = (client.ClientData.AllJewelLevelIndex >= 4);
                    }
                    break;
                case (int)YinCangIDs.BaoShi5:
                    {
                        result = (client.ClientData.AllJewelLevelIndex >= 5);
                    }
                    break;
                case (int)YinCangIDs.BaoShi6:
                    {
                        result = (client.ClientData.AllJewelLevelIndex >= 6);
                    }
                    break;
                case (int)YinCangIDs.BaoShi7:
                    {
                        result = (client.ClientData.AllJewelLevelIndex >= 7);
                    }
                    break;
                default:
                    {
                    }
                    break;
            }

            return result;
        }

        #endregion 装备和宝石套装加成管理(隐藏属性)

        #region 银两减半优惠

        /// <summary>
        /// 判断需要的银两是否减半优惠
        /// </summary>
        /// <param name="needYinLiang"></param>
        /// <returns></returns>
        public static int RecalcNeedYinLiang(int needYinLiang)
        {
            int halfYinLiangPeriod = GameManager.GameConfigMgr.GetGameConfigItemInt("half_yinliang_period", 0);
            if (halfYinLiangPeriod <= 0) return needYinLiang;
            return needYinLiang / 2;
        }

        #endregion 银两减半优惠

        #region 构造角色名称

        /// <summary>
        /// 格式化角色名称
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static string FormatRoleName(GameClient client, string roleName)
        {
            return FormatRoleName2(client.ClientData, roleName);
        }

        /// <summary>
        /// 格式化角色名称
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static string FormatRoleName2(SafeClientData clientData, string roleName)
        {
            //return StringUtil.substitute(Global.GetLang("[{0}区]{1}"), clientData.ZoneID, roleName);
            return roleName;
        }

        /// <summary>
        /// 格式化角色名称
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static string FormatRoleName3(int zoneID, string roleName)
        {
            //return StringUtil.substitute(Global.GetLang("[{0}区]{1}"), zoneID, roleName);
            return roleName;
        }

        /// <summary>
        /// 格式化角色名称
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static string FormatRoleName4(GameClient client)
        {
            return FormatRoleName2(client.ClientData, client.ClientData.RoleName);
        }

        /// <summary>
        /// 格式化带区号角色名称
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static string FormatRoleNameWithZoneId(GameClient client)
        {
            return StringUtil.substitute(Global.GetLang("[{0}区]{1}"), client.ClientData.ZoneID, client.ClientData.RoleName);
        }

        #endregion 构造角色名称

        #region 格式化帮会名称

        /// <summary>
        /// 格式化帮会名称
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static string FormatBangHuiName(int zoneID, string bhName)
        {
            //return StringUtil.substitute(Global.GetLang("[{0}区]{1}"), zoneID, bhName);
            return bhName;
        }

        #endregion 格式化帮会名称

        #region 帮派管理

        /// <summary>
        /// 创建一个新的帮派需要的铜钱
        /// </summary>
        //public static int CreateBangHuiNeedTongQian = 50000;
        public static int CreateBangHuiNeedTongQian
        {
            get
            {
                string Tongqian = MUGetZhanMengParamsAt(2);
                if (Tongqian != null)
                {
                    return int.Parse(Tongqian);
                }
                else
                {
                    return 50000;
                }
            }
        }

        /// <summary>
        /// 修改帮旗名称需要的铜钱
        /// </summary>
        public static int RenameBangQiNameNeedTongQian = 500000;

        /// <summary>
        /// 加入一个新的帮派需要的角色等级
        /// </summary>
        public static int JoinBangHuiNeedLevel = 0;

        /// <summary>
        /// 创建一个新的帮派需要的角色等级
        /// </summary>
        //public static int CreateBangHuiNeedLevel = 40;
        public static int CreateBangHuiNeedLevel
        {
            get
            {
                string level = MUGetZhanMengParamsAt(1);
                if (level != null)
                {
                    return int.Parse(level);
                }
                else
                {
                    return 40;
                }
            }
        }

        /// <summary>
        /// 创建一个新的帮派需要的角色等级
        /// </summary>
        public static int CreateBangHuiNeedZhuanShengLevel
        {
            get
            {
                string ZhuanShengLevel = MUGetZhanMengParamsAt(0);
                if (ZhuanShengLevel != null)
                {
                    return int.Parse(ZhuanShengLevel);
                }
                else
                {
                    return 0;
                }
            }
        }

        /// <summary>
        /// 创建一个新的帮派需要的道具ID
        /// </summary>
        public static int CreateBangHuiNeedGoodsID
        {
            get
            {
                string DaojuID = MUGetZhanMengParamsAt(3);
                if (DaojuID != null)
                {
                    return int.Parse(DaojuID);
                }
                else
                {
                    return (int)GameManager.systemParamsList.GetParamValueIntByName("CreateBangHuiGoodsID");
                }
            }
        }

        /// <summary>
        /// 计算贡献铜钱获取帮贡的最小单位
        /// </summary>
        public static int MinDonateTongQianPerBangGong = 100000;

        /// <summary>
        /// 贡献铜钱时的最小值
        /// </summary>
        public static int MinDonateBangGongTongQian = 10000;

        /// <summary>
        /// 每日贡献铜钱帮贡的最大值
        /// </summary>
        public static int MaxDayTongQianBangGong = 5000;

        /// <summary>
        /// 每日贡献道具帮贡的最大值
        /// </summary>
        public static int MaxDayGoodsBangGong = 10000;

        /// <summary>
        /// 帮旗的最高等级
        /// </summary>
        public static int MaxBangHuiFlagLevel = 10;

        /// <summary>
        /// 插旗消耗
        /// </summary>
        public static int InstallJunQiNeedMoney = 50000;

        /// <summary>
        /// 提取舍利之源铜钱消耗
        /// </summary>
        public static int TakeSheLiZhiYuanNeedMoney = 100000;

        /// <summary>
        /// 帮会mini小数据缓存项
        /// </summary>
        public static Dictionary<int, BangHuiMiniData> DictBangHui = new Dictionary<int, BangHuiMiniData>();

        /// <summary>
        /// 帮会详细数据缓存项
        /// </summary>
        public static Dictionary<int, BangHuiDetailData> BangHuiDetailDataDict = new Dictionary<int, BangHuiDetailData>();

        /// <summary>
        /// 判断是否具有帮派
        /// </summary>
        /// <param name="roleData"></param>
        /// <returns></returns>
        public static bool IsHavingBangHui(GameClient client)
        {
            return (client.ClientData.Faction > 0 && !string.IsNullOrEmpty(client.ClientData.BHName));
        }

        /// <summary>
        /// 返回帮会Mini数据
        /// </summary>
        /// <param name="bangHuiID"></param>
        /// <returns></returns>
        public static BangHuiMiniData GetBangHuiMiniData(int bangHuiID, int serverId = GameManager.LocalServerId)
        {
            BangHuiMiniData bhData = null;
            if (DictBangHui.TryGetValue(bangHuiID, out bhData))
            {
                return bhData;
            }

            byte[] bytesData = null;
            if (TCPProcessCmdResults.RESULT_FAILED == Global.RequestToDBServer3(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool,
                (int)TCPGameServerCmds.CMD_DB_GETBANGHUIMINIDATA, string.Format("{0}", bangHuiID), out bytesData, serverId))
            {
                return null;
            }

            if (null == bytesData || bytesData.Length <= 6)
            {
                return null;
            }

            Int32 length = BitConverter.ToInt32(bytesData, 0);

            //获取帮会基础信息
            bhData = DataHelper.BytesToObject<BangHuiMiniData>(bytesData, 6, length - 2);

            if (null == bhData)
            {
                return null;
            }

            //锁定再更新
            lock (DictBangHui)
            {
                if (!DictBangHui.ContainsKey(bangHuiID))
                {
                    DictBangHui.Add(bangHuiID, bhData);
                }
            }

            return bhData;
        }

        /// <summary>
        /// 返回帮会详细数据
        /// </summary>
        /// <param name="bangHuiID"></param>
        /// <returns></returns>
        public static BangHuiDetailData GetBangHuiDetailData(int roleID, int bhid, int ServerID = GameManager.LocalServerId)
        {
            BangHuiDetailData bhData = null;
            lock (BangHuiDetailDataDict)
            {
                //if (BangHuiDetailDataDict.TryGetValue(bhid, out bhData))
                //{
                //    return bhData;
                //}

                bhData = Global.sendToDB<BangHuiDetailData, string>((int)TCPGameServerCmds.CMD_SPR_QUERYBANGHUIDETAIL, string.Format("{0}:{1}", roleID, bhid), ServerID);
                //BangHuiDetailDataDict[bhid] = bhData;
            }

            return bhData;
        }

        /// <summary>
        /// 返回帮会详细数据
        /// </summary>
        /// <param name="bangHuiID"></param>
        /// <returns></returns>
        public static int GetBangHuiLevel(GameClient client)
        {
            BangHuiDetailData bhData = null;
            lock (BangHuiDetailDataDict)
            {
                bhData = Global.sendToDB<BangHuiDetailData, string>((int)TCPGameServerCmds.CMD_SPR_QUERYBANGHUIDETAIL, string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.Faction), client.ServerId);
                if (null != bhData)
                {
                    return bhData.QiLevel;
                }
            }

            return 0;
        }

        /// <summary>
        /// 移除帮会小数据
        /// </summary>
        /// <param name="bangHuiID"></param>
        public static void RemoveBangHuiMiniData(int bangHuiID)
        {
            lock (DictBangHui)
            {
                if (DictBangHui.ContainsKey(bangHuiID))
                {
                    DictBangHui.Remove(bangHuiID);
                }
            }
        }

        public static void UpdateBangHuiMiniDataName(int banghuiid, string newName)
        {
            lock (DictBangHui)
            {
                BangHuiMiniData miniData = null;
                if (DictBangHui.TryGetValue(banghuiid, out miniData))
                {
                    miniData.BHName = newName;
                }
            }
        }

        /// <summary>
        /// 从系统参数表中获取创建战盟所需参数，参数格式：p1|p2|p3|p4
        /// </summary>
        /// <param name="idx">参数索引位置</param>
        /// <returns></returns>
        public static string MUGetZhanMengParamsAt(int idx)
        {
            string strZhanMengParams = GameManager.systemParamsList.GetParamValueByName("ZhanMengNeed");
            if (strZhanMengParams != null)
            {
                string[] aryParams = strZhanMengParams.Split('|');
                if (idx < aryParams.Length)
                {
                    return aryParams[idx];
                }
            }
            return null;
        }

        /// <summary>
        /// 根据战盟建筑类型和级别获取配置项
        /// </summary>
        /// <param name="buildType"></param>
        /// <param name="level"></param>
        /// <returns></returns>
        public static SystemXmlItem GetZhanMengBuildItem(int buildType, int level)
        {
            SystemXmlItem systemZhanMengBuildItem = null;
            foreach (var val in GameManager.SystemZhanMengBuild.SystemXmlItemDict.Values)
            {
                if (buildType == val.GetIntValue("Type") && level == val.GetIntValue("Level"))
                {
                    systemZhanMengBuildItem = val;
                    break;
                }
            }

            return systemZhanMengBuildItem;
        }

        /// <summary>
        /// 获取创建战盟时赠送资金
        /// </summary>
        public static int GetZhanMengInitCoin()
        {
            int[] arrZhanMengZiJin = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhanMengZiJin");

            if (null != arrZhanMengZiJin && arrZhanMengZiJin.Length > 0)
            {
                return arrZhanMengZiJin[0];
            }

            // 缺省赠送战盟初始资金20000
            return 20000;
        }


        /// <summary>
        /// 获取创建战盟每周消耗资金
        /// </summary>
        public static int GetZhanMengConsumptionCoin()
        {
            int[] arrZhanMengZiJin = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhanMengZiJin");

            if (null != arrZhanMengZiJin && arrZhanMengZiJin.Length > 1)
            {
                return arrZhanMengZiJin[1];
            }

            // 缺省周消耗资金10000
            return 10000;
        }

        #endregion 帮派管理

        #region 插旗管理

        /// <summary>
        /// 帮旗项到帮旗数据的转换
        /// </summary>
        /// <param name="junQiItem"></param>
        /// <returns></returns>
        public static JunQiData JunQiItem2JunQiData(JunQiItem junQiItem)
        {
            JunQiData junQiData = new JunQiData()
            {
                JunQiID = junQiItem.JunQiID,
                QiName = junQiItem.QiName,
                JunQiLevel = junQiItem.JunQiLevel,
                ZoneID = junQiItem.ZoneID,
                BHID = junQiItem.BHID,
                BHName = junQiItem.BHName,
                QiZuoNPC = junQiItem.QiZuoNPC,
                MapCode = junQiItem.MapCode,
                PosX = junQiItem.PosX,
                PosY = junQiItem.PosY,
                Direction = junQiItem.Direction,
                LifeV = junQiItem.LifeV,
                CutLifeV = junQiItem.CutLifeV,
                StartTime = junQiItem.StartTime,
                BodyCode = junQiItem.BodyCode,
                PicCode = junQiItem.PicCode,
                CurrentLifeV = junQiItem.CurrentLifeV,
            };

            return junQiData;
        }

        /// <summary>
        /// 安插帮旗
        /// </summary>
        /// <param name="client"></param>
        /// <param name="npcID"></param>
        public static void InstallJunQi(GameClient client, int npcID, SceneUIClasses sceneType = SceneUIClasses.Normal)
        {
            if (Global.GetBangHuiFightingLineID() != GameManager.ServerLineID)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                    client, StringUtil.substitute(Global.GetLang("只有从『{0}』线才能安插帮旗"), Global.GetBangHuiFightingLineID()),
                    GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                return;
            }

            if (sceneType == SceneUIClasses.LuoLanChengZhan)
            {
                //if (!GlobalEventSource4Scene.getInstance().PreInstallJunQi(client, npcID, sceneType)) { return; }
                if (!LuoLanChengZhanManager.getInstance().OnPreInstallJunQi(client, npcID))
                {
                    return;
                }
            }
            else
            {
                if (!JunQiManager.IsInLingDiZhanFightingTime())
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                        client, StringUtil.substitute(Global.GetLang("只有战盟战期间才能安插帮旗!")),
                        GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                    return;
                }

                //如果在非战斗时间段内，不允许插旗
                if (!JunQiManager.CanInstallJunQi(client))
                {
                    string mapName = Global.GetMapName(client.ClientData.MapCode);
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                        client, StringUtil.substitute(Global.GetLang("『{0}』地图上的战盟战已经结束"), mapName),
                        GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                    return;
                }

                //判断是否在指定的地图上，否则不允许安插帮旗
                SystemXmlItem systemQiZuoItem = null;
                if (!GameManager.systemQiZuoMgr.SystemXmlItemDict.TryGetValue(client.ClientData.MapCode, out systemQiZuoItem)) //非插旗的地图，不处理
                {
                    return; //不提示任何信息
                }

                //判断是否在帮会中，否则不允许安插帮旗
                if (client.ClientData.Faction <= 0)
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                        client, StringUtil.substitute(Global.GetLang("只有战盟成员才能安插帮旗!")),
                        GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                    return;
                }

                //判断是否是本帮派能安插帮旗
                //是否能够安插帮旗
                if (!JunQiManager.CanInstallJunQiNow(client.ClientData.MapCode, npcID - SpriteBaseIds.NpcBaseId, client.ClientData.Faction))
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                        client, StringUtil.substitute(Global.GetLang("非砍倒盟旗的战盟，在原有盟旗被砍倒10秒后，才能安插盟旗！")),
                        GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                    return;
                }
            }

            //先锁定互斥，防止重复安插的操作
            lock (JunQiManager.JunQiMutex)
            {
                //判断此NPC处的帮旗是否已经存在，如果是则通知角色，需要砍到后再安插
                JunQiItem junQiItem = JunQiManager.FindJunQiByNpcID(npcID - SpriteBaseIds.NpcBaseId);
                if (null != junQiItem)
                {
                    if (junQiItem.BHID != client.ClientData.Faction)
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                            client, StringUtil.substitute(Global.GetLang("只有将已经安插的其他战盟的盟旗砍倒后，才能安插自己战盟的盟旗！")),
                            GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    }

                    return;
                }

                if (sceneType == SceneUIClasses.LuoLanChengZhan)
                {
                    LuoLanChengZhanManager.getInstance().OnInstallJunQi(client, npcID);
                }
                else
                {
                    //处理扣除铜钱的操作
                    //扣除帮会库存铜钱
                    int bhZoneID = 0;
                    if (!GameManager.ClientMgr.SubBangHuiTongQian(Global._TCPManager.MySocketListener,
                        Global._TCPManager.tcpClientPool,
                        Global._TCPManager.TcpOutPacketPool,
                        client,
                        Global.InstallJunQiNeedMoney,
                        out bhZoneID))
                    {
                        GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                            client, StringUtil.substitute(Global.GetLang("战盟库存金币不足，无法安插盟旗！")),
                            GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.NoTongQian);

                        return;
                    }

                    //处理获取帮旗名称的操作
                    string junQiName = JunQiManager.GetJunQiNameByBHID(client.ClientData.Faction);

                    //处理获取帮旗级别的操作
                    int junQiLevel = JunQiManager.GetJunQiLevelByBHID(client.ClientData.Faction);

                    //通知显示帮旗
                    JunQiManager.ProcessNewJunQi(
                        Global._TCPManager.MySocketListener,
                        Global._TCPManager.TcpOutPacketPool,
                        client.ClientData.MapCode,
                        client.ClientData.Faction,
                        bhZoneID,
                        client.ClientData.BHName,
                        npcID - SpriteBaseIds.NpcBaseId,
                        junQiName,
                        junQiLevel,
                        sceneType);

                    //通知地图变动信息
                    JunQiManager.NotifyAllLingDiMapInfoData(client.ClientData.MapCode);

                    Global.BroadcastBangHuiMsg(-1, client.ClientData.Faction,
                        StringUtil.substitute(Global.GetLang("本战盟成员【{0}】成功在{1}『{2}』安插了本战盟旗帜，可喜可贺"),
                        Global.FormatRoleName(client, client.ClientData.RoleName),
                        Global.GetServerLineName2(),
                        Global.GetMapName(client.ClientData.MapCode)),
                        true, GameInfoTypeIndexes.Normal, ShowGameInfoTypes.OnlySysHint);
                }
            }
        }

        /// <summary>
        /// 为领地更新帮会ID信息
        /// </summary>
        /// <param name="lingDiID"></param>
        /// <param name="bhid"></param>
        public static void UpdateLingDiForBH(int lingDiID, int bhid)
        {
            //为领地更新帮会ID信息
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATELINGDIFORBH,
                string.Format("{0}:{1}", lingDiID, bhid),
                null, GameManager.LocalServerId);

            //使用内部GM命令通知更新领地信息
            //通知GameServer同步领地帮会分布
            JunQiManager.NotifySyncBangHuiLingDiItemsDict();
        }

        /// <summary>
        /// 判断扬州城中打坐的经验和灵力的加成比例
        /// </summary>
        /// <param name="client"></param>
        /// <param name="monster"></param>
        /// <returns></returns>
        public static void ProcessYangZhouExpAndLingLi(GameClient client, out double addExperience, out double addLingLi)
        {
            addExperience = 0.0;
            addLingLi = 0.0;

            //如果不是在扬州城，则不添加
            if (client.ClientData.MapCode != GameManager.MainMapCode)
            {
                return;
            }

            if (client.ClientData.Faction <= 0) //不在帮会中
            {
                return;
            }

            int lingDiID = (int)LingDiIDs.HuangCheng;

            //判断是否占用了领地所辖的地图
            if (client.ClientData.Faction != JunQiManager.GetBHIDByLingDiID(lingDiID))
            {
                return;
            }

            addExperience = 0.20;
            addLingLi = 0.30;
        }

        /// <summary>
        /// 判断怪物所在的领地所辖的地图的经验加成比例
        /// </summary>
        /// <param name="client"></param>
        /// <param name="monster"></param>
        /// <returns></returns>
        public static double ProcessLingDiMonsterExperience(GameClient client, Monster monster)
        {
            double ret = 0.0;
            if (client.ClientData.Faction <= 0) //不在帮会中
            {
                return 0.0;
            }

            /*SystemXmlItem systemQiZhiItem = null;
            if (!GameManager.systemLingQiMapQiZhiMgr.SystemXmlItemDict.TryGetValue(client.ClientData.MapCode, out systemQiZhiItem))
            {
                return ret;
            }

            int lingDiID = (int)systemQiZhiItem.GetIntValue("LingDiID");
            if (lingDiID <= 0) return ret;*/

            int lingDiID = (int)LingDiIDs.YouZhou;

            //判断是否占用了领地所辖的地图
            if (client.ClientData.Faction != JunQiManager.GetBHIDByLingDiID(lingDiID))
            {
                return ret;
            }

            int junQiLevel = JunQiManager.GetJunQiLevelByBHID(client.ClientData.Faction);
            if (junQiLevel <= 0) return ret;

            if (1 == junQiLevel)
            {
                ret = 0.05;
            }
            else if (2 == junQiLevel)
            {
                ret = 0.15;
            }
            else if (3 == junQiLevel)
            {
                ret = 0.30;
            }
            else if (4 == junQiLevel)
            {
                ret = 0.50;
            }

            return ret;
        }

        #endregion 插旗管理

        #region 线路相关调度

        /// <summary>
        /// 帮会战线路ID
        /// </summary>
        public static int GetBangHuiFightingLineID()
        {
            return (int)GameManager.systemParamsList.GetParamValueIntByName("BangHuiFightingLineID");
        }

        #endregion 线路相关调度

        #region 皇城战相关

        /// <summary>
        /// 提取舍利之源
        /// </summary>
        /// <param name="client"></param>
        /// <param name="npcID"></param>
        public static void TakeSheLiZhiYuan(GameClient client, int npcID)
        {
            if ((int)GameManager.systemParamsList.GetParamValueIntByName("SheLiZhiYuanNPCID") != npcID - SpriteBaseIds.NpcBaseId)
            {
                return; //确认NPCID，否则禁止操作
            }

            //确认只有帮主才能提取舍利之源
            //判断是否在帮会中，否则不允许安插帮旗
            if (client.ClientData.Faction <= 0 || client.ClientData.BHZhiWu != 1)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                    client, StringUtil.substitute(Global.GetLang("只有战盟首领才能提取舍利之源!")),
                    GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                return;
            }

            if (Global.GetBangHuiFightingLineID() != GameManager.ServerLineID)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                    client, StringUtil.substitute(Global.GetLang("只有从『{0}』线才能提取舍利之源"), Global.GetBangHuiFightingLineID()),
                    GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                return;
            }

            if (!HuangChengManager.IsInHuangChengFightingTime())
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                    client, StringUtil.substitute(Global.GetLang("只有皇城战期间才能提取舍利之源!")),
                    GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                return;
            }

            if (HuangChengManager.IsHuangChengZhanOver())
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                    client, StringUtil.substitute(Global.GetLang("皇城战已经结束!")),
                    GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                return;
            }

            if (null == JunQiManager.GetAnyLingDiItemDataByBHID(client.ClientData.Faction))
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                    client, StringUtil.substitute(Global.GetLang("只有拥有领地的战盟首领才可以提取舍利之源!")),
                    GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                return;
            }

            int oldHuangDiRoleID = 0;

            //先锁定互斥，防止重复安插的操作
            lock (HuangChengManager.SheLiZhiYuanMutex)
            {
                //如果舍利之源在其他角色身上，不能提取舍利之源
                if (!HuangChengManager.CanTakeSheLiZhiYuan())
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                        client, StringUtil.substitute(Global.GetLang("舍利之源已经被其他角色提取")),
                        GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

                    return;
                }

                //处理扣除铜钱的操作
                //扣除帮会库存铜钱
                int bhZoneID = 0;
                if (!GameManager.ClientMgr.SubBangHuiTongQian(Global._TCPManager.MySocketListener,
                    Global._TCPManager.tcpClientPool,
                    Global._TCPManager.TcpOutPacketPool,
                    client,
                    Global.TakeSheLiZhiYuanNeedMoney,
                    out bhZoneID))
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                        client, StringUtil.substitute(Global.GetLang("战盟库存金币不足，提取舍利之源需要【{0}万】金币！"), Global.TakeSheLiZhiYuanNeedMoney / 10000),
                        GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.NoTongQian);

                    return;
                }

                //处理提取舍利之源的操作
                oldHuangDiRoleID = HuangChengManager.ProcessTakeSheLiZhiYuan(client.ClientData.RoleID,
                    Global.FormatRoleName(client, client.ClientData.RoleName),
                    client.ClientData.BHName);
            }

            /*
            if (HuangChengManager.GetHuangDiRoleID() == client.ClientData.RoleID)
            {
                //更新BufferData
                double[] actionParams = new double[1];
                actionParams[0] = 0;
                Global.UpdateBufferData(client, BufferItemTypes.SheLiZhiYuan, actionParams, 1);
            }
            */

            //通知在线的所有人(不限制地图)皇帝角色ID变更消息
            GameManager.ClientMgr.NotifyAllChgHuangDiRoleIDMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, oldHuangDiRoleID, HuangChengManager.GetHuangDiRoleID());

            //通知地图数据变更信息
            HuangChengManager.NotifyAllHuangChengMapInfoData();
        }

        /// <summary>
        /// 死亡后，要送回扬州的半径范围
        /// </summary>
        public static int MaxRadiusMustGoToYangZhou = 500;

        /// <summary>
        /// 皇城的地图编号
        /// </summary>
        private static int HuangChengMapCode = -1;

        /// <summary>
        /// 重置皇城地图编号
        /// </summary>
        public static void ResetHuangChengMapCode()
        {
            HuangChengMapCode = -1;
        }

        /// <summary>
        /// 获取皇城的地图编号
        /// </summary>
        /// <returns></returns>
        public static int GetHuangChengMapCode()
        {
            if (HuangChengMapCode < 0)
            {
                HuangChengMapCode = (int)GameManager.systemParamsList.GetParamValueIntByName("HuangChengMapCode");
            }

            return HuangChengMapCode;
        }

        /// <summary>
        /// 是否是皇城
        /// </summary>
        /// <param name="mapCode"></param>
        /// <returns></returns>
        public static bool IsHuangChengMapCode(int mapCode)
        {
            return (Global.GetHuangChengMapCode() == mapCode);
        }

        /// <summary>
        /// 获取换成的皇城传送点和复活点
        /// </summary>
        /// <param name="mapCode"></param>
        /// <returns></returns>
        public static void GetHuangChengMapPos(GameClient client, ref int defaultBirthPosX, ref int defaultBirthPosY, ref int defaultBirthRadius)
        {
            if (client.ClientData.Faction <= 0)
            {
                return;
            }

            //获取指定帮会占领的ID最小的领地信息
            BangHuiLingDiItemData bangHuiLingDiItemData = JunQiManager.GetFirstLingDiItemDataByBHID(client.ClientData.Faction);
            if (null == bangHuiLingDiItemData) return;

            SystemXmlItem systemHuanChengFuHuoItem = null;
            if (!GameManager.systemHuangChengFuHuoMgr.SystemXmlItemDict.TryGetValue(bangHuiLingDiItemData.LingDiID, out systemHuanChengFuHuoItem))
            {
                return;
            }

            defaultBirthPosX = systemHuanChengFuHuoItem.GetIntValue("PosX");
            defaultBirthPosY = systemHuanChengFuHuoItem.GetIntValue("PosY");
            defaultBirthRadius = systemHuanChengFuHuoItem.GetIntValue("BirthRadius");
        }

        /// <summary>
        /// 判断是否在皇城内能复活
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool CanHuangChengAlive(GameClient client)
        {
            if (client.ClientData.Faction <= 0)
            {
                return false;
            }

            //获取指定帮会占领的ID最小的领地信息
            BangHuiLingDiItemData bangHuiLingDiItemData = JunQiManager.GetFirstLingDiItemDataByBHID(client.ClientData.Faction);
            if (null == bangHuiLingDiItemData) return false;

            SystemXmlItem systemHuanChengFuHuoItem = null;
            if (!GameManager.systemHuangChengFuHuoMgr.SystemXmlItemDict.TryGetValue(bangHuiLingDiItemData.LingDiID, out systemHuanChengFuHuoItem))
            {
                return false;
            }

            int defaultBirthPosX = systemHuanChengFuHuoItem.GetIntValue("PosX");
            int defaultBirthPosY = systemHuanChengFuHuoItem.GetIntValue("PosY");

            //判断如果自己在复活点500像素范围内，则回扬州城复活
            if (Global.InCircle(new Point(client.ClientData.PosX, client.ClientData.PosY), new Point(defaultBirthPosX, defaultBirthPosY), Global.MaxRadiusMustGoToYangZhou))
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// 判断是否在皇城内攻击
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool CanHuangChengAttack(GameClient client)
        {
            if (client.ClientData.Faction <= 0)
            {
                return false;
            }

            //获取指定帮会占领的ID最小的领地信息
            BangHuiLingDiItemData bangHuiLingDiItemData = JunQiManager.GetAnyLingDiItemDataByBHID(client.ClientData.Faction);
            if (null == bangHuiLingDiItemData) return false;
            return true;
        }

        /// <summary>
        /// 广播皇城战开始
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastHuangChengBattleStart()
        {
            string broadCastMsg = StringUtil.substitute(Global.GetLang("火爆的罗兰城战活动开启，谁能成为下一任罗兰城主，让我们拭目以待。"));

            //播放用户行为消息
            Global.BroadcastRoleActionMsg(null, RoleActionsMsgTypes.Bulletin, broadCastMsg, true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.SysHintAndChatBox);
        }

        #endregion 皇城战相关

        #region 决战沙城-王城争霸相关-王城战

        /// <summary>
        /// 判断是否在沙城地图,且在往常争霸战斗中
        /// </summary>
        /// <returns></returns>
        public static Boolean IsInWangChengBattle(GameClient client)
        {
            int wangChengMapCode = (int)GameManager.systemParamsList.GetParamValueIntByName("WangChengMapCode");//沙城地图
            int palaceMapCode = (int)GameManager.systemParamsList.GetParamValueIntByName("PalaceMapCode");//宫殿地图

            if ((client.ClientData.MapCode == wangChengMapCode || client.ClientData.MapCode == palaceMapCode) && Global.IsInWangChengBattleTime())
            {
                return true;
            }
            return false;
        }

        /// <summary>
        /// 判断是否在王城战斗时间
        /// </summary>
        /// <returns></returns>
        public static Boolean IsInWangChengBattleTime()
        {
            return true;
        }

        /// <summary>
        /// 皇城的地图编号
        /// </summary>
        private static int HuangGongMapCode = -1;

        /// <summary>
        /// 重置皇宫地图编号
        /// </summary>
        public static void ResetHuangGongMapCode()
        {
            HuangGongMapCode = -1;
        }

        /// <summary>
        /// 获取皇宫的地图编号
        /// </summary>
        /// <returns></returns>
        public static int GetHuangGongMapCode()
        {
            if (HuangGongMapCode < 0)
            {
                HuangGongMapCode = (int)GameManager.systemParamsList.GetParamValueIntByName("PalaceMapCode");
            }

            return HuangGongMapCode;
        }

        /// <summary>
        /// 获取王城的地图编号
        /// </summary>
        /// <returns></returns>
        public static int GetWangChengMapCode()
        {
            return (int)GameManager.systemParamsList.GetParamValueIntByName("WangChengMapCode");
        }

        /// <summary>
        /// 是否是皇宫
        /// </summary>
        /// <param name="mapCode"></param>
        /// <returns></returns>
        public static bool IsHuangGongMapCode(int mapCode)
        {
            return (Global.GetHuangGongMapCode() == mapCode);
        }

        /// <summary>
        /// 上次进行数据更新 的天
        /// </summary>
        private static int LastUpdateDayOfYear = -1;

        /// <summary>
        /// 根据数据库内部配置文件动态更改王城争夺战周日期列表
        /// 这个函数重新加载领地数据时执行一次， 此外每天执行一次
        /// </summary>
        public static void UpdateWangChengZhanWeekDays(bool force = false)
        {
            if (LastUpdateDayOfYear == TimeUtil.NowDateTime().DayOfYear && !force)
            {
                return;
            }

            //记录上次更新时间
            LastUpdateDayOfYear = TimeUtil.NowDateTime().DayOfYear;

            int day = TimeUtil.NowDateTime().DayOfYear;
            if (WangChengManager.IsExistCityWarToday())
            {
                int[] weekDays = new int[1];
                weekDays[0] = (int)TimeUtil.NowDateTime().DayOfWeek;

                //重新赋值，这样就可以采用原来的代码方式
                WangChengManager.UpdateWangChengZhanWeekDays(weekDays);
            }
            else
            {
                //如果今天没有举行王城争霸，则自动设置一下上次的帮会为胜者
                HuodongCachingMgr.UpdateHeFuWCKingBHID(WangChengManager.GetWangZuBHid());
            }
        }

        /// <summary>
        /// 上次进行数据更新 的天
        /// </summary>
        private static int LastUpdateLuoLanChengZhanDayOfYear = -1;

        /// <summary>
        /// 根据数据库内部配置文件动态更改王城争夺战周日期列表
        /// 这个函数重新加载领地数据时执行一次， 此外每天执行一次
        /// </summary>
        public static void UpdateLuoLanChengZhanWeekDays(bool force = false)
        {
            if (LastUpdateLuoLanChengZhanDayOfYear == TimeUtil.NowDateTime().DayOfYear && !force)
            {
                return;
            }

            //记录上次更新时间
            LastUpdateLuoLanChengZhanDayOfYear = TimeUtil.NowDateTime().DayOfYear;

            if (!LuoLanChengZhanManager.getInstance().IsExistCityWarToday())
            {
                //如果今天没有举行王城争霸，则自动设置一下上次的帮会为胜者
                HuodongCachingMgr.UpdateHeFuWCKingBHID(LuoLanChengZhanManager.getInstance().GetWangZuBHid());
            }
        }

        #endregion 决战沙城-王城争霸相关-王城战

        #region 大乱斗处理---->隋唐争霸赛 炎黄战场

        /// <summary>
        /// 判断是否在隋唐争霸赛地图
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool IsBattleMap(GameClient client)
        {
            return (client.ClientData.MapCode == GameManager.BattleMgr.BattleMapCode);

        }

        /// <summary>
        /// 是否在大乱斗中 理论上应该是 1.在隋唐争霸赛地图  2.在战斗时间且在战斗中
        /// 简单进行是否在地图就行
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool InBattling(GameClient client)
        {
            return IsBattleMap(client);
        }

        /// <summary>
        /// 是否是大乱斗活动禁止使用的物品
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static bool IsBattleDisableGoodsID(int goodsID)
        {
            string goodsIDStr = goodsID.ToString();

            /// 禁止使用的物品ID字符串
            return (-1 != GameManager.BattleMgr.BattleDisableGoodsIDs.IndexOf(goodsIDStr));
        }

        /// <summary>
        /// 增加大乱斗中杀死的敌人的数量
        /// </summary>
        /// <param name="client"></param>
        public static void AddBattleKilledNum(GameClient client, Object victim, int personalJiFen = BattleManager.ConstJiFenByKillRole, int zhenYingJiFen = BattleManager.ConstJiFenByKillRole)
        {
            // 阵营战场改造 -- 积分计算公式改变了 [12/23/2013 LiaoWei]
            // 2014-7-21 积分规则修改

            //如果是大乱斗，则不写入数据库
            if (client.ClientData.MapCode != GameManager.BattleMgr.BattleMapCode)
            {
                return;
            }

            // 处理怪被杀 [12/23/2013 LiaoWei] => 这里不再区分怪物和角色,由调用者做区分
            //if (null != victim && null != (victim as Monster))
            {
                client.ClientData.BattleKilledNum += personalJiFen;
                GameManager.BattleMgr.UpdateRolePointInfo(client);

                if ((int)BattleWhichSides.Xian == client.ClientData.BattleWhichSide)
                {
                    GameManager.BattleMgr.SuiKilledNum += zhenYingJiFen;
                }
                else if ((int)BattleWhichSides.Mo == client.ClientData.BattleWhichSide)
                {
                    GameManager.BattleMgr.TangKilledNum += zhenYingJiFen;
                }
            }

#if replaced_20140721
            GameClient theVictimClient = null;
            //对于被杀者,也将总体积分情况更新一下
            if (null != victim && null != (victim as GameClient))
            {
                theVictimClient = (victim as GameClient);

                // 杀死的是玩家 -- 个人积分=(转生等级*40+角色等级/10)
                int nPoint = theVictimClient.ClientData.ChangeLifeCount * 40 + theVictimClient.ClientData.Level / 10;

                client.ClientData.BattleKilledNum += nPoint;

                // -- 阵营积分=(转生等级*40+角色等级/10)
                if ((int)BattleWhichSides.Xian == client.ClientData.BattleWhichSide)
                {
                    GameManager.BattleMgr.SuiKilledNum += nPoint;
                }
                else if ((int)BattleWhichSides.Mo == client.ClientData.BattleWhichSide)
                {
                    GameManager.BattleMgr.TangKilledNum += nPoint;
                }
                /*
                int victimScore = (int)(personalJiFen / 5);

                theVictimClient.ClientData.BattleKilledNum += victimScore;

                if ((int)BattleWhichSides.Xian == theVictimClient.ClientData.BattleWhichSide)
                {
                    GameManager.BattleMgr.SuiKilledNum += victimScore;
                }
                else if ((int)BattleWhichSides.Mo == theVictimClient.ClientData.BattleWhichSide)
                {
                    GameManager.BattleMgr.TangKilledNum += victimScore;
                }
                */
            }
#else
            GameClient theVictimClient = null;
            //对于被杀者,也有较低的积分奖励
            if (null != victim && null != (theVictimClient = victim as GameClient))
            {
                theVictimClient.ClientData.BattleKilledNum += BattleManager.ConstJiFenByKilled;
                GameManager.BattleMgr.UpdateRolePointInfo(theVictimClient);

                // 保存数据
                if (theVictimClient.ClientData.BattleKilledNum > theVictimClient.ClientData.CampBattleTotalPoint)
                    theVictimClient.ClientData.CampBattleTotalPoint = theVictimClient.ClientData.BattleKilledNum;

                if (theVictimClient.ClientData.BattleKilledNum > BattleManager.BattleMaxPoint)
                    BattleManager.SetTotalPointInfo(theVictimClient.ClientData.RoleName, theVictimClient.ClientData.BattleKilledNum);

                if (theVictimClient.ClientData.BattleKilledNum > BattleManager.BattleMaxPointNow)
                    BattleManager.BattleMaxPointNow = theVictimClient.ClientData.BattleKilledNum;
            }
#endif
            // 保存数据
            if (client.ClientData.BattleKilledNum > client.ClientData.CampBattleTotalPoint)
                client.ClientData.CampBattleTotalPoint = client.ClientData.BattleKilledNum;

            if (client.ClientData.BattleKilledNum > BattleManager.BattleMaxPoint)
                BattleManager.SetTotalPointInfo(client.ClientData.RoleName, client.ClientData.BattleKilledNum);

            if (client.ClientData.BattleKilledNum > BattleManager.BattleMaxPointNow)
                BattleManager.BattleMaxPointNow = client.ClientData.BattleKilledNum;

            // 通知被杀者
            if (theVictimClient != null)
                GameManager.ClientMgr.NotifyBattleKilledNumCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, theVictimClient, GameManager.BattleMgr.TangKilledNum, GameManager.BattleMgr.SuiKilledNum);

            //通知角色大乱斗中杀人个数的指令,仅仅通知自己
            GameManager.ClientMgr.NotifyBattleKilledNumCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, GameManager.BattleMgr.TangKilledNum, GameManager.BattleMgr.SuiKilledNum);

            GameManager.BattleMgr.AllKilledRoleNum += 1;
        }

        /// <summary>
        /// 角斗场称号的最长时间(毫秒),默认24小时
        /// </summary>
        public static long MaxBattleNameTicks = (24L * 60L * 60L * 1000L);

        /// <summary>
        /// 是否是有角斗场称号
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool HavingBattleName(GameClient client)
        {
            if (client.ClientData.BattleNameIndex <= 0)
            {
                return false;
            }

            long ticks = TimeUtil.NOW();
            if (ticks - client.ClientData.BattleNameStart < Global.MaxBattleNameTicks)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 角色进入大乱斗地图
        /// </summary>
        /// <param name="client"></param>
        public static void ClientEnterBattle(GameClient client)
        {
            if (GameManager.BattleMgr.BattleMapCode < 0)
            {
                //通知角色大乱斗的指令信息
                GameManager.ClientMgr.NotifyBattleCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, -1, (int)BattleCmds.Enter, GameManager.BattleMgr.GetBattlingState(), GameManager.BattleMgr.GetBattlingLeftSecs());
                return;
            }

            if (GameManager.BattleMgr.BattleServerLineID != GameManager.ServerLineID)
            {
                //通知角色大乱斗的指令信息
                GameManager.ClientMgr.NotifyBattleCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, -1000 - GameManager.BattleMgr.BattleServerLineID, (int)BattleCmds.Enter, GameManager.BattleMgr.GetBattlingState(), GameManager.BattleMgr.GetBattlingLeftSecs());
                return;
            }

            // 判断玩家转生级别
            if (0 != Global.AvalidLevel(client, GameManager.BattleMgr.NeedMinChangeLev, GameManager.BattleMgr.AllowMinLevel, -1, -1))
            {
                //通知角色大乱斗的指令信息
                GameManager.ClientMgr.NotifyBattleCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, -1001 - GameManager.BattleMgr.BattleServerLineID, (int)BattleCmds.Enter, GameManager.BattleMgr.GetBattlingState(), GameManager.BattleMgr.GetBattlingLeftSecs());
                return;
            }

            //判断是否还允许进入
            if (!GameManager.BattleMgr.AllowEnterMap)
            {
                //通知角色大乱斗的指令信息
                GameManager.ClientMgr.NotifyBattleCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, -2, (int)BattleCmds.Enter, GameManager.BattleMgr.GetBattlingState(), GameManager.BattleMgr.GetBattlingLeftSecs());
                return;
            }

            //判断是否已经到最大人数限制
            if (!GameManager.BattleMgr.ClientEnter())
            {
                //通知角色大乱斗的指令信息
                GameManager.ClientMgr.NotifyBattleCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, -3, (int)BattleCmds.Enter, GameManager.BattleMgr.GetBattlingState(), GameManager.BattleMgr.GetBattlingLeftSecs());
                return;
            }

            Global.GetLastBattleSideInfo(client);
            if ((int)BattleWhichSides.Xian == client.ClientData.BattleWhichSide)
            {
                GameManager.BattleMgr.SuiClientCount++;
            }
            else
            {
                GameManager.BattleMgr.TangClientCount++;
            }

            //通知角斗场阵营的信息变更
            GameManager.ClientMgr.NotifyRoleBattleSideInfo(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

            //清空上次的大乱斗计数器
            client.ClientData.BattleKilledNum = 0;

            int toMapCode = GameManager.BattleMgr.BattleMapCode;
            GameMap gameMap = null;
            if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
            {
                GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                    client, toMapCode, -1, -1, -1);

                //通知角色大乱斗的指令信息
                GameManager.ClientMgr.NotifyBattleCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, 0, (int)BattleCmds.Enter, GameManager.BattleMgr.GetBattlingState(), GameManager.BattleMgr.GetBattlingLeftSecs());
            }

            //通知角斗场阵营的信息变更
            GameManager.ClientMgr.NotifyRoleBattleSideInfo(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

            //通知角色大乱斗中杀人个数的指令,仅仅通知自己
            GameManager.ClientMgr.NotifyBattleKilledNumCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, GameManager.BattleMgr.TangKilledNum, GameManager.BattleMgr.SuiKilledNum);

            //通知阵营战中的Top5排行榜
            GameManager.BattleMgr.SendScoreInfoListToClient(client);

            // 每日活跃
            DailyActiveManager.ProcessCompleteDailyActivityForDailyActive(client, (int)SpecialActivityTypes.CampBattle);

            //存盘阵营战
            Global.UpdateDayActivityEnterCountToDB(client, client.ClientData.RoleID, TimeUtil.NowDateTime().DayOfYear, (int)SpecialActivityTypes.CampBattle, 1);

            // 通知人员数量 [1/20/2014 LiaoWei]
            //string strcmd = string.Format("{0}:{1}", GameManager.BattleMgr.SuiClientCount, GameManager.BattleMgr.TangClientCount);

            //GameManager.ClientMgr.SendToClient(client, strcmd, (int)TCPGameServerCmds.CMD_SPR_BATTLEPLAYERNUMNOTIFY);

            //GameManager.ClientMgr.NotifyRoleBattlePlayerSideNumberEndInfo(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, toMapCode, GameManager.BattleMgr.SuiClientCount, GameManager.BattleMgr.TangClientCount);

            //通知角斗场开始的人数和当前剩余的人数
            //GameManager.ClientMgr.NotifyRoleBattleRoleInfo(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
            //GameManager.BattleMgr.BattleMapCode, GameManager.BattleMgr.SuiClientCount, GameManager.BattleMgr.TangClientCount);
        }

        /// <summary>
        /// 获取大乱斗的复活点
        /// </summary>
        /// <param name="mapCode"></param>
        /// <returns></returns>
        public static void GetBattleMapPos(GameClient client, ref int defaultBirthPosX, ref int defaultBirthPosY, ref int defaultBirthRadius)
        {
            // 前面逻辑已经保证了势必是 1 或者 2 [12/28/2013 LiaoWei]
            //int sideID = Global.GMax(1, client.ClientData.BattleWhichSide);
            //sideID = Global.GMin(1, client.ClientData.BattleWhichSide);

            int sideID = client.ClientData.BattleWhichSide;

            SystemXmlItem systemXmlItem = null;
            if (!GameManager.systemBattleRebirthMgr.SystemXmlItemDict.TryGetValue(sideID, out systemXmlItem))
            {
                return;
            }

            defaultBirthPosX = systemXmlItem.GetIntValue("PosX");
            defaultBirthPosY = systemXmlItem.GetIntValue("PosY");
            defaultBirthRadius = systemXmlItem.GetIntValue("BirthRadius");
        }

        /// <summary>
        /// 是否能否重新进入大乱斗
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool CanReEnterBattleMap(int roleID)
        {
            long ticks = TimeUtil.NOW();
            long lastTicks = GameManager.BattleMgr.GetRoleLeaveTicks(roleID);
            if (ticks - lastTicks >= (200 * 60 * 1000)) //感觉这个逻辑可能引起积分和排名相关的问题,不限保留时间了
            {
                return false;
            }

            if (GameManager.BattleMgr.GetBattlingState() < (int)BattleStates.PublishMsg ||
                    GameManager.BattleMgr.GetBattlingState() >= (int)BattleStates.EndFight)
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// 重新进入(切换地图时)时,获取上次的所属阵营信息,并视人数情况决定是否重新分配
        /// </summary>
        /// <param name="client"></param>
        public static void GetLastBattleSideInfo(GameClient client)
        {
            if (client.ClientData.BattleWhichSide == 1 || client.ClientData.BattleWhichSide == 2)
            {
                return;
            }

            int sideID = GameManager.BattleMgr.GetRoleLeaveSideID(client.ClientData.RoleID);

            //加一个锁，防止出现线程同步问题
            lock (GameManager.BattleMgr.ExternalMutex)
            {
                //进入隋唐战场先采用随机方式，以后再考虑调回来
                //int sideID = Global.GetRandomNumber(0, 2);
                if (GameManager.BattleMgr.SuiClientCount == GameManager.BattleMgr.TangClientCount)
                {
                    if (sideID <= 0)
                    {
                        sideID = Global.GetRandomNumber(1, 3);
                    }
                }
                else if (GameManager.BattleMgr.SuiClientCount < GameManager.BattleMgr.TangClientCount)
                {
                    sideID = (int)BattleWhichSides.Xian;
                }
                else
                {
                    sideID = (int)BattleWhichSides.Mo;
                }
            }

            //大乱斗中的阵营ID
            client.ClientData.BattleWhichSide = sideID;
        }

        /// <summary>
        /// 重新获取大乱斗的信息
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static void GetLastBattleInfo(GameClient client)
        {
            if (client.ClientData.MapCode != GameManager.BattleMgr.BattleMapCode)
            {
                return;
            }

            if (!Global.CanReEnterBattleMap(client.ClientData.RoleID))
            {
                return;
            }

            int jiFen = GameManager.BattleMgr.GetRoleLeaveJiFen(client.ClientData.RoleID);
            client.ClientData.BattleKilledNum = jiFen;
            if ((int)BattleWhichSides.Xian == client.ClientData.BattleWhichSide)
            {
                GameManager.BattleMgr.SuiClientCount++;
            }
            else
            {
                GameManager.BattleMgr.TangClientCount++;
            }

            //通知角色大乱斗的指令信息
            GameManager.ClientMgr.NotifyBattleCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, 0, (int)BattleCmds.Enter, GameManager.BattleMgr.GetBattlingState(), GameManager.BattleMgr.GetBattlingLeftSecs());
            //通知角斗场阵营的信息变更 【同时通知九宫格内部的其他人,包括自己】
            GameManager.ClientMgr.NotifyRoleBattleSideInfo(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
            //通知角色大乱斗中杀人个数的指令
            GameManager.ClientMgr.NotifyBattleKilledNumCmd(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, GameManager.BattleMgr.TangKilledNum, GameManager.BattleMgr.SuiKilledNum);
            //更新玩家份数信息同时检查是否需要刷新Top5排行榜
            GameManager.BattleMgr.UpdateRolePointInfo(client);
            //通知阵营战中的Top5排行榜
            GameManager.BattleMgr.SendScoreInfoListToClient(client);
        }

        /// <summary>
        /// 返回仙魔战场的阵营名称
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static String GetBattleZhenYing(GameClient client)
        {
            if ((int)BattleWhichSides.Xian == client.ClientData.BattleWhichSide)
            {
                return Global.GetLang("教团");
            }

            return Global.GetLang("联盟");
        }

        #endregion 大乱斗处理

        #region 列表随机排序

        /// <summary>   
        /// 对List进行随机排序   
        /// </summary>   
        /// <param name="ListT"></param>   
        /// <returns></returns>   
        public static List<T> RandomSortList<T>(List<T> ListT)
        {
            List<T> newList = new List<T>();
            foreach (T item in ListT)
            {
                int index = Global.GetRandomNumber(0, newList.Count + 1);
                newList.Insert(index, item);
            }
            return newList;
        }

        /// <summary>
        /// 合并列表
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="ListT1"></param>
        /// <param name="ListT2"></param>
        /// <returns></returns>
        public static List<T> MerageList<T>(List<T> toListT, List<T> fromListT)
        {
            for (int i = 0; i < fromListT.Count; i++)
            {
                if (toListT.IndexOf(fromListT[i]) < 0)
                {
                    toListT.Add(fromListT[i]);
                }
            }

            return toListT;
        }

        #endregion 列表随机排序

        #region 杨公宝库管理

        /// <summary>
        /// 开启宝库后，可以免费刷新的次数
        /// </summary>
        public static int MaxFreeRefreshNum = 3;

        /// <summary>
        /// 开启宝库后，可以选宝的次数
        /// </summary>
        public static int MaxClickYangGongBKNum = 4;

        /// <summary>
        /// 根据点击选宝的次数来计算所需要的昆仑镜
        /// </summary>
        /// <param name="clickNum"></param>
        /// <returns></returns>
        public static int CalcNeedKunLungJingNum(int clickNum)
        {
            if (clickNum <= 0)
            {
                return 0;
            }

            return (int)Math.Pow(2, clickNum);
        }

        #endregion 杨公宝库管理

        #region 奇珍阁管理

        /// <summary>
        /// 每次刷新奇珍阁的物品需要消耗的元宝
        /// </summary>
        public static int MaxNeedYuanBaoPerRefresh = 100;

        /// <summary>
        /// 每次刷新奇珍阁的物品的个数
        /// </summary>
        public static int MaxNumPerRefreshQiZhenGe = 4;

        #endregion 奇珍阁管理

        #region 坐骑快速强化

        /// <summary>
        /// 快速强化坐骑需要的银两
        /// </summary>
        public static int QuickHorseExtPropNeedYinLiang = 1000;

        #endregion 坐骑快速强化

        #region 装备快速强化(提品)

        /// <summary>
        /// 快速提成紫色，需要的银两
        /// </summary>
        public static int QuickEnchanceToPurpleNeedYinLiang = 500;

        /// <summary>
        /// 快速提成紫色，需要的银两
        /// </summary>
        public static int QuickEnchanceToGoldNeedYinLiang = 1000;

        /// <summary>
        /// 开始快速提品
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static bool StartQuickEnchance(GameClient client, GoodsData goodsData)
        {
            return true;
        }

        #endregion 装备快速强化(提品)

        #region 装备快速锻造(升星)

        /// <summary>
        /// 快速锻造，需要的银两
        /// </summary>
        public static int QuickForgeToNextLevelNeedYinLiang = 500;

        /// <summary>
        /// 开始快速锻造
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static bool StartQuickForge(GameClient client, GoodsData goodsData)
        {
            return true;
        }

        #endregion 装备快速锻造(升星)

        #region 册封和废黜皇后相关

        /// <summary>
        /// 更新角色的皇后状态[代码注释后可以防外挂]
        /// </summary>
        /// <param name="client"></param>
        /// <param name="huangHou"></param>
        public static void UpdateRoleHuangHou(GameClient client, int huangHou, string huangDiRoleName)
        {
            /*
            if (client.ClientData.HuangHou == huangHou) return;
            client.ClientData.HuangHou = huangHou;

            if (0 == huangHou) //废黜皇后
            {
                //更新BufferData
                Global.RemoveBufferData(client, (int)BufferItemTypes.DiWanZhiYou);

                //皇后状态变更消息
                GameManager.ClientMgr.NotifyChgHuangHou(Global._TCPManager.MySocketListener,
                    Global._TCPManager.TcpOutPacketPool, client);

                //皇帝废黜皇妃的提示
                Global.BroadcastRemoveHuangFeiHint(huangDiRoleName, Global.FormatRoleName(client, client.ClientData.RoleName));
            }
            else //册封皇后
            {
                //更新BufferData
                double[] actionParams = new double[1];
                actionParams[0] = 0;
                Global.UpdateBufferData(client, BufferItemTypes.DiWanZhiYou, actionParams, 1);

                //皇后状态变更消息
                GameManager.ClientMgr.NotifyChgHuangHou(Global._TCPManager.MySocketListener,
                    Global._TCPManager.TcpOutPacketPool, client);

                //皇帝册封皇妃的提示
                Global.BroadcastAddHuangFeiHint(huangDiRoleName, Global.FormatRoleName(client, client.ClientData.RoleName));
            }
            */
        }

        #endregion 册封和废黜皇后相关

        #region 掉落宝箱的管理

        /// <summary>
        /// 判断如果是打包的物品，则返回解开后返回的物品的个数
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static bool CanOpenFallBaoXiang(GameClient client, SystemXmlItem systemGoodsItem, int goodsID)
        {
            List<MagicActionItem> magicActionItemList = null;
            if (!GameManager.SystemMagicActionMgr.GoodsActionsDict.TryGetValue(goodsID, out magicActionItemList) || null == magicActionItemList)
            {
                //物品没有配置脚本
                return true;
            }

            if (magicActionItemList.Count <= 0)
            {
                return true;
            }

            MagicActionItem magicActionItem = magicActionItemList[0];
            if (MagicActionIDs.FALL_BAOXIANG != magicActionItem.MagicActionID)
            {
                return true;
            }

            int maxFallCount = (int)magicActionItem.MagicActionParams[1];
            if (!Global.CanAddGoodsNum(client, maxFallCount))
            {
                return false;
            }

            return true;
        }

        #endregion 掉落宝箱的管理

        #region 解开包裹UNPACK的管理

        /// <summary>
        /// 判断如果是打包的物品，则返回解开后返回的物品的个数
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static bool CanUnPackSimpleGoods(GameClient client, SystemXmlItem systemGoodsItem, int goodsID)
        {
            List<MagicActionItem> magicActionItemList = null;
            if (!GameManager.SystemMagicActionMgr.GoodsActionsDict.TryGetValue(goodsID, out magicActionItemList) || null == magicActionItemList)
            {
                //物品没有配置脚本
                return true;
            }

            if (magicActionItemList.Count <= 0)
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("CanUnPackSimpleGoods magicActionItemList.Count goodsID={0}", goodsID));
                return false;
            }

            MagicActionItem magicActionItem = magicActionItemList[0];
            if (MagicActionIDs.UN_PACK != magicActionItem.MagicActionID)
            {
                return true;
            }

            int maxFallCount = (int)magicActionItem.MagicActionParams[1];

            // modify by chenjingui。20150702 获取这个物品一个格子可以堆叠多少个
            int eachGirdNum = Global.GetGoodsGridNumByID((int)magicActionItem.MagicActionParams[0]);
            eachGirdNum = Math.Max(eachGirdNum, 1);

            // 计算maxFallCount需要占用的格子数目
            int needGird = maxFallCount / eachGirdNum + ((maxFallCount % eachGirdNum == 0) ? 0 : 1);

            if (!Global.CanAddGoodsNum(client, needGird))
            {
                return false;
            }

            return true;
        }

        #endregion 解开包裹UNPACK的管理

        #region 从语言包中获取语言

        private static object LangDict_Mutex = new object();

        /// <summary>
        /// 快速存取语言字符串的字典
        /// </summary>
        private static Dictionary<string, string> LangDict = null;

        /// <summary>
        /// 从程序资源中加载语言包字典
        /// </summary>
        /// <returns></returns>
        public static void LoadLangDict()
        {
            XElement xml = null;

            try
            {
                xml = XElement.Load("Language.xml");
            }
            catch (Exception)
            {
                return;
            }

            try
            {
                if (null == xml) return;
                Dictionary<string, string> langDict = new Dictionary<string, string>();
                IEnumerable<XElement> langItems = xml.Elements();
                foreach (var langItem in langItems)
                {
                    langDict[Global.GetSafeAttributeStr(langItem, "ChineseText")] = Global.GetSafeAttributeStr(langItem, "OtherLangText");
                }

                lock (LangDict_Mutex)
                {
                    LangDict = langDict;
                }
            }
            catch (Exception)
            {
            }
        }

        /// <summary>
        /// 将中文转成其他语言
        /// </summary>
        /// <param name="chineseText"></param>
        /// <returns></returns>
        public static string GetLang(string chineseText)
        {
            string otherLangText = "";

            if (null == LangDict)
            {
                return chineseText;
            }

            lock (LangDict_Mutex)
            {
                if (!LangDict.TryGetValue(chineseText, out otherLangText))
                {
                    return chineseText;
                }

                if (string.IsNullOrEmpty(otherLangText))
                {
                    return chineseText;
                }
            }

            return otherLangText;
        }

        #endregion 从语言包中获取语言

        #region 角色复活

        /// <summary>
        /// 角色复活
        /// </summary>
        /// <param name="client"></param>
        /// <param name="toX"></param>
        /// <param name="toY"></param>
        /// <param name="direction"></param>
        public static void ClientRealive(GameClient client, int posX, int posY, int direction)
        {
            //停止正在移动的故事版
            GameManager.ClientMgr.StopClientStoryboard(client);

            int oldX = 0, oldY = 0;
            oldX = client.ClientData.PosX;
            oldY = client.ClientData.PosY;

            client.ClientData.PosX = posX;
            client.ClientData.PosY = posY;
            client.ClientData.ReportPosTicks = 0;
            client.ClientData.RoleDirection = direction;

            client.ClientData.CurrentLifeV = client.ClientData.LifeV;
            client.ClientData.CurrentMagicV = client.ClientData.MagicV;

            client.ClientData.CurrentAction = (int)GActions.Stand;
            client.ClientData.MoveAndActionNum = 0;

            //将精灵放入格子
            if (!GameManager.MapGridMgr.DictGrids[client.ClientData.MapCode].MoveObject(oldX, oldY, client.ClientData.PosX, client.ClientData.PosY, client))
            {
                //LogManager.WriteLog(LogTypes.Warning, string.Format("精灵移动超出了地图边界: Cmd={0}, RoleID={1}, 关闭连接", (TCPGameServerCmds)nID, client.ClientData.RoleID));
                //return TCPProcessCmdResults.RESULT_OK;
            }

            /// 玩家进行了移动
            if (GameManager.Update9GridUsingNewMode <= 0)
            {
                ClientManager.DoSpriteMapGridMove(client);
            }
            else
            {
                Global.GameClientMoveGrid(client);
            }

            Global.RecordClientPosition(client);

            //通知其他人自己开始复活
            GameManager.ClientMgr.NotifyOthersRealive(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, client.ClientData.RoleID, posX, posY, direction);

            //通知自己要复活
            GameManager.ClientMgr.NotifyMySelfRealive(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, client.ClientData.RoleID, posX, posY, direction);

            //取消采集状态
            CaiJiLogic.CancelCaiJiState(client);

            //通知自己的坐骑骑乘状态(新登录，新地图, 复活需要)
            GameManager.ClientMgr.NotifySelfOnHorse(client);

            //通知自己的宠物状态(新登录，新地图, 复活需要)
            GameManager.ClientMgr.NotifySelfPetShow(client);

            //因为死亡会掉落装备
            {
                client.delayExecModule.SetDelayExecProc(DelayExecProcIds.RecalcProps, DelayExecProcIds.UpdateOtherProps, DelayExecProcIds.NotifyRefreshProps);
            }

        }

        #endregion 角色复活

        #region 防止加速

        /// <summary>
        /// 移动一个格子需要的时间
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static double GetClientUnitCost(GameClient client)
        {
            return (Data.RunUnitCost / client.ClientData.MoveSpeed);
        }

        public static void RecordClientPosition(GameClient client)
        {
            if (GameManager.CheckCheatPosition)
            {
                client.CheckCheatData.LastValidateTicks = TimeUtil.NOW();
                client.CheckCheatData.LastValidMapCode = client.ClientData.MapCode;
                client.CheckCheatData.LastValidPosX = client.ClientData.PosX;
                client.CheckCheatData.LastValidPosY = client.ClientData.PosY;
            }
        }

        /// <summary>
        /// 校验玩家坐标
        /// </summary>
        /// <param name="client"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns></returns>
        public static bool ValidateClientPosition(GameClient client, int x, int y, long startMoveTicks = 0, double moveCost = 0)
        {
            if (GameManager.CheckCheatPosition)
            {
                double distance = Math.Sqrt(Math.Pow((client.ClientData.PosX - x), 2) + Math.Pow((client.ClientData.PosY - y), 2));
                if (distance > GameManager.CheckCheatMaxDistance)
                {
                    //Console.WriteLine("ban: distance = " + (int)distance);
                    return false;
                }
                else
                {
                    //Console.WriteLine("-----distance = " + (int)distance);
                    if (moveCost > 0)
                    {
                        long moveinterval = (TimeUtil.NOW() - client.CheckCheatData.LastValidateTicks);
                        if (moveinterval >= GameManager.CheckPositionInterval)
                        {
                            if (client.ClientData.MapCode == client.CheckCheatData.LastValidMapCode)
                            {
                                double dis = Math.Sqrt(Math.Pow((client.CheckCheatData.LastValidPosX - x), 2) + Math.Pow((client.CheckCheatData.LastValidPosY - y), 2));
                                double clientspeed = dis / moveinterval / moveCost;

                                if (clientspeed > client.CheckCheatData.MaxClientSpeed)
                                {
                                    client.CheckCheatData.MaxClientSpeed = clientspeed;
                                }

                                //SysConOut.WriteLine("clientspeed = " + clientspeed);
                            }

                            RecordClientPosition(client);
                        }
                    }
                }
            }

            return true;
        }

        #endregion 防止加速

        #region 挖宝管理，主要针对采用钥匙类物品开箱子
        /// <summary>
        /// 返回能打开箱子的钥匙-->掉落ID 列表
        /// </summary>
        /// <param name="idXiangZhi"></param>
        /// <returns></returns>
        public static Dictionary<int, int> GetYaoShiDiaoLuoForXiangZhi(int idXiangZi)
        {
            Dictionary<int, int> dictYaoShi = new Dictionary<int, int>();

            Dictionary<int, SystemXmlItem> systemXmlItemDict = GameManager.SystemGoods.SystemXmlItemDict;
            if (!systemXmlItemDict.Keys.Contains(idXiangZi))
            {
                return dictYaoShi;
            }

            String paramsWabao = "";
            SystemXmlItem itemXiangZhi = systemXmlItemDict[idXiangZi];
            if (null == itemXiangZhi)
            {
                return dictYaoShi;
            }

            //格式:FALL_WABAO(掉落ID,钥匙ID|掉落ID,钥匙ID)
            paramsWabao = itemXiangZhi.GetStringValue("ExecMagic");

            int leftPos = paramsWabao.IndexOf('(');
            int rightPos = paramsWabao.IndexOf(')');

            if (leftPos < 0 || rightPos <= 0 || rightPos - leftPos < 1 || leftPos + 1 >= paramsWabao.Length)
            {
                return dictYaoShi;
            }

            //解析钥匙ID
            String[] pairs = paramsWabao.Substring(leftPos + 1, rightPos - leftPos - 1).Split('|');

            String[] pair = null;
            for (int n = 0; n < pairs.Length; n++)
            {
                if (String.IsNullOrWhiteSpace(pairs[n]))
                {
                    continue;
                }

                //每一个 小配对 ： 掉落ID,钥匙ID
                pair = pairs[n].Split(',');
                if (2 == pair.Length)
                {
                    dictYaoShi.Add(Convert.ToInt32(pair[1]), Convert.ToInt32(pair[0]));
                }
            }

            return dictYaoShi;
        }
        #endregion 挖宝管理，主要针对采用钥匙类物品开箱子

        #region 自动扣除物品对应元宝
        /// <summary>
        /// 根据需要使用批量物品，自动批量扣除元宝，某些物品元宝价格可能为0，此时返回错误
        /// 返回负数是错误码,正数是扣除的元宝数量----批量自动购买物品涉及到
        /// 扣除金子时，不好记录日志。所以进行多次循环，针对每个物品进行自动购买
        /// </summary>
        /// <param name="client"></param>
        /// <param name="needGoods">需要的物品列表，goodsID, 数量 列表</param>
        /// <param name="sReason"></param>
        /// <returns></returns>
        public static int SubUserMoneyForGoods(GameClient client, Dictionary<int, int> needGoods, string sReason)
        {
            //需要的元宝数量
            int needYuanBao = 0;

            //计算需要元宝数量，同时验证数据合法性
            foreach (var goods in needGoods)
            {
                int price = MallPriceMgr.GetPriceByGoodsID(goods.Key);
                if (price <= 0)
                {
                    //存在不能购买的物品,记录日志
                    return -2000;
                }

                int number = goods.Value;
                if (number <= 0 || number >= 10000)
                {
                    //购买的物品数量超出范围,记录日志
                    return -2100;
                }

                needYuanBao += price * number;
            }

            //这种情况只有needGoods为空时才可能
            if (needYuanBao <= 0)
            {
                return -2200;
            }

            //判断用户点卷额是否不足[金子 + 元宝]
            if (client.ClientData.UserMoney + client.ClientData.Gold < needYuanBao)
            {
                return -2300;
            }

            //循环扣除，这样便于记录日志，批量扣除会导致日志不好记
            foreach (var goods in needGoods)
            {
                int ret = SubUserMoneyForGoods(client, goods.Key, goods.Value, sReason);
                if (ret <= 0)
                {
                    return ret;
                }
            }

            return needYuanBao;
        }

        /// <summary>
        /// 根据需要使用物品的数量，自动扣除元宝，物品元宝价格可能为0，此时返回错误
        /// </summary>
        /// <param name="client"></param>
        /// <param name="needGoodsID"></param>
        /// <param name="needGoodsNum"></param>
        /// <param name="sReason"></param>
        /// <returns></returns>
        public static int SubUserMoneyForGoods(GameClient client, int needGoodsID, int needGoodsNum, string sReason)
        {
            int priceType = MallPriceMgr.GetPriceTypeByGoodsIDFromCfg(needGoodsID);
            if (0 == priceType)
            {
                return SubUserYuanBaoForGoods(client, needGoodsID, needGoodsNum, sReason);
            }
            else if (1 == priceType)
            {
                return SubUserGoldForGoods(client, needGoodsID, needGoodsNum, sReason);
            }

            return 0;
            /*
            //需要的元宝数量
            int needYuanBao = 0;

            //计算需要元宝数量，同时验证数据合法性

            int price = MallPriceMgr.GetPriceByGoodsID(needGoodsID);
            if (price <= 0)
            {
                //存在不能购买的物品,记录日志
                return -2000;
            }

            if (needGoodsNum <= 0 || needGoodsNum >= 10000)
            {
                //购买的物品数量超出范围,记录日志
                return -2100;
            }

            needYuanBao = price * needGoodsNum;

            //这种情况只有needGoods为空时才可能
            if (needYuanBao <= 0)
            {
                return -2200;
            }

            //判断用户点卷额是否不足【金币 加 元宝】
            //if (client.ClientData.UserMoney + client.ClientData.Gold < needYuanBao)
            if (GameManager.ClientMgr.GetCanUseUserMoneyAndGold(client) < needYuanBao)
            {
                return -2300;
            }

            //扣除之前的金币
            int oldGold = client.ClientData.Gold;

            //扣除之前的元宝
            int oldYuanBao = client.ClientData.UserMoney;

            //优先扣除金币
            //扣除的金币
            int hasSubGold = 0;

            //扣除的元宝
            int hasSubYuanBao = 0;

            //先DBServer请求扣费
            //扣除用户点卷
            if (!GameManager.ClientMgr.SubUserMoney2(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, needYuanBao, out hasSubYuanBao, out hasSubGold))
            {
                return -2400;
            }

            //记录元宝扣除日志
            Global.AddAutoSubYuanBaoEvent(client, needGoodsID, needGoodsNum, price, hasSubYuanBao, sReason, oldYuanBao, client.ClientData.UserMoney);

            //记录金币扣除日志
            Global.AddAutoSubGoldEvent(client, needGoodsID, needGoodsNum, price, hasSubGold, sReason, oldGold, client.ClientData.Gold);

            //记录元宝和金币扣除日志---这个日志能统一看到单次扣除情况
            Global.AddAutoSubEvent(client, needGoodsID, needGoodsNum, price, hasSubGold, oldGold, client.ClientData.Gold, hasSubYuanBao, oldYuanBao, client.ClientData.UserMoney, sReason);

            return needYuanBao;
            */
        }

        /// <summary>
        /// 根据需要使用物品的数量，自动扣除元宝，物品元宝价格可能为0，此时返回错误
        /// </summary>
        /// <param name="client"></param>
        /// <param name="needGoodsID"></param>
        /// <param name="needGoodsNum"></param>
        /// <param name="sReason"></param>
        /// <returns></returns>
        public static int SubUserYuanBaoForGoods(GameClient client, int needGoodsID, int needGoodsNum, string sReason)
        {
            //需要的元宝数量
            int needYuanBao = 0;

            //计算需要元宝数量，同时验证数据合法性

            int price = MallPriceMgr.GetPriceByGoodsID(needGoodsID);
            if (price <= 0)
            {
                //存在不能购买的物品,记录日志
                return -2000;
            }

            if (needGoodsNum <= 0 || needGoodsNum >= 10000)
            {
                //购买的物品数量超出范围,记录日志
                return -2100;
            }

            needYuanBao = price * needGoodsNum;

            //这种情况只有needGoods为空时才可能
            if (needYuanBao <= 0)
            {
                return -2200;
            }

            //判断用户点卷额是否不足【元宝】
            if (client.ClientData.UserMoney < needYuanBao)
            {
                return -2300;
            }

            //扣除之前的元宝
            int oldYuanBao = client.ClientData.UserMoney;

            string msg = string.Format("物品[{0}]x[{1}]{2}", needGoodsID, needGoodsNum, sReason);

            //先DBServer请求扣费
            //扣除用户点卷
            if (!GameManager.ClientMgr.SubUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, needYuanBao, msg))
            {
                return -2400;
            }

            //扣除的元宝
            int hasSubYuanBao = needYuanBao;

            //记录元宝扣除日志
            Global.AddAutoSubYuanBaoEvent(client, needGoodsID, needGoodsNum, price, hasSubYuanBao, sReason, oldYuanBao, client.ClientData.UserMoney);

            return needYuanBao;
        }

        /// <summary>
        /// 根据需要使用物品的数量，自动扣除金币，物品元宝价格可能为0，此时返回错误
        /// </summary>
        /// <param name="client"></param>
        /// <param name="needGoodsID"></param>
        /// <param name="needGoodsNum"></param>
        /// <param name="sReason"></param>
        /// <returns></returns>
        public static int SubUserGoldForGoods(GameClient client, int needGoodsID, int needGoodsNum, string sReason)
        {
            //需要的元宝数量
            int needGold = 0;

            //计算需要元宝数量，同时验证数据合法性

            int price = MallPriceMgr.GetPriceByGoodsID(needGoodsID);
            if (price <= 0)
            {
                //存在不能购买的物品,记录日志
                return -2000;
            }

            if (needGoodsNum <= 0 || needGoodsNum >= 10000)
            {
                //购买的物品数量超出范围,记录日志
                return -2100;
            }

            needGold = price * needGoodsNum;

            //这种情况只有needGoods为空时才可能
            if (needGold <= 0)
            {
                return -2200;
            }

            //判断用户金币是否足够
            if (client.ClientData.Gold < needGold)
            {
                return -2300;
            }

            //扣除之前的元宝
            int oldGold = client.ClientData.Gold;

            //先DBServer请求扣费
            //扣除用户点卷
            if (!GameManager.ClientMgr.SubUserGold(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, needGold))
            {
                return -2400;
            }

            //扣除的元宝
            int hasSubGold = needGold;

            //记录金币扣除日志
            Global.AddAutoSubGoldEvent(client, needGoodsID, needGoodsNum, price, hasSubGold, sReason, oldGold, client.ClientData.Gold);

            return needGold;
        }
        #endregion

        #region 物品和技能CoolDown控制函数

        /// <summary>
        /// 添加cooldown项
        /// </summary>
        /// <param name="coolDownDict"></param>
        /// <param name="id"></param>
        /// <param name="startTicks"></param>
        /// <param name="cdTicks"></param>
        public static void AddCoolDownItem(Dictionary<int, CoolDownItem> coolDownDict, int id, long startTicks, long cdTicks)
        {
            CoolDownItem coolDownItem = null;
            coolDownDict.TryGetValue(id, out coolDownItem);

            //判断新加的CD是否大于旧的，如果是则替换，否则，忽略
            if (null == coolDownItem)
            {
                coolDownItem = new CoolDownItem()
                {
                    ID = id,
                    StartTicks = startTicks,
                    CDTicks = cdTicks,
                };

                coolDownDict[id] = coolDownItem;
            }
            else
            {
                if ((startTicks + cdTicks) > (coolDownItem.StartTicks + coolDownItem.CDTicks))
                {
                    coolDownItem.StartTicks = startTicks;
                    coolDownItem.CDTicks = cdTicks;
                }
            }
        }

        #endregion 物品和技能CoolDown控制函数

        #region 邮件管理
        /// <summary>
        /// 返回发送邮件需要的银两
        /// </summary>
        /// <returns></returns>
        public static int GetChargeYinLiangForSendMail(bool hasAttachment)
        {
            int needYinLiang = 0;
            if (hasAttachment)
            {
                needYinLiang = Global.GMax(0, (int)GameManager.systemParamsList.GetParamValueIntByName("EmailMoneyWithAttachment"));
            }
            else
            {
                needYinLiang = Global.GMax(0, (int)GameManager.systemParamsList.GetParamValueIntByName("EmailMoney"));
            }

            return needYinLiang;
        }

        /// <summary>
        /// 返回比较value，返回在min 和 max 之间的数
        /// </summary>
        /// <param name="value"></param>
        /// <param name="min"></param>
        /// <param name="max"></param>
        /// <returns></returns>
        public static int GetValueBetweenMinAndMax(int value, int min = 0, int max = 999999999)
        {
            if (value < min)
            {
                return min;
            }

            if (value > max)
            {
                return max;
            }

            return value;
        }

        #endregion 邮件管理

        #region 奖励活动相关
        /// <summary>
        /// 返回活动请求命令字符串，从gameserver发送给gamedbserver的活动请求，都需要配置好活动参数，因为gamedbserver不读具体逻辑
        /// 配置信息
        /// </summary>
        /// <returns></returns>
        public static string GetActivityRequestCmdString(ActivityTypes type, GameClient client, int extTag = 0)
        {
            int roleID = client.ClientData.RoleID;

            string sCmd = "";
            string sCmdFormat = "{0}:{1}:{2}:{3}:{4}";

            KingActivity instanceKing = null;

            switch (type)
            {
                case ActivityTypes.InputFanLi:
                    {
                        InputFanLiActivity instance = HuodongCachingMgr.GetInputFanLiActivity();

                        if (null != instance)
                        {
                            sCmd = string.Format(sCmdFormat, roleID, instance.FromDate.Replace(':', '$'), instance.ToDate.Replace(':', '$'), instance.FanLiPersent, extTag);
                        }

                        break;
                    }
                case ActivityTypes.InputJiaSong:
                    {
                        InputSongActivity instance = HuodongCachingMgr.GetInputSongActivity();

                        if (null != instance)
                        {
                            sCmd = string.Format(sCmdFormat, roleID, instance.FromDate.Replace(':', '$'), instance.ToDate.Replace(':', '$'), instance.MyAwardItem.MinAwardCondionValue, extTag);
                        }

                        break;
                    }
                case ActivityTypes.NewZoneRechargeKing:
                case ActivityTypes.InputKing:  //gwz
                    {
                        instanceKing = HuodongCachingMgr.GetInputKingActivity();
                        extTag = (int)ActivityTypes.InputKing;
                        break;
                    }
                case ActivityTypes.LevelKing:
                    {
                        instanceKing = HuodongCachingMgr.GetLevelKingActivity();
                        break;
                    }
                case ActivityTypes.NewZoneBosskillKing:
                case ActivityTypes.EquipKing: //gwz
                    {
                        instanceKing = HuodongCachingMgr.GetEquipKingActivity();
                        extTag = (int)ActivityTypes.EquipKing;
                        break;
                    }
                case ActivityTypes.HorseKing:
                    {
                        instanceKing = HuodongCachingMgr.GetHorseKingActivity();
                        break;
                    }
                case ActivityTypes.JingMaiKing:
                    {
                        instanceKing = HuodongCachingMgr.GetJingMaiKingActivity();
                        break;
                    }
                case ActivityTypes.JieriDaLiBao:
                    {
                        JieriDaLiBaoActivity instance = HuodongCachingMgr.GetJieriDaLiBaoActivity();

                        if (null != instance)
                        {
                            sCmd = string.Format(sCmdFormat, roleID, instance.FromDate.Replace(':', '$'), instance.ToDate.Replace(':', '$'), instance.MyAwardItem.MinAwardCondionValue, extTag);
                        }

                        break;
                    }
                case ActivityTypes.JieriDengLuHaoLi:
                    {
                        JieRiDengLuActivity instance = HuodongCachingMgr.GetJieRiDengLuActivity();

                        if (null != instance)
                        {
                            sCmd = string.Format(sCmdFormat, roleID, instance.FromDate.Replace(':', '$'), instance.ToDate.Replace(':', '$'), Global.GetRoleParamsInt32FromDB(client, RoleParamName.JieriLoginNum), extTag);
                        }
                        break;
                    }
                case ActivityTypes.JieriVIP:
                    {
                        JieriVIPActivity instance = HuodongCachingMgr.GetJieriVIPActivity();

                        if (null != instance)
                        {
                            sCmd = string.Format(sCmdFormat, roleID, instance.FromDate.Replace(':', '$'), instance.ToDate.Replace(':', '$'), Global.IsVip(client) ? 1 : 0, extTag);
                        }

                        break;
                    }
                case ActivityTypes.JieriCZSong:
                    {
                        JieriCZSongActivity instance = HuodongCachingMgr.GetJieriCZSongActivity();

                        if (null != instance)
                        {
                            //sCmd = string.Format(sCmdFormat, roleID, instance.FromDate.Replace(':', '$'), instance.ToDate.Replace(':', '$'), instance.MyAwardItem.MinAwardCondionValue, extTag);
                            // 今天
                            string FromDate = new DateTime(TimeUtil.NowDateTime().Year, TimeUtil.NowDateTime().Month, TimeUtil.NowDateTime().Day, 0, 0, 0).ToString();
                            string ToDate = new DateTime(TimeUtil.NowDateTime().Year, TimeUtil.NowDateTime().Month, TimeUtil.NowDateTime().Day, 23, 59, 59).ToString();
                            AwardItem myAwardItem = instance.GetAward(extTag);
                            if (null != myAwardItem)
                                sCmd = string.Format(sCmdFormat, roleID, FromDate.Replace(':', '$'), ToDate.Replace(':', '$'), myAwardItem.MinAwardCondionValue, extTag);
                            else
                                sCmd = string.Format(sCmdFormat, roleID, FromDate.Replace(':', '$'), ToDate.Replace(':', '$'), 0, extTag);
                        }

                        break;
                    }
                case ActivityTypes.JieriLeiJiCZ:
                    {
                        // instanceKing = HuodongCachingMgr.GetJieRiLeiJiCZActivity();
                        JieRiLeiJiCZActivity instance = HuodongCachingMgr.GetJieRiLeiJiCZActivity();
                        if (null != instance)
                        {
                            AwardItem myAwardItem = instance.GetAward(extTag);
                            sCmd = string.Format(sCmdFormat, roleID, instance.FromDate.Replace(':', '$'), instance.ToDate.Replace(':', '$'), instance.GetAwardMinConditionValues(), extTag);
                        }
                        break;
                    }
                case ActivityTypes.JieriTotalConsume:
                    {
                        JieRiTotalConsumeActivity instance = HuodongCachingMgr.GetJieRiTotalConsumeActivity();
                        if (null != instance)
                        {
                            AwardItem myAwardItem = instance.GetAward(extTag);
                            sCmd = string.Format(sCmdFormat, roleID, instance.FromDate.Replace(':', '$'), instance.ToDate.Replace(':', '$'), instance.GetAwardMinConditionValues(), extTag);
                        }
                        break;
                    }
                case ActivityTypes.JieriZiKa:
                    {
                        break;
                    }
                case ActivityTypes.NewZoneConsumeKing:
                    {
                        instanceKing = HuodongCachingMgr.GetXinXiaoFeiKingActivity();
                        break;
                    }
                case ActivityTypes.JieriPTXiaoFeiKing://gwz:
                    {
                        instanceKing = HuodongCachingMgr.GetJieriXiaoFeiKingActivity();
                        sCmd = string.Format(sCmdFormat, roleID, instanceKing.FromDate.Replace(':', '$'), instanceKing.ToDate.Replace(':', '$'), instanceKing.GetAwardMinConditionValues(), extTag);
                        return sCmd;
                    }

                case ActivityTypes.JieriPTCZKing:
                    {
                        instanceKing = HuodongCachingMgr.GetJieRiCZKingActivity();
                        sCmd = string.Format(sCmdFormat, roleID, instanceKing.FromDate.Replace(':', '$'), instanceKing.ToDate.Replace(':', '$'), instanceKing.GetAwardMinConditionValues(), extTag);
                        return sCmd;
                    }
                case ActivityTypes.JieriBossAttack:
                    {
                        break;
                    }
                case ActivityTypes.HeFuLogin:
                    {
                        HeFuLoginActivity instance = HuodongCachingMgr.GetHeFuLoginActivity();

                        if (null != instance)
                        {
                            //sCmd = string.Format(sCmdFormat, roleID, instance.FromDate.Replace(':', '$'), instance.ToDate.Replace(':', '$'), instance.NormalAward.MinAwardCondionValue, extTag);
                        }

                        break;
                    }
                //case ActivityTypes.HeFuVIP:
                //    {
                //        HeFuBattleGodActivity instance = HuodongCachingMgr.GetHeFuVIPActivity();

                //        if (null != instance)
                //        {
                //            sCmd = string.Format(sCmdFormat, roleID, instance.FromDate.Replace(':', '$'), instance.ToDate.Replace(':', '$'), Global.IsVip(client) ? 1 : 0, extTag);
                //        }

                //        break;
                //    }
                case ActivityTypes.HeFuTotalLogin:
                    {
                        HeFuTotalLoginActivity instance = HuodongCachingMgr.GetHeFuTotalLoginActivity();

                        if (null != instance)
                        {
                            //sCmd = string.Format(sCmdFormat, roleID, instance.FromDate.Replace(':', '$'), instance.ToDate.Replace(':', '$'), instance.MyAwardItem.MinAwardCondionValue, extTag);
                        }

                        break;
                    }
                case ActivityTypes.HeFuPKKing:
                    {
                        HeFuPKKingActivity instance = HuodongCachingMgr.GetHeFuPKKingActivity();

                        if (null != instance)
                        {
                            sCmd = string.Format(sCmdFormat, roleID, instance.FromDate.Replace(':', '$'), instance.ToDate.Replace(':', '$'), HuodongCachingMgr.GetHeFuPKKingRoleID(), extTag);
                        }

                        break;
                    }
                //case ActivityTypes.HeFuWanChengKing:
                //    {
                //        HeFuWCKingActivity instance = HuodongCachingMgr.GetHeFuWCKingActivity();

                //        if (null != instance)
                //        {
                //            sCmd = string.Format(sCmdFormat, roleID, instance.FromDate.Replace(':', '$'), instance.ToDate.Replace(':', '$'), 0, extTag);
                //        }

                //        break;
                //    }
                case ActivityTypes.HeFuRecharge:
                    {
                        /*HeFuRechargeActivity instance = HuodongCachingMgr.GetHeFuRechargeActivity();
                        if (null != instance)
                        {
                            sCmd = string.Format(sCmdFormat, roleID, instance.strcoe, "0", extTag);
                        }*/
                        break;
                    }
                case ActivityTypes.HeFuBossAttack:
                    {
                        break;
                    }
                case ActivityTypes.MeiRiChongZhiHaoLi:
                    {
                        break;
                    }
                case ActivityTypes.NewZoneUpLevelMadman:
                case ActivityTypes.ChongJiLingQuShenZhuang://gwz
                    {
                        instanceKing = HuodongCachingMgr.GetChongJiHaoLiActivity();
                        break;
                    }
                case ActivityTypes.ShenZhuangJiQingHuiKui:
                    {
                        break;
                    }
                case ActivityTypes.XingYunChouJiang:
                    {
                        break;
                    }
                case ActivityTypes.YuDuZhuanPanChouJiang:
                    {
                        YueDuZhuanPanActivity instance = HuodongCachingMgr.GetYueDuZhuanPanActivity();

                        if (null != instance)
                            sCmd = string.Format(sCmdFormat, roleID, instance.FromDate.Replace(':', '$'), instance.ToDate.Replace(':', '$'), 0, extTag);

                        break;
                    }

                case ActivityTypes.NewZoneFanli://gwz
                case ActivityTypes.XinCZFanLi:
                    {
                        instanceKing = HuodongCachingMgr.GetXinFanLiActivity();
                        break;
                    }

                case ActivityTypes.JieriWing:
                case ActivityTypes.JieriAddon:
                case ActivityTypes.JieriStrengthen:
                case ActivityTypes.JieriAchievement:
                case ActivityTypes.JieriMilitaryRank:
                case ActivityTypes.JieriVIPFanli:
                case ActivityTypes.JieriAmulet:
                case ActivityTypes.JieriArchangel:
                case ActivityTypes.JieriMarriage:
                    {
                        JieriFanLiActivity instance = HuodongCachingMgr.GetJieriFanLiActivity(type);
                        if (null != instance)
                        {
                            AwardItem myAwardItem = instance.GetAward(extTag);
                            sCmd = string.Format(sCmdFormat, roleID, instance.FromDate.Replace(':', '$'), instance.ToDate.Replace(':', '$'), (int)type, extTag);
                        }
                        break;
                    }
                case ActivityTypes.JieriInputPointsExchg:
                    {
                        JieriIPointsExchgActivity instance = HuodongCachingMgr.GetJieriIPointsExchgActivity();
                        if (null != instance)
                        {
                            AwardItem myAwardItem = instance.GetAward(extTag);
                            sCmd = string.Format(sCmdFormat, roleID, instance.FromDate.Replace(':', '$'), instance.ToDate.Replace(':', '$'), (int)type, extTag);
                        }
                        break;
                    }

                default:
                    break;
            }

            //对王类活动统一处理
            if (null != instanceKing)
            {
                sCmd = string.Format(sCmdFormat, roleID, instanceKing.FromDate.Replace(':', '$'), instanceKing.ToDate.Replace(':', '$'), instanceKing.GetAwardMinConditionValues(), (int)type);
            }

            return sCmd;
        }

        /// <summary>
        /// 判断当前是否可以在给予奖励时间范围内，即是否活动的奖励期
        /// </summary>
        /// <returns></returns>
        public static Activity GetActivity(ActivityTypes type)
        {
            Activity instance = null;

            switch (type)
            {
                case ActivityTypes.InputFirst:
                    {
                        instance = HuodongCachingMgr.GetFirstChongZhiActivity();
                        break;
                    }
                case ActivityTypes.InputFanLi:
                    {
                        instance = HuodongCachingMgr.GetInputFanLiActivity();
                        break;
                    }
                case ActivityTypes.InputJiaSong:
                    {
                        instance = HuodongCachingMgr.GetInputSongActivity();
                        break;
                    }
                case ActivityTypes.NewZoneRechargeKing:
                case ActivityTypes.InputKing:
                    {
                        instance = HuodongCachingMgr.GetInputKingActivity();
                        break;
                    }
                case ActivityTypes.LevelKing:
                    {
                        instance = HuodongCachingMgr.GetLevelKingActivity();
                        break;
                    }
                case ActivityTypes.NewZoneBosskillKing:
                case ActivityTypes.EquipKing:
                    {
                        instance = HuodongCachingMgr.GetEquipKingActivity();
                        break;
                    }
                case ActivityTypes.HorseKing:
                    {
                        instance = HuodongCachingMgr.GetHorseKingActivity();
                        break;
                    }
                case ActivityTypes.JingMaiKing:
                    {
                        instance = HuodongCachingMgr.GetJingMaiKingActivity();
                        break;
                    }
                case ActivityTypes.JieriDaLiBao:
                    {
                        instance = HuodongCachingMgr.GetJieriDaLiBaoActivity();
                        break;
                    }
                case ActivityTypes.JieriDengLuHaoLi:
                    {
                        instance = HuodongCachingMgr.GetJieRiDengLuActivity();
                        break;
                    }
                case ActivityTypes.JieriVIP:
                    {
                        instance = HuodongCachingMgr.GetJieriVIPActivity();
                        break;
                    }
                case ActivityTypes.JieriCZSong:
                    {
                        instance = HuodongCachingMgr.GetJieriCZSongActivity();
                        break;
                    }
                case ActivityTypes.JieriLeiJiCZ:
                    {
                        instance = HuodongCachingMgr.GetJieRiLeiJiCZActivity();
                        break;
                    }
                case ActivityTypes.JieriZiKa:
                    {
                        instance = HuodongCachingMgr.GetJieRiZiKaLiaBaoActivity();
                        break;
                    }
                case ActivityTypes.NewZoneConsumeKing://gwz
                    {
                        instance = HuodongCachingMgr.GetXinXiaoFeiKingActivity();
                        break;
                    }
                case ActivityTypes.JieriPTXiaoFeiKing:
                    {
                        instance = HuodongCachingMgr.GetJieriXiaoFeiKingActivity();
                        break;
                    }
                case ActivityTypes.JieriPTCZKing:
                    {
                        instance = HuodongCachingMgr.GetJieRiCZKingActivity();
                        break;
                    }
                case ActivityTypes.JieriBossAttack:
                    {
                        break;
                    }
                case ActivityTypes.HeFuLogin:
                    {
                        instance = HuodongCachingMgr.GetHeFuLoginActivity();
                        break;
                    }
                //case ActivityTypes.HeFuVIP:
                //    {
                //        instance = HuodongCachingMgr.GetHeFuVIPActivity();
                //        break;
                //    }
                case ActivityTypes.HeFuTotalLogin:
                    {
                        instance = HuodongCachingMgr.GetHeFuTotalLoginActivity();
                        break;
                    }
                case ActivityTypes.HeFuRecharge:
                    {
                        instance = HuodongCachingMgr.GetHeFuRechargeActivity();
                        break;
                    }
                case ActivityTypes.HeFuPKKing:
                    {
                        instance = HuodongCachingMgr.GetHeFuPKKingActivity();
                        break;
                    }
                //case ActivityTypes.HeFuWanChengKing:
                //    {
                //        instance = HuodongCachingMgr.GetHeFuWCKingActivity();
                //        break;
                //    }
                case ActivityTypes.HeFuBossAttack:
                    {
                        break;
                    }
                case ActivityTypes.MeiRiChongZhiHaoLi:          // 每日充值豪礼[7/16/2013 LiaoWei]
                    {
                        instance = HuodongCachingMgr.GetMeiRiChongZhiActivity();
                        break;
                    }
                case ActivityTypes.NewZoneUpLevelMadman: //gwz
                case ActivityTypes.ChongJiLingQuShenZhuang:
                    {
                        instance = HuodongCachingMgr.GetChongJiHaoLiActivity();
                        break;
                    }
                case ActivityTypes.ShenZhuangJiQingHuiKui:
                    {
                        instance = HuodongCachingMgr.GetShenZhuangJiQiHuiKuiHaoLiActivity();
                        break;
                    }
                case ActivityTypes.NewZoneFanli://gwz
                case ActivityTypes.XinCZFanLi:
                    {
                        instance = HuodongCachingMgr.GetXinFanLiActivity();
                        break;
                    }
                case ActivityTypes.YuDuZhuanPanChouJiang:
                    {
                        instance = HuodongCachingMgr.GetYueDuZhuanPanActivity();
                        break;
                    }
                case ActivityTypes.TotalCharge:
                    {
                        instance = HuodongCachingMgr.GetTotalChargeActivity();
                        break;
                    }
                case ActivityTypes.TotalConsume:
                    {
                        instance = HuodongCachingMgr.GetTotalConsumeActivity();
                        break;
                    }
                case ActivityTypes.JieriTotalConsume:
                    {
                        instance = HuodongCachingMgr.GetJieRiTotalConsumeActivity();
                        break;
                    }
                case ActivityTypes.JieriDuoBei:
                    {
                        instance = HuodongCachingMgr.GetJieRiMultAwardActivity();
                        break;
                    }
                case ActivityTypes.HeFuLuoLan:
                    {
                        instance = HuodongCachingMgr.GetHeFuLuoLanActivity();
                        break;
                    }

                case ActivityTypes.JieriWing:
                case ActivityTypes.JieriAddon:
                case ActivityTypes.JieriStrengthen:
                case ActivityTypes.JieriAchievement:
                case ActivityTypes.JieriMilitaryRank:
                case ActivityTypes.JieriVIPFanli:
                case ActivityTypes.JieriAmulet:
                case ActivityTypes.JieriArchangel:
                case ActivityTypes.JieriMarriage:
                    {
                        instance = HuodongCachingMgr.GetJieriFanLiActivity(type);
                        break;
                    }
                case ActivityTypes.JieriInputPointsExchg:
                    {
                        instance = HuodongCachingMgr.GetJieriIPointsExchgActivity();
                        break;
                    }
                default:
                    break;
            }

            return instance;
        }

        /// <summary>
        /// 返回dbserver处理活动奖励的命令ID
        /// </summary>
        /// <returns></returns>
        public static Int32 GetDBServerExecuteActivityAwardCmdID(ActivityTypes type)
        {
            Int32 nID = -1;

            switch (type)
            {
                case ActivityTypes.InputFanLi:
                    {
                        nID = (Int32)TCPGameServerCmds.CMD_SPR_EXECUTEINPUTFANLI;
                        break;
                    }
                case ActivityTypes.InputJiaSong:
                    {
                        nID = (Int32)TCPGameServerCmds.CMD_SPR_EXECUTEINPUTJIASONG;
                        break;
                    }
                case ActivityTypes.NewZoneRechargeKing:
                case ActivityTypes.InputKing:
                    {
                        nID = (Int32)TCPGameServerCmds.CMD_SPR_EXECUTEINPUTKING;
                        break;
                    }
                case ActivityTypes.ChongJiLingQuShenZhuang://gwz
                case ActivityTypes.LevelKing:
                    {
                        nID = (Int32)TCPGameServerCmds.CMD_SPR_EXECUTELEVELKING;
                        break;
                    }
                case ActivityTypes.EquipKing:
                    {
                        nID = (Int32)TCPGameServerCmds.CMD_SPR_EXECUTEEQUIPKING;
                        break;
                    }
                case ActivityTypes.HorseKing:
                    {
                        nID = (Int32)TCPGameServerCmds.CMD_SPR_EXECUTEHORSEKING;
                        break;
                    }
                case ActivityTypes.JingMaiKing:
                    {
                        nID = (Int32)TCPGameServerCmds.CMD_SPR_EXECUTEJINGMAIKING;
                        break;
                    }
                case ActivityTypes.JieriDaLiBao:
                    {
                        nID = (Int32)TCPGameServerCmds.CMD_SPR_EXECUTEJIERIDALIBAO;
                        break;
                    }
                case ActivityTypes.JieriDengLuHaoLi:
                    {
                        nID = (Int32)TCPGameServerCmds.CMD_SPR_EXECUTEJIERIDENGLU;
                        break;
                    }
                case ActivityTypes.JieriVIP:
                    {
                        nID = (Int32)TCPGameServerCmds.CMD_SPR_EXECUTEJIERIVIP;
                        break;
                    }
                case ActivityTypes.JieriCZSong:
                    {
                        nID = (Int32)TCPGameServerCmds.CMD_SPR_EXECUTEJIERICZSONG;
                        break;
                    }
                case ActivityTypes.JieriLeiJiCZ:
                    {
                        nID = (Int32)TCPGameServerCmds.CMD_SPR_EXECUTEJIERICZLEIJI;
                        break;
                    }
                case ActivityTypes.JieriTotalConsume:
                    {
                        nID = (Int32)TCPGameServerCmds.CMD_SPR_EXECUTEJIERITOTALCONSUME;
                        break;
                    }
                case ActivityTypes.JieriZiKa:
                    {
                        nID = (Int32)TCPGameServerCmds.CMD_SPR_EXECUTEJIERIZIKA;
                        break;
                    }
                case ActivityTypes.JieriPTXiaoFeiKing:
                    {
                        nID = (Int32)TCPGameServerCmds.CMD_SPR_EXECUTEJIERIXIAOFEIKING;
                        break;
                    }
                case ActivityTypes.JieriPTCZKing:
                    {
                        nID = (Int32)TCPGameServerCmds.CMD_SPR_EXECUTEJIERICZKING;
                        break;
                    }
                //case ActivityTypes.HeFuDaLiBao:
                //    {
                //        nID = (Int32)TCPGameServerCmds.CMD_SPR_EXECUHEFUDALIBAO;
                //        break;
                //    }
                //case ActivityTypes.HeFuVIP:
                //    {
                //        nID = (Int32)TCPGameServerCmds.CMD_SPR_EXECUHEFUVIP;
                //        break;
                //    }
                //case ActivityTypes.HeFuCZSong:
                //    {
                //        nID = (Int32)TCPGameServerCmds.CMD_SPR_EXECUHEFUCZSONG;
                //        break;
                //    }
                //case ActivityTypes.HeFuPKKing:
                //    {
                //        nID = (Int32)TCPGameServerCmds.CMD_SPR_EXECUHEFUPKKING;
                //        break;
                //    }
                //case ActivityTypes.HeFuWanChengKing:
                //    {
                //        nID = (Int32)TCPGameServerCmds.CMD_SPR_EXECUHEFUWCKING;
                //        break;
                //    }
                case ActivityTypes.HeFuRecharge:
                    {
                        nID = (Int32)TCPGameServerCmds.CMD_SPR_EXECUHEFUFANLI;
                        break;
                    }
                case ActivityTypes.NewZoneFanli://gwz
                case ActivityTypes.XinCZFanLi:
                    {
                        nID = (Int32)TCPGameServerCmds.CMD_SPR_EXECUXINFANLI;
                        break;
                    }

                case ActivityTypes.JieriWing:
                case ActivityTypes.JieriAddon:
                case ActivityTypes.JieriStrengthen:
                case ActivityTypes.JieriAchievement:
                case ActivityTypes.JieriMilitaryRank:
                case ActivityTypes.JieriVIPFanli:
                case ActivityTypes.JieriAmulet:
                case ActivityTypes.JieriArchangel:
                case ActivityTypes.JieriMarriage:
                    {
                        nID = (Int32)TCPGameServerCmds.CMD_DB_EXECUXJIERIFANLI;
                        break;
                    }
                case ActivityTypes.JieriInputPointsExchg:
                    {
                        nID = (Int32)TCPGameServerCmds.CMD_DB_INPUTPOINTS_EXCHANGE;
                        break;
                    }

                default:
                    break;
            }

            return nID;
        }
        #endregion

        #region 杨公宝库积分奖励相关
        /// <summary>
        /// 判断能否获给予杨公宝库积分的奖励
        /// </summary>
        /// <param name="client"></param>
        /// <param name="priority"></param>
        /// <returns></returns>
        public static int CanGiveAwardForYangGongBKJifen(GameClient client, int awardNo, int dayID)
        {
            //奖励配置数量不能超过64个
            if (GameManager.systemLuckyAwardMgr.SystemXmlItemDict.Count > 64)
            {
                return -10003;
            }

            //没有积分项，不能领取
            if (null == client.ClientData.YangGongBKDailyJiFen)
            {
                return -10004;
            }

            SystemXmlItem xmlItem = null;

            //没有相关奖励配置
            if (!GameManager.systemLuckyAwardMgr.SystemXmlItemDict.TryGetValue(awardNo, out xmlItem))
            {
                return -10005;
            }

            //不是同一天，奖励不能领取，此时积分已经无效
            if (dayID != client.ClientData.YangGongBKDailyJiFen.DayID)
            {
                return -10006;
            }

            int minLucky = Global.GMax(0, xmlItem.GetIntValue("MinLucky"));

            //积分不够
            if (client.ClientData.YangGongBKDailyJiFen.JiFen < minLucky)
            {
                return -10007;
            }

            //得到奖励领取掩码值
            long mask = GetYangGongBKJiFenMaskValue(awardNo);

            if ((client.ClientData.YangGongBKDailyJiFen.AwardHistory & mask) != 0)
            {
                //掩码存在，表示已经领取过了
                return -10008;
            }

            return 1;
        }

        /// <summary>
        /// 返回积分奖励领取掩码值
        /// </summary>
        /// <param name="awardNo"></param>
        /// <returns></returns>
        public static long GetYangGongBKJiFenMaskValue(int awardNo)
        {
            //采用配置索引作为奖励判断依据
            List<int> ls = GameManager.systemLuckyAwardMgr.SystemXmlItemDict.Keys.ToList();
            ls.Sort();//从小到大排序
            int index = ls.IndexOf(awardNo);

            //小于0一旦出现，就返回第一项，awardNo在调用这个函数之前需要做合法性验证
            //if (index < 0)
            //左移得到掩码值
            long mask = 0x0000000000000001;
            if (index > 0)
            {
                mask = mask << index;//不是移动字节，而是移动位，一位一位的移动，每个index代表了index个位（bit）
            }

            return mask;
        }

        /// <summary>
        /// 返回杨公宝库对应奖励物品需要的背包位置数量
        /// </summary>
        /// <param name="awardNo"></param>
        /// <returns></returns>
        public static int GetYangGongBkAwardGoodsNum(int awardNo)
        {
            SystemXmlItem xmlItem = null;

            //没有相关奖励配置
            if (!GameManager.systemLuckyAwardMgr.SystemXmlItemDict.TryGetValue(awardNo, out xmlItem))
            {
                return 0;
            }

            //提取奖励配置信息
            string goodsIDs = xmlItem.GetStringValue("GoodsIDs");

            return goodsIDs.Split('|').Count();
        }

        /// <summary>
        /// 给予杨公宝库积分对应的奖励
        /// </summary>
        /// <param name="client"></param>
        /// <param name="priority"></param>
        public static bool GiveYangGongBKAwardForDailyJiFen(GameClient client, int awardNo)
        {
            SystemXmlItem xmlItem = null;

            //没有相关奖励配置
            if (!GameManager.systemLuckyAwardMgr.SystemXmlItemDict.TryGetValue(awardNo, out xmlItem))
            {
                return false;
            }

            //提取奖励配置信息
            string goodsIDs = xmlItem.GetStringValue("GoodsIDs");

            List<GoodsData> listGoods = Global.ParseGoodsDataListFromGoodsStr(goodsIDs, "杨公宝库每日积分奖励配置文件");

            string awardReason = /**/"杨公宝库每日积分奖励";

            //领取物品
            for (int n = 0; n < listGoods.Count; n++)
            {
                GoodsData goodsData = listGoods[n];

                if (null == goodsData)
                {
                    continue;
                }

                //向DBServer请求加入某个新的物品到背包中
                //添加物品
                goodsData.Id = Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, goodsData.GoodsID,
                    goodsData.GCount, goodsData.Quality, goodsData.Props, goodsData.Forge_level,
                    goodsData.Binding, 0, goodsData.Jewellist, true, 1, awardReason, goodsData.Endtime, goodsData.AddPropIndex, goodsData.BornIndex, goodsData.Lucky, goodsData.Strong);
            }

            return true;
        }

        /// <summary>
        /// 更新杨公宝库积分奖励日常数据, awardNo小于0，表示不直接提交给dbserver，否则增加奖励历史并提交
        /// </summary>
        /// <param name="client"></param>
        /// <param name="dayID"></param>
        /// <param name="priority"></param>
        public static bool UpdateYangGongBKDailyJiFenData(GameClient client, int awardNo = -1)
        {
            if (null == client.ClientData.YangGongBKDailyJiFen)
            {
                return false;
            }

            if (awardNo >= 0)
            {
                //进行或运算,更新领取标志
                client.ClientData.YangGongBKDailyJiFen.AwardHistory = client.ClientData.YangGongBKDailyJiFen.AwardHistory | Global.GetYangGongBKJiFenMaskValue(awardNo);
            }

            //通知dbserver更新数据
            string[] dbCmds = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEDAILYYANGGONGBKJIFENDATA,
                string.Format("{0}:{1}:{2}:{3}",
                client.ClientData.RoleID,
                client.ClientData.YangGongBKDailyJiFen.DayID,
                client.ClientData.YangGongBKDailyJiFen.JiFen,
                client.ClientData.YangGongBKDailyJiFen.AwardHistory), client.ServerId);

            if (null == dbCmds || dbCmds.Length != 3 || 0 != dbCmds[0].CompareTo("1"))
            {
                return false;
            }

            //将新的杨公宝库积分奖励日常数据通知自己
            GameManager.ClientMgr.NotifyYangGongBKAwardDailyData(client);

            return true;
        }
        #endregion 杨公宝库积分奖励相关

        #region 砸金蛋积分奖励相关

        /// <summary>
        /// 获取一个角色的砸金蛋的积分
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int GetZaJinDanJifen(GameClient client)
        {
            //int dayID = (int)TimeUtil.NowDateTime().DayOfYear;
            int jiFen = Global.GetRoleParamsInt32FromDB(client, RoleParamName.ZJDJiFen);
            //int jiFenDayID = Global.GetRoleParamsInt32FromDB(client, RoleParamName.ZJDJiFenDayID);
            //if (dayID == jiFenDayID)
            {
                return jiFen;
            }

            //return 0;
        }

        /// <summary>
        /// 增加砸金蛋的积分
        /// </summary>
        /// <param name="client"></param>
        /// <param name="jiFen"></param>
        public static void AddZaJinDanJiFen(GameClient client, int addJiFen)
        {
            //int dayID = (int)TimeUtil.NowDateTime().DayOfYear;
            int jiFen = Global.GetRoleParamsInt32FromDB(client, RoleParamName.ZJDJiFen);
            //int jiFenDayID = Global.GetRoleParamsInt32FromDB(client, RoleParamName.ZJDJiFenDayID);

            /*if (dayID != jiFenDayID)
            {
                jiFen = 0;
            }*/

            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.ZJDJiFen, jiFen + addJiFen, true);
            //Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.ZJDJiFenDayID, dayID, true);

            //将新的砸金蛋积分奖励日常数据通知自己
            GameManager.ClientMgr.NotifyZaJinDanKAwardDailyData(client);
        }

        /// <summary>
        /// 砸金蛋的积分领取位标志
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int GetZaJinDanJiFenBits(GameClient client)
        {
            int dayID = (int)TimeUtil.NowDateTime().DayOfYear;
            int jiFenBits = Global.GetRoleParamsInt32FromDB(client, RoleParamName.ZJDJiFenBits);
            int jiFenDayBitsDayID = Global.GetRoleParamsInt32FromDB(client, RoleParamName.ZJDJiFenBitsDayID);
            if (dayID == jiFenDayBitsDayID)
            {
                return jiFenBits;
            }

            return 0;
        }

        /// <summary>
        /// 修改砸金蛋的积分领取位标志
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static void SaveZaJinDanJiFenBits(GameClient client, int bits)
        {
            int dayID = (int)TimeUtil.NowDateTime().DayOfYear;
            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.ZJDJiFenBits, bits, true);
            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.ZJDJiFenBitsDayID, dayID, true);
        }

        /// <summary>
        /// 判断能否获给予砸金蛋积分的奖励
        /// </summary>
        /// <param name="client"></param>
        /// <param name="priority"></param>
        /// <returns></returns>
        public static int CanGiveAwardForZaJinDanJifen(GameClient client, int awardNo)
        {
            //奖励配置数量不能超过64个
            if (GameManager.systemLuckyAward2Mgr.SystemXmlItemDict.Count > 32)
            {
                return -10003;
            }

            //没有积分项，不能领取
            if (0 >= Global.GetZaJinDanJifen(client))
            {
                return -10004;
            }

            SystemXmlItem xmlItem = null;

            //没有相关奖励配置
            if (!GameManager.systemLuckyAward2Mgr.SystemXmlItemDict.TryGetValue(awardNo, out xmlItem))
            {
                return -10005;
            }

            int minLucky = Global.GMax(0, xmlItem.GetIntValue("MinLucky"));

            //积分不够
            if (Global.GetZaJinDanJifen(client) < minLucky)
            {
                return -10007;
            }

            //得到奖励领取掩码值
            int mask = GetZaJinDanJiFenMaskValue(awardNo);

            if ((Global.GetZaJinDanJiFenBits(client) & mask) != 0)
            {
                //掩码存在，表示已经领取过了
                return -10008;
            }

            return 1;
        }

        /// <summary>
        /// 返回积分奖励领取掩码值
        /// </summary>
        /// <param name="awardNo"></param>
        /// <returns></returns>
        public static int GetZaJinDanJiFenMaskValue(int awardNo)
        {
            //采用配置索引作为奖励判断依据
            List<int> ls = GameManager.systemLuckyAward2Mgr.SystemXmlItemDict.Keys.ToList();
            ls.Sort();//从小到大排序
            int index = ls.IndexOf(awardNo);

            //小于0一旦出现，就返回第一项，awardNo在调用这个函数之前需要做合法性验证
            //if (index < 0)
            //左移得到掩码值
            int mask = 0x00000001;
            if (index > 0)
            {
                mask = mask << index;//不是移动字节，而是移动位，一位一位的移动，每个index代表了index个位（bit）
            }

            return mask;
        }

        /// <summary>
        /// 返回砸金蛋对应奖励物品需要的背包位置数量
        /// </summary>
        /// <param name="awardNo"></param>
        /// <returns></returns>
        public static int GetZaJinDanAwardGoodsNum(int awardNo)
        {
            SystemXmlItem xmlItem = null;

            //没有相关奖励配置
            if (!GameManager.systemLuckyAward2Mgr.SystemXmlItemDict.TryGetValue(awardNo, out xmlItem))
            {
                return 0;
            }

            //提取奖励配置信息
            string goodsIDs = xmlItem.GetStringValue("GoodsIDs");

            return goodsIDs.Split('|').Count();
        }

        /// <summary>
        /// 给予砸金蛋积分对应的奖励
        /// </summary>
        /// <param name="client"></param>
        /// <param name="priority"></param>
        public static bool GiveZaJinDanAwardForDailyJiFen(GameClient client, int awardNo)
        {
            SystemXmlItem xmlItem = null;

            //没有相关奖励配置
            if (!GameManager.systemLuckyAward2Mgr.SystemXmlItemDict.TryGetValue(awardNo, out xmlItem))
            {
                return false;
            }

            //提取奖励配置信息
            string goodsIDs = xmlItem.GetStringValue("GoodsIDs");

            List<GoodsData> listGoods = Global.ParseGoodsDataListFromGoodsStr(goodsIDs, "砸金蛋每日积分奖励配置文件");

            string awardReason = /**/"砸金蛋每日积分奖励";

            //领取物品
            for (int n = 0; n < listGoods.Count; n++)
            {
                GoodsData goodsData = listGoods[n];

                if (null == goodsData)
                {
                    continue;
                }

                //向DBServer请求加入某个新的物品到背包中
                //添加物品
                goodsData.Id = Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, goodsData.GoodsID,
                    goodsData.GCount, goodsData.Quality, goodsData.Props, goodsData.Forge_level,
                    goodsData.Binding, 0, goodsData.Jewellist, true, 1, awardReason, goodsData.Endtime, goodsData.AddPropIndex, goodsData.BornIndex, goodsData.Lucky, goodsData.Strong);
            }

            return true;
        }

        /// <summary>
        /// 更新砸金蛋积分奖励日常数据, awardNo小于0，表示不直接提交给dbserver，否则增加奖励历史并提交
        /// </summary>
        /// <param name="client"></param>
        /// <param name="dayID"></param>
        /// <param name="priority"></param>
        public static bool UpdateZaJinDanDailyJiFenData(GameClient client, int awardNo = -1)
        {
            if (awardNo >= 0)
            {
                int mask = Global.GetZaJinDanJiFenBits(client);
                mask = mask | Global.GetZaJinDanJiFenMaskValue(awardNo);
                Global.SaveZaJinDanJiFenBits(client, mask);
            }

            //将新的砸金蛋积分奖励日常数据通知自己
            GameManager.ClientMgr.NotifyZaJinDanKAwardDailyData(client);
            return true;
        }

        /// <summary>
        /// 从一个物品配置字符串中随机出一个物品，以标准的将礼物品数组返回
        /// </summary>
        /// <param name="strGoods"></param>
        /// <param name="total"></param>
        /// <returns></returns>
        public static int[] GetRandomGoods(string strGoods)
        {
            if (string.IsNullOrEmpty(strGoods))
            {
                return null;
            }

            string[] strFields = null;
            strFields = strGoods.Split('|');
            if (strFields == null || strFields.Length <= 0)
            {
                return null;
            }

            int rnd = Global.GetRandomNumber(0, strFields.Length);
            return Global.String2IntArray(strFields[rnd]);
        }

        #endregion 砸金蛋积分奖励相关

        #region 试练塔/经验副本

        /// <summary>
        /// 进入试练塔/经验副本
        /// </summary>
        /// <param name="fuBenID"></param>
        public static void EnterShiLianTaFuBen(GameClient client, int fuBenID, SystemXmlItem systemFuBenItem, int goodsBinding)
        {
            int toMapCode = systemFuBenItem.GetIntValue("MapCode");

            //从DBServer获取副本顺序ID
            string[] dbFields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_GETFUBENSEQID, string.Format("{0}", client.ClientData.RoleID), client.ServerId);
            if (null == dbFields || dbFields.Length < 2)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener,
                    Global._TCPManager.TcpOutPacketPool, client,
                    StringUtil.substitute(Global.GetLang("进入试炼塔时错误, 从DBServer获取副本序号失败")),
                    GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                return;
            }

            int fuBenSeqID = Global.SafeConvertToInt32(dbFields[1]);

            //增加副本今日的进入次数
            Global.UpdateFuBenData(client, fuBenID);

            //通知用户切换地图到副本的地图上
            GameMap gameMap = null;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener,
                    Global._TCPManager.TcpOutPacketPool, client,
                    StringUtil.substitute(Global.GetLang("进入试练塔时错误, 地图编号无效")),
                    GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                return;
            }

            //设置角色的副本顺序ID
            client.ClientData.FuBenSeqID = fuBenSeqID;

            //添加一个角色到副本顺序ID的映射
            FuBenManager.AddFuBenSeqID(client.ClientData.RoleID, client.ClientData.FuBenSeqID, goodsBinding, fuBenID);

            GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                client, toMapCode, -1, -1, -1);
        }

        /// <summary>
        /// 返回试练塔副本奖励信息数据
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static ShiLianTaAwardsInfoData GetShiLianTaFuBenAwardsInfoData(GameClient client)
        {
            int fuBenID = FuBenManager.FindFuBenIDByMapCode(client.ClientData.MapCode);
            if (fuBenID <= 0)
            {
                return null;
            }

            if (client.ClientData.FuBenSeqID <= 0)
            {
                return null;
            }

            FuBenInfoItem fuBenInfoItem = FuBenManager.FindFuBenInfoBySeqID(client.ClientData.FuBenSeqID);
            if (null == fuBenInfoItem)
            {
                return null;
            }

            if (fuBenID != fuBenInfoItem.FuBenID)
            {
                return null;
            }

            FuBenMapItem fuBenMapItem = FuBenManager.FindMapCodeByFuBenID(fuBenID, client.ClientData.MapCode);
            if (null == fuBenMapItem)
            {
                return null;
            }

            SystemXmlItem systemItem = Global.FindShiLianTaFuBenItemByMapCode(client);
            if (null == systemItem)
            {
                return null;
            }

            //当前层数，从1开始，失败返回0
            int currentFloor = FuBenManager.FindMapCodeIndexByFuBenID(client.ClientData.MapCode);

            if (currentFloor <= 0)
            {
                return null;
            }

            int nextFloorExperienceAward = 0;

            //判断如果是最后一层，则不显示
            int toNextMapCode = FuBenManager.FindNextMapCodeByFuBenID(client.ClientData.MapCode);
            if (-1 != toNextMapCode)
            {
                FuBenMapItem fuBenMapItem2 = FuBenManager.FindMapCodeByFuBenID(fuBenID, toNextMapCode);
                if (null != fuBenMapItem2)
                {
                    nextFloorExperienceAward = Global.GMax(0, fuBenMapItem2.Experience);
                }
            }

            ShiLianTaAwardsInfoData shiLianTaData = new ShiLianTaAwardsInfoData
            {
                CurrentFloorTotalMonsterNum = 5,//每层都5个，先写死
                CurrentFloorExperienceAward = Global.GMax(0, fuBenMapItem.Experience),
                NextFloorNeedGoodsID = systemItem.GetIntValue("EnterGoods"),
                NextFloorNeedGoodsNum = GetShiLianTaNeedGoodsNum(systemItem.GetIntValue("GoodsNumber"), currentFloor + 1),//下一层消耗的物品数量
                NextFloorExperienceAward = nextFloorExperienceAward,
            };

            return shiLianTaData;
        }

        /// <summary>
        /// 根据基数值 和 层数返回进入试练塔需要消耗的物品数量
        /// </summary>
        /// <param name="baseGoodsNumber"></param>
        /// <param name="floor"></param>
        /// <returns></returns>
        public static int GetShiLianTaNeedGoodsNum(int baseGoodsNumber, int floor)
        {
            int needNum = baseGoodsNumber * floor;
            if (needNum < 0)
            {
                needNum = 1;
            }

            return needNum;
        }

        /// <summary>
        /// 扣除进入试练塔进入下一层需要的物品,返回负数表示错误码
        /// </summary>
        /// <returns></returns>
        public static int DeductShiLianTaNextFloorGateGoods(GameClient client, bool allowAutoBuy = false)
        {
            ShiLianTaAwardsInfoData shiLianTaData = GetShiLianTaFuBenAwardsInfoData(client);
            if (null == shiLianTaData)
            {
                return -1000;
            }

            //需要购买的数量
            //int needBuyGoodsNum = 0;
            //需要扣除的数量
            int needSubGoodsNum = shiLianTaData.NextFloorNeedGoodsNum;

            int myTongTianLing = GameManager.ClientMgr.GetShiLianLingValue(client);

            //试炼令值不够
            if (needSubGoodsNum <= 0 || myTongTianLing < needSubGoodsNum)
            {
                return -1005;
            }

            //从用户物品中扣除消耗的数量===>扣除试炼令
            GameManager.ClientMgr.ModifyShiLianLingValue(client, 0 - needSubGoodsNum, true);
            /*
            //背包中的物品数量
            int goodsNumInBag = Global.GetTotalGoodsCountByID(client, shiLianTaData.NextFloorNeedGoodsID);

            if (goodsNumInBag < 0)
            {
                goodsNumInBag = 0;
            }

            //判断背包内物品是否足够，是否需要购买
            if (goodsNumInBag < shiLianTaData.NextFloorNeedGoodsNum)
            {
                if (allowAutoBuy)
                {
                    needBuyGoodsNum = shiLianTaData.NextFloorNeedGoodsNum - goodsNumInBag;
                    needSubGoodsNum = goodsNumInBag;
                }
                else
                {
                    return -1005;
                }
            }

            bool usedBinding = false;
            bool usedTimeLimited = false;

            //扣除物品
            if (needSubGoodsNum > 0)
            {
                //从用户物品中扣除消耗的数量
                if (!GameManager.ClientMgr.NotifyUseGoods(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, shiLianTaData.NextFloorNeedGoodsID, needSubGoodsNum, false, out usedBinding, out usedTimeLimited))
                {
                    //通知用户使用道具失败
                    string goodsName = Global.GetGoodsNameByID(shiLianTaData.NextFloorNeedGoodsID);
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                        client, StringUtil.substitute(Global.GetLang("进入试练塔下一层时，从背包中扣除【0】个【{1}】失败"), shiLianTaData.NextFloorNeedGoodsNum, goodsName), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                    return -1010;
                }
            }

            //自动扣除money
            if (needBuyGoodsNum > 0)
            {
                //自动扣除元宝购买
                int ret = Global.SubUserMoneyForGoods(client, shiLianTaData.NextFloorNeedGoodsID, needBuyGoodsNum, "试炼塔");

                if (ret <= 0)
                {
                    return ret;
                }
            }
            */
            return 1;
        }
        #endregion 试练塔/经验副本

        #region 生肖竞猜
        /// <summary>
        /// 角色进入生肖竞猜地图
        /// </summary>
        /// <param name="client"></param>
        public static void ClientEnterShengXiaoGuessMap(GameClient client)
        {
            //竞猜地图ID必须合法
            if (GameManager.ShengXiaoGuessMgr.GuessMapCode < 0)
            {
                return;
            }

            //只允许在特殊线路进行
            if (GameManager.ShengXiaoGuessMgr.GetLegalGuessServerLines().IndexOf(GameManager.ServerLineID) < 0)
            {
                return;
            }

            int toMapCode = GameManager.ShengXiaoGuessMgr.GuessMapCode;
            GameMap gameMap = null;
            if (GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
            {
                GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                    client, toMapCode, -1, -1, -1);
                GameManager.ShengXiaoGuessMgr.ClientEnter(client);
            }
        }

        /// <summary>
        /// 返回生肖属性名称
        /// </summary>
        /// <param name="type"></param>
        /// <returns></returns>
        public static String GetShengXiaoNameByCode(int type)
        {
            switch (type)
            {
                case 0x0001:
                    return Global.GetLang("鼠");
                case 0x0002:
                    return Global.GetLang("牛");
                case 0x0004:
                    return Global.GetLang("虎");
                case 0x0008:
                    return Global.GetLang("兔");
                case 0x0010:
                    return Global.GetLang("龙");
                case 0x0020:
                    return Global.GetLang("蛇");
                case 0x0040:
                    return Global.GetLang("马");
                case 0x0080:
                    return Global.GetLang("羊");
                case 0x0100:
                    return Global.GetLang("猴");
                case 0x0200:
                    return Global.GetLang("鸡");
                case 0x0400:
                    return Global.GetLang("狗");
                case 0x0800:
                    return Global.GetLang("猪");
                default:
                    break;
            }

            return "";
        }
        #endregion 生肖竞猜

        #region 寻路相关

        ///AStar 寻路缓存 相关 将路径转换为字符串
        public static String TransPathToString(List<ANode> path)
        {
            String pathStr = "";

            if (null != path)
            {
                for (int n = 0; n < path.Count; n++)
                {
                    ANode node = path[n];

                    if (pathStr.Length > 0)
                    {
                        pathStr += "|";
                    }

                    pathStr += StringUtil.substitute("{0}_{1}", node.x, node.y);
                }
            }

            return pathStr;
        }

        ///AStar 寻路缓存 相关 将路径转换为字符串
        public static String TransPathToString(List<Point> path)
        {
            String pathStr = "";

            if (null != path)
            {
                for (int n = 0; n < path.Count; n++)
                {
                    Point node = path[n];

                    if (pathStr.Length > 0)
                    {
                        pathStr += "|";
                    }

                    pathStr += StringUtil.substitute("{0}_{1}", node.X, node.Y);
                }
            }

            return pathStr;
        }

        ///将字符串转换为路径列表
        public static List<Point> TransStringToPathArr(String pathStr)
        {
            List<Point> path = new List<Point>();
            if (null == pathStr) return path;

            if (null != pathStr && pathStr.Length > 0)
            {
                //分隔出所有的点
                string[] points = pathStr.Split('|');

                //遍历所有的点
                for (int n = 0; n < points.Length; n++)
                {
                    string point = points[n];

                    //分隔每一个点的xy坐标
                    string[] fields = point.Split('_');

                    //出错
                    if (fields.Length != 2)
                    {
                        continue;
                    }

                    Point p = new Point(Global.SafeConvertToInt32(fields[0]), Global.SafeConvertToInt32(fields[1]));
                    path.Add(p);
                }
            }

            return path;
        }

        /// <summary>
        /// 修改AStar寻路Open队列的最大检测值
        /// </summary>
        /// <param name="maxOpenNodeValue"></param>
        public static void ModifyMaxOpenNodeCountForAStar(int maxOpenNodeValue)
        {
            if (maxOpenNodeValue > 8)
            {
                AStar.MaxOpenNodeCount = maxOpenNodeValue;
            }
        }

        /// <summary>
        /// 矫正客户端发送的Path路径
        /// </summary>
        /// <param name="path"></param>
        /// <returns></returns>
        public static List<Point> CheckPathNode(GameClient client, List<Point> path)
        {
            if (path.Count <= 0)
            {
                return path;
            }

            Point grid = client.CurrentGrid;
            int findIndex = 0;
            int maxDistance = 100000000;
            for (int i = 0; i < path.Count; i++)
            {
                int distance = (int)Global.GetTwoPointDistance(path[i], grid);
                if (distance < maxDistance)
                {
                    findIndex = i;
                    maxDistance = distance;
                }
            }

            if (findIndex > 0 && findIndex < path.Count)
            {
                path.RemoveRange(0, findIndex);
            }

            return path;
        }

        #endregion

        #region 角色参数管理(注意太频繁的更新，需要外部控制是否实时提交)

        /// <summary>
        /// 获取角色参数
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static string GetRoleParamByName(GameClient client, string name)
        {
            if (null == client.ClientData.RoleParamsDict) return null;

            lock (client.ClientData.RoleParamsDict)
            {
                RoleParamsData roleParamsData = null;
                if (client.ClientData.RoleParamsDict.TryGetValue(name, out roleParamsData))
                {
                    return roleParamsData.ParamValue;
                }
            }

            return null;
        }


        /// <summary>
        /// 角色参数增加一个值,这个参数值必须是整数
        /// </summary>
        /// <param name="client"></param>
        /// <param name="name"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public static long AddRoleParamByName(GameClient client, string name, long value, bool writeToDB = false)
        {
            long result = -1;
            string valueStr;

            if (null == client.ClientData.RoleParamsDict)
            {
                client.ClientData.RoleParamsDict = new Dictionary<string, RoleParamsData>();
            }

            lock (client.ClientData.RoleParamsDict)
            {
                valueStr = GetRoleParamByName(client, name);
                if (string.IsNullOrEmpty(valueStr))
                {
                    result = 0;
                }
                else if (!long.TryParse(valueStr, out result))
                {
                    return -1;
                }

                result += value;
                UpdateRoleParamByName(client, name, result.ToString(), writeToDB);
            }

            return result;
        }

        /// <summary>
        /// 更新角色参数
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static void UpdateRoleParamByName(GameClient client, string name, string value, bool writeToDB = false)
        {
            if (null == client.ClientData.RoleParamsDict)
            {
                client.ClientData.RoleParamsDict = new Dictionary<string, RoleParamsData>();
            }

            lock (client.ClientData.RoleParamsDict)
            {
                RoleParamsData roleParamsData = null;
                if (!client.ClientData.RoleParamsDict.TryGetValue(name, out roleParamsData))
                {
                    roleParamsData = new RoleParamsData()
                    {
                        ParamName = name,
                        ParamValue = value,
                    };

                    client.ClientData.RoleParamsDict[name] = roleParamsData;
                }
                else
                {
                    if (roleParamsData.ParamValue == value && !string.IsNullOrEmpty(value))
                    {
                        return;
                    }
                    roleParamsData.ParamValue = value;
                }
            }

            if (writeToDB)
            {
                GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEROLEPARAM,
                    string.Format("{0}:{1}:{2}", client.ClientData.RoleID, name, value), null, client.ServerId);

                return; //没有必要再延迟提交了
            }

            //标记延迟提交
            Global.SetLastDBRoleParamCmdTicks(client, name, TimeUtil.NOW());
        }

        /// <summary>
        /// 更新离线角色参数数据
        /// </summary>
        /// <param name="client"></param>
        /// <param name="name"></param>
        /// <param name="value"></param>
        public static void UpdateRoleParamByNameOffline(int roleId, string name, string value, int serverId)
        {
            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEROLEPARAM, string.Format("{0}:{1}:{2}", roleId, name, value), null, serverId);
        }

        #endregion 角色参数管理(注意太频繁的更新，需要外部控制是否实时提交)

        #region NPC脚本相关

        /// <summary>
        /// 返回npc 对应脚本文件路径,失败返回空
        /// extensionID 是索引扩展ID，实际上等同于配置文件中的npcID
        /// </summary>
        /// <param name="npcID"></param>
        /// <returns></returns>
        public static String GetNpcLuaScriptFile(int extensionID)
        {
            String npcLuaScriptFile = "";

            SystemXmlItem systemNPC = null;
            if (GameManager.SystemNPCsMgr.SystemXmlItemDict.TryGetValue(extensionID, out systemNPC))
            {
                //查询是否有Lua功能脚本
                npcLuaScriptFile = systemNPC.GetStringValue("LuaScriptFile");

                if (null == npcLuaScriptFile)
                {
                    npcLuaScriptFile = "";
                }
                else
                {
                    npcLuaScriptFile = npcLuaScriptFile.Trim();

                    //生成完整的npc脚本文件路径
                    npcLuaScriptFile = DataHelper.CurrentDirectory + @"scripts/npc/" + npcLuaScriptFile;
                }
            }

            return npcLuaScriptFile;
        }

        /// <summary>
        /// 获取内置脚本调用的lua脚本的ID(固定放在 程序目录/scripts/run 目录下 文件名称为 数字.lua)
        /// </summary>
        /// <param name="fileID"></param>
        /// <returns></returns>
        public static string GetRunLuaScriptFile(int fileID)
        {
            //生成完整的npc脚本文件路径
            return DataHelper.CurrentDirectory + @"scripts/run/" + fileID.ToString() + ".lua";
        }

        /// <summary>
        /// 获取过场动画的脚本(固定放在 程序目录/scripts/taskplot 目录下 文件名称为 配置名称.lua)
        /// </summary>
        /// <param name="fileID"></param>
        /// <returns></returns>
        public static string GetTaskPlotLuaScriptFile(int taskPlotID, int startOrEnd)
        {
            SystemXmlItem systemTaskPlotIem = null;
            if (!GameManager.SystemTaskPlots.SystemXmlItemDict.TryGetValue(taskPlotID, out systemTaskPlotIem))
            {
                return "";
            }

            string fileName = "";
            if (0 == startOrEnd)
            {
                fileName = systemTaskPlotIem.GetStringValue("StartLuaFile");
            }
            else
            {
                fileName = systemTaskPlotIem.GetStringValue("EndLuaFile");
            }

            if (string.IsNullOrEmpty(fileName))
            {
                return "";
            }

            //生成完整的npc脚本文件路径
            return DataHelper.CurrentDirectory + @"scripts/taskplot/" + fileName;
        }

        /// <summary>
        /// 获取过区域触发的脚本(固定放在 程序目录/scripts/area 目录下)
        /// </summary>
        /// <param name="fileID"></param>
        /// <returns></returns>
        public static string GetAreaLuaScriptFile(string fileName)
        {
            //生成完整的npc脚本文件路径
            return DataHelper.CurrentDirectory + @"scripts/area/" + fileName;
        }

        /// <summary>
        /// 获取进入地图触发的脚本(固定放在 程序目录/scripts/map/地图编号/ 目录下)
        /// </summary>
        /// <param name="fileID"></param>
        /// <returns></returns>
        public static string GetMapLuaScriptFile(int mapCode, string fileName)
        {
            //生成完整的npc脚本文件路径
            return DataHelper.CurrentDirectory + @"scripts/map/" + mapCode.ToString() + "/" + fileName;
        }

#if SHARPLUA

        /// <summary>
        /// 执行Lua 函数,返回执行结果数组
        /// </summary>
        /// <param name="luaFile"></param>
        /// <param name="luaFunction"></param>
        /// <param name="luaFuncParams"></param>
        /// <returns></returns>
        public static object[] ExcuteLuaFunction(GameClient client, String luaFile, String luaFunction, Object[] luaFuncParams = null, LuaCallResultData luaCallResultData = null)
        {
            Object[] values = null;

            LuaInterface lua = null;

            try
            {
                //进行文件有效性验证
                if (luaFile.IndexOf(".lua") < 0)
                {
                    return values;
                }

                if (!File.Exists(luaFile))
                {
                    return values;
                }

                //lua = GameManager.SystemLuaVM.Pop();
                lua = new LuaInterface();

                //额外参数采用lua table方式传递,各个字段依次是 v0, v1, v2, v3 ......
                /*if (luaFuncParams != null && luaFuncParams.Length > 0)
                {
                    if (null == lua.GetTable("tab"))
                    {
                        lua.NewTable("tab");
                    }

                    for (int n = 0; n < luaFuncParams.Length; n++)
                    {
                        lua[String.Format("tab.v{0}", n)] = luaFuncParams[n];
                    }
                }*/

                //lua["luaMgr"] = GameManager.LuaMgr;
                //lua["client"] = client;
                lua.DoFile(luaFile);

                //执行lua 函数,必须至少返回一个字符串
                values = lua.GetFunction(luaFunction).Call(GameManager.LuaMgr, client, /*lua.GetTable("tab")*/null);

                if (null != luaCallResultData)
                {
                    //配置执行结果,如果有返回结果，第一个结果强行配置成一个字符串
                    if (null != values && values[0] != null)
                    {
                        String sResult1 = values.Length > 0 ? values[0].ToString() : null;

                        //返回的字符串进行编码处理,这要求lua文件必须是utf8编码
                        luaCallResultData.Result = sResult1; // Encoding.UTF8.GetString(Encoding.Default.GetBytes(sResult1));
                    }

                    luaCallResultData.IsSuccess = 1;
                    luaCallResultData.LuaFunction = String.Format("{0}()", luaFunction);
                }

                //lua.DoString("luaMgr=nil;client=nil;collectgarbage();");
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, string.Format("ExcuteLuaFunction roleID[{0}] file[{1}] function[{2}]", client.ClientData.RoleID, luaFile, luaFunction), false);

                if (null != luaCallResultData)
                {
                    //这个错误不用Global.GetLang()，出错了中文好查找
                    luaCallResultData.LuaFunction = String.Format("执行脚本{0}() 失败", luaFunction);
                    luaCallResultData.IsSuccess = 0;
                }
            }
            finally
            {
                if (null != lua)
                {
                    lua.Dispose();
                    lua = null;
                    //GameManager.SystemLuaVM.Push(lua);
                }
            }

            return values;
        }

#else


        /// <summary>
        /// 执行Lua 函数,返回执行结果数组
        /// </summary>
        /// <param name="luaFile"></param>
        /// <param name="luaFunction"></param>
        /// <param name="luaFuncParams"></param>
        /// <returns></returns>
        public static object[] ExcuteLuaFunction(GameClient client, String luaFile, String luaFunction, Object[] luaFuncParams = null, LuaCallResultData luaCallResultData = null)
        {
            object[] values = null;
            //Lua lua = null;

            try
            {
                //进行文件有效性验证
                if (luaFile.IndexOf(".lua") < 0)
                {
                    return values;
                }

                if (!File.Exists(luaFile))
                {
                    return values;
                }


                //Func<string> code = () => File.ReadAllText(Path.GetFullPath(luaFile));
                //string chunkName = Path.GetFileName(luaFile);


                //lua = new Lua();

                //LuaGlobal g = lua.CreateEnvironment(); // create a environment

                //// compile chunk
                //LuaChunk c = lua.CompileChunk(code(), chunkName, false);

                //// run chunk
                //g.DoChunk(c);
                //long ticks = TimeUtil.NOW();
                LuaGlobal g = LuaExeManager.getInstance().ExeLua(luaFile);
                LuaResult retValue = LuaExeManager.getInstance().ExecLuaFunction(GameManager.LuaMgr, g, luaFunction, client);
                //SysConOut.WriteLine(string.Format("g.DoChunk耗时 {0}", TimeUtil.NOW() - ticks));
                if (null != retValue)
                {
                    values = retValue.Values;
                }

                if (null != luaCallResultData)
                {
                    //配置执行结果,如果有返回结果，第一个结果强行配置成一个字符串
                    if (null != values && values.Length > 0 && values[0] != null)
                    {
                        String sResult1 = values[0].ToString();
                        //返回的字符串进行编码处理,这要求lua文件必须是utf8编码
                        luaCallResultData.Result = sResult1; // Encoding.UTF8.GetString(Encoding.Default.GetBytes(sResult1));
                    }
                    else
                    {
                        luaCallResultData.Result = null;
                    }

                    luaCallResultData.IsSuccess = 1;
                    luaCallResultData.LuaFunction = String.Format("{0}()", luaFunction);
                }

                //lua.DoString("luaMgr=nil;client=nil;collectgarbage();");
            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, string.Format("ExcuteLuaFunction roleID[{0}] file[{1}] function[{2}]", client.ClientData.RoleID, luaFile, luaFunction), false);

                if (null != luaCallResultData)
                {
                    //这个错误不用Global.GetLang()，出错了中文好查找
                    luaCallResultData.LuaFunction = String.Format("执行脚本{0}() 失败", luaFunction);
                    luaCallResultData.IsSuccess = 0;
                }
            }
            finally
            {
                //if (null != lua)
                //{
                //    lua.Dispose();
                //    lua = null;
                //    //GameManager.SystemLuaVM.Push(lua);
                //}
            }

            return values;
        }

#endif //SHARPLUA

        /// <summary>
        /// 执行npc脚本对话
        /// </summary>
        /// <param name="client"></param>
        /// <param name="mapCode"></param>
        /// <param name="npcID"></param>
        /// <param name="extensionID"></param>
        public static void ExecNpcTalkText(GameClient client, int mapCode, int npcID, int extensionID, int forceRefresh = 0)
        {
            LuaCallResultData luaCallResultData = new LuaCallResultData()
            {
                RoleID = client.ClientData.RoleID,
                MapCode = mapCode,
                NPCID = npcID,
                ExtensionID = extensionID,
                IsSuccess = -1,//执行结果先设置成失败
                Result = "未执行",
                ForceRefresh = forceRefresh,
            };

            //这个协议被扩展，NPCID 小于0， 则ExtensionID 就是文件ID
            //生成脚本文件路径
            String scriptFile = "";
            if (npcID > 0)
            {
                scriptFile = Global.GetNpcLuaScriptFile(extensionID);
            }
            else
            {
                scriptFile = Global.GetRunLuaScriptFile(extensionID);
            }

            //执行对话脚本
            Global.ExcuteLuaFunction(client, scriptFile, "talk", null, luaCallResultData);

            TCPOutPacket tcpOutPacket = DataHelper.ObjectToTCPOutPacket<LuaCallResultData>(luaCallResultData, Global._TCPManager.TcpOutPacketPool, (int)TCPGameServerCmds.CMD_SPR_EXCUTENPCLUATALK);
            if (!Global._TCPManager.MySocketListener.SendData(client.ClientSocket, tcpOutPacket))
            {
                //
                /*LogManager.WriteLog(LogTypes.Error, string.Format("向用户发送tcp数据失败: ID={0}, Size={1}, RoleID={2}, RoleName={3}",
                    tcpOutPacket.PacketCmdID,
                    tcpOutPacket.PacketDataSize,
                    client.ClientData.RoleID,
                    client.ClientData.RoleName));*/
            }
        }

        #endregion NPC脚本相关

        #region 通用字符串参数列表管理

        /// <summary>
        /// 主要用于管理类似 A|zz;B|dd;E|mm 这类对map进行映射的字符串 split1 : ; split2: |
        /// </summary>
        /// <param name="warReqString"></param>
        /// <returns></returns>
        public static Dictionary<String, String> StringToMap(String strValue, char split1 = ';', char split2 = '|')
        {
            Dictionary<String, String> dict = new Dictionary<String, String>();

            if (null == strValue || strValue.Length <= 0)
            {
                return dict;
            }

            String[] reqItems = strValue.Split(split1);
            String[] item = null;
            for (int n = 0; n < reqItems.Length; n++)
            {
                item = reqItems[n].Split(split2);

                if (item.Length != 2) continue;

                dict.Add(item[0], item[1]);
            }

            return dict;
        }

        /// <summary>
        /// 主要用于管理类似 A|zz;B|dd;E|mm 这类对map进行映射的字符串 split1 : ; split2: |
        /// </summary>
        /// <returns></returns>
        public static String MapToString(Dictionary<String, String> dict, char split1 = ';', char split2 = '|')
        {
            String strValue = "";

            for (int n = 0; n < dict.Count; n++)
            {
                if (strValue.Length > 0)
                {
                    strValue += split1;
                }
                strValue += String.Format("{0}{1}{2}", dict.ElementAt(n).Key, split2, dict.ElementAt(n).Value);
            }

            return strValue;
        }

        /// <summary>
        /// 主要用于管理类似 A;B;E 这类对List进行映射的字符串 split1 : ;
        /// </summary>
        /// <param name="warReqString"></param>
        /// <returns></returns>
        public static List<String> StringToList(String strValue, char split1 = ';')
        {
            List<String> ls = new List<String>();

            if (null == strValue || strValue.Length <= 0)
            {
                return ls;
            }

            String[] reqItems = strValue.Split(split1);
            for (int n = 0; n < reqItems.Length; n++)
            {
                ls.Add(reqItems[n]);
            }

            return ls;
        }

        /// <summary>
        /// 主要用于管理类似 A;B;E 这类对map进行映射的字符串 split1 : ;
        /// </summary>
        /// <returns></returns>
        public static String ListToString(List<String> ls, char split1 = ';')
        {
            String strValue = "";

            for (int n = 0; n < ls.Count; n++)
            {
                if (strValue.Length > 0)
                {
                    strValue += split1;
                }
                strValue += ls.ElementAt(n);
            }

            return strValue;
        }

        public static string ListToString<T>(List<T> ls, char split1 = '$')
        {
            if (null == ls)
            {
                return "";
            }
            StringBuilder sb = new StringBuilder();
            foreach (T v in ls)
            {
                sb.Append(v);
                sb.Append(split1);
            }
            return sb.ToString().TrimEnd(split1);
        }

        public static List<int> StringToIntList(string str, char split1 = '$')
        {
            List<int> ls = new List<int>();
            if (null != str && str.Length > 0)
            {
                string[] arr = str.Split(split1);
                foreach (var s in arr)
                {
                    ls.Add(Global.SafeConvertToInt32(s));
                }
            }
            return ls;
        }

        #endregion 通用字符串参数列表管理

        #region 坐标变换 格子 坐标 和 像素坐标的互换

        /// <summary>
        /// 格子坐标转换为像素坐标
        /// </summary>
        /// <param name="mapCode"></param>
        /// <param name="grid"></param>
        /// <returns></returns>
        public static Point GridToPixel(int mapCode, double gridX, double gridY)
        {
            GameMap gameMap = GameManager.MapMgr.DictMaps[mapCode];
            if (null == gameMap)
            {
                //return new Point(gridX * 64 + 32, gridY * 32 + 16);
                return new Point(0, 0);
            }

            Point pixel = new Point(gridX * gameMap.MapGridWidth + gameMap.MapGridWidth / 2,
                gridY * gameMap.MapGridHeight + gameMap.MapGridHeight / 2);

            return pixel;
        }

        /// <summary>
        /// 格子坐标转换为像素坐标
        /// </summary>
        /// <param name="mapCode"></param>
        /// <param name="grid"></param>
        /// <returns></returns>
        public static Point GridToPixel(int mapCode, Point grid)
        {
            return GridToPixel(mapCode, grid.X, grid.Y);
        }

        /// <summary>
        /// 像素坐标转换为格子坐标
        /// </summary>
        /// <param name="mapCode"></param>
        /// <param name="pixel"></param>
        /// <returns></returns>
        public static Point PixelToGrid(int mapCode, double pixelX, double pixelY)
        {
            GameMap gameMap = GameManager.MapMgr.DictMaps[mapCode];
            if (null == gameMap)
            {
                return new Point(pixelX / 64, pixelY / 32);
            }

            Point grid = new Point(pixelX / gameMap.MapGridWidth, pixelY / gameMap.MapGridHeight);

            return grid;
        }

        /// <summary>
        /// 像素坐标转换为格子坐标
        /// </summary>
        /// <param name="mapCode"></param>
        /// <param name="pixel"></param>
        /// <returns></returns>
        public static Point PixelToGrid(int mapCode, Point pixel)
        {
            return PixelToGrid(mapCode, pixel.X, pixel.Y);
        }

        #endregion 坐标变换 格子 坐标 和 像素坐标的互换

        #region 玩家召唤怪物相关

        /// <summary>
        /// 杀死玩家召唤的所有怪物,这需要设置 Alive = false, 后台线程会自动移除
        /// </summary>
        /// <param name="client"></param>
        public static void KillAllSummonMonsters(GameClient client)
        {
            for (int n = 0; n < client.ClientData.SummonMonstersList.Count; n++)
            {
                Monster monster = client.ClientData.SummonMonstersList[n];

                SystemKillMonster(client, monster);
            }
        }

        /// <summary>
        /// 系统杀死怪物
        /// </summary>
        /// <param name="monster"></param>
        public static void SystemKillMonster(GameClient client, Monster monster)
        {
            // 属性改造 加上一级属性公式 区分职业[8/15/2013 LiaoWei]
            int nOcc = Global.CalcOriginalOccupationID(client);

            //模拟杀死怪物，使用一个特殊的数值，客户端也进行判断，如果是这样的杀死，则不报告伤害数字
            GameManager.MonsterMgr.NotifyInjured(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                client, monster, 0, (int)(Math.Pow(2, 31) - 1), 1.0, nOcc, false, 0, 1.0, 0, 0, 0, 0.0, 0.0, false, 1, 0);
        }

        /// <summary>
        /// 系统杀死怪物
        /// </summary>
        /// <param name="monster"></param>
        public static void SystemKillMonster(Monster monster)
        {
            //模拟杀死怪物，使用一个特殊的数值，客户端也进行判断，如果是这样的杀死，则不报告伤害数字
            GameManager.MonsterMgr.Monster_NotifyInjured(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                monster, monster, 0, (int)(Math.Pow(2, 31) - 1), 1.0, 0, false, 0, 1.0, 0, 0, 0, 0.0, 0.0, false);
        }

        /// <summary>
        /// 系统杀死召唤的某类怪物怪物
        /// </summary>
        /// <param name="monster"></param>
        public static void SystemKillSummonMonster(GameClient client, MonsterTypes type)
        {
            for (int n = 0; n < client.ClientData.SummonMonstersList.Count; n++)
            {
                Monster monster = client.ClientData.SummonMonstersList[n];

                if ((int)type == monster.MonsterType)
                {
                    SystemKillMonster(client, monster);
                }
            }
        }

        /// <summary>
        /// 系统杀死召唤的某ID怪物
        /// </summary>
        /// <param name="monster"></param>
        public static void SystemKillSummonMonster(GameClient client, int monsterID)
        {
            for (int n = 0; n < client.ClientData.SummonMonstersList.Count; n++)
            {
                Monster monster = client.ClientData.SummonMonstersList[n];
#if ___CC___FUCK___YOU___BB___
                if (-1 == monsterID || monsterID == monster.XMonsterInfo.MonsterId)
                {
                    SystemKillMonster(client, monster);
                }
#else
                if (-1 == monsterID || monsterID == monster.MonsterInfo.ExtensionID)
                {
                    SystemKillMonster(client, monster);
                }
#endif
            }
        }

        /// <summary>
        /// 通过宠物怪角色类型 返回自己控制的宠物怪
        /// </summary>
        /// <param name="client"></param>
        /// <param name="monsterRoleID"></param>
        /// <returns></returns>
        public static Monster GetPetMonsterByMonsterByType(GameClient client, MonsterTypes type)
        {
            for (int n = 0; n < client.ClientData.SummonMonstersList.Count; n++)
            {
                Monster monster = client.ClientData.SummonMonstersList[n];

                if ((int)type == monster.MonsterType)
                {
                    return monster;
                }
            }

            return null;
        }

        /// <summary>
        /// 通过宠物怪角色ID 返回自己控制的宠物怪
        /// </summary>
        /// <param name="client"></param>
        /// <param name="monsterRoleID"></param>
        /// <returns></returns>
        public static Monster GetPetMonsterByMonsterRoleID(GameClient client, int monsterRoleID)
        {
            for (int n = 0; n < client.ClientData.SummonMonstersList.Count; n++)
            {
                Monster monster = client.ClientData.SummonMonstersList[n];

                if (monsterRoleID == monster.RoleID)
                {
                    return monster;
                }
            }

            return null;
        }

        /// <summary>
        /// 重新计算道士召唤的怪物的属性
        /// </summary>
        /// <param name="client"></param>
        /// <param name="monster"></param>
        public static void RecalcDSMonsterProps(GameClient client, Monster monster)
        {
#if ___CC___FUCK___YOU___BB___
            int[] props = null;
            if (monster.XMonsterInfo.MonsterId == GameManager.systemParamsList.GetParamValueIntByName("DSMonsterKuLouID"))
            {
                props = GameManager.systemParamsList.GetParamValueIntArrayByName("DSMonsterKuLouProps");
            }
            else if (monster.XMonsterInfo.MonsterId == GameManager.systemParamsList.GetParamValueIntByName("DSMonsterShenShouID"))
            {
                props = GameManager.systemParamsList.GetParamValueIntArrayByName("DSMonsterShenShouProps");
            }
            else
            {
                return;
            }

            if (null == props || props.Length != 5)
            {
                return;
            }

            //物理防御	魔法防御	最小攻击	最大攻击	血量

            monster.XMonsterInfo.Pd = props[0] * client.ClientData.Level;
            
            monster.XMonsterInfo.MaxHP = props[4] * client.ClientData.Level;
            monster.VLife = monster.XMonsterInfo.MaxHP;
#else
             int[] props = null;
            if (monster.MonsterInfo.ExtensionID == GameManager.systemParamsList.GetParamValueIntByName("DSMonsterKuLouID"))
            {
                props = GameManager.systemParamsList.GetParamValueIntArrayByName("DSMonsterKuLouProps");
            }
            else if (monster.MonsterInfo.ExtensionID == GameManager.systemParamsList.GetParamValueIntByName("DSMonsterShenShouID"))
            {
                props = GameManager.systemParamsList.GetParamValueIntArrayByName("DSMonsterShenShouProps");
            }
            else
            {
                return;
            }

            if (null == props || props.Length != 5)
            {
                return;
            }
            monster.XMonsterInfo.Defense = props[0] * client.ClientData.Level;
            monster.XMonsterInfo.MDefense = props[1] * client.ClientData.Level;
            monster.XMonsterInfo.MinAttack = props[2] * client.ClientData.Level;
            monster.XMonsterInfo.MaxAttack = props[3] * client.ClientData.Level;
            monster.XMonsterInfo.VLifeMax = props[4] * client.ClientData.Level;
            monster.VLife = monster.XMonsterInfo.VLifeMax;
#endif

        }

#endregion 玩家召唤怪物相关

#region 玩家参数存储相关

        public static GameClient MakeGameClientForGetRoleParams(RoleDataEx roleDataEx)
        {
            //保存客户端数据的线程安全对象
            SafeClientData clientData = new SafeClientData()
            {
                RoleData = roleDataEx,
            };

            //将此用户加入管理队列中
            GameClient gameClient = new GameClient()
            {
                ClientData = clientData,
            };

            return gameClient;
        }

        /// <summary>
        /// 以 整数形式 返回角色的参数数据 没有配置则返回 0
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int GetRoleParamsInt32FromDB(GameClient client, String roleParamsKey)
        {
            String valueString = Global.GetRoleParamByName(client, roleParamsKey);

            if (String.IsNullOrEmpty(valueString))
            {
                return 0;
            }

            return Global.SafeConvertToInt32(valueString);
        }

        // 增加一个接口 [7/31/2013 LiaoWei]
        /// <summary>
        /// 以 整数形式 返回角色的参数数据 没有配置则返回 0
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static long GetRoleParamsInt64FromDB(GameClient client, String roleParamsKey)
        {
            String valueString = Global.GetRoleParamByName(client, roleParamsKey);

            if (String.IsNullOrEmpty(valueString))
            {
                return 0;
            }

            return Global.SafeConvertToInt64(valueString);
        }


        /// <summary>
        /// 返回角色的参数数据 没有配置则返回 0
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static DateTime GetRoleParamsDateTimeFromDB(GameClient client, String roleParamsKey)
        {
            long ticks = 0;
            String valueString = Global.GetRoleParamByName(client, roleParamsKey);

            if (!String.IsNullOrEmpty(valueString))
            {
                ticks = Global.SafeConvertToInt64(valueString);
                if (ticks == 0 && valueString != "0")
                {
                    //为兼容转换前后的数据，以前有数据的为1，没数据的为0，在新项目中不需要如此
                    ticks = 1;
                }
            }

            return new DateTime(ticks);
        }

        /// <summary>
        /// 以 字符串形式，可能带有空字符 返回角色的参数数据
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static String GetRoleParamsStringWithNullFromDB(GameClient client, String roleParamsKey)
        {
            String valueString = Global.GetRoleParamByName(client, roleParamsKey);

            if (String.IsNullOrEmpty(valueString))
            {
                return valueString;
            }

            byte[] bytes = Convert.FromBase64String(valueString);

            valueString = Encoding.GetEncoding("latin1").GetString(bytes);

            return valueString;
        }

        /// <summary>
        /// 以 ulong 列表 返回角色的参数数据
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static List<ulong> GetRoleParamsUlongListFromDB(GameClient client, String roleParamsKey)
        {
            List<ulong> lsValues = new List<ulong>();

            String valueString = GetRoleParamsStringWithNullFromDB(client, roleParamsKey);

            if (String.IsNullOrEmpty(valueString))
            {
                return lsValues;
            }

            int pos = 0;
            int usedLenght = 0;

            //依次生成各个64位整数
            while (usedLenght < valueString.Length)
            {
                byte[] bytes_8 = Encoding.GetEncoding("latin1").GetBytes(valueString.Substring(pos, 8));
                lsValues.Add(BitConverter.ToUInt64(bytes_8, 0));

                pos += 8;
                usedLenght += 8;
            }

            return lsValues;
        }

        /// <summary>
        /// 以 int 列表 返回角色的参数数据
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static List<int> GetRoleParamsIntListFromDB(GameClient client, String roleParamsKey)
        {
            List<int> lsValues = new List<int>();

            String valueString = GetRoleParamsStringWithNullFromDB(client, roleParamsKey);

            if (String.IsNullOrEmpty(valueString))
            {
                return lsValues;
            }

            int pos = 0;
            int usedLenght = 0;

            //依次生成各个32位整数
            while (usedLenght < valueString.Length)
            {
                byte[] bytes_4 = Encoding.GetEncoding("latin1").GetBytes(valueString.Substring(pos, 4));
                lsValues.Add(BitConverter.ToInt32(bytes_4, 0));

                pos += 4;
                usedLenght += 4;
            }

            return lsValues;
        }

        /// <summary>
        /// 以 uint 列表 返回角色的参数数据
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static List<uint> GetRoleParamsUIntListFromDB(GameClient client, String roleParamsKey)
        {
            List<uint> lsValues = new List<uint>();

            String valueString = GetRoleParamsStringWithNullFromDB(client, roleParamsKey);

            if (String.IsNullOrEmpty(valueString))
            {
                return lsValues;
            }

            int pos = 0;
            int usedLenght = 0;

            //依次生成各个32位整数
            while (usedLenght < valueString.Length)
            {
                byte[] bytes_4 = Encoding.GetEncoding("latin1").GetBytes(valueString.Substring(pos, 4));
                lsValues.Add(BitConverter.ToUInt32(bytes_4, 0));

                pos += 4;
                usedLenght += 4;
            }

            return lsValues;
        }

        /// <summary>
        /// 以 ushort 列表 返回角色的参数数据
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static List<ushort> GetRoleParamsUshortListFromDB(GameClient client, String roleParamsKey)
        {
            List<ushort> lsValues = new List<ushort>();

            String valueString = GetRoleParamsStringWithNullFromDB(client, roleParamsKey);

            if (String.IsNullOrEmpty(valueString))
            {
                return lsValues;
            }

            int pos = 0;
            int usedLenght = 0;

            //依次生成各个16位整数
            while (usedLenght < valueString.Length)
            {
                byte[] bytes_2 = Encoding.GetEncoding("latin1").GetBytes(valueString.Substring(pos, 2));
                lsValues.Add(BitConverter.ToUInt16(bytes_2, 0));

                pos += 2;
                usedLenght += 2;
            }

            return lsValues;
        }

        /// <summary>
        /// 角色整数参数数据库参考时间,这个时间一般取必当前时间大好多年的参数
        /// </summary>
        public const String RoleInt32ParamsDBReferenceTime = "2020-12-12 12:12:12";

        /// <summary>
        /// 以 特殊字符串形式将整数数据存储到数据库角色参数部分，整数将附加上时间戳【时间挫参考某个时间点】
        /// 这样便于对该字段进行排序读取,refTime 如果是比当前时间点大得多的时间，则数据库查询时从小到大或者从大道小都好排序
        /// 如果是比当前时间小，或者用1970年的标准时间戳，那样数据库比较不好排序
        /// </summary>
        /// <param name="client"></param>
        /// <param name="chengJiuString"></param>
        public static void SaveRoleParamsInt32ValueWithTimeStampToDB(GameClient client, String roleParamsKey, Int32 nValue, bool writeToDB = false, String refTime = RoleInt32ParamsDBReferenceTime)
        {
            DateTime referenceTime = DateTime.Parse(refTime);
            TimeSpan ts = TimeUtil.NowDateTime() - referenceTime;

            //String sValue = String.Format("{0:0000000000}_{1}", nValue, ts.TotalSeconds);
            Global.UpdateRoleParamByName(client, roleParamsKey, nValue.ToString(), writeToDB);
        }

        /// <summary>
        /// 返回以 特殊字符串形式将整数数据存储到数据库角色参数部分的非时间戳部分的整数，整数将附加上时间戳【时间挫参考某个时间点】
        /// 这样便于对该字段进行排序读取,refTime 如果是比当前时间点大得多的时间，则数据库查询时从小到大或者从大道小都好排序
        /// 如果是比当前时间小，或者用1970年的标准时间戳，那样数据库比较不好排序
        /// </summary>
        /// <param name="client"></param>
        /// <param name="chengJiuString"></param>
        public static Int32 GetRoleParamsInt32ValueWithTimeStampFromDB(GameClient client, String roleParamsKey, String refTime = RoleInt32ParamsDBReferenceTime)
        {
            String sValue = Global.GetRoleParamByName(client, roleParamsKey);

            if (String.IsNullOrEmpty(sValue))
            {
                return 0;
            }

            String[] sArr = sValue.Split('_');

            return Global.SafeConvertToInt32(sArr[0]);
        }

        /// <summary>
        /// 以 字符串形式 将整数数据存储到数据库角色参数部分
        /// </summary>
        /// <param name="client"></param>
        /// <param name="chengJiuString"></param>
        /// <param name="writeToDB">变化是否频繁且不重要的数据，传false</param>
        public static void SaveRoleParamsInt32ValueToDB(GameClient client, String roleParamsKey, Int32 nValue, bool writeToDB)
        {
            Global.UpdateRoleParamByName(client, roleParamsKey, nValue.ToString(), writeToDB);
        }

        // 增加一个接口 [7/31/2013 LiaoWei]
        /// <summary>
        /// 以 字符串形式 将整数数据存储到数据库角色参数部分
        /// </summary>
        /// <param name="client"></param>
        /// <param name="chengJiuString"></param>
        public static void SaveRoleParamsInt64ValueToDB(GameClient client, String roleParamsKey, Int64 nValue, bool writeToDB)
        {
            Global.UpdateRoleParamByName(client, roleParamsKey, nValue.ToString(), writeToDB);
        }

        /// <summary>
        /// 以 字符串形式 [不能带有空字符，属于正常字符串] 将数据存储到数据库角色参数部分
        /// </summary>
        /// <param name="client"></param>
        /// <param name="chengJiuString"></param>
        public static void SaveRoleParamsStringToDB(GameClient client, String roleParamsKey, String valueString, bool writeToDB)
        {
            Global.UpdateRoleParamByName(client, roleParamsKey, valueString, writeToDB);
        }

        /// <summary>
        /// 以 字符串形式 [可能带有空字符] 将数据存储到数据库角色参数部分
        /// </summary>
        /// <param name="client"></param>
        /// <param name="chengJiuString"></param>
        public static void SaveRoleParamsStringWithNullToDB(GameClient client, String roleParamsKey, String valueString, bool writeToDB)
        {
            byte[] bytes = Encoding.GetEncoding("latin1").GetBytes(valueString);

            Global.UpdateRoleParamByName(client, roleParamsKey, Convert.ToBase64String(bytes), writeToDB);
        }

        /// <summary>
        /// 以 整形形式 将数据存储到数据库角色参数部分
        /// </summary>
        /// <param name="client"></param>
        /// <param name="chengJiuString"></param>
        public static void SaveRoleParamsDateTimeToDB(GameClient client, String roleParamsKey, DateTime dateTime, bool writeToDB)
        {
            Global.UpdateRoleParamByName(client, roleParamsKey, dateTime.Ticks.ToString(), writeToDB);
        }

        /// <summary>
        /// 以 ushort 列表 将数据存储到数据库角色参数部分
        /// </summary>
        /// <param name="client"></param>
        /// <param name="lsUint"></param>
        /// <param name="filed"></param>
        public static void SaveRoleParamsUshortListToDB(GameClient client, List<ushort> lsUshort, String roleParamsKey, bool writeToDB = false)
        {
            //生成新数据字符串
            String newStringValue = "";

            for (int n = 0; n < lsUshort.Count; n++)
            {
                byte[] bytes = BitConverter.GetBytes(lsUshort[n]);
                newStringValue += Encoding.GetEncoding("latin1").GetString(bytes);
            }

            Global.SaveRoleParamsStringWithNullToDB(client, roleParamsKey, newStringValue, writeToDB);
        }

        /// <summary>
        /// 以 int 列表 将数据存储到数据库角色参数部分
        /// </summary>
        /// <param name="client"></param>
        /// <param name="lsUint"></param>
        /// <param name="filed"></param>
        public static void SaveRoleParamsIntListToDB(GameClient client, List<int> lsInt, String roleParamsKey, bool writeToDB = false)
        {
            //生成新数据字符串
            String newStringValue = "";

            for (int n = 0; n < lsInt.Count; n++)
            {
                byte[] bytes = BitConverter.GetBytes(lsInt[n]);
                newStringValue += Encoding.GetEncoding("latin1").GetString(bytes);
            }

            Global.SaveRoleParamsStringWithNullToDB(client, roleParamsKey, newStringValue, writeToDB);
        }

        /// <summary>
        /// 以 uint 列表 将数据存储到数据库角色参数部分
        /// </summary>
        /// <param name="client"></param>
        /// <param name="lsUint"></param>
        /// <param name="filed"></param>
        public static void SaveRoleParamsUintListToDB(GameClient client, List<uint> lsUint, String roleParamsKey, bool writeToDB = false)
        {
            //生成新数据字符串
            String newStringValue = "";

            for (int n = 0; n < lsUint.Count; n++)
            {
                byte[] bytes = BitConverter.GetBytes(lsUint[n]);
                newStringValue += Encoding.GetEncoding("latin1").GetString(bytes);
            }

            Global.SaveRoleParamsStringWithNullToDB(client, roleParamsKey, newStringValue, writeToDB);
        }

        /// <summary>
        /// 以 ulong 列表 将数据存储到数据库角色参数部分
        /// </summary>
        /// <param name="client"></param>
        /// <param name="lsUint"></param>
        /// <param name="filed"></param>
        public static void SaveRoleParamsUlongListToDB(GameClient client, List<ulong> lsUlong, String roleParamsKey, bool writeToDB = false)
        {
            //生成新数据字符串
            String newStringValue = "";

            for (int n = 0; n < lsUlong.Count; n++)
            {
                byte[] bytes = BitConverter.GetBytes(lsUlong[n]);
                newStringValue += Encoding.GetEncoding("latin1").GetString(bytes);
            }

            Global.SaveRoleParamsStringWithNullToDB(client, roleParamsKey, newStringValue, writeToDB);
        }

#endregion 玩家参数存储相关

#region 地图定位相关

        /// <summary>
        /// 返回地图定位数据 indexRecord 从1开始
        /// </summary>
        /// <returns></returns>
        public static bool GetMapRecordDataByField(GameClient client, int indexRecord, out int mapCode, out int x, out int y)
        {
            mapCode = 0;
            x = 0;
            y = 0;

            List<ushort> lsUshort = Global.GetRoleParamsUshortListFromDB(client, RoleParamName.MapPosRecord);

            int realIndex = indexRecord * 3;

            if ((realIndex + 2) >= lsUshort.Count)//每个记录三条数据
            {
                return false;
            }

            mapCode = lsUshort[realIndex++];
            x = lsUshort[realIndex++];
            y = lsUshort[realIndex];

            //都是0 ，这个坐标是错误的
            if (0 == mapCode && 0 == x && 0 == y)
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// 修改地图定位数据 只能是2字节存放  indexRecord 从1开始
        /// </summary>
        /// <returns></returns>
        public static void ModifyMapRecordData(GameClient client, ushort mapCode, ushort x, ushort y, int indexRecord)
        {
            List<ushort> lsUshort = Global.GetRoleParamsUshortListFromDB(client, RoleParamName.MapPosRecord);

            int realIndex = indexRecord * 3;

            while (lsUshort.Count < (realIndex + 3))//每个记录三个数
            {
                lsUshort.Add(0);
                lsUshort.Add(0);
                lsUshort.Add(0);
            }

            lsUshort[realIndex++] = mapCode;
            lsUshort[realIndex++] = x;
            lsUshort[realIndex] = y;

            Global.SaveRoleParamsUshortListToDB(client, lsUshort, RoleParamName.MapPosRecord, true);
        }

        /// <summary>
        /// 地图编号和场景类型映射字典
        /// </summary>
        private static Dictionary<int, SceneUIClasses> MapCodeSceneTypeDict = new Dictionary<int, SceneUIClasses>();

        /// <summary>
        /// 获得地图的场景类型
        /// </summary>
        /// <param name="mapCode"></param>
        /// <returns></returns>
        public static SceneUIClasses GetMapSceneType(int mapCode)
        {
            SceneUIClasses sceneType;
            if (!MapCodeSceneTypeDict.TryGetValue(mapCode, out sceneType))
            {
                return SceneUIClasses.Normal;
            }

            return sceneType;
        }

        public static void InitMapSceneTypeDict()
        {
            if (null == Global.XmlInfo[Global.GAME_CONFIG_SETTINGS_NAME]) return;
            IEnumerable<XElement> mapList = null;

            try
            {
                XElement xmlRoot = Global.GetSafeXElement(Global.XmlInfo[Global.GAME_CONFIG_SETTINGS_NAME], "Maps");
                if (null != xmlRoot)
                {
                    mapList = xmlRoot.Elements("Map");
                }

                if (null == mapList) return;
                foreach (var xmlItem in mapList)
                {
                    int mapCode = (int)Global.GetSafeAttributeLong(xmlItem, "Code");
                    int sceneType = (int)Global.GetSafeAttributeLong(xmlItem, "MapType");
                    MapCodeSceneTypeDict[mapCode] = (SceneUIClasses)sceneType;
                }
            }
            catch (Exception ex)
            {
                LogManager.WriteLog(LogTypes.Fatal, "读取Settings.xml初始化地图类型映射时失败" + ex.ToString(), ex);
            }
        }

#endregion 地图定位相关

#region 幸运符相关

        /// <summary>
        /// 读取幸运符索引,用于判断物品是否幸运符, >= 0 是，小于0 不是，如果是，返回值是幸运索引，可用于定位幸运值，
        /// 本来幸运id和幸运值应该配置在一起，但之前分开配置了，为了兼容代码，也分开配置
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static int GetLuckyGoodsIndex(int goodsID)
        {
            int[] goodsArr = GameManager.systemParamsList.GetParamValueIntArrayByName("ForgeLuckyGoodsIDs");

            if (goodsArr.Length > 0)
            {
                for (int n = 0; n < goodsArr.Length; n++)
                {
                    if (goodsID == goodsArr[n])
                    {
                        return n;
                    }
                }
            }

            return -1;
        }

        /// <summary>
        /// 返回幸运符物品对应的幸运值，整数，如果不是幸运符，返回0
        /// </summary>
        /// <param name="luckyGoodsID"></param>
        /// <returns></returns>
        public static int GetLuckyValue(int luckyGoodsID)
        {
            int luckIndex = GetLuckyGoodsIndex(luckyGoodsID);

            if (luckIndex < 0)
            {
                return 0;
            }

            int[] luckyArr = GameManager.systemParamsList.GetParamValueIntArrayByName("ForgeLuckyGoodsRate");

            if (luckIndex < luckyArr.Length)
            {
                return luckyArr[luckIndex];
            }

            return 0;
        }

#endregion 幸运符相关

#region 地图每日限制时间相关

        /// <summary>
        /// 获取指定地图的每日限制时间
        /// </summary>
        /// <param name="mapCode"></param>
        /// <returns></returns>
        public static int GetDayLimitSecsByMapCode(int mapCode)
        {
            GameMap gameMap = null;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(mapCode, out gameMap) || null == gameMap)
            {
                LogManager.WriteLog(LogTypes.Error, "错误的地图编号：" + mapCode);
                return 0;
            }

            return gameMap.DayLimitSecs;
        }

        /// <summary>
        /// 解析保存的每日地图限制时间
        /// </summary>
        /// <param name="client"></param>
        /// <param name="mapCode"></param>
        public static void ParseDayLimitSecsByMapCode(GameClient client, int mapCode, out int oldDayID, out int oldStayingSecs, out int oldRoleAddedSecs)
        {
            oldDayID = -1;
            oldStayingSecs = 0;
            oldRoleAddedSecs = 0;

            string paramName = string.Format("{0}{1}", RoleParamName.MapLimitSecs, mapCode);
            string paramValue = Global.GetRoleParamByName(client, paramName);

            if (!string.IsNullOrEmpty(paramValue))
            {
                string[] fields = paramValue.Split(',');
                if (fields.Length == 3)
                {
                    oldDayID = Global.SafeConvertToInt32(fields[0]);
                    oldStayingSecs = Global.SafeConvertToInt32(fields[1]);
                    oldRoleAddedSecs = Global.SafeConvertToInt32(fields[2]);
                }
            }
        }

        /// <summary>
        /// 更新保存的每日地图限制时间
        /// </summary>
        /// <param name="client"></param>
        /// <param name="mapCode"></param>
        public static void UpdateDayLimitSecsByMapCode(GameClient client, int mapCode, int oldDayID, int oldStayingSecs, int oldRoleAddedSecs)
        {
            string paramName = string.Format("{0}{1}", RoleParamName.MapLimitSecs, mapCode);
            string paramValue = string.Format("{0},{1},{2}", oldDayID, oldStayingSecs, oldRoleAddedSecs);
            Global.UpdateRoleParamByName(client, paramName, paramValue, false);
        }

        /// <summary>
        /// 为指定的地图增加停留时间
        /// </summary>
        /// <param name="client"></param>
        /// <param name="mapCode"></param>
        public static bool AddStayingSecsByMapCode(GameClient client, int mapCode, int elapsedSecs)
        {
            int dayLimitSecs = GetDayLimitSecsByMapCode(mapCode);
            if (dayLimitSecs <= 0)
            {
                return false;
            }

            int oldDayID = -1;
            int oldStayingSecs = 0;
            int oldRoleAddedSecs = 0;

            //解析保存的每日地图限制时间
            Global.ParseDayLimitSecsByMapCode(client, mapCode, out oldDayID, out oldStayingSecs, out oldRoleAddedSecs);

            int dayID = (int)TimeUtil.NowDateTime().DayOfYear;
            if (dayID != oldDayID)
            {
                oldDayID = dayID;
                oldStayingSecs = 0;
                oldRoleAddedSecs = 0;
            }

            oldStayingSecs += elapsedSecs;

            //更新保存的每日地图限制时间
            Global.UpdateDayLimitSecsByMapCode(client, mapCode, oldDayID, oldStayingSecs, oldRoleAddedSecs);

            GameMap gameMap = GameManager.MapMgr.DictMaps[mapCode];
            dayLimitSecs = (gameMap.DayLimitSecs + oldRoleAddedSecs);
            if (oldStayingSecs >= dayLimitSecs)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 为指定的地图使用道具增加额外的停留时间
        /// </summary>
        /// <param name="client"></param>
        /// <param name="mapCode"></param>
        public static int AddExtLimitSecsByMapCode(GameClient client, int mapCode, int limitSecs)
        {
            int dayLimitSecs = GetDayLimitSecsByMapCode(mapCode);
            if (dayLimitSecs <= 0)
            {
                return 0;
            }

            int oldDayID = -1;
            int oldStayingSecs = 0;
            int oldRoleAddedSecs = 0;

            //解析保存的每日地图限制时间
            Global.ParseDayLimitSecsByMapCode(client, mapCode, out oldDayID, out oldStayingSecs, out oldRoleAddedSecs);

            int dayID = (int)TimeUtil.NowDateTime().DayOfYear;
            if (dayID != oldDayID)
            {
                oldDayID = dayID;
                oldStayingSecs = 0;
                oldRoleAddedSecs = 0;
            }

            oldRoleAddedSecs += limitSecs;

            //更新保存的每日地图限制时间
            Global.UpdateDayLimitSecsByMapCode(client, mapCode, oldDayID, oldStayingSecs, oldRoleAddedSecs);

            return oldRoleAddedSecs;
        }

        /// <summary>
        /// 处理每日停留时间限制
        /// </summary>
        /// <param name="client"></param>
        public static void ProcessDayLimitSecsByClient(GameClient client, int elapsedSecs)
        {
            //为指定的地图增加停留时间
            if (!Global.AddStayingSecsByMapCode(client, client.ClientData.MapCode, elapsedSecs))
            {
                return;
            }

            GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                StringUtil.substitute(Global.GetLang("你在『{0}』地图中停留的时间超过了限制，被系统自动传回主城"), Global.GetMapName(client.ClientData.MapCode)),
                GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);

            GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                client, GameManager.DefaultMapCode, -1, -1, -1);
        }

#endregion 地图每日限制时间相关

#region 佩戴的武器的祝福油操作

        /// <summary>
        /// 是否可以对武器进行通灵
        /// </summary>
        /// <param name="client"></param>
        /// <param name="?"></param>
        /// <param name="?"></param>
        /// <returns></returns>
        public static bool CanUseTongLing(GameClient client, SystemXmlItem systemGoodsItem, int goodsID)
        {
            string execMagic = systemGoodsItem.GetStringValue("ExecMagic");
            if (!(-1 != execMagic.IndexOf("FALL_XINGYUN") || -1 != execMagic.IndexOf("ADD_XINGYUN"))) return true;

            // 改造 [3/8/2014 LiaoWei]
            List<GoodsData> weaponGoodsData = null;
            weaponGoodsData = Global.GetUsingWeaponGoods(client);

            if (null == weaponGoodsData || weaponGoodsData.Count() == 0)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                    StringUtil.substitute(Global.GetLang("您当前没有手持武器，无法进行幸运提升")),
                    GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.None);
                return false;
            }

            for (int i = 0; i < weaponGoodsData.Count(); ++i)
            {
                if (weaponGoodsData[i].Lucky >= 9) //大于10不再处理
                {
                    GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                        StringUtil.substitute(Global.GetLang("当前手持武器的幸运值已达最大值，无法进行幸运提升")),
                        GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.None);
                    continue;
                }
            }

            return true;
        }

        /// <summary>
        /// 处理武器的通灵
        /// </summary>
        /// <param name="client"></param>
        public static void ProcessWeaponTongLing(GameClient client)
        {
            /*List<GoodsData> weaponGoodsData = null;
            weaponGoodsData = Global.GetUsingWeaponGoods(client);

            if (null == weaponGoodsData || weaponGoodsData.Count == 0)
            {
                return;
            }

            
            if (weaponGoodsData.Lucky >= 10) //大于10不再处理
            {
                return;
            }

            int key = weaponGoodsData.Lucky + 1;

            SystemXmlItem systemTongLingItem = null;
            if (!GameManager.systemWeaponTongLing.SystemXmlItemDict.TryGetValue(key, out systemTongLingItem))
            {
                return;
            }

            int addition = (int)(systemTongLingItem.GetDoubleValue("Addition") * 100);
            int reduce = (int)(systemTongLingItem.GetDoubleValue("Reduce") * 100);
            int constant = (int)(systemTongLingItem.GetDoubleValue("Constant") * 100);

            int randNum = Global.GetRandomNumber(0, 101);
            if (randNum >= 0 && randNum < addition) //增加
            {
                weaponGoodsData.Lucky = weaponGoodsData.Lucky + 1;

                //通知客户端结果
                GameManager.LuaMgr.Hot(client, string.Format(Global.GetLang("您使用了[祝福油]，武器[{0}]的幸运值变为+{1}"), Global.GetGoodsNameByID(weaponGoodsData.GoodsID), weaponGoodsData.Lucky), 0);

            }
            else if (randNum >= addition && randNum < (addition + reduce)) //减少
            {
                weaponGoodsData.Lucky = weaponGoodsData.Lucky - 1;

                //通知客户端结果
                GameManager.LuaMgr.Error(client, string.Format(Global.GetLang("您使用了[祝福油]，武器[{0}]的幸运值变为+{1}"), Global.GetGoodsNameByID(weaponGoodsData.GoodsID), weaponGoodsData.Lucky), 0);

            }
            else if (randNum >= (addition + reduce) && randNum < (addition + reduce + constant)) //不变
            {
                //通知客户端结果
                GameManager.LuaMgr.Error(client, string.Format(Global.GetLang("您使用了[祝福油]，武器[{0}]的幸运值变为+{1}"), Global.GetGoodsNameByID(weaponGoodsData.GoodsID), weaponGoodsData.Lucky), 0);

                //不做处理
                return;
            }

            if (UpdateGoodsLucyToDB(client, weaponGoodsData))
            {
                //物品信息通知
                GameManager.ClientMgr.NotifyGoodsInfo(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, weaponGoodsData);

                //更新属性信息
                //通知客户端属性变化
                GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
            }*/
        }

        /// <summary>
        /// 直接给武器加幸运值
        /// </summary>
        /// <param name="client"></param>
        public static void AddWeaponLucky(GameClient client, int lucky)
        {
            /*GoodsData weaponGoodsData = Global.GetUsingWeaponGoods(client);
            if (null == weaponGoodsData)
            {
                return;
            }

            SystemXmlItem xmlItem = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(weaponGoodsData.GoodsID, out xmlItem) || null == xmlItem)
            {
                return;
            }

            //计算新物品的 的lucky值  和 耐久值 ,其中耐久值尽量与旧物品保持一致
            double[] equipPropsArr = xmlItem.GetDoubleArrayValue("EquipProps");
            double baseLucky = equipPropsArr[(int)ExtPropIndexes.Lucky];

            int oldLucky = weaponGoodsData.Lucky;
            //weaponGoodsData.Lucky += lucky;
            //weaponGoodsData.Lucky = Math.Min(weaponGoodsData.Lucky, 10);
            weaponGoodsData.Lucky = Math.Max(weaponGoodsData.Lucky, 9 - (int)baseLucky);

            if (UpdateGoodsLucyToDB(client, weaponGoodsData))
            {
                //物品信息通知
                GameManager.ClientMgr.NotifyGoodsInfo(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, weaponGoodsData);

                //更新属性信息
                //通知客户端属性变化
                GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

                //通知客户端结果
                GameManager.LuaMgr.Hot(client, string.Format(Global.GetLang("您使用了[超级祝福油]，武器[{0}的幸运值变为+{1}"), Global.GetGoodsNameByID(weaponGoodsData.GoodsID), weaponGoodsData.Lucky), 0);
            }*/
        }

        /// <summary>
        /// 向dbserver 请求修改物品的lucky值
        /// </summary>
        /// <param name="client"></param>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static bool UpdateGoodsLucyToDB(GameClient client, GoodsData goodsData)
        {
            //修改装备的数据库
            //向DBServer请求修改物品
            string[] dbFields = null;
            string strDbCmd = Global.FormatUpdateDBGoodsStr(client.ClientData.RoleID, goodsData.Id, "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", "*", goodsData.Lucky, "*", "*", "*", "*"); // 卓越信息 [12/13/2013 LiaoWei] 装备转生
            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, (int)TCPGameServerCmds.CMD_DB_UPDATEGOODS_CMD, strDbCmd, out dbFields, client.ServerId);
            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                return false;
            }

            if (dbFields.Length <= 0 || Convert.ToInt32(dbFields[1]) < 0)
            {
                return false;
            }

            return true;
        }

#endregion 佩戴的武器的祝福油操作

#region 钻皇管理

        /// <summary>
        /// 尝试激活新的钻皇等级 当玩家元宝增加的时候，处理一下是否应该激活特殊的钻皇等级
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static void TryToActivateSpecialZuanHuangLevel(GameClient client, bool notifyPropsChanged = true)
        {
            int oldZuanHuangLevel = GameManager.ClientMgr.GetZuanHuangLevelValue(client);

            //每次最多激活10次，如果每次都成功
            for (int n = 0; n < 10; n++)
            {
                int curZuanHuangLevel = GameManager.ClientMgr.GetZuanHuangLevelValue(client);
                int nextZuanHuangLevel = curZuanHuangLevel + 1;

                //下一等级不存在 有多少条数据就有多少等级
                if (nextZuanHuangLevel > GameManager.SystemZuanHuangLevel.SystemXmlItemDict.Count)
                {
                    break;
                }

                //这儿同样验证了下一等级的合法性
                SystemXmlItem xmlItem = null;
                if (!GameManager.SystemZuanHuangLevel.SystemXmlItemDict.TryGetValue(nextZuanHuangLevel, out xmlItem) || null == xmlItem)
                {
                    break;
                }

                int needMinYuanBao = xmlItem.GetIntValue("MinYuanBao");

                //需要的元宝需求是否满足
                if (needMinYuanBao > Global.GetUserInputAllYuanBao(client))//这个需要再验证，如果获取总的充值元宝
                {
                    break;
                }

                //设置钻皇等级加1,立即更新到数据库,同时通知客户端
                GameManager.ClientMgr.ModifyZuanHuangLevelValue(client, 1, true, true);
            }

            int newZuanHuangLevel = GameManager.ClientMgr.GetZuanHuangLevelValue(client);

            // 钻皇达到
            Global.BroadcastZuanHuangLevelOk(client, oldZuanHuangLevel, newZuanHuangLevel);

            //激活新的经脉buffer 这个是永久buffer 不会增加，不会减少
            Global.ActiveZuanHuangBuffer(client, notifyPropsChanged);
        }

        /// <summary>
        /// 激活新的经脉buffer 这个是永久buffer 不会增加，不会减少
        /// </summary>
        /// <param name="client"></param>
        /// <param name="notifyPropsChanged"></param>
        /// <returns></returns>
        public static bool ActiveZuanHuangBuffer(GameClient client, bool notifyPropsChanged)
        {
            int nNewBufferGoodsIndexID = GameManager.ClientMgr.GetZuanHuangLevelValue(client) - 1;

            int nOldBufferGoodsIndexID = -1;
            BufferData bufferData = Global.GetBufferDataByID(client, (int)BufferItemTypes.ZuanHuang);
            if (null != bufferData && !Global.IsBufferDataOver(bufferData))
            {
                nOldBufferGoodsIndexID = (int)bufferData.BufferVal;
            }

            if (nOldBufferGoodsIndexID == nNewBufferGoodsIndexID)
            {
                return false;
            }

            //更新BufferData
            double[] actionParams = new double[1];
            actionParams[0] = (double)nNewBufferGoodsIndexID;
            Global.UpdateBufferData(client, BufferItemTypes.ZuanHuang, actionParams, 1, notifyPropsChanged);
            if (notifyPropsChanged)
            {
                //通知客户端属性变化
                GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

                // 总生命值和魔法值变化通知(同一个地图才需要通知)
                GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
            }

            return true;
        }

        /// <summary>
        /// 给予钻皇周奖励
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int TryToGiveZuanHuangWeekAward(GameClient client, bool isJustCheck)
        {
            //没有会返回0
            int curZuanHuangLevel = GameManager.ClientMgr.GetZuanHuangLevelValue(client);

            if (curZuanHuangLevel <= 0)
            {
                return -100;
            }

            //这儿同样验证了下一等级的合法性
            SystemXmlItem xmlItem = null;
            if (!GameManager.SystemZuanHuangLevel.SystemXmlItemDict.TryGetValue(curZuanHuangLevel, out xmlItem) || null == xmlItem)
            {
                return -1;//配置文件出错
            }

            //验证每周只能领取一次
            String valueString = Global.GetRoleParamByName(client, RoleParamName.ZuanHuangAwardTime);
            if (null != valueString && valueString.Length > 0)
            {
                long lastAwardTime = -1;
                try
                {
                    long.TryParse(valueString, out lastAwardTime);
                }
                finally
                {
                }

                if (lastAwardTime <= 0)
                {
                    return -2;
                }

                DateTime dateTime = new DateTime(lastAwardTime * 10000);

                //本周已经领取过了
                if (IsInSameWeek(dateTime, TimeUtil.NowDateTime()))
                {
                    return -3;
                }
            }

            if (isJustCheck)
            {
                return 1680;//表示可以领取
            }

            //提取奖励配置信息
            string goodsIDs = xmlItem.GetStringValue("WeekGoods");
            int bindYuanBao = xmlItem.GetIntValue("WeekBindYuanBao");

            List<GoodsData> listGoods = Global.ParseGoodsDataListFromGoodsStr(goodsIDs, "钻皇配置文件");

            //判断背包空位是否足够
            if (!Global.CanAddGoodsNum(client, listGoods.Count))
            {
                return -31;
            }

            //更新角色参数
            Global.UpdateRoleParamByName(client, RoleParamName.ZuanHuangAwardTime, String.Format("{0}", TimeUtil.NOW()), true);

            //绑定元宝
            if (bindYuanBao > 0)
            {
                //给用户加钱,更新用户的绑定元宝
                GameManager.ClientMgr.AddUserGold(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, bindYuanBao, "钻皇周奖励");
                GameManager.SystemServerEvents.AddEvent(string.Format("使用钻皇等级领取绑定元宝, roleID={0}({1}), Money={2}, newMoney={3}, zuanhuanglevel={4}", client.ClientData.RoleID, client.ClientData.RoleName, client.ClientData.UserMoney, bindYuanBao, curZuanHuangLevel), EventLevels.Record);

                //系统提示
                BroadcastVipFetchBindYuanBaoAwardMsg(client, bindYuanBao);
            }

            string awardReason = /**/string.Format("使用钻皇等级{0}获取", curZuanHuangLevel);

            //领取物品
            for (int n = 0; n < listGoods.Count; n++)
            {
                GoodsData goodsData = listGoods[n];

                if (null == goodsData)
                {
                    continue;
                }

                //向DBServer请求加入某个新的物品到背包中
                //添加物品
                goodsData.Id = Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, goodsData.GoodsID,
                    goodsData.GCount, goodsData.Quality, goodsData.Props, goodsData.Forge_level,
                    goodsData.Binding, 0, goodsData.Jewellist, true, 1, awardReason, goodsData.Endtime, goodsData.AddPropIndex, goodsData.BornIndex, goodsData.Lucky, goodsData.Strong);
            }

            //记录money 提取日志
            //Global.AddRoleFetchVipAwardEvent(client, yuanBao, yinLiang, tongQian, lingLi, priority);

            return 1;
        }

        /// <summary>
        /// 判断两个时间是否在同一周，网上找的代码
        /// </summary>
        /// <param name="dtmS"></param>
        /// <param name="dtmE"></param>
        /// <returns></returns>
        public static Boolean IsInSameWeek(DateTime dtmS, DateTime dtmE)
        {
            TimeSpan ts = dtmE - dtmS;
            double dbl = ts.TotalDays;
            int intDow = Convert.ToInt32(dtmE.DayOfWeek);
            if (0 == intDow) intDow = 7;
            if (dbl >= 7 || dbl >= intDow)
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// 返回用户累计充值元宝数
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static long GetUserInputAllYuanBao(GameClient client)
        {
            return GetUserInputAllYuanBao(client.ClientData.RoleID, client.ClientData.RoleName, client.ServerId);
        }

        /// <summary>
        /// 返回用户累计充值元宝数
        /// </summary>
        /// <param name="roleId"></param>
        /// <param name="roleName"></param>
        /// <returns></returns>
        public static long GetUserInputAllYuanBao(int roleId, string roleName, int serverId)
        {
            //从DBServer获取角色的所在的线路
            string[] dbFields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_SPR_QUERYUMBYNAME, string.Format("{0}:{1}", roleId, roleName), serverId); //Global.FormatRoleName(client, client.ClientData.RoleName)));
            if (null == dbFields || dbFields.Length < 4)
            {
                return 0;
            }
            else
            {
                string userID = dbFields[1];
                int userMoney = Global.SafeConvertToInt32(dbFields[2]);//当前元宝
                int realMoney = Global.SafeConvertToInt32(dbFields[3]);//总的充值金额

                return Global.TransMoneyToYuanBao(realMoney);
            }
        }

#endregion 钻皇管理

#region 货币转换

        /// <summary>
        /// 将money转换为元宝，采用相应的转换比例
        /// </summary>
        /// <param name="money"></param>
        /// <returns></returns>
        public static int TransMoneyToYuanBao(int money)
        {
            int moneyToYuanBao = GameManager.GameConfigMgr.GetGameConfigItemInt("money-to-yuanbao", 10);

            int yuanBao = money * moneyToYuanBao;

            return yuanBao;
        }

#endregion 货币转换

#region 武学管理

        /// <summary>
        /// 当玩家的悟性值发生变化的时候，处理一下是否应该取消激活特殊的武学等级
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static Boolean TryToDeActivateSpecialWuXueLevel(GameClient client)
        {
            int curWuXueLevel = GameManager.ClientMgr.GetWuXueLevelValue(client);
            int preWuXueLevel = curWuXueLevel - 1;

            //判断能否升级，采用是否存在下一等级buffer物品进行判断
            int[] wuXueBufferGoods = GameManager.systemParamsList.GetParamValueIntArrayByName("WuXueBufferGoodsIDs");

            //上一等级buffer不存在
            if (preWuXueLevel > wuXueBufferGoods.Length || preWuXueLevel < 0)
            {
                return false;
            }

            SystemXmlItem wuXueXmlItem = null;
            if (!GameManager.SystemWuXueLevel.SystemXmlItemDict.TryGetValue(curWuXueLevel, out wuXueXmlItem) || null == wuXueXmlItem)
            {
                return false;
            }

            int needRoleLevel = wuXueXmlItem.GetIntValue("LevelLimit");
            int needWuXing = wuXueXmlItem.GetIntValue("WuXing");

            Boolean autoActivate = 0 == wuXueXmlItem.GetIntValue("Select");//Select 为0表示自动激活项
            double dayXiaoHao = wuXueXmlItem.GetDoubleValue("DayXiaoHao");//每日消耗百分比

            //不是自动激活的武学等级，不激活
            if (!autoActivate)
            {
                return false;
            }

            //悟性值判断
            int curRoleWuXing = GameManager.ClientMgr.GetWuXingValue(client);
            if (curRoleWuXing < needWuXing)
            {
                //自动取消激活的武学等级是不扣除任何真气 和 银两等消耗的
                //设置武学等级加1,武学等级不是经常变化，立即更新到数据库,同时通知客户端
                //GameManager.ClientMgr.ModifyWuXueLevelValue(client, -1, true, true);
            }

            return true;
        }

        /// <summary>
        /// 尝试激活新的武学等级 当玩家的悟性值发生变化的时候，处理一下是否应该激活特殊的武学等级
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static Boolean TryToActivateSpecialWuXueLevel(GameClient client)
        {
            int curWuXueLevel = GameManager.ClientMgr.GetWuXueLevelValue(client);
            int nextWuXueLevel = curWuXueLevel + 1;

            //判断能否升级，采用是否存在下一等级buffer物品进行判断
            int[] wuXueBufferGoods = GameManager.systemParamsList.GetParamValueIntArrayByName("WuXueBufferGoodsIDs");

            //下一等级buffer不存在
            if (nextWuXueLevel > wuXueBufferGoods.Length)
            {
                return false;
            }

            SystemXmlItem wuXueXmlItem = null;
            if (!GameManager.SystemWuXueLevel.SystemXmlItemDict.TryGetValue(nextWuXueLevel, out wuXueXmlItem) || null == wuXueXmlItem)
            {
                return false;
            }

            int needRoleLevel = wuXueXmlItem.GetIntValue("LevelLimit");
            int needWuXing = wuXueXmlItem.GetIntValue("WuXing");

            Boolean autoActivate = 0 == wuXueXmlItem.GetIntValue("Select");//Select 为0表示自动激活项
            double dayXiaoHao = wuXueXmlItem.GetDoubleValue("DayXiaoHao");//每日消耗百分比

            //不是自动激活的武学等级，不激活
            if (!autoActivate)
            {
                return false;
            }

            //角色等级判断
            if (needRoleLevel > client.ClientData.Level)
            {
                return false;
            }

            //悟性值判断
            int curRoleWuXing = GameManager.ClientMgr.GetWuXingValue(client);
            if (curRoleWuXing < needWuXing)
            {
                return false;
            }

            //自动激活的武学等级是不扣除任何真气 和 银两等消耗的
            //设置武学等级加1,武学等级不是经常变化，立即更新到数据库,同时通知客户端
            //GameManager.ClientMgr.ModifyWuXueLevelValue(client, 1, true, true);

            return true;
        }

        /// <summary>
        /// 尝试激活新的武学buffer 武学等级发生变化 和 每次登陆 或者 每次武学buffer消失的时候
        /// </summary>
        /// <param name="client"></param>
        /// <param name="notifyPropsChanged"></param>
        /// <returns></returns>
        public static bool TryToActiveNewWuXueBuffer(GameClient client, bool notifyPropsChanged)
        {
            double dayXiaoHao = 0.0;
            int nNewBufferGoodsIndexID = GetNewWuXueBufferGoodsIndexIDAndDayXiaoHao(client, GameManager.ClientMgr.GetWuXueLevelValue(client), out dayXiaoHao);

            int nOldBufferGoodsIndexID = -1;
            BufferData bufferData = Global.GetBufferDataByID(client, (int)BufferItemTypes.WuXue);
            if (null != bufferData && !Global.IsBufferDataOver(bufferData))
            {
                nOldBufferGoodsIndexID = (int)bufferData.BufferVal;
            }

            //如果旧的bufferid 和 新的bufferid 一样，都存在或者都为 -1
            //因为buffer是每天给一次，如果旧的buffer 和 新的bufferid 一致
            //则不用再扣除成就点
            if (nOldBufferGoodsIndexID == nNewBufferGoodsIndexID)
            {
                return false;
            }

            //更新BufferData
            double[] actionParams = new double[1];
            actionParams[0] = (double)nNewBufferGoodsIndexID;
            Global.UpdateBufferData(client, BufferItemTypes.WuXue, actionParams, 0);
            if (notifyPropsChanged)
            {
                //通知客户端属性变化
                GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

                // 总生命值和魔法值变化通知(同一个地图才需要通知)
                GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
            }

            //扣除悟性消耗 可能为0，对于小于等于10等级的武学不消耗
            int subWuXing = (int)(GameManager.ClientMgr.GetWuXingValue(client) * dayXiaoHao);
            GameManager.ClientMgr.ModifyWuXingValue(client, -subWuXing, true, true, false);

            //传奇武学播报
            Global.BroadcastClientChuanQiWuXue(client, nNewBufferGoodsIndexID);

            return true;
        }

        /// <summary>
        /// 根据武学等级返回 对应的buffer
        /// </summary>
        /// <param name="client"></param>
        /// <param name="chengJiuPoints"></param>
        /// <returns></returns>
        public static int GetNewWuXueBufferGoodsIndexIDAndDayXiaoHao(GameClient client, int wuXueLevel, out double dayXiaoHao)
        {
            int nNewBufferGoodsIndexID = wuXueLevel - 1;

            dayXiaoHao = 0;

            //buffer 配置文件中 从前到后，需要的成就点数依次增加
            for (int i = 0; i < GameManager.SystemWuXueLevel.SystemXmlItemDict.Count; i++)
            {
                SystemXmlItem item = GameManager.SystemWuXueLevel.SystemXmlItemDict.ElementAt(i).Value;

                int level = item.GetIntValue("ID");

                //比较的目的是为了得到每日消耗
                if (level == wuXueLevel)
                {
                    dayXiaoHao = item.GetDoubleValue("DayXiaoHao");
                }
            }

            if (nNewBufferGoodsIndexID < 0)
            {
                nNewBufferGoodsIndexID = -1;
            }

            return nNewBufferGoodsIndexID;
        }

#endregion 武学管理

#region 传奇经脉相关管理

        /// <summary>
        /// 激活新的经脉buffer 这个是永久buffer 不会增加，不会减少
        /// </summary>
        /// <param name="client"></param>
        /// <param name="notifyPropsChanged"></param>
        /// <returns></returns>
        public static bool ActiveJinMaiBuffer(GameClient client, bool notifyPropsChanged)
        {
            int nNewBufferGoodsIndexID = GameManager.ClientMgr.GetJingMaiLevelValue(client) - 1;

            int nOldBufferGoodsIndexID = -1;
            BufferData bufferData = Global.GetBufferDataByID(client, (int)BufferItemTypes.JingMai);
            if (null != bufferData && !Global.IsBufferDataOver(bufferData))
            {
                nOldBufferGoodsIndexID = (int)bufferData.BufferVal;
            }

            if (nOldBufferGoodsIndexID == nNewBufferGoodsIndexID)
            {
                return false;
            }

            //更新BufferData
            double[] actionParams = new double[1];
            actionParams[0] = (double)nNewBufferGoodsIndexID;
            Global.UpdateBufferData(client, BufferItemTypes.JingMai, actionParams, 1, notifyPropsChanged);
            if (notifyPropsChanged)
            {
                //通知客户端属性变化
                GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

                // 总生命值和魔法值变化通知(同一个地图才需要通知)
                GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
            }

            return true;
        }

#endregion 传奇经脉相关管理

#region 传奇战魂相关管理

        /// <summary>
        /// 激活新的战魂buffer 这个是永久buffer 不会增加，不会减少
        /// </summary>
        /// <param name="client"></param>
        /// <param name="notifyPropsChanged"></param>
        /// <returns></returns>
        public static bool ActiveZhanHunBuffer(GameClient client, bool notifyPropsChanged)
        {
            int nNewBufferGoodsIndexID = GameManager.ClientMgr.GetZhanHunLevelValue(client) - 1;

            int nOldBufferGoodsIndexID = -1;
            BufferData bufferData = Global.GetBufferDataByID(client, (int)BufferItemTypes.ZhanHun);
            if (null != bufferData && !Global.IsBufferDataOver(bufferData))
            {
                nOldBufferGoodsIndexID = (int)bufferData.BufferVal;
            }

            if (nOldBufferGoodsIndexID == nNewBufferGoodsIndexID)
            {
                return false;
            }

            //更新BufferData
            double[] actionParams = new double[1];
            actionParams[0] = (double)nNewBufferGoodsIndexID;
            Global.UpdateBufferData(client, BufferItemTypes.ZhanHun, actionParams, 1, notifyPropsChanged);
            if (notifyPropsChanged)
            {
                //通知客户端属性变化
                GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

                // 总生命值和魔法值变化通知(同一个地图才需要通知)
                GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
            }

            return true;
        }

#endregion 传奇战魂相关管理

#region 传奇荣誉相关管理

        /// <summary>
        /// 激活新的荣誉buffer 这个是永久buffer 不会增加，不会减少
        /// </summary>
        /// <param name="client"></param>
        /// <param name="notifyPropsChanged"></param>
        /// <returns></returns>
        public static bool ActiveRongYuBuffer(GameClient client, bool notifyPropsChanged)
        {
            int nNewBufferGoodsIndexID = GameManager.ClientMgr.GetRongYuLevelValue(client) - 1;

            int nOldBufferGoodsIndexID = -1;
            BufferData bufferData = Global.GetBufferDataByID(client, (int)BufferItemTypes.RongYu);
            if (null != bufferData && !Global.IsBufferDataOver(bufferData))
            {
                nOldBufferGoodsIndexID = (int)bufferData.BufferVal;
            }

            if (nOldBufferGoodsIndexID == nNewBufferGoodsIndexID)
            {
                return false;
            }

            //更新BufferData
            double[] actionParams = new double[2];
            actionParams[0] = (double)(60 * 2);
            actionParams[1] = (double)nNewBufferGoodsIndexID;
            Global.UpdateBufferData(client, BufferItemTypes.RongYu, actionParams, 0, notifyPropsChanged);
            if (notifyPropsChanged)
            {
                //通知客户端属性变化
                GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

                // 总生命值和魔法值变化通知(同一个地图才需要通知)
                GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
            }

            return true;
        }

#endregion 传奇荣誉相关管理

#region 状态提示

        /// <summary>
        /// 刷新所有玩家某个图标状态
        /// </summary>
        public static void AddFlushIconStateForAll(ushort nIconOrder, bool bIconState)
        {
            int count = GameManager.ClientMgr.GetMaxClientCount();
            for (int i = 0; i < count; i++)
            {
                GameClient client = GameManager.ClientMgr.FindClientByNid(i);
                if (null != client)
                {
                    client._IconStateMgr.AddFlushIconState(nIconOrder, bIconState);
                    client._IconStateMgr.SendIconStateToClient(client);
                }
            }
        }

#endregion 状态提示

#region 开服时间相关

        /// <summary>
        /// 返回服务器开服时间，其实是开区时间,这儿不用缓存，参数那已经做缓存处理了
        /// </summary>
        /// <returns></returns>
        public static DateTime GetKaiFuTime()
        {
            String sTimeString = GameManager.GameConfigMgr.GetGameConfigItemStr("kaifutime", "2013-02-12 01:01:01");
            DateTime dateTime;
            DateTime.TryParse(sTimeString, out dateTime);
            return dateTime;
        }

        /// <summary>
        /// 获取一个增加了几天时间的DateTime
        /// </summary>
        /// <param name="dateTime"></param>
        /// <param name="addDays"></param>
        /// <returns></returns>
        public static DateTime GetAddDaysDataTime(DateTime dateTime, int addDays, bool roundDay = true)
        {
            if (roundDay)
            {
                dateTime = new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, 0, 0, 0);
            }

            return new DateTime(dateTime.Ticks + ((long)addDays * 10000 * 1000 * 24 * 60 * 60));
        }

        /// <summary>
        /// 计算 left - right 的天数差，如果都是同一天，则为0，否则返回天数差值
        /// 封装成函数主要为了解决跨年，否则dayOfYear 一减就OK
        /// </summary>
        /// <param name="left"></param>
        /// <param name="right"></param>
        /// <returns></returns>
        public static int GetDaysSpanNum(DateTime left, DateTime right, bool roundDay = true)
        {
            if (roundDay)
            {
                DateTime left1 = new DateTime(left.Year, left.Month, left.Day);
                DateTime right1 = new DateTime(right.Year, right.Month, right.Day);
                return (int)(((left1.Ticks / (10000 * 1000)) - (right1.Ticks / (10000 * 1000))) / (24 * 60 * 60));
            }
            else
            {
                return (int)(((left.Ticks / (10000 * 1000)) - (right.Ticks / (10000 * 1000))) / (24 * 60 * 60));
            }
        }

        /// <summary>
        /// 活动的时间
        /// </summary>
        /// <returns></returns>
        public static string GetHuoDongTimeByKaiFu(int addDays, int hours, int minutes, int seconds)
        {
            DateTime dateTime = Global.GetAddDaysDataTime(Global.GetKaiFuTime(), addDays, true);
            DateTime newDateTime = new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, hours, minutes, seconds);
            return newDateTime.ToString("yyyy-MM-dd HH:mm:ss");
        }

#endregion 开服时间相关

#region 角色创建日期

        /// <summary>
        /// 返回角色注册时间
        /// </summary>
        /// <returns></returns>
        public static DateTime GetRegTime(SafeClientData clientData)
        {
            DateTime dateTime = new DateTime(clientData.RegTime * 10000);
            return dateTime;
        }

#endregion 角色创建日期

#region 节日活动时间相关

        /// <summary>
        /// 返回服务器节日活动开始时间
        /// </summary>
        /// <returns></returns>
        public static DateTime GetJieriStartDay()
        {
            String sTimeString = GameManager.GameConfigMgr.GetGameConfigItemStr("jieristartday", "2000-01-01 01:01:01");
            DateTime dateTime;
            DateTime.TryParse(sTimeString, out dateTime);
            return dateTime;
        }

        /// <summary>
        /// 返回服务器节日活动持续的天数
        /// </summary>
        /// <returns></returns>
        public static int GetJieriDaysNum()
        {
            int daysNum = GameManager.GameConfigMgr.GetGameConfigItemInt("jieridaysnum", 0);
            return daysNum;
        }

#endregion 节日活动时间相关

        /// <summary>
        /// 返回服务器时间相对于"2011-11-11"经过了多少天
        /// 可以避免使用DayOfYear产生的跨年问题
        /// </summary>
        /// <returns></returns>
        public static int GetOffsetHour(DateTime now)
        {
            TimeSpan ts = now - DateTime.Parse("2011-11-11");
            // 经过的毫秒数
            double temp = ts.TotalMilliseconds;
            int day = (int)(temp / 1000 / 60 / 60);
            return day;
        }

        /// <summary>
        /// 返回服务器时间相对于"2011-11-11"经过了多少天
        /// 可以避免使用DayOfYear产生的跨年问题
        /// </summary>
        /// <returns></returns>
        public static double GetOffsetSecond(DateTime date)
        {
            TimeSpan ts = date - DateTime.Parse("2011-11-11");
            // 经过的毫秒数
            double temp = ts.TotalMilliseconds;
            return temp / 1000;
        }

        /// <summary>
        /// 返回服务器时间相对于"2011-11-11"经过了多少天
        /// 可以避免使用DayOfYear产生的跨年问题
        /// </summary>
        /// <returns></returns>
        public static int GetOffsetDay(DateTime now)
        {
            TimeSpan ts = now - DateTime.Parse("2011-11-11");
            // 经过的毫秒数
            double temp = ts.TotalMilliseconds;
            int day = (int)(temp / 1000 / 60 / 60 / 24);
            return day;
        }

        /// <summary>
        /// 当前时间相对于"2011-11-11"经过了多少天
        /// </summary>
        /// <returns></returns>
        public static int GetOffsetDayNow()
        {
            return GetOffsetDay(TimeUtil.NowDateTime());
        }

        /// <summary>
        /// 使用服务器时间相对于"2011-11-11"经过了多少天 来返回具体的日期
        /// 可以避免使用DayOfYear产生的跨年问题
        /// </summary>
        /// <returns></returns>
        public static DateTime GetRealDate(int day)
        {
            DateTime startDay = DateTime.Parse("2011-11-11");
            return Global.GetAddDaysDataTime(startDay, day);
        }

        /// <summary>
        /// 获得某个日期的周一相对天数
        /// </summary>
        public static int BeginOfWeek(DateTime date)
        {
            int dayofweek = (int)date.DayOfWeek;

            if (dayofweek == 0)
                dayofweek = 7;

            dayofweek--;

            int currday = GetOffsetDay(date);
            return currday - dayofweek;
        }

#region 合服的时间相关

        /// <summary>
        /// 返回服务器合服活动开始时间
        /// </summary>
        /// <returns></returns>
        public static DateTime GetHefuStartDay()
        {
            String sTimeString = GameManager.GameConfigMgr.GetGameConfigItemStr("hefutime", "2000-01-01 01:01:01");
            DateTime dateTime;
            DateTime.TryParse(sTimeString, out dateTime);
            return dateTime;
        }

        /// <summary>
        /// 活动的时间
        /// </summary>
        /// <returns></returns>
        public static string GetHuoDongTimeByHeFu(int addDays, int hours, int minutes, int seconds)
        {
            DateTime dateTime = Global.GetAddDaysDataTime(Global.GetHefuStartDay(), addDays, true);
            DateTime newDateTime = new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, hours, minutes, seconds);
            return newDateTime.ToString("yyyy-MM-dd HH:mm:ss");
        }

#endregion 合服的时间相关

#region 补偿的时间相关

        /// <summary>
        /// 返回服务器合服补偿开始时间
        /// </summary>
        /// <returns></returns>
        public static DateTime GetBuChangStartDay()
        {
            String sTimeString = GameManager.GameConfigMgr.GetGameConfigItemStr("buchangtime", "2000-01-01 01:01:01");
            DateTime dateTime;
            DateTime.TryParse(sTimeString, out dateTime);
            return dateTime;
        }

        /// <summary>
        /// 补偿的时间
        /// </summary>
        /// <returns></returns>
        public static string GetTimeByBuChang(int addDays, int hours, int minutes, int seconds)
        {
            DateTime dateTime = Global.GetAddDaysDataTime(Global.GetBuChangStartDay(), addDays, true);
            DateTime newDateTime = new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, hours, minutes, seconds);
            return newDateTime.ToString("yyyy-MM-dd HH:mm:ss");
        }

#endregion 补偿的时间相关

#region 龙权商城以及商城抢购相关

        /// <summary>
        /// 商城销售数据，用于缓存
        /// </summary>
        public static MallSaleData _MallSaleData = null;

        /// <summary>
        /// 返回商城销售数据，包括抢购数据和
        /// </summary>
        /// <returns></returns>
        public static MallSaleData GetMallSaleData(GameClient client = null)
        {
            MallSaleData oldMallSaleData = null;
            if (null == _MallSaleData)
            {
                oldMallSaleData = LoadMallSaleData();
                _MallSaleData = oldMallSaleData;
            }
            else
            {
                oldMallSaleData = _MallSaleData;
            }

            if (null != client)
            {
                //返回具有个体特征的商城数据
                MallSaleData mallData = new MallSaleData();
                mallData.MallTabXmlString = oldMallSaleData.MallTabXmlString;
                mallData.MallXmlString = oldMallSaleData.MallXmlString;
                mallData.QiangGouXmlString = Global.GetQiangGouXmlString(client);

                return mallData;
            }

            return oldMallSaleData;
        }

        /// <summary>
        /// 加载商城销售数据
        /// </summary>
        /// <returns></returns>
        public static MallSaleData LoadMallSaleData()
        {
            MallSaleData mallData = new MallSaleData();

            String fullPathFileName = Global.IsolateResPath("Config/Mall.xml");
            mallData.MallXmlString = File.ReadAllText(fullPathFileName);

            fullPathFileName = Global.IsolateResPath("Config/MallTab.xml");
            mallData.MallTabXmlString = File.ReadAllText(fullPathFileName);

            return mallData;
        }

        /// <summary>
        /// 判断是否GM停止了限时抢购,此时无法进行抢购购买
        /// </summary>
        /// <returns></returns>
        public static Boolean IsGmStopQiangGou()
        {
            return "1" == GameManager.GameConfigMgr.GetGameConfigItemStr("isstopqg", "0");
        }

        /// <summary>
        /// 从数据库查询
        /// </summary>
        /// <param name="roleID"></param>
        /// <param name="qiangGouID"></param>
        /// <param name="goodsID"></param>
        /// <param name="singleHasPurchase"></param>
        /// <param name="fullHasPerchase"></param>
        /// <returns></returns>
        public static bool QueryQiangGouItemInfo(int roleID, int qiangGouID, int goodsID, int random, int actStartDay, int serverId, out int singleHasPurchase, out int fullHasPurchase)
        {
            singleHasPurchase = 0;
            fullHasPurchase = 0;

            //从DBServer获取抢购信息
            string[] dbFields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_QUERYQIANGGOUBUYITEMINFO, string.Format("{0}:{1}:{2}:{3}:{4}", roleID, goodsID, qiangGouID, random, actStartDay), serverId);
            if (null == dbFields || dbFields.Length < 3)
            {
                return false;
            }

            singleHasPurchase = Global.SafeConvertToInt32(dbFields[1]);
            fullHasPurchase = Global.SafeConvertToInt32(dbFields[2]);
            return true;
        }

        /// <summary>
        /// 生成抢购配置字符串
        /// </summary>
        /// <returns></returns>
        public static String GetQiangGouXmlString(GameClient client)
        {
            List<QiangGouItemData> qiangGouItemList = Global.GetQiangGouItemList();
            if (null == qiangGouItemList || qiangGouItemList.Count <= 0)
            {
                return "";
            }

            client.ClientData.QiangGouItemList = qiangGouItemList; //记录在内存中

            StringBuilder qiangGouBuilder = new StringBuilder();

            qiangGouBuilder.AppendLine("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
            qiangGouBuilder.AppendLine("<Config>");
            qiangGouBuilder.AppendLine("<Mall>");

            if (null != qiangGouItemList)
            {
                SystemXmlItem xmlItem = new SystemXmlItem();
                xmlItem.XMLNode = new XElement("Item");

                int singleHasPurchase = 0;
                int fullHasPurchase = 0;
                for (int n = 0; n < qiangGouItemList.Count; n++)
                {
                    QiangGouItemData itemData = qiangGouItemList[n];

                    int actStartDay = 0;
                    switch (itemData.Type)
                    {
                        case 1:
                            actStartDay = Global.GetOffsetDay(Global.GetHefuStartDay());
                            break;
                        case 2:
                            actStartDay = Global.GetOffsetDay(Global.GetJieriStartDay());
                            break;
                        default:
                            actStartDay = 0;
                            break;
                    }

                    if (!Global.QueryQiangGouItemInfo(client.ClientData.RoleID, itemData.QiangGouID, itemData.GoodsID, itemData.Random, actStartDay, client.ServerId, out singleHasPurchase, out fullHasPurchase))
                    {
                        continue;
                    }

                    //修改或者补充几个属性
                    xmlItem.XMLNode.SetAttributeValue("CurrentRoleID", client.ClientData.RoleID);
                    xmlItem.XMLNode.SetAttributeValue("SingleHasPurchase", singleHasPurchase);

                    //如果gm停止了抢购，则设置全部商品已经被购买，前端看起来像售完了,同时，机器指令购买在TcpCmdHandle中也进行了屏蔽
                    if (IsGmStopQiangGou())
                    {
                        xmlItem.XMLNode.SetAttributeValue("FullHasPurchase", itemData.FullPurchase);
                    }
                    else
                    {
                        xmlItem.XMLNode.SetAttributeValue("FullHasPurchase", fullHasPurchase);
                    }

                    xmlItem.XMLNode.SetAttributeValue("QiangGouID", itemData.QiangGouID);
                    xmlItem.XMLNode.SetAttributeValue("GoodsID", itemData.GoodsID);
                    xmlItem.XMLNode.SetAttributeValue("OrigPrice", itemData.OrigPrice);
                    xmlItem.XMLNode.SetAttributeValue("Price", itemData.Price);
                    xmlItem.XMLNode.SetAttributeValue("SinglePurchase", itemData.SinglePurchase);
                    xmlItem.XMLNode.SetAttributeValue("FullPurchase", itemData.FullPurchase);
                    xmlItem.XMLNode.SetAttributeValue("DaysTime", itemData.DaysTime);
                    //xmlItem.XMLNode.SetAttributeValue("IsTimeOver", itemData.IsTimeOver);
                    xmlItem.XMLNode.SetAttributeValue("StartTime", itemData.StartTime);
                    xmlItem.XMLNode.SetAttributeValue("Type", itemData.Type);
                    //xmlItem.XMLNode.SetAttributeValue("EndTime", "");
                    qiangGouBuilder.AppendLine(xmlItem.XMLNode.ToString());
                }
            }

            qiangGouBuilder.AppendLine("</Mall>");
            qiangGouBuilder.AppendLine("</Config>");

            return qiangGouBuilder.ToString();
        }

        /// <summary>
        /// 缓存的随机的抢购列表的锁
        /// </summary>
        private static object CachingQiangGouItemDataListMutex = new object();

        /// <summary>
        /// 缓存的随机的抢购列表
        /// </summary>
        private static List<QiangGouItemData> CachingQiangGouItemDataList = null;

        /// <summary>
        /// 缓存的随机的抢购列表的日期ID
        /// </summary>
        private static int CachingQiangGouItemDataListDayID = -1;

        /// <summary>
        /// 更新各个抢购项,
        /// 1.每次跨天就处理，也就是过凌晨零点就处理一次
        /// 2.当抢购列表大于3个时处理一次
        /// </summary>
        public static List<QiangGouItemData> GetQiangGouItemList()
        {
            //消逝天数
            int elapseDays = GetDaysSpanNum(TimeUtil.NowDateTime(), GetKaiFuTime());

            //结束天数
            int timeOverDays = 0;

            //已经处理过的分组
            Dictionary<int, bool> groupDealedDict = new Dictionary<int, bool>();

            //处理结果
            List<QiangGouItemData> qiangGouItemDataList = null;

            Dictionary<int, SystemXmlItem> systemXmlItemDict = GameManager.SystemQiangGou.SystemXmlItemDict; //处理多线程
            for (int n = 0; n < systemXmlItemDict.Count; n++)
            {
                SystemXmlItem xmlItem = systemXmlItemDict.ElementAt(n).Value;

                int group = xmlItem.GetIntValue("Group");
                int dayTime = xmlItem.GetIntValue("DaysTime");
                int random = xmlItem.GetIntValue("Random");

                //每一分组，处理过了，就不处理
                if (groupDealedDict.ContainsKey(group))
                {
                    continue;
                }

                groupDealedDict.Add(group, true);

                //不需要随机的配置项
                if (0 == random)
                {
                    int oldTimeOverDays = timeOverDays;

                    //多少天之后这个抢购项过时
                    timeOverDays += dayTime;

                    //这说明这一项是有效的，逝去的时间小于过时时间【相对于开区】
                    if (elapseDays < timeOverDays)
                    {
                        //生成抢购项成功并退出 否则 继续
                        string startTime = Global.GetAddDaysDataTime(Global.GetKaiFuTime(), oldTimeOverDays, true).ToString("yyyy-MM-dd HH:mm:ss");
                        qiangGouItemDataList = CreateQiangGouItems(group, random, startTime);
                        if (null != qiangGouItemDataList)
                        {
                            break;
                        }
                    }
                }
                else
                {
                    continue;//对于需要随机分配的项，先不处理，它的分组ID总是100, Random总是1
                }
            }

            if (null == qiangGouItemDataList)
            {
                lock (Global.CachingQiangGouItemDataListMutex)
                {
                    //缓存的随机的抢购列表
                    if (null != Global.CachingQiangGouItemDataList && (int)TimeUtil.NowDateTime().DayOfYear == Global.CachingQiangGouItemDataListDayID)
                    {
                        qiangGouItemDataList = Global.CachingQiangGouItemDataList;
                    }
                    else
                    {
                        string startTime = Global.GetAddDaysDataTime(TimeUtil.NowDateTime(), 0, true).ToString("yyyy-MM-dd HH:mm:ss");

                        //处理随机项
                        qiangGouItemDataList = CreateQiangGouItems(100, 1, startTime);

                        //缓存起来
                        Global.CachingQiangGouItemDataList = qiangGouItemDataList;
                        Global.CachingQiangGouItemDataListDayID = (int)TimeUtil.NowDateTime().DayOfYear;
                    }
                }
            }

            // 生成合服抢购项
            List<QiangGouItemData> listHeFuQiangGou = null;
            listHeFuQiangGou = GetHeFuQiangGouItemList();
            if (null == qiangGouItemDataList)
            {
                qiangGouItemDataList = listHeFuQiangGou;
            }
            else
            {
                if (null != listHeFuQiangGou)
                    qiangGouItemDataList.AddRange(listHeFuQiangGou);
            }

            // 生成节日抢购项
            List<QiangGouItemData> listJieRiQiangGou = null;
            listJieRiQiangGou = GetJieRiQiangGouItemList();
            if (null == qiangGouItemDataList)
            {
                qiangGouItemDataList = listJieRiQiangGou;
            }
            else
            {
                if (null != listJieRiQiangGou)
                    qiangGouItemDataList.AddRange(listJieRiQiangGou);
            }

            return qiangGouItemDataList;
        }

        /// <summary>
        /// 通过groupID 生成抢购项
        /// </summary>
        /// <param name="groupID"></param>
        /// <returns></returns>
        public static List<QiangGouItemData> CreateQiangGouItems(int groupID, int random, string startTime)
        {
            List<SystemXmlItem> lsXmlItem = new List<SystemXmlItem>();

            //过滤抢购项
            for (int n = 0; n < GameManager.SystemQiangGou.SystemXmlItemDict.Count; n++)
            {
                SystemXmlItem xmlItem = GameManager.SystemQiangGou.SystemXmlItemDict.ElementAt(n).Value;
                int group = xmlItem.GetIntValue("Group");
                int myRandom = xmlItem.GetIntValue("Random");

                if (group == groupID && random == myRandom)
                {
                    lsXmlItem.Add(xmlItem);
                }
            }

            //如果不够三项，出错
            if (lsXmlItem.Count < Global.ConstQiangGouListCount)
            {
                return null;
            }

            //只有三项的时候，不需要管随机与否
            if (Global.ConstQiangGouListCount == lsXmlItem.Count || 0 == random)
            {
                lsXmlItem = lsXmlItem.GetRange(0, Global.ConstQiangGouListCount);
            }
            else//需要随机
            {
                lsXmlItem = Global.RandomSortList<SystemXmlItem>(lsXmlItem);
                lsXmlItem = lsXmlItem.GetRange(0, Global.ConstQiangGouListCount);
            }

            List<QiangGouItemData> qiangGouItemDataList = new List<QiangGouItemData>();
            for (int n = 0; n < lsXmlItem.Count; n++)
            {
                qiangGouItemDataList.Add(new QiangGouItemData()
                {
                    QiangGouID = lsXmlItem[n].GetIntValue("ID"),
                    Group = lsXmlItem[n].GetIntValue("Group"),
                    ItemID = lsXmlItem[n].GetIntValue("ID"),
                    GoodsID = lsXmlItem[n].GetIntValue("GoodsID"),
                    StartTime = startTime,
                    EndTime = "",
                    IsTimeOver = 0,
                    SinglePurchase = lsXmlItem[n].GetIntValue("SinglePurchase"),
                    FullPurchase = lsXmlItem[n].GetIntValue("FullPurchase"),
                    FullHasPurchase = 0,
                    SingleHasPurchase = 0,
                    CurrentRoleID = 0,
                    DaysTime = lsXmlItem[n].GetIntValue("DaysTime"),
                    Price = lsXmlItem[n].GetIntValue("Price"),
                    Random = lsXmlItem[n].GetIntValue("Random"),
                    OrigPrice = lsXmlItem[n].GetIntValue("OrigPrice"),
                    Type = 0,
                });
            }

            return qiangGouItemDataList;
        }

        /// <summary>
        /// 获取抢购的信息项
        /// </summary>
        /// <param name="client"></param>
        /// <param name="qiangGouID"></param>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static QiangGouItemData GetQiangGouItemData(GameClient client, int qiangGouID, int goodsID)
        {
            // 玩家掉线重连后，未必重新打开界面申请信息，所以List可能为空，这时重新加载以下它
            List<QiangGouItemData> qiangGouItemList = client.ClientData.QiangGouItemList;
            if (null == qiangGouItemList)
            {
                qiangGouItemList = Global.GetQiangGouItemList();
                if (null == qiangGouItemList || qiangGouItemList.Count <= 0)
                {
                    return null;
                }

                client.ClientData.QiangGouItemList = qiangGouItemList; //记录在内存中
            }

            QiangGouItemData itemData = null;

            //查询抢购项
            for (int n = 0; n < qiangGouItemList.Count; n++)
            {
                if (qiangGouItemList[n].QiangGouID == qiangGouID && qiangGouItemList[n].GoodsID == goodsID)
                {
                    itemData = qiangGouItemList[n];
                    break;
                }
            }

            return itemData;
        }

        /// <summary>
        /// 验证抢购操作
        /// </summary>
        /// <param name="qiangGouID"></param>
        /// <param name="num"></param>
        /// <returns></returns>
        public static int CheckQiangGou(GameClient client, int singleHasPurchase, int fullHasPurchase, int qiangGouID, int buyNum, int goodsID, out int price)
        {
            price = 100000;

            if (buyNum <= 0 || buyNum > 10000)
            {
                return -20001;//数量出错
            }

            List<QiangGouItemData> qiangGouItemList = client.ClientData.QiangGouItemList;
            QiangGouItemData itemData = null;

            //查询抢购项
            for (int n = 0; n < qiangGouItemList.Count; n++)
            {
                if (qiangGouItemList[n].QiangGouID == qiangGouID && qiangGouItemList[n].GoodsID == goodsID)
                {
                    itemData = qiangGouItemList[n];
                    break;
                }
            }

            if (null == itemData)
            {
                return -20002;//抢购项不存在
            }

            SystemXmlItem findXmlItem = null;
            bool result = GameManager.SystemQiangGou.SystemXmlItemDict.TryGetValue(itemData.QiangGouID, out findXmlItem);
            if (false == result)
                result = GameManager.SystemHeFuQiangGou.SystemXmlItemDict.TryGetValue(itemData.QiangGouID, out findXmlItem);
            if (false == result)
                result = GameManager.SystemJieRiQiangGou.SystemXmlItemDict.TryGetValue(itemData.QiangGouID, out findXmlItem);

            if (!result || findXmlItem.GetIntValue("GoodsID") != goodsID)
            {
                return -20002;//抢购项不存在
            }

            if (fullHasPurchase >= itemData.FullPurchase)
            {
                return -20003;//总的剩余个数不够
            }

            if (fullHasPurchase + buyNum > itemData.FullPurchase)
            {
                return -20004;//超出总的购买限额
            }

            if (singleHasPurchase >= itemData.SinglePurchase)
            {
                return -20005;//自己的购买限额已经用完
            }

            if (singleHasPurchase + buyNum > itemData.SinglePurchase)
            {
                return -20006;//超出自己的购买限额
            }

            int elapseDays = GetDaysSpanNum(TimeUtil.NowDateTime(), DateTime.Parse(itemData.StartTime));
            if (elapseDays >= itemData.DaysTime)
            {
                return -20007;//错过时间了，一般在跨凌晨零点时可能瞬间出现执行到，可能性很小
            }

            //设置物品ID
            price = itemData.Price;
            if (price <= 0)
            {
                return -20008;//配置参数错误
            }

            return 1;
        }


        /// <summary>
        /// 缓存的随机的抢购列表的锁
        /// </summary>
        private static object CachingHeFuQiangGouItemDataListMutex = new object();

        /// <summary>
        /// 缓存的随机的抢购列表
        /// </summary>
        private static List<QiangGouItemData> CachingHeFuQiangGouItemDataList = null;

        /// <summary>
        /// 缓存的随机的抢购列表的日期ID
        /// </summary>
        private static int CachingHeFuQiangGouItemDataListDayID = -1;

        /// <summary>
        /// 更新合服抢购项,
        /// 和处理商城抢购项处理一样
        /// </summary>
        public static List<QiangGouItemData> GetHeFuQiangGouItemList()
        {
            // 判断活动是否开启
            HeFuActivityConfig config = HuodongCachingMgr.GetHeFuActivityConfing();
            if (null == config)
                return null;

            if (!config.InList((int)ActivityTypes.HeFuShopLimit))
                return null;

            //消逝天数
            int elapseDays = GetDaysSpanNum(TimeUtil.NowDateTime(), GetHefuStartDay());

            //结束天数
            int timeOverDays = 0;

            //已经处理过的分组
            Dictionary<int, bool> groupDealedDict = new Dictionary<int, bool>();

            //处理结果
            List<QiangGouItemData> qiangGouItemDataList = null;

            Dictionary<int, SystemXmlItem> systemXmlItemDict = GameManager.SystemHeFuQiangGou.SystemXmlItemDict; //处理多线程
            for (int n = 0; n < systemXmlItemDict.Count; n++)
            {
                SystemXmlItem xmlItem = systemXmlItemDict.ElementAt(n).Value;

                int group = xmlItem.GetIntValue("Group");
                int dayTime = xmlItem.GetIntValue("DaysTime");
                int random = xmlItem.GetIntValue("Random");

                //每一分组，处理过了，就不处理
                if (groupDealedDict.ContainsKey(group))
                {
                    continue;
                }

                groupDealedDict.Add(group, true);

                //不需要随机的配置项
                if (0 == random)
                {
                    int oldTimeOverDays = timeOverDays;

                    //多少天之后这个抢购项过时
                    timeOverDays += dayTime;

                    //这说明这一项是有效的，逝去的时间小于过时时间【相对于合区】
                    if (elapseDays < timeOverDays)
                    {
                        //生成抢购项成功并退出 否则 继续
                        string startTime = Global.GetAddDaysDataTime(Global.GetHefuStartDay(), oldTimeOverDays, true).ToString("yyyy-MM-dd HH:mm:ss");
                        qiangGouItemDataList = CreateHeFuQiangGouItems(group, random, startTime);
                        if (null != qiangGouItemDataList)
                        {
                            break;
                        }
                    }
                }
                else
                {
                    continue;//对于需要随机分配的项，先不处理，它的分组ID总是100, Random总是1
                }
            }

            if (null == qiangGouItemDataList)
            {
                lock (Global.CachingHeFuQiangGouItemDataListMutex)
                {
                    //缓存的随机的抢购列表
                    if (null != Global.CachingHeFuQiangGouItemDataList && (int)TimeUtil.NowDateTime().DayOfYear == Global.CachingHeFuQiangGouItemDataListDayID)
                    {
                        qiangGouItemDataList = Global.CachingHeFuQiangGouItemDataList;
                    }
                    else
                    {
                        string startTime = Global.GetAddDaysDataTime(TimeUtil.NowDateTime(), 0, true).ToString("yyyy-MM-dd HH:mm:ss");

                        //处理随机项
                        qiangGouItemDataList = CreateHeFuQiangGouItems(100, 1, startTime);

                        //缓存起来
                        Global.CachingHeFuQiangGouItemDataList = qiangGouItemDataList;
                        Global.CachingHeFuQiangGouItemDataListDayID = (int)TimeUtil.NowDateTime().DayOfYear;
                    }
                }
            }

            return qiangGouItemDataList;
        }

        /// <summary>
        /// 通过groupID 生成合服抢购项
        /// 目前和正常商店抢购项逻辑相同
        /// </summary>
        /// <param name="groupID"></param>
        /// <returns></returns>
        public static List<QiangGouItemData> CreateHeFuQiangGouItems(int groupID, int random, string startTime)
        {
            List<SystemXmlItem> lsXmlItem = new List<SystemXmlItem>();

            //过滤抢购项
            for (int n = 0; n < GameManager.SystemHeFuQiangGou.SystemXmlItemDict.Count; n++)
            {
                SystemXmlItem xmlItem = GameManager.SystemHeFuQiangGou.SystemXmlItemDict.ElementAt(n).Value;
                int group = xmlItem.GetIntValue("Group");
                int myRandom = xmlItem.GetIntValue("Random");

                if (group == groupID && random == myRandom)
                {
                    lsXmlItem.Add(xmlItem);
                }
            }

            //如果不够三项，出错
            if (lsXmlItem.Count < Global.ConstHeFuQiangGouListCount)
            {
                return null;
            }

            //只有三项的时候，不需要管随机与否
            if (Global.ConstHeFuQiangGouListCount == lsXmlItem.Count || 0 == random)
            {
                lsXmlItem = lsXmlItem.GetRange(0, Global.ConstHeFuQiangGouListCount);
            }
            else//需要随机
            {
                lsXmlItem = Global.RandomSortList<SystemXmlItem>(lsXmlItem);
                lsXmlItem = lsXmlItem.GetRange(0, Global.ConstHeFuQiangGouListCount);
            }

            List<QiangGouItemData> qiangGouItemDataList = new List<QiangGouItemData>();
            for (int n = 0; n < lsXmlItem.Count; n++)
            {
                qiangGouItemDataList.Add(new QiangGouItemData()
                {
                    QiangGouID = lsXmlItem[n].GetIntValue("ID"),
                    Group = lsXmlItem[n].GetIntValue("Group"),
                    ItemID = lsXmlItem[n].GetIntValue("ID"),
                    GoodsID = lsXmlItem[n].GetIntValue("GoodsID"),
                    StartTime = startTime,
                    EndTime = "",
                    IsTimeOver = 0,
                    SinglePurchase = lsXmlItem[n].GetIntValue("SinglePurchase"),
                    FullPurchase = lsXmlItem[n].GetIntValue("FullPurchase"),
                    FullHasPurchase = 0,
                    SingleHasPurchase = 0,
                    CurrentRoleID = 0,
                    DaysTime = lsXmlItem[n].GetIntValue("DaysTime"),
                    Price = lsXmlItem[n].GetIntValue("Price"),
                    Random = lsXmlItem[n].GetIntValue("Random"),
                    OrigPrice = lsXmlItem[n].GetIntValue("OrigPrice"),
                    Type = 1,
                });
            }

            return qiangGouItemDataList;
        }

        /// <summary>
        /// 缓存的随机的抢购列表的锁
        /// </summary>
        private static object CachingJieRiQiangGouItemDataListMutex = new object();

        /// <summary>
        /// 缓存的随机的抢购列表
        /// </summary>
        private static List<QiangGouItemData> CachingJieRiQiangGouItemDataList = null;

        /// <summary>
        /// 缓存的随机的抢购列表的日期ID
        /// </summary>
        private static int CachingJieRiQiangGouItemDataListDayID = -1;

        /// <summary>
        /// 更新节日抢购项,
        /// 和处理商城抢购项处理一样
        /// </summary>
        public static List<QiangGouItemData> GetJieRiQiangGouItemList()
        {
            // 判断活动时间
            JieriActivityConfig config = HuodongCachingMgr.GetJieriActivityConfig();
            if (null == config)
                return null;

            if (!config.InList((int)ActivityTypes.JieriQiangGou))
                return null;

            //消逝天数
            int elapseDays = GetDaysSpanNum(TimeUtil.NowDateTime(), GetJieriStartDay());

            //结束天数
            int timeOverDays = 0;

            //已经处理过的分组
            Dictionary<int, bool> groupDealedDict = new Dictionary<int, bool>();

            //处理结果
            List<QiangGouItemData> qiangGouItemDataList = null;

            Dictionary<int, SystemXmlItem> systemXmlItemDict = GameManager.SystemJieRiQiangGou.SystemXmlItemDict; //处理多线程
            for (int n = 0; n < systemXmlItemDict.Count; n++)
            {
                SystemXmlItem xmlItem = systemXmlItemDict.ElementAt(n).Value;

                int group = xmlItem.GetIntValue("Group");
                int dayTime = xmlItem.GetIntValue("DaysTime");
                int random = xmlItem.GetIntValue("Random");

                //每一分组，处理过了，就不处理
                if (groupDealedDict.ContainsKey(group))
                {
                    continue;
                }

                groupDealedDict.Add(group, true);

                //不需要随机的配置项
                if (0 == random)
                {
                    int oldTimeOverDays = timeOverDays;

                    //多少天之后这个抢购项过时
                    timeOverDays += dayTime;

                    //这说明这一项是有效的，逝去的时间小于过时时间【相对于合区】
                    if (elapseDays < timeOverDays)
                    {
                        //生成抢购项成功并退出 否则 继续
                        string startTime = Global.GetAddDaysDataTime(Global.GetJieriStartDay(), oldTimeOverDays, true).ToString("yyyy-MM-dd HH:mm:ss");
                        qiangGouItemDataList = CreateJieRiQiangGouItems(group, random, startTime);
                        if (null != qiangGouItemDataList)
                        {
                            break;
                        }
                    }
                }
                else
                {
                    continue;//对于需要随机分配的项，先不处理，它的分组ID总是100, Random总是1
                }
            }

            if (null == qiangGouItemDataList)
            {
                lock (Global.CachingJieRiQiangGouItemDataListMutex)
                {
                    //缓存的随机的抢购列表
                    if (null != Global.CachingJieRiQiangGouItemDataList && (int)TimeUtil.NowDateTime().DayOfYear == Global.CachingJieRiQiangGouItemDataListDayID)
                    {
                        qiangGouItemDataList = Global.CachingJieRiQiangGouItemDataList;
                    }
                    else
                    {
                        string startTime = Global.GetAddDaysDataTime(TimeUtil.NowDateTime(), 0, true).ToString("yyyy-MM-dd HH:mm:ss");

                        //处理随机项
                        qiangGouItemDataList = CreateJieRiQiangGouItems(100, 1, startTime);

                        //缓存起来
                        Global.CachingJieRiQiangGouItemDataList = qiangGouItemDataList;
                        Global.CachingJieRiQiangGouItemDataListDayID = (int)TimeUtil.NowDateTime().DayOfYear;
                    }
                }
            }

            return qiangGouItemDataList;
        }

        /// <summary>
        /// 通过groupID 生成节日抢购项
        /// 目前和正常商店抢购项逻辑相同
        /// </summary>
        /// <param name="groupID"></param>
        /// <returns></returns>
        public static List<QiangGouItemData> CreateJieRiQiangGouItems(int groupID, int random, string startTime)
        {
            List<SystemXmlItem> lsXmlItem = new List<SystemXmlItem>();

            //过滤抢购项
            for (int n = 0; n < GameManager.SystemJieRiQiangGou.SystemXmlItemDict.Count; n++)
            {
                SystemXmlItem xmlItem = GameManager.SystemJieRiQiangGou.SystemXmlItemDict.ElementAt(n).Value;
                int group = xmlItem.GetIntValue("Group");
                int myRandom = xmlItem.GetIntValue("Random");

                if (group == groupID && random == myRandom)
                {
                    lsXmlItem.Add(xmlItem);
                }
            }

            //如果不够三项，出错
            if (lsXmlItem.Count < Global.ConstJieRiQiangGouListCount)
            {
                return null;
            }

            //只有三项的时候，不需要管随机与否
            if (Global.ConstJieRiQiangGouListCount == lsXmlItem.Count || 0 == random)
            {
                lsXmlItem = lsXmlItem.GetRange(0, Global.ConstJieRiQiangGouListCount);
            }
            else//需要随机
            {
                lsXmlItem = Global.RandomSortList<SystemXmlItem>(lsXmlItem);
                lsXmlItem = lsXmlItem.GetRange(0, Global.ConstJieRiQiangGouListCount);
            }

            List<QiangGouItemData> qiangGouItemDataList = new List<QiangGouItemData>();
            for (int n = 0; n < lsXmlItem.Count; n++)
            {
                qiangGouItemDataList.Add(new QiangGouItemData()
                {
                    QiangGouID = lsXmlItem[n].GetIntValue("ID"),
                    Group = lsXmlItem[n].GetIntValue("Group"),
                    ItemID = lsXmlItem[n].GetIntValue("ID"),
                    GoodsID = lsXmlItem[n].GetIntValue("GoodsID"),
                    StartTime = startTime,
                    EndTime = "",
                    IsTimeOver = 0,
                    SinglePurchase = lsXmlItem[n].GetIntValue("SinglePurchase"),
                    FullPurchase = lsXmlItem[n].GetIntValue("FullPurchase"),
                    FullHasPurchase = 0,
                    SingleHasPurchase = 0,
                    CurrentRoleID = 0,
                    DaysTime = lsXmlItem[n].GetIntValue("DaysTime"),
                    Price = lsXmlItem[n].GetIntValue("Price"),
                    Random = lsXmlItem[n].GetIntValue("Random"),
                    OrigPrice = lsXmlItem[n].GetIntValue("OrigPrice"),
                    Type = 2,
                });
            }

            return qiangGouItemDataList;
        }

#endregion 龙权商城以及商城抢购相关

#region 角色从npc处采用各种货币值兑换物品 购买物品管理

        /// <summary>
        /// 判断玩家是否有足够的货币购买物品
        /// </summary>
        /// <param name="goodsID"></param>
        /// <param name="goodsNum"></param>
        /// <param name="moneyType"></param>
        /// <returns></returns>
        public static int IsRoleHasEnoughMoney(GameClient client, int totalNeedMoney, int moneyType)
        {
            //GetGoodsPriceByMoneyType(goodsID, moneyType) * goodsNum;
            //不要钱，配置出错了吧
            if (totalNeedMoney <= 0)
            {
                return -20000;
            }

            int roleHasMoneyNum = 0;

            switch (moneyType)
            {
                case (int)MoneyTypes.TongQian:
                    roleHasMoneyNum = client.ClientData.Money1;
                    break;
                case (int)MoneyTypes.YinLiang:
                    roleHasMoneyNum = client.ClientData.YinLiang;
                    break;
                case (int)MoneyTypes.JingYuanZhi:
                    roleHasMoneyNum = GameManager.ClientMgr.GetTianDiJingYuanValue(client);
                    break;
                case (int)MoneyTypes.JunGongZhi:
                    roleHasMoneyNum = GameManager.ClientMgr.GetJunGongValue(client);
                    break;
                case (int)MoneyTypes.LieShaZhi:
                    roleHasMoneyNum = GameManager.ClientMgr.GetLieShaValue(client);
                    break;
                case (int)MoneyTypes.JiFenZhi:
                    roleHasMoneyNum = GameManager.ClientMgr.GetZhuangBeiJiFenValue(client);
                    break;
                case (int)MoneyTypes.ZhanHun:
                    roleHasMoneyNum = GameManager.ClientMgr.GetZhanHunValue(client);
                    break;
                case (int)MoneyTypes.ZaiZao:
                    roleHasMoneyNum = GameManager.ClientMgr.GetZaiZaoValue(client);
                    break;
                case (int)MoneyTypes.BaoZangJiFen:
                    roleHasMoneyNum = GameManager.ClientMgr.GetTreasureJiFen(client);
                    break;
                case (int)MoneyTypes.BaoZangXueZuan:
                    roleHasMoneyNum = GameManager.ClientMgr.GetTreasureXueZuan(client);
                    break;
                default:
                    break;
            }

            if (roleHasMoneyNum < totalNeedMoney)
            {
                return -moneyType;
            }

            return 1;//成功返回大于0
        }

        /// <summary>
        /// 扣除某种货币===除去元宝 和 绑定元宝
        /// </summary>
        /// <param name="client"></param>
        /// <param name="totalNeedMoney"></param>
        /// <param name="moneyType"></param>
        /// <returns></returns>
        public static int SubRoleMoneyForGoods(GameClient client, int totalNeedMoney, int moneyType, string strFrom)
        {
            if (totalNeedMoney <= 0)
            {
                return -20000;
            }

            bool result = true;

            switch (moneyType)
            {
                case (int)MoneyTypes.TongQian:
                    result = GameManager.ClientMgr.SubMoney1(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, totalNeedMoney, strFrom);
                    break;
                case (int)MoneyTypes.YinLiang:
                    result = GameManager.ClientMgr.SubUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, totalNeedMoney, strFrom);
                    break;
                case (int)MoneyTypes.JingYuanZhi:
                    GameManager.ClientMgr.ModifyTianDiJingYuanValue(client, -totalNeedMoney, strFrom, true);
                    break;
                case (int)MoneyTypes.JunGongZhi:
                    GameManager.ClientMgr.ModifyJunGongValue(client, -totalNeedMoney, true);
                    break;
                case (int)MoneyTypes.LieShaZhi:
                    GameManager.ClientMgr.ModifyLieShaValue(client, -totalNeedMoney, true);
                    break;
                case (int)MoneyTypes.JiFenZhi:
                    GameManager.ClientMgr.ModifyZhuangBeiJiFenValue(client, -totalNeedMoney, true);
                    break;
                case (int)MoneyTypes.ZhanHun:
                    GameManager.ClientMgr.ModifyZhanHunValue(client, -totalNeedMoney, true);
                    break;
                case (int)MoneyTypes.BaoZangJiFen:
                    GameManager.ClientMgr.ModifyTreasureJiFenValue(client, -totalNeedMoney, true);
                    break;
                case (int)MoneyTypes.BaoZangXueZuan:
                    GameManager.ClientMgr.ModifyTreasureXueZuanValue(client, -totalNeedMoney, true);
                    break;
                default:
                    result = false;
                    break;
            }

            if (!result)
            {
                return -moneyType - 10000;
            }

            return 1;//成功返回大于0
        }

#endregion  角色从npc处采用各种货币值兑换物品 购买物品管理

#region 战力鼓舞

        private static HashSet<int> GuWuMapSet = new HashSet<int>();

        /// <summary>
        /// 是否是可用鼓舞功能的地图
        /// </summary>
        /// <param name="mapCode"></param>
        /// <returns></returns>
        public static bool IsGuWuMap(int mapCode)
        {
            lock (GuWuMapSet)
            {
                if (GuWuMapSet.Count == 0)
                {
                    LoadGuWuMaps();
                }

                return GuWuMapSet.Contains(mapCode);
            }
        }

        /// <summary>
        /// 初始化可用鼓舞功能的地图编号集合
        /// </summary>
        public static void LoadGuWuMaps()
        {
            lock (GuWuMapSet)
            {
                GuWuMapSet.Clear();

                int[] guWuMapArray = GameManager.systemParamsList.GetParamValueIntArrayByName("GuWuMap");
                if (null == guWuMapArray || guWuMapArray.Length == 0)
                {
                    GuWuMapSet.Add(int.MaxValue);
                }
                else
                {
                    foreach (var code in guWuMapArray)
                    {
                        GuWuMapSet.Add(code);
                    }
                }
            }
        }

#endregion 战力鼓舞

#region 自动原地复活地图 [XSea 2015/6/19]
        /// <summary>
        /// 可以自动原地复活的地图
        /// </summary>
        private static HashSet<int> AutoReviveMapSet = new HashSet<int>();

        /// <summary>
        /// 初始化可用自动原地复活功能的地图编号集合
        /// </summary>
        public static void LoadAutoReviveMaps()
        {
            lock (AutoReviveMapSet)
            {
                AutoReviveMapSet.Clear();

                int[] AutoReviveMapArray = GameManager.systemParamsList.GetParamValueIntArrayByName("ChongShengMap");
                if (null == AutoReviveMapArray || AutoReviveMapArray.Length == 0)
                {
                    AutoReviveMapSet.Add(int.MaxValue);
                }
                else
                {
                    foreach (var code in AutoReviveMapArray)
                    {
                        AutoReviveMapSet.Add(code);
                    }
                }
            }
        }

        /// <summary>
        /// 是否为可以自动原地复活地图
        /// </summary>
        /// <param name="nMapCode"></param>
        public static bool IsAutoReviveMap(int nMapCode)
        {
            lock (AutoReviveMapSet)
            {
                if (AutoReviveMapSet.Count == 0)
                {
                    LoadAutoReviveMaps();
                }

                return AutoReviveMapSet.Contains(nMapCode);
            }
        }
#endregion

#region 古墓地图相关

        /// <summary>
        /// 古墓地图列表
        /// </summary>
        private static List<int> ListGuMuMap = new List<int>();

        /// <summary>
        /// 初始化限时地图列表
        /// </summary>
        public static void InitGuMuMapCodes()
        {
            List<String> lsLevelMap = GameManager.systemParamsList.GetParamValueStringListByName("GuMuLevelMapList");
            if (null == lsLevelMap)
            {
                return;
            }

            for (int n = 0; n < lsLevelMap.Count; n++)
            {
                String levelsMap = lsLevelMap[n];
                int[] arr = String2IntArray(levelsMap, '_');

                if (3 == arr.Length)
                {
                    AddGuMuMapCode(arr[2]);
                }
            }
        }

        /// <summary>
        /// 添加一个限时地图ID
        /// </summary>
        /// <param name="mapID"></param>
        public static void AddGuMuMapCode(int mapID)
        {
            lock (ListGuMuMap)
            {
                if (ListGuMuMap.IndexOf(mapID) < 0)
                {
                    ListGuMuMap.Add(mapID);
                }
            }
        }

        /// <summary>
        /// 处理角色的古墓地图限时，角色使用某些道具到某个地图只能停留有限时间
        /// </summary>
        /// <param name="client"></param>
        public static void ProcessGuMuMapTimeLimit(GameClient client, long elapseTicks)
        {
            //不在限时地图直接返回
            if (!IsInGuMuMap(client))
            {
                return;
            }

            DBRoleBufferManager.ProcessGuMu(client, elapseTicks);
        }

        /// <summary>
        /// 判断是否在古墓地图
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool IsInGuMuMap(GameClient client)
        {
            if (ListGuMuMap.IndexOf(client.ClientData.MapCode) < 0)
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// 获取系统给予的古墓时间
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int GetAutoGiveGuMuTime(GameClient client)
        {
            //古墓buffer
            BufferData bufferData = Global.GetBufferDataByID(client, (int)BufferItemTypes.GuMuTimeLimit);
            if (bufferData != null)
            {
                if (bufferData.StartTime == TimeUtil.NowDateTime().DayOfYear)
                {
                    return (int)Math.Max(0, bufferData.BufferVal);
                }
            }

            return 0;
        }

        /// <summary>
        /// 增加古墓地图时间
        /// </summary>
        /// <param name="client"></param>
        /// <param name="addTicks"></param>
        public static void AddGuMuMapTime(GameClient client, int autoGiveSeconds, int goodsGiveSeconds)
        {
            //更新BufferData
            double[] actionParams = new double[2];
            actionParams[0] = (double)autoGiveSeconds / 60;
            actionParams[1] = (double)goodsGiveSeconds / 60;
            Global.UpdateBufferData(client, BufferItemTypes.GuMuTimeLimit, actionParams);

            if (autoGiveSeconds > 0 || goodsGiveSeconds > 0)
            {
                int totalHasMinutes = 0;

                //古墓buffer
                BufferData bufferData = Global.GetBufferDataByID(client, (int)BufferItemTypes.GuMuTimeLimit);

                if (bufferData != null)
                {
                    //减少buffer剩余时间[秒数]
                    totalHasMinutes = (int)((bufferData.BufferVal + bufferData.BufferSecs) / 60);
                }

                //MU中古战场,不需要这个提示
                //String msg = String.Format("恭喜您获得古墓秘境修炼时间{0}分钟, 总剩余时间{1}分钟", (int)actionParams[0] + (int)actionParams[1], totalHasMinutes);

                //通知自己
                //GameManager.LuaMgr.NotifyImportantMsg(client, msg, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.ErrAndBox, 0);
            }
        }

        /// <summary>
        /// 返回角色等级对应的古墓地图ID
        /// </summary>
        public static int GetGuMuMapCodeByRoleLevel(int roleLevel)
        {
            List<String> lsLevelMap = GameManager.systemParamsList.GetParamValueStringListByName("GuMuLevelMapList");

            for (int n = 0; n < lsLevelMap.Count; n++)
            {
                String levelsMap = lsLevelMap[n];
                int[] arr = String2IntArray(levelsMap, '_');

                if (3 == arr.Length && roleLevel >= arr[0] && roleLevel <= arr[1])
                {
                    return arr[2];
                }
            }

            return -1;
        }

        /// <summary>
        /// 给予玩家古墓限时奖励 每天一次【跨12点 或 第一次登录】
        /// 普通玩家120分钟，vip240分钟,等级必须达到30级
        /// 这个函数会严格保证每天只有一次奖励
        /// </summary>
        /// <param name="client"></param>
        public static void GiveGuMuTimeLimitAward(GameClient client)
        {
            int todayID = TimeUtil.NowDateTime().DayOfYear;
            int lastGiveDayID = Global.GetRoleParamsInt32FromDB(client, RoleParamName.GuMuAwardDayID);
            if (todayID == lastGiveDayID)
            {
                return; //同一天，说明已经给过了
            }

            int[] arrAward = GameManager.systemParamsList.GetParamValueIntArrayByName("GuMuTimeLimitAward");
            if (null == arrAward)
            {
                return;
            }

            if (3 != arrAward.Length)
            {
                return;
            }

            //等级判断
            //             if (client.ClientData.Level < arrAward[0])
            //             {
            //                 return;
            //             }

            int awardMinutes = arrAward[1];

            //vip判断
            if (Global.IsVip(client))
            {
                awardMinutes = arrAward[2];
            }

            //每次奖励之前，先清空
            //Global.RemoveBufferData(client, (int)BufferItemTypes.GuMuTimeLimit);
            double awardmuti = 1.0;
            JieRiMultAwardActivity activity = HuodongCachingMgr.GetJieRiMultAwardActivity();
            if (null != activity)
            {
                JieRiMultConfig config = activity.GetConfig((int)MultActivityType.OldBattlefield);
                if (null != config)
                {
                    awardmuti += config.GetMult();
                }
            }


            AddGuMuMapTime(client, (int)(awardMinutes * 60 * awardmuti), 0);

            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.GuMuAwardDayID, todayID, true);
        }

        /// <summary>
        /// 当玩家第一次升级到30级[配置文件内部可能会更改这个值]的时候，给予buffer
        /// </summary>
        /// <param name="client"></param>
        public static void TryGiveGuMuTimeLimitAwardOnLevelUpTo30(GameClient client, int oldLevel)
        {
            int[] arrAward = GameManager.systemParamsList.GetParamValueIntArrayByName("GuMuTimeLimitAward");
            if (null == arrAward)
            {
                return;
            }

            if (3 != arrAward.Length)
            {
                return;
            }

            //刚刚升到30级，给予奖励
            if (oldLevel + 1 == arrAward[0] && client.ClientData.Level == arrAward[0])
            {
                GiveGuMuTimeLimitAward(client);
            }
        }

        /// <summary>
        /// 成为vip时，补充古墓限时奖励
        /// </summary>
        /// <param name="client"></param>
        /// <param name="isVipBefore"></param>
        public static void TryGiveGuMuTimeLimitAwardOnBecomeVip(GameClient client, bool isVipBefore)
        {
            //以前不是vip，先在是，则补充奖励时间差值
            if (!isVipBefore && IsVip(client))
            {
                int[] arrAward = GameManager.systemParamsList.GetParamValueIntArrayByName("GuMuTimeLimitAward");

                if (3 != arrAward.Length)
                {
                    return;
                }

                int awardMinutes = arrAward[2] - arrAward[1];

                if (awardMinutes > 0)
                {
                    int secs = Global.GetAutoGiveGuMuTime(client) + awardMinutes * 60;
                    AddGuMuMapTime(client, secs, 0);
                }
            }
        }

        /// <summary>
        /// 如果地图是古墓地图，判断是否能进,地图不是古墓地图返回true
        /// </summary>
        /// <param name="client"></param>
        /// <param name="mapCode"></param>
        /// <returns></returns>
        public static bool CanEnterIfMapIsGuMu(GameClient client, int mapCode)
        {
            if (ListGuMuMap.IndexOf(mapCode) < 0)
            {
                return true;
            }

            //古墓buffer 有效时才能进，否则不能进
            BufferData bufferData = Global.GetBufferDataByID(client, (int)BufferItemTypes.GuMuTimeLimit);

            //如果超过限制时间，通知玩家离开地图
            if (null == bufferData || Global.IsBufferDataOver(bufferData))
            {
                //GameManager.LuaMgr.Error(client, Global.GetLang("古墓挂机修炼时间已经用完"));
                GameManager.LuaMgr.Error(client, Global.GetLang("古战场时间已经用完"));
                return false;
            }

            return true;
        }

        //古墓vip经验系数，由配置文件读取，初始化有默认值
        private static double[] _VipGumuExpMultiple = { 1.1, 1.2, 1.3 };

        /// <summary>
        /// 初始化vip古墓挂机经验加成参数
        /// </summary>
        public static void InitVipGumuExpMultiple()
        {
            double[] expRateArr = GameManager.systemParamsList.GetParamValueDoubleArrayByName("GuMuVipExpMultiple");

            if (null != expRateArr)
            {
                for (int n = 0; n < expRateArr.Length && n < 3; n++)
                {
                    _VipGumuExpMultiple[n] = expRateArr[n];
                }
            }
        }

        /// <summary>
        /// 返回古墓杀怪的vip经验乘数，怪物被杀死时增加经验
        /// 默认返回1.0,经验不增加不减少
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static double GetVipGuMuExperienceMultiple(GameClient client)
        {
            double ret = 0.0;
            if (Global.IsInGuMuMap(client))
            {
                int vipType = Global.GetVipType(client);
                if ((int)VIPTypes.Month == vipType)
                {
                    ret = _VipGumuExpMultiple[0];
                }

                if ((int)VIPTypes.Season == vipType)
                {
                    ret = _VipGumuExpMultiple[1];
                }

                if ((int)VIPTypes.HalfYear == vipType)
                {
                    ret = _VipGumuExpMultiple[2];
                }
            }

            ret -= 1.0;
            ret = Global.GMax(0.0, ret);
            return ret;
        }

        /// <summary>
        /// 传送到古墓地图并增加相应的限时时间[主要是冥界地图]
        /// </summary>
        /// <param name="client"></param>
        /// <param name="mapCode"></param>
        /// <param name="addTicks"></param>
        public static int GotoGuMuMap(GameClient client)
        {
            int ret = -1;
            int mapCode = Global.GetGuMuMapCodeByRoleLevel(client.ClientData.ChangeLifeCount);

            if (mapCode > 0)
            {
                //根据等级进入不同的地图
                GameManager.LuaMgr.GotoMap(client, mapCode);
                ret = 1;
            }

            return ret;
        }

        /// <summary>
        /// 处理离开古墓地图
        /// </summary>
        /// <param name="client"></param>
        public static void ProcessLeaveGuMuMap(GameClient client)
        {
            //不在限时地图直接返回
            if (!IsInGuMuMap(client))
            {
                return;
            }

            //古墓buffer
            BufferData bufferData = Global.GetBufferDataByID(client, (int)BufferItemTypes.GuMuTimeLimit);
            if (bufferData != null)
            {
                //将新的Buffer数据通知自己
                GameManager.ClientMgr.NotifyBufferData(client, bufferData);
            }
        }

        /// <summary>
        /// 判断是否古墓地图时间超过限制
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool IsGuMuTimeOver(GameClient client)
        {

            //如果buffer给予日发生变化，则给予新的buffer奖励
            int todayID = TimeUtil.NowDateTime().DayOfYear;
            int lastGiveDayID = Global.GetRoleParamsInt32FromDB(client, RoleParamName.GuMuAwardDayID);
            if (todayID != lastGiveDayID)
            {
                Global.GiveGuMuTimeLimitAward(client);
            }

            //古墓buffer
            BufferData bufferData = Global.GetBufferDataByID(client, (int)BufferItemTypes.GuMuTimeLimit);
            if (null == bufferData || Global.IsBufferDataOver(bufferData))
            {
                return true;
            }

            return false;
        }

#endregion  古墓相关

#region 冥界地图相关

        /// <summary>
        /// 冥界地图列表
        /// </summary>
        private static List<int> ListMingJieMap = new List<int>();

        /// <summary>
        /// 判断是否冥界地图
        /// </summary>
        /// <param name="mapCode"></param>
        /// <returns></returns>
        public static Boolean IsMingJieMap(int mapCode)
        {
            if (ListMingJieMap.IndexOf(mapCode) >= 0)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 初始化冥界地图列表
        /// </summary>
        public static void InitMingJieMapCodeList()
        {
            int[] mapCodeArr = GameManager.systemParamsList.GetParamValueIntArrayByName("MingJieMapList");
            if (null == mapCodeArr)
            {
                return;
            }

            for (int n = 0; n < mapCodeArr.Length; n++)
            {
                AddMingJieMapCode(mapCodeArr[n]);
            }
        }

        /// <summary>
        /// 添加一个冥界限时地图ID
        /// </summary>
        /// <param name="mapID"></param>
        public static void AddMingJieMapCode(int mapID)
        {
            lock (ListMingJieMap)
            {
                if (ListMingJieMap.IndexOf(mapID) < 0)
                {
                    ListMingJieMap.Add(mapID);
                }
            }
        }

        /// <summary>
        /// 传送到限时地图并增加相应的限时时间[主要是冥界地图]
        /// </summary>
        /// <param name="client"></param>
        /// <param name="mapCode"></param>
        /// <param name="addTicks"></param>
        public static void GotoMingJieTimeLimitMap(GameClient client, int mapCode, int addSeconds)
        {
            if (addSeconds > 0 && mapCode > 0 && ListMingJieMap.IndexOf(mapCode) >= 0)
            {
                //更新BufferData
                double[] actionParams = new double[1];
                actionParams[0] = (double)addSeconds / 60;
                Global.UpdateBufferData(client, BufferItemTypes.MingJieMapLimit, actionParams, 1);//临时buffer

                //每次进入限时地图，都增加一个限时buffer
                GameManager.LuaMgr.GotoMap(client, mapCode);
            }
        }

        /// <summary>
        /// 处理角色冥界地图限时，角色使用某些道具到某个地图只能停留有限时间
        /// </summary>
        /// <param name="client"></param>
        public static void ProcessMingJieMapTimeLimit(GameClient client, long elapseTicks)
        {
            //不在冥界地图直接返回
            if (ListMingJieMap.IndexOf(client.ClientData.MapCode) < 0)
            {
                return;
            }

            DBRoleBufferManager.ProcessMingJieBuffer(client, elapseTicks);
        }

#endregion 冥界地图相关

#region boss副本管理

        /// <summary>
        /// 返回boss副本免费可进入次数
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int GetBossFuBenCanFreeEnterNum(GameClient client)
        {
            int fuBenID = Global.FindBossFuBenIDByRoleLevel(client.ClientData.Level);

            if (fuBenID <= 0)
            {
                return 0;
            }

            //获取副本的数据
            SystemXmlItem systemFuBenItem = null;
            if (!GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(fuBenID, out systemFuBenItem))
            {
                return 0;
            }

            int freeEnterNumber = systemFuBenItem.GetIntValue("EnterNumber");
            //int finishNumber = systemFuBenItem.GetIntValue("FinishNumber");
            if (Global.IsVip(client))
            {
                freeEnterNumber += 2;//vip额外增加两次
            }

            return freeEnterNumber;
        }

        /// <summary>
        /// 返回boss副本额外的可进入次数
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int GetBossFuBenCanExtEnterNum(GameClient client)
        {
            int bossFuBenExtraEnterNum = Math.Max(0, Global.GetRoleParamsInt32FromDB(client, RoleParamName.BossFuBenExtraEnterNum));
            return Math.Max(0, bossFuBenExtraEnterNum);
        }

        public static int EnterBossFuBen(GameClient client)
        {
            int fuBenID = Global.FindBossFuBenIDByRoleLevel(client.ClientData.Level);

            if (fuBenID <= 0)
            {
                return -1;
            }

            //获取副本的数据
            SystemXmlItem systemFuBenItem = null;
            if (!GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(fuBenID, out systemFuBenItem))
            {
                return -2;
            }

            int minLevel = systemFuBenItem.GetIntValue("MinLevel");
            int maxLevel = systemFuBenItem.GetIntValue("MaxLevel");
            if (maxLevel <= 0)
            {
                maxLevel = 1000; //表示无限制
            }
            int copyType = systemFuBenItem.GetIntValue("CopyType");
            int freeEnterNumber = systemFuBenItem.GetIntValue("EnterNumber");
            int finishNumber = systemFuBenItem.GetIntValue("FinishNumber");
            int toMapCode = systemFuBenItem.GetIntValue("MapCode");

            //首先判断级别是否满足
            if (client.ClientData.Level < minLevel || client.ClientData.Level > maxLevel)
            {
                return -3;//肯定不会走到这,取副本id的时候已经进行了过滤
            }

            FuBenData fuBenData = Global.GetFuBenData(client, fuBenID);
            int haveFinishNum = 0;
            int haveEnterNum = Global.GetFuBenEnterNum(fuBenData, out haveFinishNum);

            int canFreeEnterNumber = Global.GetBossFuBenCanFreeEnterNum(client);
            int canExtEnterNumber = Global.GetBossFuBenCanExtEnterNum(client);

            //判断进入次数是否满足
            if (haveEnterNum >= canFreeEnterNumber)
            {
                if (canExtEnterNumber <= 0)
                {
                    return -4;
                }
            }

            if (haveEnterNum >= canFreeEnterNumber) //需要使用额外的次数
            {
                //更新boss副本额外进入已经使用次数 整数增加 负数减少
                Global.UpdateBossFuBenExtraEnterNum(client, -1);
            }

            //从DBServer获取副本顺序ID
            string[] dbFields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_GETFUBENSEQID, string.Format("{0}", client.ClientData.RoleID), client.ServerId);
            if (null == dbFields || dbFields.Length < 2)
            {
                return -5;
            }

            int fuBenSeqID = Global.SafeConvertToInt32(dbFields[1]);

            //判断是个人副本还是组队副本
            if (0 == copyType) //个人副本
            {
                Global.UpdateFuBenData(client, fuBenID); //增加副本今日的进入次数

                //通知用户切换地图到副本的地图上
                GameMap gameMap = null;
                if (!GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
                {
                    return -6;
                }

                //设置角色的副本顺序ID
                client.ClientData.FuBenSeqID = fuBenSeqID;

                //添加一个角色到副本顺序ID的映射
                FuBenManager.AddFuBenSeqID(client.ClientData.RoleID, client.ClientData.FuBenSeqID, 0, fuBenID);

                GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                    client, toMapCode, -1, -1, -1);
            }
            else
            {
                return -7;//boss副本必须是个人副本
            }

            return 1;
        }

        /// <summary>
        /// 更新boss副本额外进入次数 整数增加 负数减少
        /// </summary>
        /// <param name="client"></param>
        /// <param name="addNum"></param>
        public static void UpdateBossFuBenExtraEnterNum(GameClient client, int addNum)
        {
            int oldNum = Global.GetRoleParamsInt32FromDB(client, RoleParamName.BossFuBenExtraEnterNum);

            int nowNum = Math.Max(0, oldNum + addNum);
            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.BossFuBenExtraEnterNum, nowNum, true);
        }

        /// <summary>
        /// 切换boss副本进入次数,当角色升级的时候，进行这个处理
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static void SwitchBossFuBenEnterNum(GameClient client)
        {
            if (client.ClientData.Level < 2)
            {
                return;
            }

            int preBossFuBenID = Global.FindBossFuBenIDByRoleLevel(client.ClientData.Level - 1);
            int curBossFuBenID = Global.FindBossFuBenIDByRoleLevel(client.ClientData.Level);

            if (preBossFuBenID > 0 && curBossFuBenID > 0 && preBossFuBenID != curBossFuBenID)
            {
                FuBenData preFubenData = GetFuBenData(client, preBossFuBenID);
                FuBenData curFubenData = GetFuBenData(client, curBossFuBenID);

                if (null != preFubenData)
                {
                    int nFinishNum;
                    int haveEnterNum = Global.GetFuBenEnterNum(preFubenData, out nFinishNum);
                    UpdateFuBenData(client, curBossFuBenID, Math.Max(0, haveEnterNum));//更新当前boss副本的进入次数
                }
            }
        }

        /// <summary>
        /// 通过级别获取Boss副本ID
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int FindBossFuBenIDByRoleLevel(int roleLevel)
        {
            int[] jingYanTaFuBenIDs = GameManager.systemParamsList.GetParamValueIntArrayByName("BossFuBenIDs");
            if (null == jingYanTaFuBenIDs || jingYanTaFuBenIDs.Length <= 0)
            {
                return 0;
            }

            //获取副本的数据
            SystemXmlItem systemFuBenItem = null;
            for (int i = 0; i < jingYanTaFuBenIDs.Length; i++)
            {
                if (!GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(jingYanTaFuBenIDs[i], out systemFuBenItem))
                {
                    continue;
                }

                int minLevel = systemFuBenItem.GetIntValue("MinLevel");
                int maxLevel = systemFuBenItem.GetIntValue("MaxLevel");
                if (maxLevel <= 0)
                {
                    maxLevel = 1000; //表示无限制
                }

                if (roleLevel >= minLevel && roleLevel <= maxLevel)
                {
                    return systemFuBenItem.GetIntValue("ID");
                }
            }

            return 0;
        }

        /// <summary>
        /// 获取Boss副本ID最小等级
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int GetBossFuBenMinLevel()
        {
            int myMinLevel = 9999;

            int[] jingYanTaFuBenIDs = GameManager.systemParamsList.GetParamValueIntArrayByName("BossFuBenIDs");
            if (null == jingYanTaFuBenIDs || jingYanTaFuBenIDs.Length <= 0)
            {
                return 0;
            }

            //获取副本的数据
            SystemXmlItem systemFuBenItem = null;
            for (int i = 0; i < jingYanTaFuBenIDs.Length; i++)
            {
                if (!GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(jingYanTaFuBenIDs[i], out systemFuBenItem))
                {
                    continue;
                }

                int minLevel = systemFuBenItem.GetIntValue("MinLevel");

                myMinLevel = Math.Min(myMinLevel, minLevel);
            }

            return myMinLevel;
        }

#endregion boss副本管理

#region 烤火相关

        /// <summary>
        /// 通知自己增加了烤火时间
        /// </summary>
        /// <param name="addMinutes"></param>
        public static void NotifySelfAddKaoHuoTime(GameClient client, int addMinutes)
        {
            if (addMinutes > 0)
            {
                String msg = String.Format("恭喜您获得{0}分钟烤火时间,在龙城火堆旁可收获大量经验", addMinutes);

                //通知自己
                GameManager.LuaMgr.NotifyImportantMsg(client, msg, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.ErrAndBox, 0);
            }
        }
#endregion 烤火相关

#region 角色死亡复活相关
        /// <summary>
        /// 返回角色复活类型，根据角色地图编号进行判断
        /// </summary>
        /// <param name="client"></param>
        public static int GetRoleReliveType(GameClient client)
        {
            GameMap gameMap;
            if (GameManager.MapMgr.DictMaps.TryGetValue(client.ClientData.MapCode, out gameMap) && null != gameMap)
            {
                return gameMap.RealiveMode;
            }

            return -1;
        }

        /// <summary>
        /// 返回角色复活等待秒数【直接返回本地图配置，不考虑复活类型，没有超时的复活方式配置文件都配置0】
        /// </summary>
        /// <param name="client"></param>
        public static int GetRoleReliveWaitingSecs(GameClient client)
        {
            GameMap gameMap = GameManager.MapMgr.DictMaps[client.ClientData.MapCode];

            if (null != gameMap)
            {
                if (gameMap.RealiveMode <= 0)
                {
                    return 30;
                }

                return gameMap.RealiveTime;
            }

            return 0;
        }
#endregion 角色死亡复活相关

#region 手动学习的技能相关

        /// <summary>
        /// 返回角色需要自己手动学习的技能列表 一般只有一个
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        private static List<int> GetManuLearnSkill(GameClient client)
        {
            List<int> lsManuSkill = new List<int>();

            SystemXmlItem systemMagic = null;
            for (int n = 0; n < GameManager.SystemMagicsMgr.SystemXmlItemDict.Count; n++)
            {
                systemMagic = GameManager.SystemMagicsMgr.SystemXmlItemDict.Values.ElementAt(n);
                if (null != systemMagic)
                {
                    int autoStart = systemMagic.GetIntValue("AutoStart");

                    if (0 == autoStart)
                    {
                        int toOcuupation = systemMagic.GetIntValue("ToOcuupation");

                        // 属性改造 加上一级属性公式 区分职业[8/15/2013 LiaoWei]
                        int nOcc = Global.CalcOriginalOccupationID(client);

                        if (nOcc == toOcuupation)
                        {
                            lsManuSkill.Add(systemMagic.GetIntValue("ID"));
                        }
                    }
                }
            }

            return lsManuSkill;
        }

        /// <summary>
        /// 判断是否有未学习的手动技能
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool HasNotLearnManuSkill(GameClient client)
        {
            List<int> lsSkill = GetManuLearnSkill(client);

            for (int n = 0; n < lsSkill.Count; n++)
            {
                if (null == Global.GetSkillDataByID(client, lsSkill[n]))
                {
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// 判断是否可以学习手动技能【只要有能学习的就返回true】
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool CanLearnManuSkill(GameClient client)
        {
            List<int> lsSkill = GetManuLearnSkill(client);

            for (int n = 0; n < lsSkill.Count; n++)
            {
                if (null == Global.GetSkillDataByID(client, lsSkill[n]))
                {
                    if (CanLearnSkill(client, lsSkill[n]))
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        /// <summary>
        /// 学习所有的未学习的手动技能
        /// </summary>
        /// <param name="client"></param>
        public static bool LearnAllManuSkills(GameClient client)
        {
            List<int> lsSkill = GetManuLearnSkill(client);

            for (int n = 0; n < lsSkill.Count; n++)
            {
                if (null == Global.GetSkillDataByID(client, lsSkill[n]))
                {
                    return LearnCareerSkill(client, lsSkill[n]);
                }
            }

            return false;
        }

        /// <summary>
        /// 判断是否可以学习某个单一技能
        /// </summary>
        /// <param name="client"></param>
        /// <param name="skillID"></param>
        /// <param name="skillLevel"></param>
        /// <returns></returns>
        public static Boolean CanLearnSkill(GameClient client, int skillID)
        {
            //还没学习
            if (null == Global.GetSkillDataByID(client, skillID))
            {
                //首先判断技能是群攻还是单攻
                SystemXmlItem systemMagic = null;
                if (GameManager.SystemMagicsMgr.SystemXmlItemDict.TryGetValue(skillID, out systemMagic))
                {
                    // 改造 end [11/13/2013 LiaoWei]
                    /*int needRoleLevel = 0;
                    int needShuLianDu = 0;

                    //获取升级技能所需要的熟练度
                    if (Global.GetUpSkillLearnCondition(skillID, null, out needRoleLevel, out needShuLianDu, systemMagic))
                    {
                        // 属性改造 加上一级属性公式 区分职业[8/15/2013 LiaoWei]
                        int nOcc = Global.CalcOriginalOccupationID(client);

                        if (client.ClientData.Level >= needRoleLevel &&
                            nOcc == systemMagic.GetIntValue("ToOcuupation"))
                        {
                            return true;
                        }
                    }*/

                    if (MU_GetUpSkillLearnCondition(client, skillID, systemMagic))
                        return true;

                    // 改造 end [11/13/2013 LiaoWei]
                }
            }

            return false;
        }

        /// <summary>
        /// 学习本职业的某个技能
        /// </summary>
        /// <param name="client"></param>
        private static bool LearnCareerSkill(GameClient client, int skillID, int skillLevel = 1)
        {
            skillLevel = Global.GMax(1, skillLevel);
            skillLevel = Global.GMin(3, skillLevel);

            //还没学习
            if (null == Global.GetSkillDataByID(client, skillID))
            {
                //首先判断技能是群攻还是单攻
                SystemXmlItem systemMagic = null;
                if (GameManager.SystemMagicsMgr.SystemXmlItemDict.TryGetValue(skillID, out systemMagic))
                {
                    //int needRoleLevel = 0;
                    //int needShuLianDu = 0;

                    //获取升级技能所需要的熟练度
                    // 改造 [11/13/2013 LiaoWei]
                    //if (Global.GetUpSkillLearnCondition(skillID, null, out needRoleLevel, out needShuLianDu, systemMagic))
                    if (Global.MU_GetUpSkillLearnCondition(client, skillID, systemMagic))
                    {
                        /// 获取技能名称
                        string skillName = Global.GetSkillNameByID(skillID);

                        // 属性改造 加上一级属性公式 区分职业[8/15/2013 LiaoWei]
                        int nOcc = Global.CalcOriginalOccupationID(client);

                        if (//client.ClientData.Level >= needRoleLevel &&     // 注释掉 [11/13/2013 LiaoWei]
                            nOcc == systemMagic.GetIntValue("ToOcuupation"))
                        {
                            //添加一个新的技能到数据库中
                            Global.AddSkillDBCommand(Global._TCPManager.TcpOutPacketPool, client, skillID, skillLevel);

                            //通知客户端学习了新技能
                            GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                                client, StringUtil.substitute(Global.GetLang("恭喜您学会了新技能[{0}]"), skillName), GameInfoTypeIndexes.Normal, ShowGameInfoTypes.OnlyChatBox, 0);

                            return true;
                        }
                        else
                        {
                            //通知客户端学习了新技能
                            GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool,
                                client, StringUtil.substitute(Global.GetLang("尚未达到学习新技能[{0}]的条件"), skillName), GameInfoTypeIndexes.Normal, ShowGameInfoTypes.ErrAndBox, 0);

                        }
                    }
                }
            }

            return false;
        }

#endregion 手动学习的技能相关

#region 怒斩pk王
        /// <summary>
        /// 判断玩家是否怒斩pk王
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static Boolean IsPkKing(GameClient client)
        {
            BufferData bufferData = Global.GetBufferDataByID(client, (int)BufferItemTypes.PKKingBuffer);
            if (null == bufferData || Global.IsBufferDataOver(bufferData))
            {
                return false;
            }

            return true;
        }
#endregion 怒斩pk王

#region 专属活动管理
        /// <summary>
        /// 缓存的专属活动xml数据
        /// </summary>
        public static JieriXmlData CachingSpecActXmlData = null;
        // 服务器当前专属配置文件的版本号，服务器每次重启置为1，每次热更新配置后加1
        private static int CachingSpecActXmlVersion = 1;

        /// <summary>
        /// 加载专属活动
        /// </summary>
        /// <returns></returns>
        public static JieriXmlData LoadSpecActXmlData()
        {
            if (null != CachingSpecActXmlData)
            {
                return CachingSpecActXmlData;
            }

            JieriXmlData jieriXmlData = new JieriXmlData();
            jieriXmlData.Version = CachingSpecActXmlVersion++;
            jieriXmlData.XmlList = new List<string>();

            String fullPathFileName = Global.GameResPath(SpecialActivity.SpecialActivityTimeData_fileName);
            string xmlstr = File.ReadAllText(fullPathFileName);
            jieriXmlData.XmlList.Add(xmlstr);

            fullPathFileName = Global.GameResPath(SpecialActivity.SpecialActivityData_fileName);
            xmlstr = File.ReadAllText(fullPathFileName);
            jieriXmlData.XmlList.Add(xmlstr);

            CachingSpecActXmlData = jieriXmlData;
            return jieriXmlData;
        }
#endregion

#region 大型节日活动管理

        /// <summary>
        /// 缓存的大型节日活动xml数据
        /// </summary>
        public static JieriXmlData CachingJieriXmlData = null;
        // 服务器当前节日活动配置文件的版本号，服务器每次重启置为1，每次热更新配置后加1
        private static int CachingJieriXmlVersion = 1;

        /// <summary>
        /// 加载大型节日活动
        /// </summary>
        /// <returns></returns>
        public static JieriXmlData LoadJieriXmlData()
        {
            if (null != CachingJieriXmlData)
            {
                return CachingJieriXmlData;
            }

            JieriXmlData jieriXmlData = new JieriXmlData();
            jieriXmlData.Version = CachingJieriXmlVersion++;
            jieriXmlData.XmlList = new List<string>();

            String fullPathFileName = Global.GameResPath("Config/JieRiGifts/MuJieRiType.xml");
            string xmlstr = File.ReadAllText(fullPathFileName);
            jieriXmlData.XmlList.Add(xmlstr);

            JieriActivityConfig config = HuodongCachingMgr.GetJieriActivityConfig();
            if (null == config)
            {
                return null;
            }

            foreach (var item in config.openList)
            {
                fullPathFileName = Global.GameResPath("Config/JieRiGifts/" + config.GetFileName(item));
                jieriXmlData.XmlList.Add(File.ReadAllText(fullPathFileName));
            }

            /*// 节日活动是否开始配置项
            String fullPathFileName = Global.GameResPath("Config/JieRiGifts/MuJieRiType.xml");
            string xmlstr = File.ReadAllText(fullPathFileName);
            jieriXmlData.XmlList.Add(xmlstr);

            // 节日登陆礼包
            fullPathFileName = Global.GameResPath("Config/JieRiGifts/JieRiLiBao.xml");
            jieriXmlData.XmlList.Add(File.ReadAllText(fullPathFileName));

            // 字卡 ？
            fullPathFileName = Global.GameResPath("Config/JieRiGifts/JieRiBaoXiang.xml");
            jieriXmlData.XmlList.Add(File.ReadAllText(fullPathFileName));

            // 节日累计登陆礼包
            fullPathFileName = Global.GameResPath("Config/JieRiGifts/JieRiDengLu.xml");
            jieriXmlData.XmlList.Add(File.ReadAllText(fullPathFileName));

            //fullPathFileName = Global.GameResPath("Config/JieRiGifts/JieRiVip.xml");
            //jieriXmlData.XmlList.Add(File.ReadAllText(fullPathFileName));

            // 节日每日充值送
            fullPathFileName = Global.GameResPath("Config/JieRiGifts/JieRiDayChongZhi.xml");
            jieriXmlData.XmlList.Add(File.ReadAllText(fullPathFileName));

            // 节日累计充值送
            fullPathFileName = Global.GameResPath("Config/JieRiGifts/JieRiLeiJi.xml");
            jieriXmlData.XmlList.Add(File.ReadAllText(fullPathFileName));

            // 累计消费
            fullPathFileName = Global.GameResPath("Config/JieRiGifts/JieRiLeiJiXiaoFei.xml");
            jieriXmlData.XmlList.Add(File.ReadAllText(fullPathFileName));

            // 充值王
            fullPathFileName = Global.GameResPath("Config/JieRiGifts/JieRiChongZhiKing.xml");
            jieriXmlData.XmlList.Add(File.ReadAllText(fullPathFileName));

            // 消费王
            fullPathFileName = Global.GameResPath("Config/JieRiGifts/JieRiXiaoFeiKing.xml");
            //fullPathFileName = Global.IsolateResPath("Config/XinFuGifts/MuXiaoFei.xml");
            jieriXmlData.XmlList.Add(File.ReadAllText(fullPathFileName));

            // 抢购
            fullPathFileName = Global.GameResPath("Config/JieRiGifts/JieRiQiangGou.xml");
            jieriXmlData.XmlList.Add(File.ReadAllText(fullPathFileName));

            // 节日boss
            fullPathFileName = Global.GameResPath("Config/JieRiGifts/JieRiBOSS.xml");
            jieriXmlData.XmlList.Add(File.ReadAllText(fullPathFileName));

            // 奖励多倍
            fullPathFileName = Global.GameResPath("Config/JieRiGifts/JieRiDuoBei.xml");
            jieriXmlData.XmlList.Add(File.ReadAllText(fullPathFileName));

            //fullPathFileName = Global.GameResPath("Config/JieRiGifts/JieRiBOSS.xml");
            //jieriXmlData.XmlList.Add(File.ReadAllText(fullPathFileName));*/

            CachingJieriXmlData = jieriXmlData;
            return jieriXmlData;
        }

#endregion 大型节日活动管理

#region 节日称号管理

        /// <summary>
        /// 重新初始化节日称号
        /// </summary>
        /// <param name="client"></param>
        public static void InitJieriChengHao(GameClient client, bool notifyClient = false)
        {
            int jieriChengHao = 0;
            BufferData bufferData = Global.GetBufferDataByID(client, (int)BufferItemTypes.JieRiChengHao);
            if (null != bufferData)
            {
                if (!Global.IsBufferDataOver(bufferData))
                {
                    jieriChengHao = 1;
                }
            }

            client.ClientData.JieriChengHao = jieriChengHao;

            if (notifyClient)
            {
                /// 播报节日称号
                GameManager.ClientMgr.BroadcastJieriChengHao(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
            }
        }

        /// <summary>
        /// 刷新初始化节日称号
        /// </summary>
        /// <param name="client"></param>
        public static void RefreshJieriChengHao(GameClient client)
        {
            if (client.ClientData.JieriChengHao <= 0)
            {
                return;
            }

            BufferData bufferData = Global.GetBufferDataByID(client, (int)BufferItemTypes.JieRiChengHao);
            if (null != bufferData)
            {
                if (!Global.IsBufferDataOver(bufferData))
                {
                    return;
                }
            }

            client.ClientData.JieriChengHao = 0;

            /// 播报节日称号
            GameManager.ClientMgr.BroadcastJieriChengHao(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
        }

#endregion 节日称号管理

#region 龙权礼品码相关

        /// <summary>
        /// 礼品码数据，用于缓存
        /// </summary>
        public static ActivitiesData _activitiesData = null;

        /// <summary>
        /// 返回礼品码礼品码数据
        /// </summary>
        /// <returns></returns>
        public static ActivitiesData GetActivitiesData(GameClient client = null)
        {
            ActivitiesData oldactivitiesData = null;
            if (null == _activitiesData)
            {
                oldactivitiesData = LoadActivitiesFileData();
                _activitiesData = oldactivitiesData;
            }
            else
            {
                oldactivitiesData = _activitiesData;
            }

            if (null != client)
            {
                //返回具有个体特征的商城数据
                ActivitiesData activitesData = new ActivitiesData();
                activitesData.ActivitiesXmlString = oldactivitiesData.ActivitiesXmlString;

                return activitesData;
            }

            return oldactivitiesData;
        }

        public static String GetGiftExchangeFileName()
        {
            string placeholder = string.Empty;
            return GetGiftExchangeFileName(out placeholder);
        }

        //得到Activities文件名
        public static String GetGiftExchangeFileName(out string sectionKey)
        {
            sectionKey = "dl_app";

            String strPlat = GameManager.GameConfigMgr.GetGameConfigItemStr("platformtype", "app");
            strPlat = strPlat.ToLower();

            if (strPlat == "app")
            {
                sectionKey = "dl_app";
            }
            else if (strPlat == "yueyu")
            {
                sectionKey = "dl_yueyu";
            }
            else if (strPlat == "andrid" || strPlat == "android" || strPlat == "yyb")
            {
                sectionKey = "dl_android";
            }

            const string fileName = "Config/Gifts/MU_Activities.xml";
            return fileName;
        }

        /// <summary>
        /// 加载礼品码配置文件数据
        /// </summary>
        /// <returns></returns>
        public static ActivitiesData LoadActivitiesFileData()
        {
            string sectionKey = string.Empty;
            string fileName = Global.GetGiftExchangeFileName(out sectionKey);

            XElement root = new XElement("config");
            XDocument doc = new XDocument(new XDeclaration("1.0", "UTF-8", null), root);

            XElement xml = XElement.Load(Global.IsolateResPath(fileName));
            var content = xml.Elements().First(_xml => _xml.Attribute("TypeID").Value.ToString().ToLower() == sectionKey).Elements();
            root.Add(content);

            ActivitiesData activitiesData = new ActivitiesData();
            activitiesData.ActivitiesXmlString = doc.Declaration.ToString() + doc.ToString();// File.ReadAllText(fullPathFileName);
            return activitiesData;
        }
#endregion 龙权礼品码相关

#region 绑定铜钱和非绑定铜钱混合使用

        /// <summary>
        /// 获取当前绑定铜钱和非绑定铜钱的总和
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int GetTotalBindTongQianAndTongQianVal(GameClient client)
        {
            return Math.Max(0, client.ClientData.Money1 + client.ClientData.YinLiang);
        }

        /// <summary>
        /// 扣除前绑定铜钱和非绑定铜钱, 先扣绑定铜钱，后扣除非绑定铜钱
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool SubBindTongQianAndTongQian(GameClient client, int money, string strFrom)
        {
            if (client.ClientData.Money1 + client.ClientData.YinLiang < money)
            {
                return false;
            }

            int subMoney = Math.Min(client.ClientData.Money1, money);
            if (subMoney > 0)
            {
                if (!GameManager.ClientMgr.SubMoney1(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, subMoney, strFrom))
                {
                    return false;
                }
            }

            if (subMoney >= money)
            {
                return true;
            }

            subMoney = Math.Max(0, money - subMoney);
            if (subMoney > 0)
            {
                if (client.ClientData.YinLiang < subMoney)
                {
                    return false;
                }

                if (!GameManager.ClientMgr.SubUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, subMoney, strFrom))
                {
                    return false;
                }
            }

            return true;
        }

#endregion 绑定铜钱和非绑定铜钱混合使用

#region 装备修理

        /// <summary>
        /// 计算修理所有装备需要的费用
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int CalcFixAllEquipsStrongMoney(GameClient client)
        {
            if (null == client.ClientData.GoodsDataList)
            {
                return 0;
            }

            if (client.ClientData.GoodsDataList.Count <= 0)
            {
                return 0;
            }

            List<GoodsData> goodsDataList = null;
            lock (client.ClientData.GoodsDataList)
            {
                goodsDataList = client.ClientData.GoodsDataList.GetRange(0, client.ClientData.GoodsDataList.Count);
            }

            int totalYinLiang = 0;
            for (int i = 0; i < goodsDataList.Count; i++)
            {
                GoodsData goodsData = goodsDataList[i];
                if (goodsData.Using <= 0) //只修理身上的装备
                {
                    continue;
                }

                //只有装备才能被修理
                int category = Global.GetGoodsCatetoriy(goodsData.GoodsID);

                //判断是否装备
                if (category < (int)ItemCategories.TouKui || category > (int)ItemCategories.EquipMax)
                {
                    continue;
                }

                SystemXmlItem systemGoods = null;
                if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods) || null == systemGoods)
                {
                    continue;
                }

                //出售给系统的银两价格
                int priceTwo = systemGoods.GetIntValue("PriceTwo");

                //EquipProps 字段的第二个表示最大耐久度
                int[] equipProps = systemGoods.GetIntArrayValue("EquipProps");

                if (null == equipProps || equipProps.Length < 2 || priceTwo <= 0)
                {
                    continue;
                }

                double fMaxStrong = equipProps[0];

                //不需要修理
                if (fMaxStrong <= 0.0 || goodsData.Strong <= 0.0)
                {
                    continue;
                }

                //修理费用铜钱=（购买铜钱/3）*(损耗耐久值/耐久上限值) 
                int needYinLiang = (int)((priceTwo / 3.0) * goodsData.Strong / fMaxStrong);//浮点计算，分母为0 也无所谓

                needYinLiang = Global.RecalcNeedYinLiang(needYinLiang); //判断银两是否折半
                totalYinLiang += needYinLiang;
            }

            return totalYinLiang;
        }

        /// <summary>
        /// 一键修理装备
        /// </summary>
        /// <param name="client"></param>
        public static int OneKeyFixAllEquips(GameClient client)
        {
            int needTotalYinLiang = Global.CalcFixAllEquipsStrongMoney(client);
            if (needTotalYinLiang <= 0)
            {
                return -50;
            }

            /*if (needTotalYinLiang > client.ClientData.YinLiang || needTotalYinLiang < 0)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                    StringUtil.substitute(Global.GetLang("一键修理身上装备时，需要的金币不足")),
                    GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.NoTongQian);
                return;
            }*/

            //扣除银两
            //if (!GameManager.ClientMgr.SubUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client,
            //    needTotalYinLiang))
            if (!Global.SubBindTongQianAndTongQian(client, needTotalYinLiang, "一键修理装备"))
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                    StringUtil.substitute(Global.GetLang("一键修理身上装备时，需求的金币不够")),
                    GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.NoTongQian);
                return -51;
            }

            if (null == client.ClientData.GoodsDataList)
            {
                return -50;
            }

            if (client.ClientData.GoodsDataList.Count <= 0)
            {
                return -50;
            }

            List<GoodsData> goodsDataList = null;
            lock (client.ClientData.GoodsDataList)
            {
                goodsDataList = client.ClientData.GoodsDataList.GetRange(0, client.ClientData.GoodsDataList.Count);
            }

            int totalFixedEquipNum = 0;
            for (int i = 0; i < goodsDataList.Count; i++)
            {
                GoodsData goodsData = goodsDataList[i];
                if (goodsData.Using <= 0) //只修理身上的装备
                {
                    continue;
                }

                //只有装备才能被修理
                int category = Global.GetGoodsCatetoriy(goodsData.GoodsID);

                //判断是否装备
                if (category < (int)ItemCategories.TouKui || category > (int)ItemCategories.EquipMax)
                {
                    continue;
                }

                if (goodsData.Strong <= 0)
                {
                    continue;
                }

                //减少装备耐久度(0表示耐久度到了最大)
                GameManager.ClientMgr.SubEquipStrong(client, goodsData, goodsData.Strong);
                totalFixedEquipNum++;
            }

            //刷新装备属性，并且通知客户端【主要用于装备强化，传承，洗练等操作过程中如果操作穿戴的装备时，刷新角色数据】
            Global.RefreshEquipPropAndNotify(client);

            GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                StringUtil.substitute(Global.GetLang("总共修理{0}件装备，花费了{1}金币"), totalFixedEquipNum, needTotalYinLiang),
                GameInfoTypeIndexes.Hot, ShowGameInfoTypes.ErrAndBox);

            return 1;
        }

#endregion 装备修理

#region 后期增加的装备合成(精炼)

        /// <summary>
        /// 根据物品的类型、suitID、qualityID在QualityUp.xml表中取得对应项的xml
        /// </summary>
        /// <param name="categoriy"></param>
        /// <param name="suitID"></param>
        /// <param name="qualityID"></param>
        /// <returns></returns>
        public static SystemXmlItem GetQualityUpXmlNode(int categoriy, int suitID, int qualityID)
        {
            string fileName = string.Format("Config/QualityUp.xml");
            XElement xml = GeneralCachingXmlMgr.GetXElement(Global.GameResPath(fileName));
            if (null == xml) return null;

            XElement xmlNode = Global.GetXElement(xml, "Equip", "Categoriy", categoriy.ToString());
            if (null == xmlNode) return null;

            IEnumerable<XElement> items = xmlNode.Elements("Item");
            foreach (var item in items)
            {
                if (Convert.ToInt32((string)item.Attribute("ShouShiSuitID")) == suitID && Convert.ToInt32((string)item.Attribute("QualityID")) == qualityID)
                {
                    return new SystemXmlItem()
                    {
                        XMLNode = item,
                    };
                }
            }

            return null;
        }

        ///根据Quality中的xml取得对应Goods.xml中的节点
        public static SystemXmlItem GetGoodsXmlNodeByQualityUp(int categoriy, int suitID, int qualityID, int occ)
        {
            foreach (var item in GameManager.SystemGoods.SystemXmlItemDict.Values)
            {
                int nGoodsID = item.GetIntValue("ID");
                if (categoriy == item.GetIntValue("Categoriy") && suitID == item.GetIntValue("ShouShiSuitID") && qualityID == item.GetIntValue("QualityID") && Global.IsRoleOccupationMatchGoods(occ, nGoodsID))
                {
                    return item;
                }
            }

            return null;
        }

#endregion 后期增加的装备合成(精炼)

#region 领地战

        /// <summary>
        /// 是否是领地战地图
        /// </summary>
        /// <param name="mapCode"></param>
        /// <returns></returns>
        public static bool IsLingDiZhanMapCode(GameClient client)
        {
            int lingDiID = JunQiManager.GetLingDiIDBy2MapCode(client.ClientData.MapCode);
            return (lingDiID == (int)LingDiIDs.YouZhou);
        }

#endregion 领地战

#region 位操作相关

        /// <summary>
        /// 取整数的某一位
        /// </summary>
        /// <param name="resource">要取某一位的整数</param>
        /// <param name="mask">要取的位置索引，自右至左为0-7</param>
        /// <returns>返回某一位的值（0或者1）</returns>
        public static int GetIntSomeBit(int resource, int mask)
        {
            return resource >> mask & 1;
        }

        /// <summary>
        /// 将整数的某位置为0或1
        /// </summary>
        /// <param name="mask">整数的某位</param>
        /// <param name="resource">整数</param>
        /// <param name="flag">是否置1，TURE表示置1，FALSE表示置0</param>
        /// <returns>返回修改过的值</returns>
        public static int SetIntSomeBit(int mask, int resource, bool flag)
        {
            if (flag)
            {
                resource |= (0x1 << mask);
            }
            else
            {
                resource &= ~(0x1 << mask);
            }
            return resource;
        }

        /// <summary>
        /// 根据输入数值获取位的设置值
        /// </summary>
        /// <param name="whichOne"></param>
        /// <returns></returns>
        public static int GetBitValue(int whichOne)
        {
            int bitVal = 0;

            //标记已经领取过了指定的礼物
            /*if (1 == whichOne)
            {
                bitVal = 1;
            }
            else if (2 == whichOne)
            {
                bitVal = 2;
            }
            else if (3 == whichOne)
            {
                bitVal = 4;
            }
            else if (4 == whichOne)
            {
                bitVal = 8;
            }
            else if (5 == whichOne)
            {
                bitVal = 16;
            }
            else if (6 == whichOne)
            {
                bitVal = 32;
            }
            else if (7 == whichOne)
            {
                bitVal = 64;
            }*/

            bitVal = (int)Math.Pow(2, whichOne - 1);
            return bitVal;
        }

        public static int GetBitValue(List<int> values, int whichOne)
        {
            int index = whichOne / 32;
            int bitIndex = whichOne % 32;
            if (values.Count <= index)
            {
                return 0;
            }
            int value = values[index];
            if ((value & (1 << bitIndex)) != 0)
            {
                return 1;
            }
            return 0;
        }

        public static void SetBitValue(ref List<int> values, int whichOne, int toValue)
        {
            int index = whichOne / 32;
            int bitIndex = whichOne % 32;
            while (values.Count <= index)
            {
                values.Add(0);
            }

            int value = values[index];
            if (toValue == 0)
            {
                value &= ~(1 << bitIndex);
            }
            else
            {
                value |= (1 << bitIndex);
            }
            values[index] = value;
        }

#endregion 位操作相关

#region 月度抽奖活动时间相关
        /// <summary>
        /// 返回服务器月度抽奖活动开始时间
        /// </summary>
        /// <returns></returns>
        public static DateTime GetYueDuChouJiangStartDay()
        {
            String sTimeString = GameManager.GameConfigMgr.GetGameConfigItemStr("yueduchoujiangstartday", "2000-01-01 01:01:01");
            DateTime dateTime;
            DateTime.TryParse(sTimeString, out dateTime);
            return dateTime;
        }

        /// <summary>
        /// 返回服务器节日活动持续的天数
        /// </summary>
        /// <returns></returns>
        public static int GetYueDuChouJiangDaysNum()
        {
            int daysNum = GameManager.GameConfigMgr.GetGameConfigItemInt("yueduchoujiangdaysnum", 0);
            return daysNum;
        }

#endregion 月度抽奖奖活时间相关


#region 初始化t_roleparams中的相关数据

        /// <summary>
        /// 计算玩家这个等级应有的升级给与的属性点总数
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static int GetRoleTotalPointFromLevelUp(GameClient client)
        {
            int totalPoint = 0;
            int changeLifeCount = client.ClientData.ChangeLifeCount;
            for (int i = 0; i <= changeLifeCount; i++)
            {
                ChangeLifeAddPointInfo tmpChangeAddPointInfo = null;
                if (!Data.ChangeLifeAddPointInfoList.TryGetValue(i, out tmpChangeAddPointInfo) || tmpChangeAddPointInfo == null)
                    continue;

                if (i < changeLifeCount)
                {
                    totalPoint += 99 * tmpChangeAddPointInfo.AddPoint;
                }
                else
                {
                    totalPoint += (client.ClientData.Level - 1) * tmpChangeAddPointInfo.AddPoint;
                }
            }

            return totalPoint;
        }

        /// <summary>
        /// 初始化t_roleparams相关数据
        /// </summary>
        /// <param name="client"></param>
        public static void InitRoleParamsInfo(GameClient client)
        {
            // 复活戒指的CD
            client.ClientData.SpecialEquipLastUseTicks = Global.GetRoleParamsInt64FromDB(client, RoleParamName.FuHuoJieZhiCD);

            // 血量和蓝量
            int nCurVal = 0;
            nCurVal = Global.GetRoleParamsInt32FromDB(client, RoleParamName.CurHP);
            client.ClientData.CurrentLifeV = nCurVal > 0 ? nCurVal : (int)RoleAlgorithm.GetMaxLifeV(client);

            nCurVal = Global.GetRoleParamsInt32FromDB(client, RoleParamName.CurMP);
            client.ClientData.CurrentMagicV = nCurVal > 0 ? nCurVal : (int)RoleAlgorithm.GetMaxMagicV(client);

            lock (client.ClientData.PropPointMutex)
            {
                if (client.ClientData.IsFlashPlayer == 1)
                {
                    // 清空属性点
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropStrength, 0, true);
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropIntelligence, 0, true);
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropDexterity, 0, true);
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropConstitution, 0, true);
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.TotalPropPoint, 0, true);

                    client.ClientData.PropStrength = 0;
                    client.ClientData.PropIntelligence = 0;
                    client.ClientData.PropDexterity = 0;
                    client.ClientData.PropConstitution = 0;
                    client.ClientData.TotalPropPoint = 0;
                }
                else if (!GameManager.TestGamePerformanceMode)
                {
                    // 总属性点
                    client.ClientData.TotalPropPoint = Global.GetRoleParamsInt32FromDB(client, RoleParamName.TotalPropPoint);

                    // 一级属性
                    client.ClientData.PropStrength = Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropStrength);
                    client.ClientData.PropIntelligence = Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropIntelligence);
                    client.ClientData.PropDexterity = Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropDexterity);
                    client.ClientData.PropConstitution = Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropConstitution);
                    int nVerifyBuffProp = Global.GetRoleParamsInt32FromDB(client, RoleParamName.VerifyBuffProp);


                    int nVerifyStrength = 0;
                    int nVerifyIntelligence = 0;
                    int nVerifyDexterity = 0;
                    int nVerifyConstitution = 0;

                    //将BUFF增加的一级属性分离出来
                    if (0 == nVerifyBuffProp)
                    {
                        nVerifyStrength = DBRoleBufferManager.GetBuffAddProp(client, BufferItemTypes.ADDTEMPStrength);
                        nVerifyIntelligence = DBRoleBufferManager.GetBuffAddProp(client, BufferItemTypes.ADDTEMPIntelligsence);
                        nVerifyDexterity = DBRoleBufferManager.GetBuffAddProp(client, BufferItemTypes.ADDTEMPDexterity);
                        nVerifyConstitution = DBRoleBufferManager.GetBuffAddProp(client, BufferItemTypes.ADDTEMPConstitution);
                        client.ClientData.PropStrength -= nVerifyStrength;
                        client.ClientData.PropIntelligence -= nVerifyIntelligence;
                        client.ClientData.PropDexterity -= nVerifyDexterity;
                        client.ClientData.PropConstitution -= nVerifyConstitution;
                    }

                    //修正果实和Buff属性的负值情况
                    int PropStrengthChangeless = Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropStrengthChangeless) - nVerifyStrength;
                    if (PropStrengthChangeless < 0 && PropStrengthChangeless + 500 <= UseFruitVerify.GetFruitAddPropLimit(client, "Strength"))
                    {
                        if (PropStrengthChangeless < 0) PropStrengthChangeless += 500;
                        Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropStrengthChangeless, PropStrengthChangeless, true);
                        LogManager.WriteLog(LogTypes.SQL, string.Format(@"果实力量属性值异常,{0}(RoleID={1}),修正为{2}", Global.FormatRoleName4(client), client.ClientData.RoleID, PropStrengthChangeless));
                    }
                    else
                    {
                        if (nVerifyStrength > 0)
                        {
                            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropStrengthChangeless, PropStrengthChangeless, true);
                        }
                    }

                    int PropIntelligenceChangeless = Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropIntelligenceChangeless) - nVerifyIntelligence;
                    if (PropIntelligenceChangeless < 0 && PropStrengthChangeless + 500 <= UseFruitVerify.GetFruitAddPropLimit(client, "Intelligence"))
                    {
                        if (PropIntelligenceChangeless < 0) PropIntelligenceChangeless += 500;
                        Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropIntelligenceChangeless, PropIntelligenceChangeless, true);
                        LogManager.WriteLog(LogTypes.SQL, string.Format(@"果实智力属性值异常,{0}(RoleID={1}),修正为{2}", Global.FormatRoleName4(client), client.ClientData.RoleID, PropIntelligenceChangeless));
                    }
                    else
                    {
                        if (nVerifyIntelligence > 0)
                        {
                            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropIntelligenceChangeless, PropIntelligenceChangeless, true);
                        }
                    }

                    int PropDexterityChangeless = Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropDexterityChangeless) - nVerifyDexterity;
                    if (PropDexterityChangeless < 0 && PropStrengthChangeless + 500 <= UseFruitVerify.GetFruitAddPropLimit(client, "Dexterity"))
                    {
                        if (PropDexterityChangeless < 0) PropDexterityChangeless += 500;
                        Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropDexterityChangeless, PropDexterityChangeless, true);
                        LogManager.WriteLog(LogTypes.SQL, string.Format(@"果实敏捷属性值异常,{0}(RoleID={1}),修正为{2}", Global.FormatRoleName4(client), client.ClientData.RoleID, PropDexterityChangeless));
                    }
                    else
                    {
                        if (nVerifyDexterity > 0)
                        {
                            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropDexterityChangeless, PropDexterityChangeless, true);
                        }
                    }

                    int PropConstitutionChangeless = Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropConstitutionChangeless) - nVerifyConstitution;
                    if (PropConstitutionChangeless < 0 && PropStrengthChangeless + 500 <= UseFruitVerify.GetFruitAddPropLimit(client, "Constitution"))
                    {
                        if (PropConstitutionChangeless < 0) PropConstitutionChangeless += 500;
                        Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropConstitutionChangeless, PropConstitutionChangeless, true);
                        LogManager.WriteLog(LogTypes.SQL, string.Format(@"果实体力属性值异常,{0}(RoleID={1}),修正为{2}", Global.FormatRoleName4(client), client.ClientData.RoleID, PropConstitutionChangeless));
                    }
                    else
                    {
                        if (nVerifyConstitution > 0)
                        {
                            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropConstitutionChangeless, PropConstitutionChangeless, true);
                        }
                    }

                    //升级获得的点数
                    int totalPointFormLevelUp = GetRoleTotalPointFromLevelUp(client);

                    //修正总点数
                    int totalPoint = totalPointFormLevelUp + PropStrengthChangeless + PropIntelligenceChangeless + PropDexterityChangeless + PropConstitutionChangeless;
                    if (client.ClientData.TotalPropPoint != totalPoint)
                    {
                        LogManager.WriteLog(LogTypes.SQL, string.Format(@"总属性值异常,{0}(RoleID={1}),从{2}修正为{3}", Global.FormatRoleName4(client), client.ClientData.RoleID, client.ClientData.TotalPropPoint, totalPoint));
                        client.ClientData.TotalPropPoint = totalPoint;
                        Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.TotalPropPoint, client.ClientData.TotalPropPoint, true);
                    }

                    //修正各属性的当前点数
                    if (client.ClientData.PropStrength < 0)
                    {
                        client.ClientData.PropStrength = PropStrengthChangeless;
                    }
                    if (client.ClientData.PropIntelligence < 0)
                    {
                        client.ClientData.PropIntelligence = PropIntelligenceChangeless;
                    }
                    if (client.ClientData.PropDexterity < 0)
                    {
                        client.ClientData.PropDexterity = PropDexterityChangeless;
                    }
                    if (client.ClientData.PropConstitution < 0)
                    {
                        client.ClientData.PropConstitution = PropConstitutionChangeless;
                    }

                    //修正已分配点数超过总点数错误
                    int t2 = client.ClientData.PropStrength + client.ClientData.PropIntelligence + client.ClientData.PropDexterity + client.ClientData.PropConstitution;
                    int lastt2 = t2;
                    while (t2 > totalPoint)
                    {
                        if (client.ClientData.PropStrength > PropStrengthChangeless)
                        {
                            client.ClientData.PropStrength--;
                            t2--;
                        }
                        if (client.ClientData.PropIntelligence > PropIntelligenceChangeless)
                        {
                            client.ClientData.PropIntelligence--;
                            t2--;
                        }
                        if (client.ClientData.PropDexterity > PropDexterityChangeless)
                        {
                            client.ClientData.PropDexterity--;
                            t2--;
                        }
                        if (client.ClientData.PropConstitution > PropConstitutionChangeless)
                        {
                            client.ClientData.PropConstitution--;
                            t2--;
                        }
                        if (t2 == lastt2)
                        {
                            break;
                        }
                        lastt2 = t2;
                    }

                    if (nVerifyBuffProp == 0)
                    {
                        // 保存校验标记
                        Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.VerifyBuffProp, 1, true);
                    }

                    //保存属性
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropStrength, client.ClientData.PropStrength, false);
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropIntelligence, client.ClientData.PropIntelligence, false);
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropDexterity, client.ClientData.PropDexterity, false);
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropConstitution, client.ClientData.PropConstitution, false);
                }
            }

            // 崇拜值
            int nToday = (int)TimeUtil.NowDateTime().DayOfYear;
            int nDay = Global.GetRoleParamsInt32FromDB(client, RoleParamName.AdmireDayID);
            int nCount = Global.GetRoleParamsInt32FromDB(client, RoleParamName.AdmireCount);

            if (nDay == nToday)
            {
                client.ClientData.AdorationCount = nCount;
            }
            else
            {
                client.ClientData.AdorationCount = 0;
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.AdmireDayID, nToday, true);
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.AdmireCount, client.ClientData.AdorationCount, true);
            }

            // PK之王崇拜
            nDay = Global.GetRoleParamsInt32FromDB(client, RoleParamName.PKKingAdmireDayID);
            nCount = Global.GetRoleParamsInt32FromDB(client, RoleParamName.PKKingAdmireCount);

            if (nDay == nToday)
            {
                client.ClientData.PKKingAdorationCount = nCount;
            }
            else
            {
                client.ClientData.PKKingAdorationCount = 0;
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.PKKingAdmireDayID, nToday, true);
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.PKKingAdmireCount, client.ClientData.PKKingAdorationCount, true);
            }

            // 每日登陆 -- 这里不做过多的处理 在UpdateRoleOnlineTimes接口中会有详细的设定
            client.ClientData.DayOnlineSecond = Global.GetRoleParamsInt32FromDB(client, RoleParamName.DayOnlineSecond);
            client.ClientData.BakDayOnlineSecond = client.ClientData.DayOnlineSecond;
            client.ClientData.DayOnlineRecSecond = TimeUtil.NOW();

            // 连续登陆
            client.ClientData.SeriesLoginNum = Global.GetRoleParamsInt32FromDB(client, RoleParamName.SeriesLoginCount);

            // 转生计数
            //client.ClientData.ChangeLifeCount = Global.GetRoleParamsInt32FromDB(client, RoleParamName.sChangeLifeCount);

            client.ClientData.AutoFightGetThings = Global.GetRoleParamsInt32FromDB(client, RoleParamName.FightGetThings);

            // 血色堡垒相关
            client.ClientData.BloodCastleAwardPoint = Global.GetRoleParamsInt32FromDB(client, RoleParamName.BloodCastlePlayerPoint);

            // 恶魔广场相关
            client.ClientData.DaimonSquarePoint = Global.GetRoleParamsInt32FromDB(client, RoleParamName.DaimonSquarePlayerPoint);

            // 默认技能
            client.ClientData.DefaultSkillLev = Global.GetRoleParamsInt32FromDB(client, RoleParamName.DefaultSkillLev);
            if (client.ClientData.DefaultSkillLev == 0)
                client.ClientData.DefaultSkillLev = 1;

            client.ClientData.DefaultSkillUseNum = Global.GetRoleParamsInt32FromDB(client, RoleParamName.DefaultSkillUseNum);

            client.ClientData.OpenGridTime = Global.GetRoleParamsInt32FromDB(client, RoleParamName.OpenGridTick);

            client.ClientData.OpenPortableGridTime = Global.GetRoleParamsInt32FromDB(client, RoleParamName.OpenPortableGridTick);

            client.ClientData.NotSafeMeditateTime = Global.GetRoleParamsInt32FromDB(client, RoleParamName.NotSafeMeditateTime);

            client.ClientData.MeditateTime = Global.GetRoleParamsInt32FromDB(client, RoleParamName.MeditateTime);

            client.ClientData.StarSoul = Global.GetRoleParamsInt32FromDB(client, RoleParamName.StarSoul);

            //月卡信息
            client.ClientData.YKDetail.ParseFrom(Global.GetRoleParamByName(client, RoleParamName.YueKaInfo));
        }

        /// <summary>
        /// 修正角色的某些系统数据，部分修正代码可能随版本更新而去掉
        /// </summary>
        /// <param name="client"></param>
        public static void FixRoleSomeData(GameClient client)
        {
            ChengJiuManager.ProcessCompleteMainTaskForChengJiu(client, client.ClientData.MainTaskID);//client.ClientData.MainTaskID
        }

        /// <summary>
        /// 在服务器实现的自动加点(当前在客户端实现,未用此函数，自动加点现在走客户端的推荐加点)
        /// </summary>
        /// <param name="client"></param>
        public static void AutoAddRolePoint(GameClient client)
        {
            if (true)
            {
                // 总属性点
                int nTotalPoint = Global.GetRoleParamsInt32FromDB(client, RoleParamName.TotalPropPoint);

                // 一级属性
                int nStrengthPoint = Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropStrength);
                int nIntelligencePoint = Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropIntelligence);
                int nDexterityPoint = Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropDexterity);
                int nConstitutionPoint = Global.GetRoleParamsInt32FromDB(client, RoleParamName.sPropConstitution);

                int nUsedPoint = nStrengthPoint + nIntelligencePoint + nDexterityPoint + nConstitutionPoint;
                int nRemainPoint = nTotalPoint - nUsedPoint;

                int addStrengthPoint = 0;
                int addIntelligencePoint = 0;
                int addDexterityPoint = 0;
                int addConstitutionPoint = 0;

                float addStrength = 0;
                float addIntelligence = 0;
                float addDexterity = 2;
                float addConstitution = 1;

                int occupation = Global.CalcOriginalOccupationID(client);
                switch (occupation)
                {
                    case 0:
                        addStrength = 2;
                        break;
                    case 1:
                        addIntelligence = 2;
                        break;
                    case 2:
                        addStrength = 2;
                        break;
                }

                do
                {
                    int total = nRemainPoint; //参与计算权重的点数(只有未达到推荐点数的属性才参与计算)
                    if (addStrength > 0) total += nStrengthPoint;
                    if (addIntelligence > 0) total += nIntelligencePoint;
                    if (addDexterity > 0) total += nDexterityPoint;
                    if (addConstitution > 0) total += nConstitutionPoint;

                    if (addConstitution > 0 && total * addConstitution / (addConstitution + addStrength + addIntelligence + addDexterity) <= nConstitutionPoint)
                    {
                        addConstitution = 0;
                        continue;
                    }
                    if (addStrength > 0 && total * addStrength / (addConstitution + addStrength + addIntelligence + addDexterity) <= nStrengthPoint)
                    {
                        addStrength = 0;
                        continue;
                    }
                    if (addIntelligence > 0 && total * addIntelligence / (addConstitution + addStrength + addIntelligence + addDexterity) <= nIntelligencePoint)
                    {
                        addIntelligence = 0;
                        continue;
                    }
                    if (addDexterity > 0 && total * addDexterity / (addConstitution + addStrength + addIntelligence + addDexterity) <= nDexterityPoint)
                    {
                        addDexterity = 0;
                        continue;
                    }


                    if (addStrength > 0) addStrengthPoint = (int)(total * addStrength / (addConstitution + addStrength + addIntelligence + addDexterity) - nStrengthPoint);
                    if (addIntelligence > 0) addIntelligencePoint = (int)(total * addIntelligence / (addConstitution + addStrength + addIntelligence + addDexterity) - nIntelligencePoint);
                    if (addDexterity > 0) addDexterityPoint = (int)(total * addDexterity / (addConstitution + addStrength + addIntelligence + addDexterity) - nDexterityPoint);
                    if (addConstitution > 0) addConstitutionPoint = (int)(total * addConstitution / (addConstitution + addStrength + addIntelligence + addDexterity) - nConstitutionPoint);

                    //剩余尾数,按优先级(代码顺序)分配
                    int remain = nRemainPoint - (addStrengthPoint + addIntelligencePoint + addDexterityPoint + addConstitutionPoint);

                    if (addConstitution > 0) addConstitutionPoint += remain;
                    else if (addStrength > 0) addStrengthPoint += remain;
                    else if (addIntelligence > 0) addIntelligencePoint += remain;
                    else if (addDexterity > 0) addDexterityPoint += remain;
                    break;
                } while (true);
            }
        }

        /// <summary>
        /// 保存t_roleparams相关数据
        /// </summary>
        /// <param name="client"></param>
        public static void UpdateRoleParamsInfo(GameClient client)
        {
            // 保存复活戒指的CD
            if (client.ClientData.SpecialEquipLastUseTicks > 0)
                Global.SaveRoleParamsInt64ValueToDB(client, RoleParamName.FuHuoJieZhiCD, client.ClientData.SpecialEquipLastUseTicks, true);

            // 血量和蓝量
            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.CurHP, client.ClientData.CurrentLifeV, true);

            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.CurMP, client.ClientData.CurrentMagicV, true);

            lock (client.ClientData.PropPointMutex)
            {
                // 总属性点
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.TotalPropPoint, client.ClientData.TotalPropPoint, true);

                // 一级属性
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropStrength, client.ClientData.PropStrength, true);
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropIntelligence, client.ClientData.PropIntelligence, true);
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropDexterity, client.ClientData.PropDexterity, true);
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropConstitution, client.ClientData.PropConstitution, true);
            }

            // 崇拜值
            int nToday = (int)TimeUtil.NowDateTime().DayOfYear;
            int nDay = Global.GetRoleParamsInt32FromDB(client, RoleParamName.AdmireDayID);

            if (nDay != nToday)
            {
                client.ClientData.AdorationCount = 0;
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.AdmireDayID, nToday, true);
            }
            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.AdmireCount, client.ClientData.AdorationCount, true);

            // PK之王崇拜
            nDay = Global.GetRoleParamsInt32FromDB(client, RoleParamName.PKKingAdmireDayID);

            if (nDay != nToday)
            {
                client.ClientData.PKKingAdorationCount = 0;
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.PKKingAdmireDayID, nToday, true);
            }
            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.PKKingAdmireCount, client.ClientData.PKKingAdorationCount, true);

            // 每日登陆时间
            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.DayOnlineSecond, client.ClientData.DayOnlineSecond, true);

            // 连续登陆
            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.SeriesLoginCount, client.ClientData.SeriesLoginNum, true);

            // 默认技能等级
            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.DefaultSkillLev, client.ClientData.DefaultSkillLev, true);

            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.DefaultSkillUseNum, client.ClientData.DefaultSkillUseNum, true);

            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.MeditateTime, client.ClientData.MeditateTime, true);

            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.NotSafeMeditateTime, client.ClientData.NotSafeMeditateTime, true);

            // 转生计数
            //Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sChangeLifeCount, client.ClientData.ChangeLifeCount, true);

            // 开启背包格子时间存盘
            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.OpenGridTick, client.ClientData.OpenGridTime, true);

            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.OpenPortableGridTick, client.ClientData.OpenPortableGridTime, true);
        }

#endregion 初始化t_roleparams中的相关数据


#region 转职功能 相关接口

        // (现有职业+1)*10 + 转职次数 [8/16/2013 LiaoWei]
        // 职业ID换算 begin
        /// <summary>
        /// 计算原始的职业ID
        /// </summary>
        /// <param name="client"></param>
        public static int CalcOriginalOccupationID(GameClient client)
        {
            return CalcOriginalOccupationID(client.ClientData);
        }

        // (现有职业+1)*10 + 转职次数 [8/16/2013 LiaoWei]
        // 职业ID换算 begin
        /// <summary>
        /// 计算原始的职业ID
        /// </summary>
        /// <param name="clientData"></param>
        public static int CalcOriginalOccupationID(SafeClientData clientData)
        {
            return CalcOriginalOccupationID(clientData.Occupation);
        }

        // (现有职业+1)*10 + 转职次数 [XSea 2015/4/15]
        // 职业ID换算 begin
        /// <summary>
        /// 计算原始的职业ID
        /// </summary>
        /// <param name="nOccupation">职业</param>
        public static int CalcOriginalOccupationID(int nOccupation)
        {
            // 如果还没转过职
            int nCurOcc = nOccupation;
            if (nCurOcc < 10)
                return nCurOcc;

            // 取得转职次数
            int nCount = nCurOcc % 10;

            return (nCurOcc - nCount) / 10 - 1;
        }

        /// <summary>
        /// 计算转职后的职业ID
        /// </summary>
        public static int CalcChangeOccupationID(GameClient client)
        {
            int nCurOcc = client.ClientData.Occupation;
            if (nCurOcc > 10)
            {
                nCurOcc += 1;
                return nCurOcc;
            }

            nCurOcc = (nCurOcc + 1) * 10 + 1;
            return nCurOcc;
        }
        // 职业ID换算 end

        /// <summary>
        /// 读表接口
        /// </summary>
        public static List<GoodsData> LoadChangeOccupationNeedGoodsInfo(string sGoods, string fileName = "")
        {
            return Global.ParseGoodsDataListFromGoodsStr(sGoods, fileName); ;
        }

#endregion 转职功能 相关接口


#region BUFF与一级属性

        /// <summary>
        /// 取得影响一级属性的BUFF并放入RoleBuffer
        /// </summary>
        public static void SetBuffDataForProp(GameClient client)
        {
            client.RoleBuffer.ClearAllTempProps();
            BufferData bufferData = Global.GetBufferDataByID(client, (int)BufferItemTypes.ADDTEMPStrength);
            if (null != bufferData)
            {
                long nowTicks = TimeUtil.NOW();
                if ((nowTicks - bufferData.StartTime) < (bufferData.BufferSecs * 1000))
                {
                    //client.ClientData.PropStrength += (int)bufferData.BufferVal;
                    client.RoleBuffer.AddTempBaseProp((int)UnitPropIndexes.Strength, bufferData.BufferVal, nowTicks);
                }
            }

            bufferData = Global.GetBufferDataByID(client, (int)BufferItemTypes.ADDTEMPIntelligsence);
            if (null != bufferData)
            {
                long nowTicks = TimeUtil.NOW();
                if ((nowTicks - bufferData.StartTime) < (bufferData.BufferSecs * 1000))
                {
                    //client.ClientData.PropIntelligence += (int)bufferData.BufferVal;
                    client.RoleBuffer.AddTempBaseProp((int)UnitPropIndexes.Intelligence, bufferData.BufferVal, nowTicks);
                }
            }

            bufferData = Global.GetBufferDataByID(client, (int)BufferItemTypes.ADDTEMPDexterity);
            if (null != bufferData)
            {
                long nowTicks = TimeUtil.NOW();
                if ((nowTicks - bufferData.StartTime) < (bufferData.BufferSecs * 1000))
                {
                    //client.ClientData.PropDexterity += (int)bufferData.BufferVal;
                    client.RoleBuffer.AddTempBaseProp((int)UnitPropIndexes.Dexterity, bufferData.BufferVal, nowTicks);
                }
            }

            bufferData = Global.GetBufferDataByID(client, (int)BufferItemTypes.ADDTEMPConstitution);
            if (null != bufferData)
            {
                long nowTicks = TimeUtil.NOW();
                if ((nowTicks - bufferData.StartTime) < (bufferData.BufferSecs * 1000))
                {
                    //client.ClientData.PropConstitution += (int)bufferData.BufferVal;
                    client.RoleBuffer.AddTempBaseProp((int)UnitPropIndexes.Constitution, bufferData.BufferVal, nowTicks);
                }
            }

            return;
        }

        /// <summary>
        /// 设置一级属性值
        /// </summary>
        public static void SetUintProp(GameClient client, RoleData roleData)
        {
            roleData.RoleStrength = (int)RoleAlgorithm.GetStrength(client);
            roleData.RoleIntelligence = (int)RoleAlgorithm.GetIntelligence(client);
            roleData.RoleDexterity = (int)RoleAlgorithm.GetDexterity(client);
            roleData.RoleConstitution = (int)RoleAlgorithm.GetConstitution(client);
        }

#endregion BUFF与一级属性

#region 血色堡垒

        /// <summary>
        /// 判断是否是血色堡垒场景ID
        /// </summary>
        public static bool IsBloodCastleSceneID(int nMapID)
        {
            SceneUIClasses sceneType = Global.GetMapSceneType(nMapID);
            if (sceneType == SceneUIClasses.BloodCastle)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 根据玩家转生和等级信息 判断要进入的血色堡垒副本场景ID
        /// </summary>
        public static int GetBloodCastleCopySceneIDForRole(GameClient client)
        {
            int nChangeLifeCount = client.ClientData.ChangeLifeCount;
            int nLev = client.ClientData.Level;

            foreach (var bcInfo in Data.BloodCastleDataInfoList.Values)
            {
                int nMin = bcInfo.MinChangeLifeNum;
                int nMax = bcInfo.MaxChangeLifeNum;
                int nMinLev = bcInfo.MinLevel;
                int nMaxLev = bcInfo.MaxLevel;

                if (nChangeLifeCount > nMin && nChangeLifeCount < nMax)
                {
                    return bcInfo.MapCode;
                }
                else if (nChangeLifeCount == nMin || nChangeLifeCount == nMax)
                {
                    if (nLev >= nMinLev && nLev <= nMaxLev)
                    {
                        return bcInfo.MapCode;
                    }
                }
            }

            return -1;
        }

        /// <summary>
        /// 是否在进入血战堡垒的时间段
        /// </summary>
        /// <returns></returns>
        public static bool CanEnterBloodCastleOnTime(List<string> BeginTime, int nPrepareTime /*out bool bPushMsg*/)
        {
            DateTime now = TimeUtil.NowDateTime();

            string nowTime = TimeUtil.NowDateTime().ToString("HH:mm");
            List<string> timePointsList = BeginTime;

            if (null == timePointsList)
                return false;

            for (int i = 0; i < timePointsList.Count; i++)
            {
                DateTime staticTime = DateTime.Parse(timePointsList[i]);
                DateTime perpareTime = staticTime.AddMinutes((double)(nPrepareTime / 60));

                if (timePointsList[i] == nowTime || (now > staticTime && now <= perpareTime))
                {
                    // 推送设置
                    //if (timePointsList[24] == nowTime)
                    //    bPushMsg = true;

                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// 是否在进入血战堡垒副本的时间段
        /// </summary>
        /// <returns></returns>
        public static bool CanEnterBloodCastleCopySceneOnTime(List<string> BeginTime, int nPrepareTime, out int nTimer, out string strTimer)
        {
            strTimer = null;
            nTimer = 0;

            DateTime now = TimeUtil.NowDateTime();

            string nowTime = TimeUtil.NowDateTime().ToString("HH:mm");
            List<string> timePointsList = BeginTime;

            if (null == timePointsList)
                return false;

            for (int i = 0; i < timePointsList.Count; i++)
            {
                DateTime staticTime = DateTime.Parse(timePointsList[i]);
                DateTime perpareTime = staticTime.AddMinutes((double)(nPrepareTime / 60));

                if (timePointsList[i] == nowTime || (now > staticTime && now <= perpareTime))
                {
                    TimeSpan time = now - DateTime.Parse(timePointsList[i]);

                    strTimer = timePointsList[i];
                    nTimer = time.Minutes * 60 + time.Seconds;

                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// 向DB查询进入次数
        /// </summary>
        /// <returns></returns>
        public static int QueryDayActivityEnterCountToDB(GameClient client, int nRoleID, int nDate, int nType)
        {
            int nRet = -1;

            string[] dbFields = null;

            string strDbCmd = string.Format("{0}:{1}:{2}", nRoleID, nDate, nType);
            TCPProcessCmdResults dbRequestResult = RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool,
                                                                           (int)TCPGameServerCmds.CMD_DB_QUERYBLOODCASTLEENTERCOUNT, strDbCmd, out dbFields, client.ServerId);

            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                    StringUtil.substitute(Global.GetLang("日常活动DB读取失败，请稍后再试 qurey")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.None);
                return nRet;
            }

            if (dbFields.Length != 2 || Convert.ToInt32(dbFields[0]) < 0)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                    StringUtil.substitute(Global.GetLang("日常活动DB参数错误，请稍后再试 qurey")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.None);
                return nRet;
            }

            nRet = Global.SafeConvertToInt32(dbFields[1]);

            return nRet;
        }

        /// <summary>
        /// 向DB更新进入次数
        /// </summary>
        /// <returns></returns>
        public static int UpdateDayActivityEnterCountToDB(GameClient client, int nRoleID, int nDate, int nType, int nCount)
        {
            int nRet = -1;

            string[] sDBFields = null;

            string strDbCmd = string.Format("{0}:{1}:{2}", nRoleID, nDate, nType);
            string strDbCmds = string.Format("{0}:{1}:{2}:{3}", client.ClientData.RoleID, nDate, nType, nCount);
            TCPProcessCmdResults dbRequestResultInfo = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool,
                                                                           (int)TCPGameServerCmds.CMD_DB_UPDATEBLOODCASTLEENTERCOUNT, strDbCmds, out sDBFields, client.ServerId);

            if (dbRequestResultInfo == TCPProcessCmdResults.RESULT_FAILED)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                    StringUtil.substitute(Global.GetLang("血色堡垒DB读取失败，请稍后再试 update")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.None);
                return nRet;
            }

            if (sDBFields.Length != 2 || Convert.ToInt32(sDBFields[0]) < 0)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                    StringUtil.substitute(Global.GetLang("血色堡垒DB参数错误，请稍后再试 update")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.None);
                return nRet;
            }

            nRet = Global.SafeConvertToInt32(sDBFields[1]);

            return nRet;
        }

        public static void UpdateRoleEnterActivityCount(GameClient client, SpecialActivityTypes nType)
        {
            int nDate = TimeUtil.NowDateTime().DayOfYear;                 // 当前时间
            int count = Global.QueryDayActivityEnterCountToDB(client, client.ClientData.RoleID, nDate, (int)nType);

            // 每日活跃
            DailyActiveManager.ProcessCompleteDailyActivityForDailyActive(client, (int)nType);

            Global.UpdateDayActivityEnterCountToDB(client, client.ClientData.RoleID, nDate, (int)nType, count + 1);
        }

        /// <summary>
        /// 向DB查询血色堡垒最高积分
        /// </summary>
        /// <returns></returns>
        public static void QueryDayActivityTotalPointInfoToDB(SpecialActivityTypes nType)
        {

            string[] dbFields = null;

            int nToDB = (int)nType;
            string strDbCmd = string.Format("{0}", nToDB);
            TCPProcessCmdResults dbRequestResult = RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool,
                                                                          (int)TCPGameServerCmds.CMD_DB_QUERYDAYACTIVITYTOTALPOINT, strDbCmd, out dbFields, GameManager.LocalServerId);

            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                //GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                //    StringUtil.substitute(Global.GetLang("血色堡垒DB读取失败，请稍后再试 qurey")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.None);
                return;
            }

            if (dbFields.Length != 2)
            {
                //GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                //    StringUtil.substitute(Global.GetLang("血色堡垒DB参数错误，请稍后再试 qurey")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.None);
                return;
            }

            int nPoint = Global.SafeConvertToInt32(dbFields[0]);
            string sName = dbFields[1];

            if (nType == SpecialActivityTypes.BloodCastle)
                GameManager.BloodCastleCopySceneMgr.SetBloodCastleCopySceneTotalPoint(sName, nPoint);//BloodCastleManager.SetTotalPointInfo(sName, nPoint);
            if (nType == SpecialActivityTypes.DemoSque)
                GameManager.DaimonSquareCopySceneMgr.SetDaimonSquareCopySceneTotalPoint(sName, nPoint);//DaimonSquareSceneManager.SetTotalPointInfo(sName, nPoint);
            else if (nType == SpecialActivityTypes.CampBattle)
                BattleManager.SetTotalPointInfo(sName, nPoint);
            else if (nType == SpecialActivityTypes.TheKingOfPK)
                GameManager.ArenaBattleMgr.SetTotalPointInfo(sName, nPoint);
            else if (nType == SpecialActivityTypes.AngelTemple)
                GameManager.AngelTempleMgr.SetTotalPointInfo(sName, nPoint);


        }

#endregion 血色堡垒

#region 新手场景

        /// <summary>
        /// 进入新手场景
        /// </summary>
        /// <param name="fuBenID"></param>
        public static void EnterFreshPlayerScene(GameClient client, int mapID)
        {
            SystemXmlItem systemFuBenItem = null;
            GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(mapID, out systemFuBenItem);

            int toMapCode = systemFuBenItem.GetIntValue("MapCode");

            string[] dbFields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_GETFUBENSEQID, string.Format("{0}", client.ClientData.RoleID), client.ServerId);
            if (null == dbFields || dbFields.Length < 2)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                                                        StringUtil.substitute(Global.GetLang("进入试炼塔时错误, 从DBServer获取副本序号失败")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                return;
            }

            int fuBenSeqID = Global.SafeConvertToInt32(dbFields[1]);

            GameMap gameMap = null;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(toMapCode, out gameMap)) //确认地图编号是否有效
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                                                            StringUtil.substitute(Global.GetLang("进入试练塔时错误, 地图编号无效")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox);
                return;
            }

            //设置角色的副本顺序ID
            client.ClientData.FuBenSeqID = fuBenSeqID;

            //添加一个角色到副本顺序ID的映射
            FuBenManager.AddFuBenSeqID(client.ClientData.RoleID, client.ClientData.FuBenSeqID, 1, mapID);

            GameManager.ClientMgr.NotifyChangeMap(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, toMapCode, -1, -1, -1);
        }

        /// <summary>
        /// 进入新手场景
        /// </summary>
        /// <param name="fuBenID"></param>
        public static int GetEnterFreshPlayerScene(RoleDataEx roleData, int mapID)
        {
            SystemXmlItem systemFuBenItem = null;
            GameManager.systemFuBenMgr.SystemXmlItemDict.TryGetValue(mapID, out systemFuBenItem);

            int toMapCode = systemFuBenItem.GetIntValue("MapCode");

            string[] dbFields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_GETFUBENSEQID, string.Format("{0}", roleData.RoleID), GameManager.LocalServerId);
            if (null == dbFields || dbFields.Length < 2)
            {
                return -1;
            }

            roleData.MapCode = toMapCode;
            if (!GameManager.TestGamePerformanceMode)
            {
                roleData.PosX = 0;
                roleData.PosY = 0;
            }
            else if (GameManager.TestGamePerformanceMapMode == 1)
            {
                roleData.MapCode = (int)FRESHPLAYERSCENEINFO.FRESHPLAYERMAPCODEID;
                roleData.IsFlashPlayer = 1;
                roleData.PosX = 5378;
                roleData.PosY = 6256;
            }
            else
            {
                roleData.MapCode = GameManager.TestGamePerformanceMapCode;
                roleData.PosX = 0;
                roleData.PosY = 0;
            }

            int fuBenSeqID = Global.SafeConvertToInt32(dbFields[1]);
            return fuBenSeqID;
        }

        /// <summary>
        /// 结束新手阶段
        /// </summary>
        /// <param name="fuBenID"></param>
        public static void FinishFreshPlayerStatus(GameClient client)
        {
            lock (client.ClientData.PropPointMutex)
            {
                // 清空属性点
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropStrength, 0, true);
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropIntelligence, 0, true);
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropDexterity, 0, true);
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropConstitution, 0, true);
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.TotalPropPoint, 0, true);

                client.ClientData.PropStrength = 0;
                client.ClientData.PropIntelligence = 0;
                client.ClientData.PropDexterity = 0;
                client.ClientData.PropConstitution = 0;
                client.ClientData.TotalPropPoint = 0;

            }

            // 通知DB
            string[] dbRoleFields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_FINISHFRESHPLAYERSTATUS, string.Format("{0}", client.ClientData.RoleID), client.ServerId);

            if (null != dbRoleFields && dbRoleFields.Length == 2 && int.Parse(dbRoleFields[1]) == 1)
            {
                client.ClientData.Experience = 0;
                client.ClientData.Level = 1;

                GameManager.ClientMgr.NotifySelfExperience(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, 0);
            }

            //Global.RemoveBufferData(client, (int)BufferItemTypes.MU_FRESHPLAYERBUFF);

            Global.RemoveAllBufferData(client);

            ProcessVipSpecialBuffer(client);

            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.GuMuAwardDayID, 0, true);

            Global.GiveGuMuTimeLimitAward(client);

            // 计算玩家战斗力
            Global.CalculateCombatForce(client);

            GameManager.DBCmdMgr.AddDBCmd((int)TCPGameServerCmds.CMD_DB_EXECUTEUPDATEROLESOMEINFO,
                string.Format("{0}:{1}:{2}:{3}:{4}", client.ClientData.RoleID, client.ClientData.CombatForce, client.ClientData.Level,
                                 client.ClientData.ChangeLifeCount, client.ClientData.YinLiang), null, client.ServerId);

        }

        /// <summary>
        /// 处理新手时掉线
        /// </summary>
        /// <param name="fuBenID"></param>
        public static void ProcessLogOutWhenINFreshPlayerStatus(GameClient client)
        {
            lock (client.ClientData.PropPointMutex)
            {
                // 清空属性点
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropStrength, 0, true);
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropIntelligence, 0, true);
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropDexterity, 0, true);
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.sPropConstitution, 0, true);
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.TotalPropPoint, 0, true);

                client.ClientData.PropStrength = 0;
                client.ClientData.PropIntelligence = 0;
                client.ClientData.PropDexterity = 0;
                client.ClientData.PropConstitution = 0;
                client.ClientData.TotalPropPoint = 0;
            }

            // 清除在场景中得到的数据  经验值 物品 任务
            Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_CLEANDATAWHENFRESHPLAYERLOGOUT, string.Format("{0}", client.ClientData.RoleID), client.ServerId);
        }

        /// <summary>
        /// 激活新手BUFF
        /// </summary>
        /// <param name="client"></param>
        /// <param name="notifyPropsChanged"></param>
        /// <returns></returns>
        public static bool ActiveFreshPlayerBuffer(GameClient client, bool notifyPropsChanged)
        {
            int nIndex = 0;

            int nOldBufferGoodsIndexID = -1;
            BufferData bufferData = Global.GetBufferDataByID(client, (int)BufferItemTypes.MU_FRESHPLAYERBUFF);
            if (null != bufferData && !Global.IsBufferDataOver(bufferData))
            {
                nOldBufferGoodsIndexID = (int)bufferData.BufferVal;
            }

            if (nOldBufferGoodsIndexID == nIndex)
            {
                return false;
            }

            //更新BufferData
            double[] actionParams = new double[1];
            actionParams[0] = (double)nIndex;
            Global.UpdateBufferData(client, BufferItemTypes.MU_FRESHPLAYERBUFF, actionParams, 1, notifyPropsChanged);
            if (notifyPropsChanged)
            {
                //通知客户端属性变化
                GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

                // 总生命值和魔法值变化通知(同一个地图才需要通知)
                GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, false, true);
            }

            return true;
        }
#endregion 新手场景


#region 日常跑环任务
        /// <summary>
        /// 取得日常跑环任务额外奖励
        /// </summary>
        /// <param name="fuBenID"></param>
        public static int GetDailyCircleTaskAddAward(GameClient client)
        {
            int nRet = -1;
            int nChangeLifeLev = client.ClientData.ChangeLifeCount;
            int nLev = client.ClientData.Level;

            for (int i = 0; i < Data.DailyCircleTaskAward.Count; ++i)
            {
                if (nChangeLifeLev < Data.DailyCircleTaskAward[i].MinChangeLifeLev || nChangeLifeLev > Data.DailyCircleTaskAward[i].MaxChangeLifeLev)
                    continue;
                else if (nChangeLifeLev == Data.DailyCircleTaskAward[i].MinChangeLifeLev && nLev < Data.DailyCircleTaskAward[i].MinLev)
                    continue;
                else if (nChangeLifeLev == Data.DailyCircleTaskAward[i].MaxChangeLifeLev && nLev > Data.DailyCircleTaskAward[i].MaxLev)
                    continue;

                return i;
            }

            return nRet;
        }


        /// <summary>
        /// 根据转生级别取得日常跑环任务ID
        /// 说明 -- 数据以|分隔 每组数据有3个字段 最小转生级别 最大转生级别 开始任务ID 结束任务ID 
        /// </summary>
        /// <param name="fuBenID"></param>
        public static int GetDailyCircleTaskIDBaseChangeLifeLev(GameClient client)
        {
            int nRet = -1;
            int nChangeLifeLev = client.ClientData.ChangeLifeCount;
            int nLevel = client.ClientData.Level;

            string sDailyCircleTaskInfo = GameManager.systemParamsList.GetParamValueByName("DailyCircleTaskInfo");

            string[] arr = sDailyCircleTaskInfo.Split('|');
            if (arr.Length < 0)
                return nRet;

            for (int i = 0; i < arr.Length; ++i)
            {
                string[] sData = arr[i].Split(',');
                if (sData.Length != 6)
                    return nRet;
                //最小转生等级条件
                int nMin = -1;
                if (!int.TryParse(sData[0], out nMin))
                    return nRet;

                //最小等级条件
                int minLevel = -1;
                if (!int.TryParse(sData[1], out minLevel))
                    return nRet;

                //最大转生等级条件
                int nMax = -1;
                if (!int.TryParse(sData[2], out nMax))
                    return nRet;

                //最大等级条件
                int maxLevel = -1;
                if (!int.TryParse(sData[3], out maxLevel))
                    return nRet;

                /*if (nChangeLifeLev >= nMin && nLevel >= minLevel
                 && nChangeLifeLev <= nMax && nLevel <= maxLevel)*/
                if (nChangeLifeLev < nMin || nChangeLifeLev > nMax)
                    continue;

                if (nChangeLifeLev == nMin && nLevel < minLevel)
                    continue;

                if (nChangeLifeLev == nMax && nLevel > maxLevel)
                    continue;

                int nBeginNum = -1;
                if (!int.TryParse(sData[4], out nBeginNum))
                    return nRet;

                int nEndNum = -1;
                if (!int.TryParse(sData[5], out nEndNum))
                    return nRet;

                int nRandNum = -1;
                nRandNum = Global.GetRandomNumber(nBeginNum, nEndNum + 1); // 随机一个任务ID

                return nRandNum;
            }

            return nRet;
        }

        /// <summary>
        /// 给玩家新任务 -- 一键完成20环任务专用
        /// </summary>
        /// <param name="fuBenID"></param>
        public static TaskData TakeNewTaskForDailyCircleTask(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, GameClient client, int taskID, int nNPCID, int nID)
        {
            TaskData taskData = new TaskData()
            {
                DbID = -1,
                DoingTaskID = taskID,
            };

            // 检测静态数据
            SystemXmlItem systemTask = null;
            if (!GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("外挂接受新任务, 任务不存在, 一键完成日常跑环任务失败 CMD={0}, Client={1}, RoleID={2}, TaskID={3}",
                                                                    (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), client.ClientData.RoleID, taskID));
                return taskData;
            }

            //  此处不需要再判断
            //// 是否还能接受跑环任务 以及当前是否还能接日跑环任务
            //bool canTaskPaoHuanTask = Global.CanTaskPaoHuanTask(client, taskClass);
            //if (!canTaskPaoHuanTask)
            //{
            //    LogManager.WriteLog(LogTypes.Error, string.Format("外挂接受新任务, 跑环任务超出限制, 一键完成日常跑环任务失败 CMD={0}, Client={1}, RoleID={2}, TaskID={3}",
            //                                                    (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), client.ClientData.RoleID, taskID));
            //    return taskData;
            //}

            // 判断是否是能接的新任务
            if (!Global.CanTakeNewTask(client, taskID, systemTask))
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("外挂接受新任务, 任务不能再接, 一键完成日常跑环任务失败 CMD={0}, Client={1}, RoleID={2}, TaskID={3}",
                                                                    (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), client.ClientData.RoleID, taskID));
                return taskData;
            }

            // 获取当前追踪的任务的个数
            int focus = 1;
            if (Global.GetFocusTaskCount(client) >= Data.TaskMaxFocusCount)
                focus = 0;

            // 任务星级
            /*int nStar = Global.GetRandomNumber(0, 6);
            if (nStar < 0 || nStar > 5)
                nStar = 0;*/
            int nStar = 5;

            // 向DB请求
            string strcmd = string.Format("{0}:{1}:{2}:{3}:{4}", client.ClientData.RoleID, nNPCID, taskID, focus, nStar);
            string[] fieldsData = null;
            if (TCPProcessCmdResults.RESULT_FAILED == Global.RequestToDBServer(tcpClientPool, pool, nID, strcmd, out fieldsData, client.ServerId))
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer通讯失败, CMD={0}", (TCPGameServerCmds)nID));

                return taskData;
            }

            // 取得DB返回数据
            strcmd = "";
            if (Convert.ToInt32(fieldsData[3]) < 0) //添加出错
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("与DBServer报错！！！, CMD={0}", (TCPGameServerCmds)nID));

                return taskData;
            }

            // 添加到角色的列表中
            if (null == client.ClientData.TaskDataList)
                client.ClientData.TaskDataList = new List<TaskData>();

            taskData.DbID = Convert.ToInt32(fieldsData[3]);
            taskData.DoingTaskVal1 = 0;
            taskData.DoingTaskVal2 = 0;
            taskData.DoingTaskFocus = focus;
            taskData.AddDateTime = Convert.ToInt64(fieldsData[2]);
            taskData.DoneCount = 0;
            taskData.StarLevel = nStar;

            OldTaskData oldTaskData = Global.FindOldTaskByTaskID(client, taskID);
            if (null != oldTaskData)
                taskData.DoneCount = oldTaskData.DoCount;

            Global.ProcessTaskData(client, taskData);

            lock (client.ClientData.TaskDataList)
            {
                client.ClientData.TaskDataList.Add(taskData);
            }

            TCPOutPacket tcpOutPacket = DataHelper.ObjectToTCPOutPacket<TaskData>(taskData, pool, nID);
            tcpMgr.MySocketListener.SendData(client.ClientSocket, tcpOutPacket);

            int state = 0;
            int sourceNPC = systemTask.GetIntValue("SourceNPC");
            if (sourceNPC >= 0)
            {
                // NPC的任务状态更新通知
                state = Global.ComputeNPCTaskState(client, client.ClientData.TaskDataList, sourceNPC);
                GameManager.ClientMgr.NotifyUpdateNPCTaskSate(tcpMgr.MySocketListener, pool, client, sourceNPC + SpriteBaseIds.NpcBaseId, state);
            }

            ProcessTask.Process(tcpMgr.MySocketListener, pool, client, nNPCID, (nNPCID - SpriteBaseIds.NpcBaseId), -1, TaskTypes.GetSomething);

            //修改目标NPC的状态
            systemTask = null;
            if (GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
            {
                int destNPC = systemTask.GetIntValue("DestNPC");
                if (-1 != destNPC && destNPC != (nNPCID - SpriteBaseIds.NpcBaseId))
                {
                    state = Global.ComputeNPCTaskState(client, client.ClientData.TaskDataList, destNPC);
                    GameManager.ClientMgr.NotifyUpdateNPCTaskSate(tcpMgr.MySocketListener, pool, client, (destNPC + SpriteBaseIds.NpcBaseId), state);
                }

                string goodsName1 = systemTask.GetStringValue("PropsName1");
                string goodsName2 = systemTask.GetStringValue("PropsName2");
                int goodsID1 = "" != goodsName1 ? Global.GetGoodsByName(goodsName1) : -1;
                int goodsID2 = "" != goodsName2 ? Global.GetGoodsByName(goodsName2) : -1;

                // 处理任务
                if (goodsID1 >= 0)
                    ProcessTask.Process(tcpMgr.MySocketListener, pool, client, -1, -1, goodsID1, TaskTypes.BuySomething);

                if (goodsID2 >= 0)
                    ProcessTask.Process(tcpMgr.MySocketListener, pool, client, -1, -1, goodsID2, TaskTypes.BuySomething);
            }

            return taskData;
        }

#endregion 日常跑环任务

#region 讨伐任务
        /// <summary>
        /// 根据转生级别取得讨伐任务ID
        /// 说明 -- 数据以|分隔 每组数据有3个字段 最小转生级别 最大转生级别 开始任务ID 结束任务ID 
        /// </summary>
        /// <param name="fuBenID"></param>
        public static int GetTaofaTaskIDBaseChangeLifeLev(GameClient client)
        {
            int nRet = -1;
            int nChangeLifeLev = client.ClientData.ChangeLifeCount;
            int nLevel = client.ClientData.Level;

            string sDailyCircleTaskInfo = GameManager.systemParamsList.GetParamValueByName("PriceTaskInfo");

            string[] arr = sDailyCircleTaskInfo.Split('|');
            if (arr.Length < 0)
                return nRet;

            for (int i = 0; i < arr.Length; ++i)
            {
                string[] sData = arr[i].Split(',');
                if (sData.Length != 6)
                    return nRet;
                //最小转生等级条件
                int nMin = -1;
                if (!int.TryParse(sData[0], out nMin))
                    return nRet;

                //最小等级条件
                int minLevel = -1;
                if (!int.TryParse(sData[1], out minLevel))
                    return nRet;

                //最大转生等级条件
                int nMax = -1;
                if (!int.TryParse(sData[2], out nMax))
                    return nRet;

                //最大等级条件
                int maxLevel = -1;
                if (!int.TryParse(sData[3], out maxLevel))
                    return nRet;

                /*if (nChangeLifeLev >= nMin && nLevel >= minLevel
                 && nChangeLifeLev <= nMax && nLevel <= maxLevel)*/
                if (nChangeLifeLev < nMin || nChangeLifeLev > nMax)
                    continue;

                if (nChangeLifeLev == nMin && nLevel < minLevel)
                    continue;

                if (nChangeLifeLev == nMax && nLevel > maxLevel)
                    continue;

                int nBeginNum = -1;
                if (!int.TryParse(sData[4], out nBeginNum))
                    return nRet;

                int nEndNum = -1;
                if (!int.TryParse(sData[5], out nEndNum))
                    return nRet;

                int nRandNum = -1;
                nRandNum = Global.GetRandomNumber(nBeginNum, nEndNum + 1); // 随机一个任务ID

                return nRandNum;
            }

            return nRet;
        }

#endregion 讨伐任务
#region 崇拜

        /// <summary>
        /// 取得崇拜计数
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static int GetAdmireCount(GameClient client)
        {
            int nCount = 0;
            int nToday = (int)TimeUtil.NowDateTime().DayOfYear;
            int nDay = Global.GetRoleParamsInt32FromDB(client, RoleParamName.AdmireDayID);

            if (nDay == nToday)
                nCount = client.ClientData.AdorationCount;

            return nCount;
        }

        /// <summary>
        /// 处理崇拜计数递增
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void ProcessIncreaseAdmireCount(GameClient client)
        {
            int nToday = (int)TimeUtil.NowDateTime().DayOfYear;
            int nDay = Global.GetRoleParamsInt32FromDB(client, RoleParamName.AdmireDayID);
            int nCount = Global.GetRoleParamsInt32FromDB(client, RoleParamName.AdmireCount);

            if (nDay == nToday)
                client.ClientData.AdorationCount = ++nCount;
            else
            {
                client.ClientData.AdorationCount = 1;
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.AdmireDayID, nToday, true);
            }

            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.AdmireCount, client.ClientData.AdorationCount, true);

            return;
        }

#endregion 崇拜

#region MU 强化新增

        /// <summary>
        /// 取得强化需要的物品ID
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static string GetForgeNeedStoneGoodsList(GoodsData goodsData)
        {
            string sNeedGoodsList = GameManager.systemParamsList.GetParamValueByName("ForgeNeedGoodsIDs");

            string[] arrNeedID = sNeedGoodsList.Split('|');
            if (arrNeedID.Length < 0 /*|| arrNeedID.Length > 16*/)
                return null;

            int nForgeLev = goodsData.Forge_level + 1;

            if (nForgeLev > Global.MaxForgeLevel)   // 再判断一次吧
                return null;

            return arrNeedID[nForgeLev];
        }

        /// <summary>
        /// 取得强化需要的物品数量
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static string GetForgeNeedStoneGoodsNum(GoodsData goodsData)
        {
            string sNeedGoodsList = GameManager.systemParamsList.GetParamValueByName("ForgeNeedGoodsNum");

            string[] arrNeedNum = sNeedGoodsList.Split('|');
            if (arrNeedNum.Length < 0 /*|| arrNeedNum.Length > 16*/)
                return null;

            int nForgeLev = goodsData.Forge_level + 1;

            if (nForgeLev > Global.MaxForgeLevel)   // 再判断一次吧
                return null;

            return arrNeedNum[nForgeLev];
        }

#endregion MU 强化新增


#region MU 物品追加属性

        /// <summary>
        /// 追加的最大级别
        /// </summary>
        public const int MaxZhuiJiaLevel = 10;

        /// <summary>
        /// 检测是否是保护石的ID
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static int GetProtectStoneGoodsIndexForEquipAppendProp(int goodsID)
        {
            int goodsid = (int)GameManager.systemParamsList.GetParamValueIntByName("ZhuiJiaForgeLuckyGoodsIDs");

            if (goodsid == goodsID)
                return 1;

            return -1;
        }

        /// <summary>
        /// 取得追加需要的物品ID
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static int GetEquipAppendPropNeedStoneGoodsList(GoodsData goodsData)
        {
            int[] nNeedGoodsList = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhuiJiaForgeGoodsIDs");

            if (nNeedGoodsList.Length < 0 || nNeedGoodsList.Length > 81)
                return -1;

            int AppendPropLev = goodsData.AppendPropLev + 1;

            if (AppendPropLev > Global.MaxAppendPropLevel)   // 再判断一次吧
                return -1;

            return nNeedGoodsList[AppendPropLev];
        }

        /// <summary>
        /// 取得追加需要的物品数量
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static int GetEquipAppendPropNeedStoneGoodsNum(GoodsData goodsData)
        {
            int[] nNeedGoodsNum = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhuiJiaForgeGoodsNum");

            if (nNeedGoodsNum.Length < 0 || nNeedGoodsNum.Length > 81)
                return -1;

            int AppendPropLev = goodsData.AppendPropLev + 1;

            if (AppendPropLev > Global.MaxAppendPropLevel)   // 再判断一次吧
                return -1;

            return nNeedGoodsNum[AppendPropLev];
        }

        /// <summary>
        /// 取得追加需要的银两
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static int GetEquipAppendPropNextLevelYinLiang(GoodsData goodsData)
        {
            int[] sNeedGoodsList = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhuiJiaXiaoHaoJinBi");

            int nEquipAppendProp = goodsData.AppendPropLev + 1;

            if (nEquipAppendProp > MaxAppendPropLevel)   // 再判断一次吧
                return 0;

            return sNeedGoodsList[nEquipAppendProp];
        }

        /// <summary>
        /// 开始追加
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static bool StartEquipAppendProp(GameClient client, GoodsData goodsData)
        {
            int percent = GetEquipAppendPropPercent(client, goodsData) * 100;
            int rndNum = Global.GetRandomNumber(0, 10001);
            if (rndNum <= percent)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 获取装备追加成功的概率 返回百分比整数
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static int GetEquipAppendPropPercent(GameClient client, GoodsData goodsData)
        {
            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
                return 0;

            if (null == systemGoods)
                return 0;

            if (goodsData.AppendPropLev >= MaxAppendPropLevel)
                return 0;

            if (null == AppendPropLevelRocksPercent)
                AppendPropLevelRocksPercent = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhuiJiaGoodsRate");

            //强化基础成功率
            int percent = Math.Abs(AppendPropLevelRocksPercent[goodsData.AppendPropLev + 1]);

            //判断是否VIP, 是则加成5%
            //if (Global.CanUseVipPriority(client))
            //    percent += 5;

            // VIP处理 Begin[2/20/2014 LiaoWei]
            int nVipLev = client.ClientData.VipLevel;

            int[] nArry = null;
            nArry = GameManager.systemParamsList.GetParamValueIntArrayByName("VIPZhuiJiaAdd");

            if (nVipLev > 0 && nArry != null && nArry[nVipLev] > 0)
            {
                percent += nArry[nVipLev];
            }
            // VIP处理 End[2/20/2014 LiaoWei]

            return Global.GMin(100, percent);
        }


        /// <summary>
        /// 追加成功(5级以上提示)
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void BroadcastEquipAppendPropOk(GameClient client, GoodsData goodsData)
        {
            if (goodsData.AppendPropLev == 20 || goodsData.AppendPropLev == 30 || goodsData.AppendPropLev == 40 || goodsData.AppendPropLev == 50
                || goodsData.AppendPropLev == 60 || goodsData.AppendPropLev == 70 || goodsData.AppendPropLev == 80)
            {
                string broadCastMsg = StringUtil.substitute(Global.GetLang("恭喜【{0}】成功的将『{1}』追加至『{2}』级，实力得到了大的提升"),
                Global.FormatRoleName(client, client.ClientData.RoleName), Global.GetGoodsNameByID(goodsData.GoodsID), goodsData.AppendPropLev);

                //播放用户行为消息
                Global.BroadcastRoleActionMsg(client, goodsData.AppendPropLev >= 6 ? RoleActionsMsgTypes.Bulletin : RoleActionsMsgTypes.HintMsg, broadCastMsg,
                                                true, GameInfoTypeIndexes.Hot, ShowGameInfoTypes.OnlySysHint);
            }
        }

#endregion MU 物品追加属性

#region MU 物品强化传承
        /// <summary>
        /// 取得传承需要的银两
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static int GetEquipInheritNeedYinLiang(GoodsData goodsData)
        {
            int[] nNeedMoney = GameManager.systemParamsList.GetParamValueIntArrayByName("ChuanChengXiaoHaoJinBi");

            int nForge = goodsData.Forge_level;

            if (nForge > MaxForgeLevel || nNeedMoney.Length > MaxForgeLevel + 1)   // 再判断一次吧
                return 0;

            return nNeedMoney[nForge];
        }

        /// <summary>
        /// 取得传承需要的银两
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static int GetEquipInheritNeedYuanBao(GoodsData goodsData)
        {
            int[] nNeedMoney = GameManager.systemParamsList.GetParamValueIntArrayByName("ChuanChengXiaoHaoZhuanShi");

            int nForge = goodsData.Forge_level;

            if (nForge > MaxForgeLevel || nNeedMoney.Length > MaxForgeLevel + 1)   // 再判断一次吧
                return 0;

            return nNeedMoney[nForge];
        }
#endregion MU 物品强化传承

#region MU 物品追加传承
        /// <summary>
        /// 取得追加传承需要的银两
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static int GetEquipAppendInheritNeedMoney(GoodsData goodsData, int nType)
        {
            int[] nNeedMoney = null;

            if (nType == 1)
                nNeedMoney = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhuiJiaChuanChengXiaoHaoJinBi");
            else
                nNeedMoney = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhuiJiaChuanChengXiaoHaoZhuanShi");

            int nAppendPropLev = goodsData.AppendPropLev;

            return nNeedMoney[nAppendPropLev];
        }

#endregion MU 物品追加传承


#region MU 邮件给物品
        /// <summary> Description  [12/22/2013 LiaoWei]
        // MU项目里 有一些地方是系统把奖励的物品放进玩家背包中 如果背包已满
        // 则以系统邮件的方式把奖励放在邮件的附件中给玩家发过去
        /// </summary>

        /// 发送邮件的接口太诡异了，
        /// 应该SendMail(int from, int to, int mailType, string content, string subject, List<GoodsData> attachGoods)
        /// 先这样吧，希望以后会重构
        public static bool SendMail(GameClient client, string sContent, string sSubject)
        {
            return UseMailGivePlayerAward(client, null, sContent, sSubject);
        }

        /// <summary>
        /// 发邮件给玩家
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static bool UseMailGivePlayerAward(GameClient client, GoodsData goodsData, string sContent, string sSubject, double goodsRate = 1.0)
        {
            string mailGoodsString = "";
            if (goodsData != null)
            {
                int useCount = (int)(goodsData.GCount * goodsRate);
                mailGoodsString += string.Format("{0}_{1}_{2}_{3}_{4}_{5}_{6}_{7}_{8}_{9}_{10}_{11}_{12}_{13}_{14}_{15}", goodsData.GoodsID, goodsData.Forge_level, goodsData.Quality,
                                                    goodsData.Props, useCount, 0, 0, goodsData.Jewellist, goodsData.AddPropIndex, goodsData.Binding, goodsData.BornIndex, goodsData.Lucky,
                                                            goodsData.Strong, goodsData.ExcellenceInfo, goodsData.AppendPropLev, goodsData.ChangeLifeLevForEquip); // 卓越信息 [12/14/2013 LiaoWei]
                if (mailGoodsString.Length > 0)
                    mailGoodsString += "|";
            }

            string strDbCmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}", -1, "系统", client.ClientData.RoleID, client.ClientData.RoleName, sContent, sSubject, 0, 0, 0, mailGoodsString);

            string[] fieldsData = null;

            fieldsData = ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_SENDUSERMAIL, strDbCmd, client.ServerId);
            client._IconStateMgr.CheckEmailCount(client);

            if (fieldsData == null || fieldsData.Length != 3 || Convert.ToInt32(fieldsData[1]) <= 0)
                return false;
            else
                return true;
        }

        public static int UseMailGivePlayerAward2(GameClient client, List<AwardsItemData> awardItemDataList, string sContent, string sSubject, int Yinliang = 0, int Tongqian = 0, int Yuanbao = 0)
        {
            int mailCount = 0;
            int index = 0;
            List<GoodsData> list = new List<GoodsData>();
            if (null != awardItemDataList)
            {
                foreach (var item in awardItemDataList)
                {
                    GoodsData goodsData = new GoodsData()
                    {
                        Id = -1,
                        GoodsID = item.GoodsID,
                        Using = 0,
                        Forge_level = item.Level,
                        Starttime = "1900-01-01 12:00:00",
                        Endtime = Global.ConstGoodsEndTime,
                        Site = 0,
                        Quality = item.Quality,
                        //Props = item.Props,
                        GCount = item.GoodsNum,
                        Binding = item.Binding,
                        //Jewellist = item.Jewellist,
                        BagIndex = 0,
                        //AddPropIndex = item.AddPropIndex,
                        BornIndex = item.BornIndex,
                        Lucky = item.IsHaveLuckyProp,
                        //Strong = 0,
                        ExcellenceInfo = item.ExcellencePorpValue,
                        AppendPropLev = item.AppendLev,
                        //ChangeLifeLevForEquip = 0,
                    };

                    list.Add(goodsData);
                }
            }

            return UseMailGivePlayerAward2(client, list, sContent, sSubject, Yinliang, Tongqian, Yuanbao);
        }

        /// <summary>
        /// 发邮件给玩家
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static int UseMailGivePlayerAward2(GameClient client, List<GoodsData> goodsData, string sContent, string sSubject, int Yinliang = 0, int Tongqian = 0, int Yuanbao = 0)
        {
            string mailGoodsString = "";

            if (null != goodsData)
            {
                foreach (var goods in goodsData)
                {
                    int useCount = goods.GCount;

                    mailGoodsString += string.Format("{0}_{1}_{2}_{3}_{4}_{5}_{6}_{7}_{8}_{9}_{10}_{11}_{12}_{13}_{14}_{15}", goods.GoodsID, goods.Forge_level, goods.Quality,
                                                        goods.Props, useCount, 0, 0, goods.Jewellist, goods.AddPropIndex, goods.Binding, goods.BornIndex, goods.Lucky,
                                                                goods.Strong, goods.ExcellenceInfo, goods.AppendPropLev, goods.ChangeLifeLevForEquip); // 卓越信息 [12/14/2013 LiaoWei]

                    if (mailGoodsString.Length > 0)
                        mailGoodsString += "|";
                }
            }

            string strDbCmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}", -1, Global.GetLang("系统"), client.ClientData.RoleID, client.ClientData.RoleName, sContent, sSubject, Yinliang, Tongqian, Yuanbao, mailGoodsString);

            string[] fieldsData = null;

            fieldsData = ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_SENDUSERMAIL, strDbCmd, client.ServerId);

            client._IconStateMgr.CheckEmailCount(client);

            if (null == fieldsData || fieldsData.Length != 3)
            {
                return 0;
            }

            // 返回mailid
            return Convert.ToInt32(fieldsData[1]);
        }

        /// <summary>
        /// 发邮件给玩家 能发钻石啦
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static bool UseMailGivePlayerAward3(int nRoleID, List<GoodsData> goodsData, string sContent, string sSubject, int yuanbao, int checkReceiverExist = 0)
        {
            string mailGoodsString = "";

            if (null != goodsData)
            {
                foreach (var goods in goodsData)
                {
                    int useCount = goods.GCount;

                    mailGoodsString += string.Format("{0}_{1}_{2}_{3}_{4}_{5}_{6}_{7}_{8}_{9}_{10}_{11}_{12}_{13}_{14}_{15}", goods.GoodsID, goods.Forge_level, goods.Quality,
                                                        goods.Props, useCount, 0, 0, goods.Jewellist, goods.AddPropIndex, goods.Binding, goods.BornIndex, goods.Lucky,
                                                                goods.Strong, goods.ExcellenceInfo, goods.AppendPropLev, goods.ChangeLifeLevForEquip); // 卓越信息 [12/14/2013 LiaoWei]

                    if (mailGoodsString.Length > 0)
                        mailGoodsString += "|";
                }
            }

            string strDbCmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}", -1, "系统", nRoleID, ""/*没有reveiverrname的话 DBServer会查找*/, sContent, sSubject, 0, 0, yuanbao, mailGoodsString, checkReceiverExist);

            string[] fieldsData = null;

            fieldsData = ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_SENDUSERMAIL, strDbCmd, GameManager.LocalServerId);

            GameClient client = GameManager.ClientMgr.FindClient(nRoleID);
            if (null != client)
                client._IconStateMgr.CheckEmailCount(client);

            if (fieldsData == null || fieldsData.Length != 3 || Convert.ToInt32(fieldsData[1]) <= 0)
                return false;
            else
                return true;

        }

#endregion MU 邮件给物品

#region  阵营战场

        /// <summary>
        /// 阵营战场积分处理
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static void ProcessCampBattlePoint(GameClient client)
        {
            if (client.ClientData.BattleKilledNum > client.ClientData.CampBattleTotalPoint)
            {
                client.ClientData.CampBattleTotalPoint = client.ClientData.BattleKilledNum;
            }
        }

#endregion 阵营战场

#region 日常活动相关

        /// <summary>
        /// 初始化日常活动最高分信息
        /// </summary>
        /// <param name="goodsID"></param>
        /// <returns></returns>
        public static void InitRoleDayActivityPoint(GameClient client)
        {
            // 血色堡垒 恶魔广场 阵营战场
            QueryRoleDayActivityPoint(client, 0);

            return;
        }

        /// <summary>
        /// 向DB查询活动积分情况
        /// </summary>
        /// <returns></returns>
        public static void QueryRoleDayActivityPoint(GameClient client, int nTpye)
        {
            // 注意 如果nTpye = 0 就全部查询 节省消息

            //int nValue = 0;
            string[] dbFields = null;

            string strDbCmd = string.Format("{0}:{1}", client.ClientData.RoleID, nTpye);
            TCPProcessCmdResults dbRequestResult = RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool,
                                                                          (int)TCPGameServerCmds.CMD_DB_QUERYDAYACTIVITYSELFPOINT, strDbCmd, out dbFields, client.ServerId);

            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                //GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                //    StringUtil.substitute(Global.GetLang("血色堡垒DB读取失败，请稍后再试 qurey")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.None);
                return;
            }

            if (dbFields.Length != 5)
            {
                //GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                //    StringUtil.substitute(Global.GetLang("血色堡垒DB参数错误，请稍后再试 qurey")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.None);
                return;
            }

            if (nTpye == 0)
            {
                client.ClientData.BloodCastleAwardTotalPoint = Global.SafeConvertToInt32(dbFields[0]);
                client.ClientData.DaimonSquarePointTotalPoint = Global.SafeConvertToInt32(dbFields[1]);
                client.ClientData.CampBattleTotalPoint = Global.SafeConvertToInt32(dbFields[2]);
                client.ClientData.KingOfPkTopPoint = Global.SafeConvertToInt32(dbFields[3]);
                client.ClientData.AngelTempleTopPoint = Global.SafeConvertToInt64(dbFields[4]);
            }
            else
            {
                if (nTpye == 1)
                {
                    client.ClientData.BloodCastleAwardTotalPoint = Global.SafeConvertToInt32(dbFields[0]);
                }
                else if (nTpye == 2)
                {
                    client.ClientData.DaimonSquarePointTotalPoint = Global.SafeConvertToInt32(dbFields[1]);
                }
                else if (nTpye == 3)
                {
                    client.ClientData.CampBattleTotalPoint = Global.SafeConvertToInt32(dbFields[2]);
                }
                else if (nTpye == 4)
                {
                    client.ClientData.KingOfPkTopPoint = Global.SafeConvertToInt32(dbFields[3]);
                }
                else if (nTpye == 5)
                {
                    client.ClientData.AngelTempleTopPoint = Global.SafeConvertToInt32(dbFields[4]);
                }
            }
        }

        /// <summary>
        /// 存盘
        /// </summary>
        /// <returns></returns>
        public static void UpdateRoleDayActivityInfo(GameClient client, int nType)
        {
            string[] dbFields = null;

            int nDate = TimeUtil.NowDateTime().DayOfYear;               // 当前时间

            string strDbCmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", client.ClientData.RoleID, nType, nDate, client.ClientData.BloodCastleAwardTotalPoint,
                                            client.ClientData.DaimonSquarePointTotalPoint, client.ClientData.CampBattleTotalPoint, client.ClientData.KingOfPkTopPoint,
                                                client.ClientData.AngelTempleTopPoint);

            TCPProcessCmdResults dbRequestResult = RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool,
                                                                          (int)TCPGameServerCmds.CMD_DB_UPDATEDAYACTIVITYSELFPOINT, strDbCmd, out dbFields, client.ServerId);

            return;
        }

#endregion 日常活动相关

#region 恶魔广场

        /// <summary>
        /// 判断是否是血色堡垒场景ID
        /// </summary>
        public static bool IsDaimonSquareSceneID(int nMapID)
        {
            SceneUIClasses sceneType = Global.GetMapSceneType(nMapID);
            if (sceneType == SceneUIClasses.Demon)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 根据玩家转生和等级信息 判断要进入的恶魔广场场景ID
        /// </summary>
        public static int GetDaimonSquareCopySceneIDForRole(GameClient client)
        {
            int nLev = client.ClientData.Level;
            int nChangeLifeCount = client.ClientData.ChangeLifeCount;

            foreach (var sceneInfo in Data.DaimonSquareDataInfoList.Values)
            {
                int nMin = sceneInfo.MinChangeLifeNum;
                int nMax = sceneInfo.MaxChangeLifeNum;
                int nMinLev = sceneInfo.MinLevel;
                int nMaxLev = sceneInfo.MaxLevel;
                if (nChangeLifeCount > nMin && nChangeLifeCount < nMax)
                {
                    return sceneInfo.MapCode;
                }
                else if (nChangeLifeCount == nMin || nChangeLifeCount == nMax)
                {
                    if (nLev >= nMinLev && nLev <= nMaxLev)
                    {
                        return sceneInfo.MapCode;
                    }
                }
            }

            return -1;
        }

        /// <summary>
        /// 是否在进入恶魔广场的时间段
        /// </summary>
        /// <returns></returns>
        public static bool CanEnterDaimonSquareOnTime(List<string> BeginTime, int nPrepareTime/*, out bool bPushMsg*/)
        {
            DateTime now = TimeUtil.NowDateTime();

            string nowTime = TimeUtil.NowDateTime().ToString("HH:mm");
            List<string> timePointsList = BeginTime;

            if (null == timePointsList)
                return false;

            for (int i = 0; i < timePointsList.Count; i++)
            {
                DateTime staticTime = DateTime.Parse(timePointsList[i]);
                DateTime perpareTime = staticTime.AddMinutes((double)(nPrepareTime / 60));

                if (timePointsList[i] == nowTime || (now > staticTime && now <= perpareTime))
                {
                    // 推送设置
                    //if (timePointsList[24] == nowTime)
                    //    bPushMsg = true;

                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// 是否在进入恶魔广场的时间段
        /// </summary>
        /// <returns></returns>
        public static bool CanEnterDaimonSquareCopySceneOnTime(List<string> BeginTime, int nPrepareTime, out int nSecond, out string strTimer)
        {
            nSecond = 0;
            strTimer = null;

            DateTime now = TimeUtil.NowDateTime();

            string nowTime = TimeUtil.NowDateTime().ToString("HH:mm");
            List<string> timePointsList = BeginTime;

            if (null == timePointsList)
                return false;

            for (int i = 0; i < timePointsList.Count; i++)
            {
                DateTime staticTime = DateTime.Parse(timePointsList[i]);
                DateTime perpareTime = staticTime.AddMinutes((double)(nPrepareTime / 60));

                if (timePointsList[i] == nowTime || (now > staticTime && now <= perpareTime))
                {
                    TimeSpan time = now - DateTime.Parse(timePointsList[i]);
                    nSecond = time.Minutes * 60 + time.Seconds;

                    strTimer = timePointsList[i];

                    return true;
                }
            }

            return false;
        }

#endregion 恶魔广场

#region 死亡处理

        /// <summary>
        /// 角色攻击角色导致角色死亡
        /// </summary>
        public static void ProcessRoleDieForRoleAttack(SocketListener sl, TCPOutPacketPool pool, GameClient Attacker, GameClient DeadRole)
        {
            //触发人物死亡事件
            GlobalEventSource.getInstance().fireEvent(new PlayerDeadEventObject(DeadRole, Attacker));

            GameManager.ClientMgr.StopClientStoryboard(DeadRole);

            GameManager.ClientMgr.AddToEnemyList(Global._TCPManager, Global._TCPManager.tcpClientPool, pool, Attacker, DeadRole.ClientData.RoleID);

            //处理掉落
            GameManager.GoodsPackMgr.ProcessRole(sl, pool, Attacker, DeadRole, Attacker.ClientData.RoleName);

            /// 通知PK值更新(限制当前地图)
            GameManager.ClientMgr.ChangeRolePKValueAndPKPoint(sl, pool, Attacker, DeadRole);

            /// 增加大乱斗中杀死的敌人的数量
            Global.AddBattleKilledNum(Attacker, DeadRole/*, DeadRole.ClientData.Level, DeadRole.ClientData.Level*/);

            /// 增加竞技场中杀死的敌人的数量
            GameManager.ArenaBattleMgr.AddArenaBattleKilledNum(Attacker, DeadRole);

            //谁Kill了谁
            Global.BroadcastXKilledY(Attacker, DeadRole);

            // 只要死亡了 如果有天使神殿的鼓舞BUFF 就移除 [7/14/2014 LiaoWei]
            {
                Global.RemoveBufferData(DeadRole, (int)BufferItemTypes.MU_ANGELTEMPLEBUFF2);
                Global.RemoveBufferData(DeadRole, (int)BufferItemTypes.MU_ANGELTEMPLEBUFF1);
            }

            //写入角色死亡的行为日志
            Global.AddRoleDeathEvent(DeadRole, string.Format("被角色{0}({1})杀死", Attacker.ClientData.RoleID, Attacker.ClientData.RoleName));

            //记录角色死亡时间
            DeadRole.ClientData.LastRoleDeadTicks = TimeUtil.NOW();
        }

        /// <summary>
        /// 角色攻击怪导致怪死亡
        /// </summary>
        public static void ProcessMonsterDieForRoleAttack(SocketListener sl, TCPOutPacketPool pool, GameClient Attacker, Monster DeadMonster, int nInjure)
        {
            int enemyExperience = 0;

#if ___CC___FUCK___YOU___BB___
            enemyExperience = DeadMonster.XMonsterInfo.Exp;

            // 卓越属性 影响掉落金钱
            int nMoney = 0;
            nMoney = 0;
#else
                enemyExperience = DeadMonster.MonsterInfo.VExperience;

            // 卓越属性 影响掉落金钱
            int nMoney = 0;
            nMoney = DeadMonster.MonsterInfo.VMoney;
#endif


            //if (Attacker.ClientData.ExcellenceProp[(int)ExcellencePorp.EXCELLENCEPORP13] > 0.0)
            //    nMoney = (int)(nMoney + (1 * Attacker.ClientData.ExcellenceProp[(int)ExcellencePorp.EXCELLENCEPORP13]));

            // 清空锁定攻击自己的敌人
            DeadMonster.LockObject = -1;
            DeadMonster.LockFocusTime = 0;
#if ___CC___FUCK___YOU___BB___
            /// 处理怪物死亡
            GameManager.MonsterMgr.ProcessMonsterDead(sl, pool, Attacker, DeadMonster, enemyExperience, 0, nInjure);
#else
             GameManager.MonsterMgr.ProcessMonsterDead(sl, pool, Attacker, DeadMonster, enemyExperience, DeadMonster.MonsterInfo.VMoney, nInjure);
#endif
            GameManager.MonsterMgr.AddDelayDeadMonster(DeadMonster);

            if (GameManager.FlaDisablegFilterMonsterDeadEvent || GameManager.MonsterMgr.AddKilledMonsterFirst(DeadMonster.UniqueID))
            {
                GlobalEventSource.getInstance().fireEvent(new MonsterDeadEventObject(DeadMonster, Attacker));
            }
        }

        /// <summary>
        /// 怪攻击角色导致角色死亡
        /// </summary>
        public static void ProcessRoleDieForMonsterAttack(SocketListener sl, TCPOutPacketPool pool, Monster Attacker, GameClient DeadRole)
        {
            //触发人物死亡事件
            GlobalEventSource.getInstance().fireEvent(new PlayerDeadEventObject(DeadRole, Attacker));

            GameManager.ClientMgr.StopClientStoryboard(DeadRole);

          

            //锁定攻击自己的敌人
            Attacker.LockObject = -1;
            Attacker.LockFocusTime = 0;
#if ___CC___FUCK___YOU___BB___
            //写入角色死亡的行为日志
            Global.AddRoleDeathEvent(DeadRole, string.Format("被怪物{0}({1})杀死", Attacker.XMonsterInfo.MonsterId, Attacker.XMonsterInfo.Name));
            //处理掉落
            GameManager.GoodsPackMgr.ProcessRole(sl, pool, DeadRole, DeadRole, Attacker.XMonsterInfo.Name);
#else
              Global.AddRoleDeathEvent(DeadRole, string.Format("被怪物{0}({1})杀死", Attacker.MonsterInfo.ExtensionID, Attacker.MonsterInfo.VSName));
             //处理掉落
            GameManager.GoodsPackMgr.ProcessRole(sl, pool, DeadRole, DeadRole, Attacker.MonsterInfo.VSName);
#endif


            //记录角色死亡时间
            DeadRole.ClientData.LastRoleDeadTicks = TimeUtil.NOW();

            // 副本改造 在副本中死亡 [11/15/2013 LiaoWei]
            if (DeadRole.ClientData.CopyMapID > 0 && DeadRole.ClientData.FuBenSeqID > 0)
            {
                // 副本死亡计数
                FuBenInfoItem fuBenInfoItem = FuBenManager.FindFuBenInfoBySeqID(DeadRole.ClientData.FuBenSeqID);
                if (null != fuBenInfoItem)
                    ++fuBenInfoItem.nDieCount;

            }

            // 在天使神殿中死亡 移除BUFF [6/6/2014 LiaoWei]
            //if (DeadRole.ClientData.MapCode == GameManager.AngelTempleMgr.m_AngelTempleData.MapCode)

            // 只要死亡了 如果有天使神殿的鼓舞BUFF 就移除 [7/14/2014 LiaoWei]
            {
                Global.RemoveBufferData(DeadRole, (int)BufferItemTypes.MU_ANGELTEMPLEBUFF2);
                Global.RemoveBufferData(DeadRole, (int)BufferItemTypes.MU_ANGELTEMPLEBUFF1);
            }
        }

        /// <summary>
        /// 怪物攻击怪导致怪死亡
        /// </summary>
        public static void ProcessMonsterDieForMonsterAttack(SocketListener sl, TCPOutPacketPool pool, Monster Attacker, Monster DeadMonster)
        {
            if (GameManager.FlaDisablegFilterMonsterDeadEvent || GameManager.MonsterMgr.AddKilledMonsterFirst(DeadMonster.UniqueID))
            {
                GlobalEventSource.getInstance().fireEvent(new MonsterToMonsterDeadEventObject(DeadMonster, Attacker));
            }
        }


#endregion 死亡处理

#region 反弹伤害相关

        /// <summary>
        /// 处理反弹伤害  --  玩家攻击玩家
        /// </summary>
        public static void ProcessDamageThorn(SocketListener sl, TCPOutPacketPool pool, GameClient Attacker, GameClient Enemy, int nInjure)
        {
            // 死亡判定
            if (Attacker.ClientData.CurrentLifeV <= 0)
                return;

            // 只反弹一次伤害
            double nDamageThorn = RoleAlgorithm.GetDamageThornPercent(Enemy);
            nInjure = (int)(nInjure * nDamageThorn);

            nDamageThorn = 0.0;
            nDamageThorn = RoleAlgorithm.GetDamageThorn(Enemy);
            nInjure += (int)nDamageThorn;

            if (nInjure < 1)
                return;

            Attacker.ClientData.CurrentLifeV -= (int)Global.GMax(0, nInjure);
            Attacker.ClientData.CurrentLifeV = Global.GMax(Attacker.ClientData.CurrentLifeV, 0);

            GameManager.ClientMgr.NotifySpriteInjured(sl, pool, Enemy, Enemy.ClientData.MapCode, Enemy.ClientData.RoleID, Attacker.ClientData.RoleID, (int)DamageType.DAMAGETYPE_THORNDAMAGE, nInjure, Attacker.ClientData.CurrentLifeV, Enemy.ClientData.Level, new Point(-1, -1));

            ClientManager.NotifySelfEnemyInjured(sl, pool, Enemy, Enemy.ClientData.RoleID, Attacker.ClientData.RoleID, (int)DamageType.DAMAGETYPE_THORNDAMAGE, nInjure, Attacker.ClientData.CurrentLifeV, 0);

            // 处理死亡     注意区分--杀人者 被杀者
            if (Attacker.ClientData.CurrentLifeV <= 0)
                ProcessRoleDieForRoleAttack(sl, pool, Enemy, Attacker);

            // 通知紫名信息
            GameManager.ClientMgr.ChangeRolePurpleName(sl, pool, Attacker, Enemy);

            //ProcessDamageThorn(sl, pool, Enemy, Attacker, nInjure, burst);
        }

        /// <summary>
        /// 处理反弹伤害 -- 怪攻击玩家
        /// </summary>
        public static void ProcessDamageThorn(SocketListener sl, TCPOutPacketPool pool, Monster Attacker, GameClient client, int nInjure)
        {
            // 死亡判定
            if (Attacker.VLife <= 0 )
                return;

            // 只反弹一次伤害
            double nDamageThorn = RoleAlgorithm.GetDamageThornPercent(client);
            nInjure = (int)(nInjure * nDamageThorn);

            nDamageThorn = 0.0;
            nDamageThorn = RoleAlgorithm.GetDamageThorn(client);
            nInjure += (int)nDamageThorn;

            if (nInjure < 1)
                return;

            Attacker.VLife -= (int)Global.GMax(0, nInjure);
            Attacker.VLife = Global.GMax(Attacker.VLife, 0);

            GameManager.ClientMgr.NotifySpriteInjured(sl, pool, client, client.ClientData.MapCode, client.ClientData.RoleID, Attacker.RoleID, (int)DamageType.DAMAGETYPE_THORNDAMAGE, nInjure, Attacker.VLife, client.ClientData.Level, new Point(-1, -1));

            ClientManager.NotifySelfEnemyInjured(sl, pool, client, client.ClientData.RoleID, Attacker.RoleID, (int)DamageType.DAMAGETYPE_THORNDAMAGE, nInjure, Attacker.VLife, 0);

            if (Attacker.VLife <= 0)
                ProcessMonsterDieForRoleAttack(sl, pool, client, Attacker, nInjure);

        }

        /// <summary>
        /// 处理反弹伤害  --  玩家攻击怪
        /// </summary>
        public static void ProcessDamageThorn(SocketListener sl, TCPOutPacketPool pool, GameClient Attacker, Monster Enemy, int nInjure)
        {
            // 死亡判定
            if (Attacker.ClientData.CurrentLifeV <= 0)
                return;

            // 只反弹一次伤害
            double nDamageThorn = RoleAlgorithm.GetDamageThornPercent(Enemy);
            nInjure = (int)(nInjure * nDamageThorn);

            nDamageThorn = 0.0;
            nDamageThorn = RoleAlgorithm.GetDamageThorn(Enemy);
            nInjure += (int)nDamageThorn;

            if (nInjure < 1)
                return;

            Attacker.ClientData.CurrentLifeV -= (int)Global.GMax(0, nInjure);
            Attacker.ClientData.CurrentLifeV = Global.GMax(Attacker.ClientData.CurrentLifeV, 0);

            GameManager.ClientMgr.NotifySpriteInjured(sl, pool, Enemy, Attacker.ClientData.MapCode, Enemy.RoleID, Attacker.ClientData.RoleID, (int)DamageType.DAMAGETYPE_THORNDAMAGE, nInjure, Attacker.ClientData.CurrentLifeV, 0, new Point(-1, -1));

            // 处理死亡     注意区分--杀人者 被杀者
            if (Attacker.ClientData.CurrentLifeV <= 0)
                ProcessRoleDieForMonsterAttack(sl, pool, Enemy, Attacker);
        }

#endregion 反弹伤害相关

#region 每日在线奖励相关

        /// <summary>
        /// 向DB查询每日在线奖励相关数据
        /// </summary>
        /// <returns></returns>
        public static List<int> QueryEveryDayOnLineAwardGiftInfoToDB(GameClient client)
        {
            List<int> lList = new List<int>();

            string[] dbFields = null;

            string strDbCmd = string.Format("{0}", client.ClientData.RoleID);
            TCPProcessCmdResults dbRequestResult = RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool,
                                                                           (int)TCPGameServerCmds.CMD_DB_QUERYEVERYDAYONLINEAWARDGIFTINFO, strDbCmd, out dbFields, client.ServerId);

            if (dbRequestResult == TCPProcessCmdResults.RESULT_FAILED)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                    StringUtil.substitute(Global.GetLang("每日在线奖励信息DB读取失败，请稍后再试 qurey")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.None);
                return null;
            }

            if (dbFields.Length != 3 || Convert.ToInt32(dbFields[0]) < 0)
            {
                GameManager.ClientMgr.NotifyImportantMsg(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client,
                    StringUtil.substitute(Global.GetLang("每日在线奖励信息DB参数错误，请稍后再试 qurey")), GameInfoTypeIndexes.Error, ShowGameInfoTypes.ErrAndBox, (int)HintErrCodeTypes.None);
                return null;
            }

            lList.Add(Global.SafeConvertToInt32(dbFields[0]));
            lList.Add(Global.SafeConvertToInt32(dbFields[1]));

            return lList;
        }

        /// <summary>
        /// 更新连续登陆信息
        /// </summary>
        /// <param name="client"></param>
        public static bool UpdateSeriesLoginInfo(GameClient client)
        {
            client.ClientData.MyHuodongData.EveryDayOnLineAwardStep = 0;    // 设置下每日在线奖励的领取到了第几步

            client.ClientData.MyHuodongData.SeriesLoginGetAwardStep = 0;    // 设置下连续登陆奖励的领取到了第几步

            client.ClientData.MyHuodongData.EveryDayOnLineAwardGoodsID = "";

            client.ClientData.MyHuodongData.SeriesLoginAwardGoodsID = "";

            client.ClientData.DayOnlineSecond = 1;      // 每日在线时长重置
            client.ClientData.BakDayOnlineSecond = client.ClientData.DayOnlineSecond;
            client.ClientData.DayOnlineRecSecond = TimeUtil.NOW();

            // 跨天了 要修改玩家的连续登陆信息和连续登陆奖励的步骤--- 通知客户端 0.roleid 1.连续登陆的天数 2.连续登陆奖励到了第几步
            //string strcmd = string.Format("{0}:{1}:{2}", client.ClientData.RoleID, client.ClientData.SeriesLoginNum, client.ClientData.MyHuodongData.SeriesLoginGetAwardStep);

            //GameManager.ClientMgr.SendToClient(client, strcmd, (int)TCPGameServerCmds.CMD_SPR_UPDATEEVERYDAYSERIESLOGININFO);

            // 跨天了 要修改玩家的每日在线时间以及每日奖励步骤 --- 通知客户端 0.roleid 1.每日在线时间 2.每日在线奖励到了第几步
            //strcmd = string.Format("{0}:{1}:{2}", client.ClientData.RoleID, client.ClientData.DayOnlineSecond, client.ClientData.MyHuodongData.EveryDayOnLineAwardStep);

            //GameManager.ClientMgr.SendToClient(client, strcmd, (int)TCPGameServerCmds.CMD_SPR_UPDATEEVERYDAYONLINEAWARDGIFTINFO);

            // 通知DB 修改活动数据
            UpdateHuoDongDBCommand(Global._TCPManager.TcpOutPacketPool, client);

            return true;
        }

#endregion 每日在线奖励相关

#region 装备转生

        /// <summary>
        /// 开始转生
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static bool EquipChangeLifeStart(GameClient client, GoodsData goodsData, int luckyValue, int nType = 1)
        {
            int percent = 0;
            percent = GetEquipChangeLifePercent(client, goodsData, luckyValue, nType) * 100;

            int rndNum = Global.GetRandomNumber(0, 10001);
            if (rndNum <= percent)
                return true;

            return false;
        }

        /// <summary>
        /// 获取装备转生成功的概率 返回百分比整数
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static int GetEquipChangeLifePercent(GameClient client, GoodsData goodsData, int luckyValue, int nTpye)
        {
            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
                return 0;

            if (null == systemGoods)
                return 0;

            if (goodsData.ChangeLifeLevForEquip >= EquipChangeLifeMaxLevel)
                return 0;


            int[] EquipChangeLifePercent = null;

            int percent = 0;

            if (nTpye == 1)
            {
                EquipChangeLifePercent = GameManager.systemParamsList.GetParamValueIntArrayByName("EquipZhuanShengRate");

                percent = Math.Abs(EquipChangeLifePercent[goodsData.ChangeLifeLevForEquip + 1]);
            }
            else if (nTpye == 2)
            {
                EquipChangeLifePercent = GameManager.systemParamsList.GetParamValueIntArrayByName("EquipZhuanShengBoLiRates");

                percent = Math.Abs(EquipChangeLifePercent[goodsData.ChangeLifeLevForEquip]);
            }

            //判断是否VIP, 是则加成5%
            //if (Global.CanUseVipPriority(client))
            //    percent += 5;

            //幸运符加成比率
            percent += luckyValue;

            return Global.GMin(100, percent);
        }

        /// <summary>
        /// 获取装备转生成功的概率 返回百分比整数
        /// </summary>
        /// <param name="goodsData"></param>
        /// <returns></returns>
        public static int GetFlakeOffEquipChangeLifePercent(GameClient client, GoodsData goodsData, int luckyValue)
        {
            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsData.GoodsID, out systemGoods))
                return 0;

            if (null == systemGoods)
                return 0;

            if (goodsData.ChangeLifeLevForEquip >= EquipChangeLifeMaxLevel)
                return 0;

            int[] ForgeLevelRocksPercent = GameManager.systemParamsList.GetParamValueIntArrayByName("EquipZhuanShengRate");

            int percent = Math.Abs(ForgeLevelRocksPercent[goodsData.ChangeLifeLevForEquip + 1]);

            //判断是否VIP, 是则加成5%
            if (Global.CanUseVipPriority(client))
                percent += 5;

            //幸运符加成比率
            percent += luckyValue;

            return Global.GMin(100, percent);
        }

        // 装备转生传承
        /// <summary>
        /// 通过 左边装备【原装备】返回传承需要银两, 小于等于0 非法
        /// </summary>
        /// <param name="leftGoods"></param>
        /// <returns></returns>
        public static int GetChangeLifeChuanChenNeedYinLiang(GoodsData leftGoods)
        {
            if (leftGoods.ChangeLifeLevForEquip <= 0)
                return 0;

            int[] chuanChengYinLiangArr = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhuanShengChuanchengXiaohaoMoney");

            if (null == chuanChengYinLiangArr || leftGoods.ChangeLifeLevForEquip > chuanChengYinLiangArr.Length)
                return 0;

            return chuanChengYinLiangArr[leftGoods.ChangeLifeLevForEquip - 1];
        }

        /// <summary>
        /// 通过 左边装备【原装备】计算传承成功与否并返回,ZhuanShengChuanchengDiaojilv配置的是传承掉级几率，所以需要用100减
        /// 同时，考虑到系统内部几率都采用10000做最大值，因此返回的值扩大100倍
        /// </summary>
        /// <param name="leftGoods"></param>
        /// <returns></returns>
        public static Boolean IsChangeLifeChuanChenSuccess(GoodsData leftGoods)
        {
            if (leftGoods.ChangeLifeLevForEquip <= 0)
                return false;

            int[] chuanChengDiaoJiArr = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhuanShengChuanchengDiaojilv");

            if (null == chuanChengDiaoJiArr || leftGoods.ChangeLifeLevForEquip > chuanChengDiaoJiArr.Length)
                return false;

            int rate = 100 - chuanChengDiaoJiArr[leftGoods.ChangeLifeLevForEquip];

            if (rate <= 0)
                return false;

            if (rate >= 100)
                return true;

            //生成的数小于 rate *100 成功
            if (Global.GetRandomNumber(0, 10001) >= rate * 100)
                return false;

            return true;
        }

        /// <summary>
        /// 判断某级别的神佑符是否可以用于某物品的转生传承
        /// </summary>
        /// <param name="shenYouGoodsID"></param>
        /// <param name="leftGoods"></param>
        /// <returns></returns>
        public static bool IsShengYouFuCanBeenUsedForChangeLifeChuanCheng(int shenYouGoodsID, GoodsData leftGoods)
        {
            if (leftGoods.ChangeLifeLevForEquip <= 0)
                return false;

            // 配置参数列表个数必须一致，一一对应
            int[] chuanChengChangeLifeLevelArr = GameManager.systemParamsList.GetParamValueIntArrayByName("ShengyoufuZhuanShengDengji");
            int[] chuanChengShenYouGoodsArr = GameManager.systemParamsList.GetParamValueIntArrayByName("ShenyoufuGoodsIDs");

            if (null == chuanChengChangeLifeLevelArr || null == chuanChengShenYouGoodsArr || chuanChengShenYouGoodsArr.Length != chuanChengChangeLifeLevelArr.Length)
            {
                return false;
            }

            //找到神佑符物品对应索引
            int goodsIndex = -1;
            for (int n = 0; n < chuanChengShenYouGoodsArr.Length; n++)
            {
                if (shenYouGoodsID == chuanChengShenYouGoodsArr[n])
                {
                    goodsIndex = n;//找到就退出循环
                    break;
                }
            }

            if (goodsIndex < 0)
                return false;

            //找到物品对应的必须的强化等级索引
            int ChangeLifeLevelIndex = -1;
            for (int n = 0; n < chuanChengChangeLifeLevelArr.Length; n++)
            {
                if (leftGoods.ChangeLifeLevForEquip <= chuanChengChangeLifeLevelArr[n])
                {
                    ChangeLifeLevelIndex = n;//不断的更新,最后一次更新的就是目标索引
                    break;
                }
            }

            if (ChangeLifeLevelIndex < 0)
                return false;

            //通过索引比较判断物品的合法性,物品索引小于 转生等级索引，说明神佑符等级太低，不能用
            if (goodsIndex < ChangeLifeLevelIndex)
                return false;

            return true;
        }

        // 装备转生 end

#endregion 转生相关

#region 冥想

        /// <summary>
        /// 判断转数与等级是否满足给定的最小最大值限制
        /// </summary>
        /// <param name="zhuanSheng">角色转数</param>
        /// <param name="level">角色等级</param>
        /// <param name="minZhuanSheng">限制的最小转数</param>
        /// <param name="minLevel">限制的最小等级</param>
        /// <param name="maxZhuanSheng">限制的最大转数</param>
        /// <param name="maxLevel">限制的最大等级</param>
        /// <returns>
        /// 负数: 未达到最小转生和等级限制
        /// 0: 在限制的范围内
        /// 正数: 大于最大的转生和等级限制
        /// </returns>
        public static int AvalidLevel(int zhuanSheng, int level, int minZhuanSheng, int minLevel, int maxZhuanSheng = -1, int maxLevel = -1)
        {
            minLevel = (minLevel == -1) ? (0) : (minLevel);
            maxLevel = (maxLevel == -1) ? (0xfff) : (maxLevel);
            minZhuanSheng = (minZhuanSheng == -1) ? (0) : (minZhuanSheng);
            maxZhuanSheng = (maxZhuanSheng == -1) ? (0xfff) : (maxZhuanSheng);
            int min = minLevel + minZhuanSheng * 0x10000;
            int max = maxLevel + maxZhuanSheng * 0x10000;
            int val = level + zhuanSheng * 0x10000;

            if (min <= val && val <= max)
            {
                return 0;
            }
            else if (val < min)
            {
                return -1;
            }
            else
            {
                return 1;
            }
        }

        public static int AvalidLevel(GameClient client, int minZhuanSheng, int minLevel, int maxZhuanSheng = -1, int maxLevel = -1)
        {
            return AvalidLevel(client.ClientData.ChangeLifeCount, client.ClientData.Level, minZhuanSheng, minLevel, maxZhuanSheng, maxLevel);
        }

        /// <summary>
        /// 将转生数和等级合并为一个32位整数,等级作为低16位,转数作为高16位
        /// </summary>
        /// <param name="zhuanSheng"></param>
        /// <param name="level"></param>
        /// <param name="upBound"></param>
        /// <returns></returns>
        public static int GetUnionLevel(int zhuanSheng, int level, bool upBound = false)
        {
            if (zhuanSheng < 0)
            {
                zhuanSheng = upBound ? 0xfff : 0;
            }
            return zhuanSheng * 0x10000 + level;
        }


        public static int GetUnionLevel(GameClient client, bool upBound = false)
        {
            return GetUnionLevel(client.ClientData.ChangeLifeCount, client.ClientData.Level);
        }

        public static int GetUnionLevel2(int zhuansheng, int level)
        {
            return zhuansheng * 100 + level;
        }

        /// <summary>
        /// 查询角色等级对应的冥想经验
        /// </summary>
        /// <returns></returns>
        public static long GetMingXiangExpr(int zhuanSheng, int level, out int nStarSoul)
        {
            nStarSoul = 0;
            long expr = 0;
            int low = 1;
            int high = Data.MeditateInfoList.Count;
            int middle;

            while (low <= high)
            {
                middle = (low + high) / 2;
                MeditateData data = Data.MeditateInfoList[middle];
                int ret = AvalidLevel(zhuanSheng, level, data.MinZhuanSheng, data.MinLevel, data.MaxZhuanSheng, data.MaxLevel);
                if (0 == ret)
                {
                    expr = data.Experience;
                    nStarSoul = data.StarSoul;
                    break;
                }
                else if (ret < 0)
                {
                    high = middle - 1;
                }
                else
                {
                    low = middle + 1;
                }
            }

            if (expr < 0)
            {
                expr = 0;
            }

            return expr;
        }

        /// <summary>
        /// 取消冥想状态
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static void EndMeditate(GameClient client)
        {
            //重置自动冥想计时时间和位置
            client.ClientData.Last10sPosX = 0;
            client.ClientData.Last10sPosY = 0;
            client.ClientData.LastMovePosTicks = 0;
            if (client.ClientData.StartMeditate > 0)
            {
                client.ClientData.StartMeditate = 0;

                //通知用户某个精灵的冥想状态改变
                GameManager.ClientMgr.NotifySpriteMeditate(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, 0);
            }
        }

        /// <summary>
        /// 设置冥想状态,重置时间
        /// </summary>
        /// <param name="client"></param>
        /// <param name="meditateState"></param>
        public static void StartMeditate(GameClient client)
        {
            client.ClientData.BiGuanTime = TimeUtil.NOW();
            client.ClientData.MeditateTicks = TimeUtil.NOW();
            client.ClientData.StartMeditate = 1;
            GameManager.ClientMgr.NotifySpriteMeditate(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, 1);
        }

#endregion 冥想

#region VIP系统

        /// <summary>
        /// 领取VIP奖励
        /// </summary>
        /// <param name="shenYouGoodsID"></param>
        /// <param name="leftGoods"></param>
        /// <returns></returns>
        public static int GetVipDailyAward(GameClient client, VIPDataInfo tmpVipData, int nIndex)
        {
            int nRet = 1;

            List<GoodsData> goodsIDs = tmpVipData.AwardGoods;
            int nJinBi = tmpVipData.JinBi;
            int nBindJinBi = tmpVipData.BindJinBi;
            int nZuanShi = tmpVipData.ZuanShi;
            int nBindZuanShi = tmpVipData.BindZuanShi;
            int nXiHongMing = tmpVipData.XiHongMing;
            int[] bufferGoodsIDs = tmpVipData.BufferGoods;
            int nXiuLi = tmpVipData.XiuLi;

            if (nZuanShi > 0)
            {
                GameManager.ClientMgr.AddUserMoney(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, nZuanShi, string.Format("{0}特权领取", Global.GetVipTypeNameString(client)));
                GameManager.SystemServerEvents.AddEvent(string.Format("角色根据{0}特权领取钻石, roleID={1}({2}), Money={3}, newMoney={4}, priority={5}", Global.GetVipTypeNameString(client),
                                                            client.ClientData.RoleID, client.ClientData.RoleName, client.ClientData.UserMoney, nZuanShi, nIndex), EventLevels.Record);

                BroadcastVipFetchYuanBaoAwardMsg(client, nZuanShi);
            }

            if (nBindZuanShi > 0)
            {
                GameManager.ClientMgr.AddUserGold(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, nBindZuanShi, "领取VIP日奖励");
                GameManager.SystemServerEvents.AddEvent(string.Format("角色根据{0}特权领取绑定钻石, roleID={1}({2}), Money={3}, newMoney={4}, priority={5}", Global.GetVipTypeNameString(client),
                                                            client.ClientData.RoleID, client.ClientData.RoleName, client.ClientData.UserMoney, nBindZuanShi, nIndex), EventLevels.Record);

                BroadcastVipFetchBindYuanBaoAwardMsg(client, nBindZuanShi);
            }

            if (nJinBi > 0)
            {
                //给用户加钱,更新用户的银两
                GameManager.ClientMgr.AddUserYinLiang(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, nJinBi, "领取VIP日奖励");
                GameManager.SystemServerEvents.AddEvent(string.Format("角色根据{0}特权领取金币, roleID={1}({2}), Money={3}, newMoney={4}, priority={5}", Global.GetVipTypeNameString(client),
                                                        client.ClientData.RoleID, client.ClientData.RoleName, client.ClientData.YinLiang, nJinBi, nIndex), EventLevels.Record);
            }

            if (nBindJinBi > 0)
            {
                //给用户加钱,更新用户的铜钱
                GameManager.ClientMgr.AddMoney1(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, nBindJinBi, "领取VIP日奖励", false);
                GameManager.SystemServerEvents.AddEvent(string.Format("角色根据{0}特权领取绑定金币, roleID={1}({2}), Money={3}, newMoney={4}, priority={5}", Global.GetVipTypeNameString(client),
                                                            client.ClientData.RoleID, client.ClientData.RoleName, client.ClientData.Money1, nBindJinBi, nIndex), EventLevels.Record);
            }

            string awardReason = /**/string.Format("VIP使用特权{0}获取", nIndex);

            //领取物品
            if (goodsIDs != null)
            {
                for (int n = 0; n < goodsIDs.Count; n++)
                {
                    GoodsData goodsData = goodsIDs[n];

                    if (null == goodsData)
                    {
                        continue;
                    }

                    //向DBServer请求加入某个新的物品到背包中
                    //添加物品
                    goodsData.Id = Global.AddGoodsDBCommand(Global._TCPManager.TcpOutPacketPool, client, goodsData.GoodsID,
                        goodsData.GCount, goodsData.Quality, goodsData.Props, goodsData.Forge_level,
                        goodsData.Binding, 0, goodsData.Jewellist, true, 1, awardReason, goodsData.Endtime, goodsData.AddPropIndex, goodsData.BornIndex, goodsData.Lucky, goodsData.Strong);
                }
            }

            //领取buffer
            if (null != bufferGoodsIDs && bufferGoodsIDs.Length > 0)
            {
                for (int n = 0; n < bufferGoodsIDs.Length; n++)
                {
                    Global.AddBufferByGoodsID(client, bufferGoodsIDs[n]);
                }
            }

            if (1 == nXiHongMing)
            {
                //设置PK值(限制当前地图)
                GameManager.ClientMgr.SetRolePKValuePoint(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, 0, 0);
            }

            //一键修理
            if (1 == nXiuLi)
            {
                /// 一键修理装备
                int nVipLev = client.ClientData.VipLevel;

                if (nVipLev >= (int)VIPEumValue.VIPENUMVALUE_XIULILEV)
                    nRet = Global.OneKeyFixAllEquips(client);
            }

            //记录money 提取日志
            Global.AddRoleFetchVipAwardEvent(client, nZuanShi, nJinBi, nBindJinBi, 0, nIndex);

            return nRet;
        }

        /// <summary>
        /// Vip升级
        /// </summary>
        /// <param name="shenYouGoodsID"></param>
        /// <param name="leftGoods"></param>
        /// <returns></returns>
        public static bool ProcessVipLevelUp(GameClient client)
        {
            // 根据充值的总钻石来确定VIP的等级
            long nDiamond = 0;
            nDiamond = Global.GetUserInputAllYuanBao(client);

            if (nDiamond > 0 && Data.DiamondToVipExpValue > 0)
                nDiamond /= Data.DiamondToVipExpValue;

            nDiamond += Global.GetRoleParamsInt32FromDB(client, RoleParamName.VIPExp);

            int nLev = CalcVipLevelByZuanShi(nDiamond);

            int nOldLev = client.ClientData.VipLevel;

            if (nOldLev == nLev)
                return true;

            client.ClientData.VipLevel = nLev;

            if (client._IconStateMgr.CheckVIPLevelAwardState(client)
                || client._IconStateMgr.CheckSpecialActivity(client))
            {
                client._IconStateMgr.SendIconStateToClient(client);
            }

            //[bing] 刷新客户端活动叹号
            if (client._IconStateMgr.CheckJieRiFanLi(client, ActivityTypes.JieriVIPFanli))
            {
                client._IconStateMgr.AddFlushIconState((ushort)ActivityTipTypes.JieRiActivity, client._IconStateMgr.IsAnyJieRiTipActived());
                client._IconStateMgr.SendIconStateToClient(client);
            }

            // buffer 处理
            ProcessVipSpecialBuffer(client);

            // 通知客户端
            string strcmd = string.Format("{0}:{1}", client.ClientData.RoleID, client.ClientData.VipLevel);

            GameManager.ClientMgr.SendToClient(client, strcmd, (int)TCPGameServerCmds.CMD_SPR_VIPLEVELUP);

            SpreadManager.getInstance().SpreadIsVip(client);

            FundManager.FundVip(client);

            UserReturnManager.getInstance().VipChange(client);

            TradeBlackManager.Instance().UpdateObjectExtData(client);

            //若视频聊天室开启 推送玩家
            VideoLogic.GetOrSendPlayerVideoStatus(client, client.ClientData.RoleCommonUseIntPamams);

            try
            {
                string analysis = string.Format("vipchange server={0} account={1} player={2} viplevel={3}", GameManager.ServerId, client.strUserID, client.ClientData.RoleID, client.ClientData.VipLevel);
                LogManager.WriteLog(LogTypes.Analysis, analysis);
            }
            catch { }

            return true;
        }

        /// <summary>
        /// 根据钻石获取vip等级
        /// </summary>
        /// <param name="zuanshi"></param>
        /// <returns></returns>
        public static int CalcVipLevelByZuanShi(long zuanshi)
        {
            int nLev = 0;

            for (int n = 1; n <= (int)VIPEumValue.VIPENUMVALUE_MAXLEVEL; ++n)
            {
                if (Data.VIPLevAwardAndExpInfoList[n].NeedExp > 0 && zuanshi >= Data.VIPLevAwardAndExpInfoList[n].NeedExp)
                    nLev = Data.VIPLevAwardAndExpInfoList[n].VipLev;
                else
                    break;
            }

            return nLev;
        }

        /// <summary>
        /// GM设置VIP等级
        /// </summary>
        /// <param name="shenYouGoodsID"></param>
        /// <param name="leftGoods"></param>
        /// <returns></returns>
        public static bool GMSetVipLevel(GameClient client, int vipLevel)
        {
            long nDiamond = 0;
            vipLevel = Math.Min(vipLevel, (int)VIPEumValue.VIPENUMVALUE_MAXLEVEL);
            nDiamond = Global.GetUserInputAllYuanBao(client);
            if (nDiamond > 0 && Data.DiamondToVipExpValue > 0)
                nDiamond /= Data.DiamondToVipExpValue;

            int needExp = (int)(-nDiamond);
            if (Data.VIPLevAwardAndExpInfoList.ContainsKey(vipLevel))
            {
                needExp = Data.VIPLevAwardAndExpInfoList[vipLevel].NeedExp - (int)nDiamond;
            }

            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.VIPExp, needExp, true);
            return ProcessVipLevelUp(client);
        }

        /// <summary>
        /// Vip特殊BUFFER
        /// </summary>
        /// <param name="shenYouGoodsID"></param>
        /// <param name="leftGoods"></param>
        /// <returns></returns>
        public static bool ProcessVipSpecialBuffer(GameClient client)
        {
            if (client.ClientData.VipLevel <= 0)
                return false;

            if (client.ClientData.VipLevel > (int)VIPEumValue.VIPENUMVALUE_MAXLEVEL)
                client.ClientData.VipLevel = (int)VIPEumValue.VIPENUMVALUE_MAXLEVEL;

            int nVipLev = 0;
            nVipLev = client.ClientData.VipLevel;

            VIPLevAwardAndExpInfo tmpVipExp = null;

            if (!Data.VIPLevAwardAndExpInfoList.TryGetValue(nVipLev, out tmpVipExp) || tmpVipExp == null)
                return false;

            int[] nBuffGoods = null;
            nBuffGoods = GameManager.systemParamsList.GetParamValueIntArrayByName("ZhuanhuangBufferGoodsIDs");

            if (nBuffGoods == null || nBuffGoods.Count() != (int)VIPEumValue.VIPENUMVALUE_MAXLEVEL + 1 || nBuffGoods[nVipLev] < 0)
                return false;

            int nOldBufferGoodsIndexID = -1;

            BufferData bufferData = Global.GetBufferDataByID(client, (int)BufferItemTypes.ZuanHuang);
            if (null != bufferData && !Global.IsBufferDataOver(bufferData))
                nOldBufferGoodsIndexID = (int)bufferData.BufferVal;

            if (nOldBufferGoodsIndexID == nBuffGoods[nVipLev])  // 不需要更新
                return false;

            double[] actionParams = new double[1];
            actionParams[0] = (double)nBuffGoods[nVipLev];
            Global.UpdateBufferData(client, BufferItemTypes.ZuanHuang, actionParams, 1, true);

            //GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

            GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

            return true;
        }

        /// <summary>
        /// 向DB请求VIP奖励标记
        /// </summary>
        /// <param name=""></param>
        /// <param name=""></param>
        /// <returns></returns>
        public static void QueryVipAwardFlagToDB(GameClient client)
        {
            TCPOutPacket tcpOutPacket = null;

            string strDbCmd = string.Format("{0}", client.ClientData.RoleID);

            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool,
                                                                                (int)TCPGameServerCmds.CMD_DB_QUERYVIPLEVELAWARDFLAG, strDbCmd, out tcpOutPacket, client.ServerId);

            if (TCPProcessCmdResults.RESULT_FAILED != dbRequestResult)
            {
                string strData = new UTF8Encoding().GetString(tcpOutPacket.GetPacketBytes(), 6, tcpOutPacket.PacketDataSize - 6);

                //解析客户端的指令
                string[] fields = strData.Split(':');
                if (fields.Length == 1)
                    client.ClientData.VipAwardFlag = Convert.ToInt32(fields[0]);
            }

            // 注意--还回缓冲池 不然会造成内存泄漏 内存池将会耗尽！！
            PushBackTcpOutPacket(tcpOutPacket);
        }

        /// <summary>
        /// 向DB请求VIP奖励标记
        /// </summary>
        /// <param name=""></param>
        /// <param name=""></param>
        /// <returns></returns>
        public static void UpdateVipAwardFlagToDB(GameClient client, int nFlag)
        {
            Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_DB_UPDATEVIPLEVELAWARDFLAG, string.Format("{0}:{1}", client.ClientData.RoleID, nFlag), client.ServerId);

            return;
        }

#endregion VIP系统

#region 路径接口

        /// <summary>
        /// 路径IsolateRes
        /// </summary>
        /// <param name="shenYouGoodsID"></param>
        /// <param name="leftGoods"></param>
        /// <returns></returns>
        public static string ProcessIsolateResPath(string strPath)
        {
            return string.Format("{0}/GameRes/IsolateRes/{1}", Global.RealAbsoluteGameResPath, strPath);
        }

        /// <summary>
        /// 路径GameRes
        /// </summary>
        /// <param name="shenYouGoodsID"></param>
        /// <param name="leftGoods"></param>
        /// <returns></returns>
        public static string ProcessGameResPath(string strPath)
        {
            return string.Format("{0}/GameRes/GameRes/{1}", Global.RealAbsoluteGameResPath, strPath);
        }

#endregion 路径接口

#region 经验副本

        public static bool IsInExperienceCopyScene(int nMapID)
        {
            int[] nMapcode = GameManager.systemParamsList.GetParamValueIntArrayByName("ExperienceCopyMapCodeIds");

            for (int i = 0; i < nMapcode.Length; ++i)
            {
                if (nMapcode[i] == nMapID)
                    return true;
            }

            return false;
        }

#endregion 经验副本

        /// <summary>
        /// 是否是组队副本地图
        /// </summary>
        /// <param name="nMapID"></param>
        /// <returns></returns>
        public static bool IsInTeamCopyScene(int mapcode)
        {
            return CopyTeamManager.Instance().IsTeamCopyMapCode(mapcode);
        }

#region 复活点信息

        /// <summary>
        /// 获取地图的复活点信息
        /// </summary>
        /// <param name="mapCode"></param>
        /// <returns></returns>
        public static int GetMapRealiveInfoByCode(int mapCode)
        {
            if (null == Global.XmlInfo[Global.GAME_CONFIG_SETTINGS_NAME])
                return -1;

            XElement xmlItem = Global.GetXElement(Global.XmlInfo[Global.GAME_CONFIG_SETTINGS_NAME], "Map", "Code", mapCode.ToString());
            if (null == xmlItem)
                return -1;

            int nRet = -1;
            nRet = (int)Global.GetSafeAttributeLong(xmlItem, "RealiveType");

            return nRet;
        }

#endregion 复活点信息

#region 狼魂领域圣域城主膜拜
        /// <summary>
        /// 取得圣域城主膜拜计数
        /// </summary>
        /// <param name="client"></param>
        public static int GetLHLYAdmireCount(GameClient client)
        {
            int nCount = Global.GetRoleParamsInt32FromDB(client, RoleParamName.LHLYAdmireCount);
            int nToday = (int)TimeUtil.NowDateTime().DayOfYear;
            int nDay = Global.GetRoleParamsInt32FromDB(client, RoleParamName.LHLYAdmireDayID);
            if (nDay != nToday)
                return 0;

            return nCount;
        }

        /// <summary>
        /// 处理圣域城主膜拜计数递增
        /// </summary>
        public static void ProcessIncreaseLHLYAdmireCount(GameClient client)
        {
            int nToday = (int)TimeUtil.NowDateTime().DayOfYear;
            int nCount = Global.GetRoleParamsInt32FromDB(client, RoleParamName.LHLYAdmireCount);
            int nDay = Global.GetRoleParamsInt32FromDB(client, RoleParamName.LHLYAdmireDayID);
            if (nDay == nToday)
            {
                ++nCount;
            }
            else
            {
                nCount = 1;
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.LHLYAdmireDayID, nToday, true);
            }
            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.LHLYAdmireCount, nCount, true);
            return;
        }
#endregion

#region PK之王崇拜

        /// <summary>
        /// 取得PK之王崇拜计数
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static int GetPKKingAdmireCount(GameClient client)
        {
            int nCount = 0;
            int nToday = (int)TimeUtil.NowDateTime().DayOfYear;
            int nDay = Global.GetRoleParamsInt32FromDB(client, RoleParamName.PKKingAdmireDayID);

            if (nDay == nToday)
                nCount = client.ClientData.PKKingAdorationCount;

            return nCount;
        }

        /// <summary>
        /// 处理PK之王崇拜计数递增
        /// </summary>
        /// <param name="client"></param>
        /// <param name="enemy"></param>
        public static void ProcessIncreasePKKingAdmireCount(GameClient client)
        {
            int nToday = (int)TimeUtil.NowDateTime().DayOfYear;
            int nCount = Global.GetRoleParamsInt32FromDB(client, RoleParamName.PKKingAdmireCount);
            int nDay = Global.GetRoleParamsInt32FromDB(client, RoleParamName.PKKingAdmireDayID);

            if (nDay == nToday)
                client.ClientData.PKKingAdorationCount = ++nCount;
            else
            {
                client.ClientData.PKKingAdorationCount = 1;
                Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.PKKingAdmireDayID, nToday, true);
            }

            Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.PKKingAdmireCount, client.ClientData.PKKingAdorationCount, true);

            return;
        }

#endregion PK之王崇拜

#region 假人管理

        /// <summary>
        /// 帮旗项到帮旗数据的转换
        /// </summary>
        /// <param name="junQiItem"></param>
        /// <returns></returns>
        public static FakeRoleData FakeRoleItem2FakeRoleData(FakeRoleItem fakeRoleItem)
        {
            FakeRoleData fakeRoleData = fakeRoleItem.GetFakeRoleData();
            return fakeRoleData;
        }

#endregion 假人管理

#region 交易市场/MU摆摊

        /// <summary>
        /// 当前位置是否允许打开交易市场
        /// </summary>
        /// <returns></returns>
        public static bool AllowOpenMarket(GameClient client)
        {
            if (client.ClientData.MapCode != GameManager.MainMapCode)
            {
                return false;
            }

            GameMap gameMap = null;
            if (!GameManager.MapMgr.DictMaps.TryGetValue(client.ClientData.MapCode, out gameMap))
            {
                return false;
            }

            if (!gameMap.InSafeRegionList(client.CurrentGrid))
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// 取消交易市场的开放状态
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static void CloseMarket(GameClient client)
        {
            if (client.ClientData.AllowMarketBuy)
            {
                client.ClientData.AllowMarketBuy = false;

                //取消摊位名称
                client.ClientData.MarketName = "";

                //通知用户某个精灵的交易市场的名称（开放状态）
                GameManager.ClientMgr.NotifySpriteMarketName(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, "", 0);
            }
        }

        /// <summary>
        /// 判断角色想要摆摊的格子处是否有人摆摊，如果有的话，就要提示不再允许摆摊
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static bool CanOpenMarketByPos(int mapCode, Point grid)
        {
            if (mapCode != GameManager.MainMapCode)
            {
                return false;
            }

            MapGrid mapGrid = null;
            if (!GameManager.MapGridMgr.DictGrids.TryGetValue(mapCode, out mapGrid))
            {
                return false;
            }

            List<Object> objsList = mapGrid.FindObjects((int)grid.X, (int)grid.Y);
            if (null == objsList || objsList.Count <= 0)
            {
                return true;
            }

            for (int i = 0; i < objsList.Count; i++)
            {
                if (objsList[i] is GameClient)
                {
                    if ((objsList[i] as GameClient).ClientData.AllowMarketBuy)
                    {
                        return false;
                    }
                }
            }

            int roleCount = LiXianBaiTanManager.GetLiXianRoleCountByPoint(grid);
            if (roleCount > 0)
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// 发送摆摊日志
        /// </summary>
        /// <param name="rid"></param>
        /// <param name="otherRoleID"></param>
        /// <param name="otherName"></param>
        /// <param name="goodsID"></param>
        /// <param name="goodsNum"></param>
        /// <param name="forgeLevel"></param>
        /// <param name="totalPrice"></param>
        /// <param name="leftYuanBao"></param>
        public static void AddMarketBuyLog(int rid, int otherRoleID, string otherName, int goodsID, int goodsNum, int forgeLevel, int totalPrice, int leftYuanBao, int saleMoney1, int Money1, int tax, int excellenceinfo)
        {
            string cmd = string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}:{11}", rid, otherRoleID, otherName, goodsID, goodsNum, forgeLevel, totalPrice, leftYuanBao, saleMoney1, Money1, tax, excellenceinfo);

            Global.sendToDB<string, string>((int)TCPGameServerCmds.CMD_DB_ADD_BAITANLOG, cmd, GameManager.LocalServerId);
        }

#endregion 交易市场/MU摆摊

#region 红名

        /// <summary>
        /// 红名Debuff处理 -- 攻击力、防御力、生命上限下降   时间分钟=((PK值-200)/2)
        /// </summary>
        /// <param name="shenYouGoodsID"></param>
        /// <param name="leftGoods"></param>
        /// <returns></returns>
        public static void ProcessRedNamePunishForDebuff(GameClient client)
        {
#if true
            if (client.ClientData.PKPoint == client.ClientData.LastPKPoint)
            {
                return;
            }
            client.ClientData.LastPKPoint = client.ClientData.PKPoint;

            BufferData bufferData = Global.GetBufferDataByID(client, (int)BufferItemTypes.MU_REDNAME_DEBUFF);

            double debuffPercent = Math.Ceiling(client.ClientData.PKPoint / 100.0 - 1);
            if (debuffPercent >= 0)
            {
                debuffPercent = (debuffPercent * (debuffPercent + 1) / 2); // 策划给的公式

                client.ClientData.PropsCacheManager.SetExtPropsSingle(PropsSystemTypes.RedNameDebuff, ExtPropIndexes.AddAttackPercent, -Data.RedNameDebuffInfo[0] * debuffPercent);
                client.ClientData.PropsCacheManager.SetExtPropsSingle(PropsSystemTypes.RedNameDebuff, ExtPropIndexes.AddDefensePercent, -Data.RedNameDebuffInfo[1] * debuffPercent);
                client.ClientData.PropsCacheManager.SetExtPropsSingle(PropsSystemTypes.RedNameDebuff, ExtPropIndexes.MaxLifePercent, -Data.RedNameDebuffInfo[2] * debuffPercent);
            }
            else
            {
                debuffPercent = 0;
                client.ClientData.PropsCacheManager.SetExtPropsSingle(PropsSystemTypes.RedNameDebuff, ExtPropIndexes.AddAttackPercent, 0);
                client.ClientData.PropsCacheManager.SetExtPropsSingle(PropsSystemTypes.RedNameDebuff, ExtPropIndexes.AddDefensePercent, 0);
                client.ClientData.PropsCacheManager.SetExtPropsSingle(PropsSystemTypes.RedNameDebuff, ExtPropIndexes.MaxLifePercent, 0);
            }

            double[] actionParams = new double[3];
            actionParams[0] = (double)Data.RedNameDebuffInfo[3];
            actionParams[1] = (double)(client.ClientData.PKPoint - 200) / Data.ConstSubPKPointPerMin;
            actionParams[2] = debuffPercent;

            if (null != bufferData)
            {
                long min0 = bufferData.BufferSecs - (TimeUtil.NOW() - bufferData.StartTime) / 60000;
                long min1 = (long)(actionParams[1]);
                if (min0 == min1) //剩余时间未变化,不必同步
                {
                    return;
                }
            }

            Global.UpdateBufferData(client, BufferItemTypes.MU_REDNAME_DEBUFF, actionParams, 1, true);

            GameManager.ClientMgr.NotifyUpdateEquipProps(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);

            GameManager.ClientMgr.NotifyOthersLifeChanged(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client);
#endif
        }

#endregion 红名

#region 推送相关

        /// <summary>
        /// 更新推送信息
        /// </summary>
        /// <param name="shenYouGoodsID"></param>
        /// <param name="leftGoods"></param>
        /// <returns></returns>
        public static void UpdatePushMessageInfo(GameClient client, string strPushMsgID)
        {
            string strDbCmd = string.Format("{0}:{1}", client.ClientData.RoleID, strPushMsgID);
            string[] dbFields = null;

            TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool,
                                                                            (int)TCPGameServerCmds.CMD_DB_UPDATEPUSHMESSAGEINFO, strDbCmd, out dbFields, client.ServerId);

            if (dbRequestResult != TCPProcessCmdResults.RESULT_FAILED && Convert.ToInt32(dbFields[1]) == 1)
            {
                client.ClientData.PushMessageID = strPushMsgID;
            }
        }

        ///// <summary>
        ///// 推送触发
        ///// </summary>
        ///// <param name="shenYouGoodsID"></param>
        ///// <param name="leftGoods"></param>
        ///// <returns></returns>
        //public static void TiggerPushMessage()
        //{
        //    // 定时推送 每天9点
        //    int nDayid = TimeUtil.NowDateTime().Day;

        //    if (nDayid == PushMessageService.getInstance().GetDailyPushMsgDayID() || TimeUtil.NowDateTime().Hour != 9)
        //        return;

        //    PushMessageService.getInstance().SetDailyPushMsgDayID(nDayid);

        //    // 取得玩家List
        //    TCPOutPacket tcpOutPacket = null;
        //    string strDbCmd = string.Format("{0}", (int)PushMessageInfo.PUSHMSG_TIGGER_INTERVAL_DAY3);

        //    TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, (int)TCPGameServerCmds.CMD_DB_QUERYPUSHMESSAGEUSERLIST, strDbCmd, out tcpOutPacket);

        //    if (TCPProcessCmdResults.RESULT_FAILED != dbRequestResult)
        //    {
        //        List<PushMessageData> PushMessageList = DataHelper.BytesToObject<List<PushMessageData>>(tcpOutPacket.GetPacketBytes(), 6, tcpOutPacket.PacketDataSize - 6);

        //        if (null == PushMessageList || PushMessageList.Count <= 0)
        //            return;

        //        List<PushMessageData> list1 = new List<PushMessageData>();
        //        List<PushMessageData> list2 = new List<PushMessageData>();
        //        List<PushMessageData> list3 = new List<PushMessageData>();

        //        // 推送消息
        //        for (int i = 0; i < PushMessageList.Count; i++)
        //        {
        //            // 1.在线的不发
        //            TMSKSocket clientSocket = null;
        //            clientSocket = GameManager.OnlineUserSession.FindSocketByUserID(PushMessageList[i].UserID);

        //            if (clientSocket != null)
        //                continue;

        //            // 2.离线时间必须达到要求 3 7 15天
        //            string strTime = null;
        //            strTime = PushMessageList[i].LastLoginTime;

        //            if (strTime == null)
        //                continue;

        //            DateTime datatime = DateTime.Parse(strTime);

        //            DateTime time = datatime.AddDays((int)PushMessageInfo.PUSHMSG_TIGGER_INTERVAL_DAY1);

        //            if (time.Day == TimeUtil.NowDateTime().Day && !string.IsNullOrEmpty(PushMessageList[i].PushID))
        //            {
        //                list1.Add(PushMessageList[i]);
        //            }

        //            time = datatime.AddDays((int)PushMessageInfo.PUSHMSG_TIGGER_INTERVAL_DAY2);

        //            if (time.Day == TimeUtil.NowDateTime().Day && !string.IsNullOrEmpty(PushMessageList[i].PushID))
        //            {
        //                list2.Add(PushMessageList[i]);
        //            }

        //            time = datatime.AddDays((int)PushMessageInfo.PUSHMSG_TIGGER_INTERVAL_DAY3);

        //            if (time.Day == TimeUtil.NowDateTime().Day&& !string.IsNullOrEmpty(PushMessageList[i].PushID))
        //            {
        //                list3.Add(PushMessageList[i]);
        //            }
        //        }

        //        for (int j = 0; j < list1.Count; j++)
        //        {
        //            PushMessageService.getInstance().AddPushMessageText(list1[j].PushID, "亲，来玩吧", "亲，你已经联系三天不登陆全民奇迹了，小伙伴们都在等着您哦！");
        //        }

        //        for (int z = 0; z < list2.Count; z++)
        //        {
        //            PushMessageService.getInstance().AddPushMessageText(list2[z].PushID, "亲，来玩吧", "亲，你已经联系五天不登陆全民奇迹了，小伙伴们都在等着您哦！");
        //        }

        //        for (int w = 0; w < list3.Count; w++)
        //        {
        //            PushMessageService.getInstance().AddPushMessageText(list3[w].PushID, "亲，来玩吧", "亲，你已经联系十五天不登陆全民奇迹了，小伙伴们都在等着您哦！");
        //        }
        //    }
        //}

        ///// <summary>
        ///// 活动推送触发
        ///// </summary>
        ///// <param name="shenYouGoodsID"></param>
        ///// <param name="leftGoods"></param>
        ///// <returns></returns>
        //public static void DayActivityTiggerPushMessage(int nActivityTpye)
        //{
        //    string strTitle = null;
        //    string strMsg = null;

        //    if (nActivityTpye == (int)SpecialActivityTypes.BloodCastle)
        //    {
        //        strTitle = "血色堡垒开启了";
        //        strMsg = "亲，血色城堡大门已开启，丰厚金币晶石等您来取！";
        //    }
        //    else if (nActivityTpye == (int)SpecialActivityTypes.DemoSque)
        //    {
        //        strTitle = "恶魔广场开启了";
        //        strMsg = "亲，恶魔广场大门已开启，勇士快去尽享海量经验！";
        //    }
        //    else if (nActivityTpye == (int)SpecialActivityTypes.CampBattle)
        //    {
        //        strTitle = "阵营战开启了";
        //        strMsg = "亲，火爆阵营战已开战，成就绑钻应有尽有！";
        //    }
        //    else if (nActivityTpye == (int)SpecialActivityTypes.TheKingOfPK)
        //    {
        //        strTitle = "PK之王开启了";
        //        strMsg = "亲，PK之王活动已开启，海量成就点数等您来取！";
        //    }

        //    TCPOutPacket tcpOutPacket = null;
        //    string strDbCmd = string.Format("{0}", (int)PushMessageInfo.PUSHMSG_TIGGER_INTERVAL_DAY1);  // 3天内登录过游戏的玩家

        //    TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool,
        //                                                                        (int)TCPGameServerCmds.CMD_DB_QUERYPUSHMESSAGEUSERLIST, strDbCmd, out tcpOutPacket);

        //    if (TCPProcessCmdResults.RESULT_FAILED != dbRequestResult && !string.IsNullOrEmpty(strTitle) && !string.IsNullOrEmpty(strMsg))
        //    {
        //        List<PushMessageData> PushMessageList = DataHelper.BytesToObject<List<PushMessageData>>(tcpOutPacket.GetPacketBytes(), 6, tcpOutPacket.PacketDataSize - 6);

        //        if (null == PushMessageList || PushMessageList.Count <= 0)
        //            return;

        //        for (int i = 0; i < PushMessageList.Count; ++i)
        //        {
        //            if (!string.IsNullOrEmpty(PushMessageList[i].PushID))
        //                PushMessageService.getInstance().AddPushMessageText(PushMessageList[i].PushID, strTitle, strMsg);
        //        }

        //    }

        //}

#endregion 推送相关

#region 战斗力

        /// <summary>
        /// 计算战斗力
        /// </summary>
        /// <param name="shenYouGoodsID"></param>
        /// <param name="leftGoods"></param>
        /// <returns></returns>
        public static int CalculateCombatForce(GameClient client)
        {
            double nMinAttack = RoleAlgorithm.GetMinAttackV(client);

            double nMaxAttack = RoleAlgorithm.GetMaxAttackV(client);

            double nMinDefense = RoleAlgorithm.GetMinADefenseV(client);

            double nMaxDefense = RoleAlgorithm.GetMaxADefenseV(client);

            double nMinMAttack = RoleAlgorithm.GetMinMagicAttackV(client);

            double nMaxMAttack = RoleAlgorithm.GetMaxMagicAttackV(client);

            double nMinMDefense = RoleAlgorithm.GetMinMDefenseV(client);

            double nMaxMDefense = RoleAlgorithm.GetMaxMDefenseV(client);

            double nHit = RoleAlgorithm.GetHitV(client);

            double nDodge = RoleAlgorithm.GetDodgeV(client);

            double addAttackInjure = RoleAlgorithm.GetAddAttackInjureValue(client);

            double decreaseInjure = RoleAlgorithm.GetDecreaseInjureValue(client);

            double nMaxHP = RoleAlgorithm.GetMaxLifeV(client);

            double nMaxMP = RoleAlgorithm.GetMaxMagicV(client);

            double nLifeSteal = RoleAlgorithm.GetLifeStealV(client);

            // add元素属性战斗力 [XSea 2015/8/24]
            double dFireAttack = GameManager.ElementsAttackMgr.GetElementAttack(client, EElementDamageType.EEDT_Fire);
            double dWaterAttack = GameManager.ElementsAttackMgr.GetElementAttack(client, EElementDamageType.EEDT_Water);
            double dLightningAttack = GameManager.ElementsAttackMgr.GetElementAttack(client, EElementDamageType.EEDT_Lightning);
            double dSoilAttack = GameManager.ElementsAttackMgr.GetElementAttack(client, EElementDamageType.EEDT_Soil);
            double dIceAttack = GameManager.ElementsAttackMgr.GetElementAttack(client, EElementDamageType.EEDT_Ice);
            double dWindAttack = GameManager.ElementsAttackMgr.GetElementAttack(client, EElementDamageType.EEDT_Wind);

            CombatForceInfo CombatForce = null;
            CombatForce = Data.CombatForceDataInfo[1];

            if (CombatForce != null)
            {
                double nValue = 0.0;

                /*nValue = (nMinAttack / CombatForce.MinPhysicsAttackModulus + nMaxAttack / CombatForce.MaxPhysicsAttackModulus) / 2 +
                         (nMinDefense / CombatForce.MinPhysicsDefenseModulus + nMaxDefense / CombatForce.MaxPhysicsDefenseModulus) / 2 +
                         (nMinMAttack / CombatForce.MinMagicAttackModulus + nMaxMAttack / CombatForce.MaxMagicAttackModulus) / 2 +
                         (nMinMDefense / CombatForce.MinMagicDefenseModulus + nMaxMDefense / CombatForce.MaxMagicDefenseModulus) / 2 +
                         nHit / CombatForce.HitValueModulus + nDodge / CombatForce.DodgeModulus + nMaxHP / CombatForce.MaxHPModulus + nMaxMP / CombatForce.MaxMPModulus;*/
                nValue = (nMinAttack / CombatForce.MinPhysicsAttackModulus + nMaxAttack / CombatForce.MaxPhysicsAttackModulus) / 2 +
                         (nMinDefense / CombatForce.MinPhysicsDefenseModulus + nMaxDefense / CombatForce.MaxPhysicsDefenseModulus) / 2 +
                         (nMinMAttack / CombatForce.MinMagicAttackModulus + nMaxMAttack / CombatForce.MaxMagicAttackModulus) / 2 +
                         (nMinMDefense / CombatForce.MinMagicDefenseModulus + nMaxMDefense / CombatForce.MaxMagicDefenseModulus) / 2 +
                         addAttackInjure / CombatForce.AddAttackInjureModulus + decreaseInjure / CombatForce.DecreaseInjureModulus +
                         nHit / CombatForce.HitValueModulus + nDodge / CombatForce.DodgeModulus + nMaxHP / CombatForce.MaxHPModulus + nMaxMP / CombatForce.MaxMPModulus +
                         nLifeSteal / CombatForce.LifeStealModulus;

                // 元素属性 [XSea 2015/8/24]
                nValue += dFireAttack / CombatForce.FireAttack + dWaterAttack / CombatForce.WaterAttack +
                         dLightningAttack / CombatForce.LightningAttack + dSoilAttack / CombatForce.SoilAttack + dIceAttack / CombatForce.IceAttack +
                         dWindAttack / CombatForce.WindAttack;

                client.ClientData.CombatForce = (int)nValue;
            }

            return client.ClientData.CombatForce;
        }

#endregion 战斗力

#region 魔晶兑换

        /// <summary>
        /// 向DB请求魔晶兑换信息
        /// </summary>
        /// <param name="shenYouGoodsID"></param>
        /// <param name="leftGoods"></param>
        /// <returns></returns>
        public static void QueryToDBRoleMoJingExchangeInfo(GameClient client)
        {
            TCPOutPacket tcpOutPacket = null;

            int nDayId = Global.GetOffsetDayNow();//TimeUtil.NowDateTime().DayOfYear;
            if (nDayId == client.ClientData.MoJingExchangeDayID)
            {
                return;
            }

            string strDbCmd = string.Format("{0}:{1}", client.ClientData.RoleID, nDayId);
            //string strDbCmd = string.Format("{0}:{1}", client.ClientData.RoleID, nDayId);

            try
            {
                TCPProcessCmdResults dbRequestResult = Global.RequestToDBServer2(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool,
                                                                                    (int)TCPGameServerCmds.CMD_DB_QUERYMOJINGEXCHANGEINFO, strDbCmd, out tcpOutPacket, client.ServerId);
                if (TCPProcessCmdResults.RESULT_FAILED != dbRequestResult)
                {
                    client.ClientData.MoJingExchangeInfo = DataHelper.BytesToObject<Dictionary<int, int>>(tcpOutPacket.GetPacketBytes(), 6, tcpOutPacket.PacketDataSize - 6);
                    client.ClientData.MoJingExchangeDayID = nDayId;
                }
            }
            finally
            {
                if (null != tcpOutPacket)
                {
                    PushBackTcpOutPacket(tcpOutPacket);
                }
            }
        }

        /// <summary>
        /// 将不再使用的TCPOutPacket的回收
        /// </summary>
        /// <param name="tcpOutPacket"></param>
        public static void PushBackTcpOutPacket(TCPOutPacket tcpOutPacket)
        {
            if (null != tcpOutPacket)
            {
                //还回tcpoutpacket
                Global._TCPManager.TcpOutPacketPool.Push(tcpOutPacket);
            }
        }

        /// <summary>
        /// 装备回收成魔晶
        /// </summary>
        /// <param name="shenYouGoodsID"></param>
        /// <param name="leftGoods"></param>
        /// <returns></returns>
        public static void EquipExchangeToMoJing(GameClient client, List<GoodsData> GoodsList)
        {
            int totalJingYuan = 0;

            for (int i = GoodsList.Count - 1; i >= 0; i--)
            {
                GoodsData idsList = GoodsList[i];

                SystemXmlItem xmlItem = null;
                if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(idsList.GoodsID, out xmlItem) || null == xmlItem)
                    continue;

                int category = Global.GetGoodsCatetoriy(idsList.GoodsID);

                // 是否可以回收
                // 根据策划需求，装备可以回收，如果非装备但是配置了回收的魔晶值，那么也可以回收
                // modify by chenjingui. 20150625
                bool bCanExchange = false;

                //判断是否装备，装备才能分解
                if (!(category < (int)ItemCategories.TouKui || category > (int)ItemCategories.EquipMax))
                {
                    // modify by chenjingui 兼容旧代码，装备可回收
                    bCanExchange = true;
                }
                else if (xmlItem.GetIntValue("ChangeJinYuan") > 0)
                {
                    // modify by chenjingui 非装备，如果配置了回收的魔晶，那么也可回收
                    bCanExchange = true;
                }

                if (!bCanExchange)
                {
                    continue;
                }

                /*if (category < (int)ItemCategories.EquipMax)
                {
                    if (goodsData.ExcellenceInfo <= 0)
                        continue;
                }*/

                //装备强化等级小于等于40不能分离
                /*if (xmlItem.GetIntValue("ToLevel") < minEquipLevel)
                {
                    continue;
                }*/

                //普通装备直接使用ChangeJinYuan
                // 根据装备的卓越属性数量 取得兑换精元的系数 [1/21/2014 LiaoWei]
                double nModulus = 1.0;
                if (idsList.ExcellenceInfo != 0)// && (category < (int)ItemCategories.TouKui || category > (int)ItemCategories.EquipMax))
                {
                    int nCount = 0;

                    nCount = Global.GetEquipExcellencePropNum(idsList);

                    double[] nValue = null;

                    if (nCount != 0)
                    {
                        nValue = GameManager.systemParamsList.GetParamValueDoubleArrayByName("ZhuoYueHuiShouXiShu");

                        if (nValue != null && nValue.Length >= nCount)
                        {
                            nModulus = nValue[nCount - 1];
                        }
                    }
                }

                int nCanExchangedJingYuan = (int)(xmlItem.GetIntValue("ChangeJinYuan") * nModulus);
                //可兑换经验
                //int nCanExchangedExperience = nCanExchangedJingYuan * experienceMult;

                //护身符采用 JinYuanPrice/(24*7) * 剩余小时
                /*if ((int)ItemCategories.Decorate == category)
                {
                    TimeSpan timeSpan = DateTime.Parse(goodsData.Endtime) - TimeUtil.NowDateTime();

                    int jingYuanPrice = xmlItem.GetIntValue("JinYuanPrice");
                    //剩余的小时数转换为整数，向下取整
                    nCanExchangedJingYuan = ((int)Math.Floor(timeSpan.TotalHours)) * jingYuanPrice / (24 * 7);

                    //取最小值处理，避免物品开始使用时间出错导致兑换到非法的精元数量
                    nCanExchangedJingYuan = Math.Min(nCanExchangedJingYuan, jingYuanPrice);
                    nCanExchangedJingYuan = (int)(nCanExchangedJingYuan * 0.80);

                    //护身符不给经验
                    nCanExchangedExperience = 0;
                }*/

                //可兑换精元数量小于等于0不给兑换
                if (nCanExchangedJingYuan <= 0)
                {
                    continue;
                }

                /*string modGoodsCmd = String.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}", client.ClientData.RoleID, (int)ModGoodsTypes.Destroy,
                    idsList.Id, idsList.GoodsID, 0, idsList.Site, idsList.GCount, idsList.BagIndex, "");
                if (TCPProcessCmdResults.RESULT_OK != Global.ModifyGoodsByCmdParams(client, modGoodsCmd))
                {
                    continue;
                }*/

                totalJingYuan += nCanExchangedJingYuan;
                //totalExp += nCanExchangedExperience;

                GoodsList.RemoveAt(i);
            }

            //增加天地精元 必须设置通知客户端
            if (totalJingYuan > 0)
            {
                // 改成 绑定钻石 [5/22/2014 LiaoWei]
                GameManager.ClientMgr.ModifyTianDiJingYuanValue(client, totalJingYuan, "副本扫荡装备回收", true, true);

                // 七日活动
                SevenDayGoalEventObject evObj = SevenDayGoalEvPool.Alloc(client, ESevenDayGoalFuncType.RecoverMoJing);
                evObj.Arg1 = totalJingYuan;
                GlobalEventSource.getInstance().fireEvent(evObj);
            }
        }

#endregion 魔晶兑换

#region Boss动画相关

        /// <summary>
        /// 获取boss动画的校验和
        /// </summary>
        /// <param name="monsterID"></param>
        /// <param name="mapCode"></param>
        /// <param name="toX"></param>
        /// <param name="toY"></param>
        /// <param name="ticks"></param>
        /// <returns></returns>
        public static int GetBossAnimationCheckCode(int monsterID, int mapCode, int toX, int toY, int effectX, int effectY, long ticks)
        {
            CRC32 crc32 = new CRC32();
            crc32.update(BitConverter.GetBytes(monsterID));
            crc32.update(BitConverter.GetBytes(mapCode));
            crc32.update(BitConverter.GetBytes(toX));
            crc32.update(BitConverter.GetBytes(toY));
            crc32.update(BitConverter.GetBytes(effectX));
            crc32.update(BitConverter.GetBytes(effectY));
            crc32.update(BitConverter.GetBytes(ticks));

            uint cc = crc32.getValue() % 255;
            return (int)cc;
        }

#endregion Boss动画相关

#region 剧情副本相关

        /// <summary>
        /// 是否是剧情副本
        /// </summary>
        public static bool IsStoryCopyMapScene(int nMapID)
        {
            if (Data.StoryCopyMapID == null || Data.StoryCopyMapID.Length < 0)
                return false;

            for (int i = 0; i < Data.StoryCopyMapID.Length; ++i)
            {
                if (Data.StoryCopyMapID[i] == nMapID)
                    return true;
            }

            return false;
        }

        /// <summary>
        /// 通知客户端
        /// </summary>
        public static void NotifyClientStoryCopyMapInfo(int nCopyMap, int nInfo)
        {
            CopyMap MapInfo = null;
            MapInfo = GameManager.CopyMapMgr.FindCopyMap(nCopyMap);

            if (MapInfo == null)
                return;

            List<GameClient> objsList = null;
            objsList = MapInfo.GetClientsList(); //发送给所有地图的用户

            if (null == objsList)
                return;

            string strcmd = string.Format("{0}", nInfo);

            for (int i = 0; i < objsList.Count; i++)
                GameManager.ClientMgr.SendToClient(objsList[i], strcmd, (int)TCPGameServerCmds.CMD_SPR_STORYCOPYMAPINFO);

        }

#endregion 剧情副本相关

#region 保存钻石消费日志
        public static void SaveConsumeLog(GameClient client, int money, int type)
        {
            try
            {
                string dbCmds = client.ClientData.RoleID + ":" + money + ":" + type;
                string[] dbFields = null;
                Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, (int)TCPGameServerCmds.CMD_DB_SAVECONSUMELOG, dbCmds, out dbFields, client.ServerId);
            }
            catch (Exception e)
            {
                LogManager.WriteException(e.ToString());
            }
        }
#endregion

#region MU祈福相关
        /// <summary>
        /// 取得角色等级取得祈福区间ID
        /// </summary>
        public static int GetImpetrateTypeIDByLevel(GameClient Client)
        {
            int nRet = -1;

            int nChangeLife = -1;
            int nLevel = -1;

            nChangeLife = Client.ClientData.ChangeLifeCount;
            nLevel = Client.ClientData.Level;

            Dictionary<int, SystemXmlItem> dict = GameManager.systemImpetrateByLevelMgr.SystemXmlItemDict;

            foreach (var vItem in dict.Values)
            {
                if (nChangeLife >= vItem.GetIntValue("MinZhuanSheng") && nChangeLife <= vItem.GetIntValue("MaxZhuanSheng"))
                {
                    if (nLevel >= vItem.GetIntValue("MinLevel") && nLevel <= vItem.GetIntValue("MaxLevel"))
                    {
                        nRet = vItem.GetIntValue("ID");
                        break;
                    }
                }

            }

            return nRet;
        }

#endregion MU祈福相关

#region 处理分档首次充值奖励  送绑定钻石
        /// <summary>
        /// 首次充值送绑钻
        /// </summary>
        /// <param name="client"></param>
        /// <param name="addMoney"></param>
        /// <param name="userId"></param>
        /// <param name="rid"></param>
        public static void ProcessSendBindGold(GameClient client, int bindMoney, string userId, int rid, string firstbindData)
        {
            //正常流程
            if (client != null)
            {

                GameManager.ClientMgr.SendToClient(client, firstbindData, (int)TCPGameServerCmds.CMD_SPR_GETFIRSTCHARGEINFO);//通知客户端刷新送绑钻界面
                GameManager.ClientMgr.AddUserGold(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, bindMoney, "首次充值送绑钻(在线)");

                //GameManager.logDBCmdMgr.AddDBLogInfo(-1, "首充等级", "首充档次：" + addMoney, client.ClientData.RoleName, "首充等级：" + Global.GetUnionLevel(client), "增加", bindMoney, client.ClientData.ZoneID);
            }
            else//非正常流程，角色不在线
            {
                GameManager.ClientMgr.AddUserGoldOffLine(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, rid, bindMoney, "首次充值送绑钻(离线)", userId);
            }
        }
        /// <summary>
        /// 初始化充值配置表
        /// </summary>
        public static void InitFirstChargeConfigData()
        {
            XElement xml = null;
            try
            {
                String strCmd = GameManager.GameConfigMgr.GetGameConfigItemStr("platformtype", "app");
                strCmd = strCmd.ToLower();
                const string fileName = "Config/MU_ChongZhi.xml";
                string sectionKey = string.Empty;
                ChargePlatformType cpt = ChargePlatformType.CPT_Unknown;

                if (strCmd == "app")
                {
                    sectionKey = "dl_app";
                    cpt = ChargePlatformType.CPT_App;
                }
                else if (strCmd == "yueyu")
                {
                    sectionKey = "dl_yueyu";
                    cpt = ChargePlatformType.CPT_YueYu;
                }
                else if (strCmd == "andrid" || strCmd == "android" || strCmd == "yyb")
                {
                    sectionKey = "dl_android";
                    cpt = ChargePlatformType.CPT_Android;
                }
                else
                {
                    sectionKey = "dl_app";
                    cpt = ChargePlatformType.CPT_App;
                }

                //System.Console.WriteLine(fileName);
                GeneralCachingXmlMgr.RemoveCachingXml(Global.GameResPath(fileName));
                xml = GeneralCachingXmlMgr.GetXElement(Global.GameResPath(fileName));

                if (xml != null)
                {
                    IEnumerable<XElement> xmlItems = xml.Elements().First(_xml => _xml.Attribute("TypeID").Value.ToString().ToLower() == sectionKey).Elements();

                    SingleChargeData chargeData = new SingleChargeData();
                    chargeData.ChargePlatType = (int)cpt;
                    foreach (var item in xmlItems)
                    {
                        if (null != item)
                        {
                            int money = (int)Global.GetSafeAttributeLong(item, "RMB");
                            int bindmoney = (int)Global.GetSafeAttributeLong(item, "FirstBindZuanShi");
                            int id = (int)Global.GetSafeAttributeLong(item, "ID");

                            if (id == YueKaManager.YUE_KA_MONEY_ID_IN_CHARGE_FILE)
                            {
                                chargeData.YueKaMoney = money;
                            }

                            if (!chargeData.singleData.ContainsKey(money))
                            {
                                chargeData.singleData[money] = bindmoney;
                            }
                        }
                    }

                    //将配置信息发给DB
                    if (1 == Global.sendToDB<int, byte[]>((int)TCPGameServerCmds.CMD_DB_FIRSTCHARGE_CONFIG, DataHelper.ObjectToBytes<SingleChargeData>(chargeData), GameManager.LocalServerId))
                    {
                        Data.ChargeData = chargeData;
                    }
                }
                else
                {
                    LogManager.WriteLog(LogTypes.Fatal, string.Format("丢失平台充值配置文件{0}", fileName));
                }
            }
            catch (Exception e)
            {
                xml = null;
                LogManager.WriteException("读取充值xml错误：" + e.ToString());
            }
        }
        /// <summary>
        /// 获取各个充值档首次充值信息
        /// </summary>
        /// <param name="tcpMgr"></param>
        /// <param name="socket"></param>
        /// <param name="tcpClientPool"></param>
        /// <param name="pool"></param>
        /// <param name="nID"></param>
        /// <param name="data"></param>
        /// <param name="count"></param>
        /// <param name="tcpOutPacket"></param>
        /// <returns></returns>
        public static TCPProcessCmdResults ProcessGetFirstChargeInfoCMD(TCPManager tcpMgr, TMSKSocket socket, TCPClientPool tcpClientPool, TCPOutPacketPool pool, int nID, byte[] data, int count, out TCPOutPacket tcpOutPacket)
        {
            tcpOutPacket = null;
            string cmdData = null;
            string[] fields = null;
            try
            {
                cmdData = new UTF8Encoding().GetString(data, 0, count);
            }
            catch (Exception) //解析错误
            {
                LogManager.WriteLog(LogTypes.Error, string.Format("解析指令字符串错误, CMD={0}, Client={1}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket)));
                return TCPProcessCmdResults.RESULT_FAILED;
            }

            try
            {
                fields = cmdData.Split(':');
                int roleID = Convert.ToInt32(fields[0]);
                GameClient client = GameManager.ClientMgr.FindClient(socket);
                if (null == client || client.ClientData.RoleID != roleID)
                {
                    LogManager.WriteLog(LogTypes.Error, string.Format("根据RoleID定位GameClient对象失败, CMD={0}, Client={1}, RoleID={2}", (TCPGameServerCmds)nID, Global.GetSocketRemoteEndPoint(socket), roleID));
                    return TCPProcessCmdResults.RESULT_FAILED;
                }
                string[] dbFields = null;
                // string returndata = Global.GetRoleParamByName(client, RoleParamName.FirstChargeOfGood);
                Global.RequestToDBServer(Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, (int)TCPGameServerCmds.CMD_SPR_GETFIRSTCHARGEINFO, client.strUserID, out dbFields, client.ServerId);
                if (null == dbFields)
                    return TCPProcessCmdResults.RESULT_FAILED;

                string returndata = dbFields[0];
                if (returndata == "-1")
                    returndata = "";
                string strcmd = string.Format("{0}", returndata);
                tcpOutPacket = TCPOutPacket.MakeTCPOutPacket(pool, strcmd, nID);

            }
            catch (Exception ex)
            {
                DataHelper.WriteFormatExceptionLog(ex, "ProcessGetFirstChargeInfoCMD", false);
            }
            return TCPProcessCmdResults.RESULT_DATA;
        }

#endregion

        public static void UpdateHeFuLoginFlag(GameClient client)
        {
            // 合服登陆活动
            HeFuLoginActivity LoginActivity = HuodongCachingMgr.GetHeFuLoginActivity();
            if (null != LoginActivity && LoginActivity.InActivityTime())
            {
                // 检查是否登陆过
                int nFlag = Global.GetRoleParamsInt32FromDB(client, RoleParamName.HeFuLoginFlag);
                int nValue = Global.GetIntSomeBit(nFlag, (int)HeFuLoginFlagTypes.HeFuLogin_Login);
                if (0 == nValue)
                {
                    // 设置登陆标记
                    nFlag = Global.SetIntSomeBit((int)HeFuLoginFlagTypes.HeFuLogin_Login, nFlag, true);
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.HeFuLoginFlag, nFlag, true);
                }
            }
        }

        /// <summary>
        /// 获取本地IP地址信息
        /// </summary>
        public static string GetLocalAddressIPs()
        {
            string addressIP = "";
            //获取本地的IP地址
            try
            {
                foreach (IPAddress _IPAddress in Dns.GetHostEntry(Dns.GetHostName()).AddressList)
                {
                    if (_IPAddress.AddressFamily.ToString() == "InterNetwork")
                    {
                        if (addressIP == "")
                        {
                            addressIP = _IPAddress.ToString();
                        }
                        else
                        {
                            addressIP += "_" + _IPAddress.ToString();
                        }
                    }
                }
            }
            catch
            {

            }
            return addressIP;
        }

        // 
        public static void UpdateHeFuTotalLoginFlag(GameClient client)
        {
            // 合服累计登陆活动的计数
            HeFuTotalLoginActivity TLActivity = HuodongCachingMgr.GetHeFuTotalLoginActivity();
            if (null != TLActivity && TLActivity.InActivityTime())
            {
                // 检查上次登陆是否是今天
                int lastloginday = Global.GetRoleParamsInt32FromDB(client, RoleParamName.HeFuTotalLoginDay);
                int currday = Global.GetOffsetDay(TimeUtil.NowDateTime());
                if (currday == Global.GetOffsetDay(GetHefuStartDay()))
                {
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.HeFuTotalLoginNum, 1, true);
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.HeFuTotalLoginDay, currday, true);
                }
                else if (lastloginday < currday)
                {
                    int Num = Global.GetRoleParamsInt32FromDB(client, RoleParamName.HeFuTotalLoginNum);
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.HeFuTotalLoginNum, Num + 1, true);
                    Global.SaveRoleParamsInt32ValueToDB(client, RoleParamName.HeFuTotalLoginDay, currday, true);
                }
            }
        }

        /// <summary>
        /// 是不是王城占领者
        /// </summary>
        public static bool IsKingCityLeader(GameClient client)
        {
            int lingDiID = 0;
            BangHuiLingDiItemData lingdiItemData = JunQiManager.GetItemByLingDiID((int)LingDiIDs.LuoLanChengZhan);
            if (null != lingdiItemData)
            {
                if (lingdiItemData.BHID == client.ClientData.Faction && client.ClientData.BHZhiWu == (int)ZhanMengZhiWus.ShouLing)
                {
                    return true;
                }
            }

            return false;
        }

#region 特殊设备表

        /// <summary>
        /// 特殊设备字典线程锁
        /// </summary>
        private static object _SpecMachineMutex = new object();

        /// <summary>
        /// 特殊设备字典
        /// </summary>
        private static Dictionary<string, int> SpecMachineDict = new Dictionary<string, int>();

        /// <summary>
        /// 特殊设备经验倍数
        /// </summary>
        private static int SpecMachineExp = 50;

        /// <summary>
        /// 加载特殊设备信息
        /// </summary>
        public static void LoadSpecialMachineConfig()
        {
            lock (_SpecMachineMutex)
            {
                SpecMachineDict.Clear();
                string strParam1 = GameManager.systemParamsList.GetParamValueByName("SheBeiExp");
                if (null == strParam1)
                {
                    return;
                }
                string[] fields = strParam1.Split('|');
                for (int i = 0; i < fields.Length; i++)
                {
                    SpecMachineDict[fields[i].ToUpper()] = 1;
                }

                string strParam2 = GameManager.systemParamsList.GetParamValueByName("PingBanBuff");
                if (null == strParam2)
                {
                    return;
                }

                fields = strParam2.Split(',');
                if (fields.Length < 2)
                {
                    return;
                }
                SpecMachineExp = Convert.ToInt32(fields[1]);
            }
        }

        /// <summary>
        /// 判断一个设备是否为特殊设备
        /// </summary>
        public static bool IsSpecialMachine(string key)
        {
            lock (_SpecMachineMutex)
            {
                return SpecMachineDict.ContainsKey(key.ToUpper());
            }
        }

        /// <summary>
        /// 取得经验倍数
        /// </summary>
        public static int GetSpecialMachineExp()
        {
            lock (_SpecMachineMutex)
            {
                return SpecMachineExp;
            }
        }

#endregion


#region 优先使用绑定材料

        /// <summary>
        /// 优先使用绑定材料
        /// 是：使用绑定，不够，使用非绑定
        /// 否：使用非绑定，不够，使用绑定
        /// </summary>
        /// <param name="client"></param>
        /// <param name="needID">材料id</param>
        /// <param name="needCount">材料数量</param>
        /// <param name="useBindFirst">是否优先使用绑定材料</param>
        /// <param name="useBind">使用绑定材料</param>
        /// <param name="useTimeLimit">使用时间限制材料</param>
        /// <returns>1=成功，-1=材料不足，-2=扣除失败</returns>
        public static int UseGoodsBindOrNot(GameClient client, int needID, int needCount, bool useBindFirst, out bool useBind, out bool useTimeLimit)
        {
            useBind = false;
            useTimeLimit = false;

            int nBindGoodNum = 0;
            int nNotBindGoodNum = 0;

            GoodsData goodsBind = Global.GetBindGoodsByID(client, needID);
            GoodsData goodsBindNo = Global.GetNotBindGoodsByID(client, needID);

            if (goodsBind == null && goodsBindNo == null)
                return -1;

            int allCount = 0;
            if (goodsBind != null)
            {
                nBindGoodNum = Global.GetTotalBindGoodsCountByID(client, goodsBind.GoodsID);
                allCount += nBindGoodNum;
            }

            if (goodsBindNo != null)
            {
                nNotBindGoodNum = Global.GetTotalNotBindGoodsCountByID(client, goodsBindNo.GoodsID);
                allCount += nNotBindGoodNum;
            }

            if (allCount < needCount)
                return -1;

            int nNowSub = 0;
            int nSubTmp = 0;

            if (useBindFirst && nBindGoodNum > 0)
            {
                if (nBindGoodNum < needCount)// 绑定物品不够
                {
                    nSubTmp = needCount - nBindGoodNum;
                    nNowSub = nBindGoodNum;
                }
                else
                {
                    nSubTmp = 0;
                    nNowSub = needCount;
                }

                if (goodsBind != null
                    && !GameManager.ClientMgr.NotifyUseBindGoods(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, goodsBind.GoodsID, nNowSub, false, out useBind, out useTimeLimit))
                    return -2;

                if (nSubTmp > 0
                    && goodsBindNo != null
                    && !GameManager.ClientMgr.NotifyUseNotBindGoods(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, goodsBindNo.GoodsID, nSubTmp, false, out useBind, out useTimeLimit))
                    return -2;

                useBind = true;
            }
            else
            {
                if (nNotBindGoodNum > 0)
                {
                    if (nNotBindGoodNum < needCount)// 非绑定物品不够
                    {
                        nSubTmp = needCount - nNotBindGoodNum;
                        nNowSub = nNotBindGoodNum;
                    }
                    else
                    {
                        nSubTmp = 0;
                        nNowSub = needCount;
                    }
                }
                else
                {
                    if (nBindGoodNum > needCount)
                        nSubTmp = needCount;
                    else
                        nSubTmp = nBindGoodNum;
                }

                if (nNowSub > 0
                    && goodsBindNo != null && !GameManager.ClientMgr.NotifyUseNotBindGoods(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, goodsBindNo.GoodsID, nNowSub, false, out useBind, out useTimeLimit))
                    return -2;

                if (nSubTmp > 0)
                {
                    if (goodsBind != null && !GameManager.ClientMgr.NotifyUseBindGoods(Global._TCPManager.MySocketListener, Global._TCPManager.tcpClientPool, Global._TCPManager.TcpOutPacketPool, client, goodsBind.GoodsID, nSubTmp, false, out useBind, out useTimeLimit))
                        return -2;

                    useBind = true;
                }
            }

            return 1;
        }

#endregion

#region 统计玩家交易数据

        /// <summary>
        /// 增加交易统计的计数 返回增加后的结果
        /// </summary>
        public static int IncreaseTradeCount(GameClient client, string strDayID, string strCount, int addCount = 1)
        {
            int currDayID = Global.GetOffsetDayNow();
            int dayID = Global.GetRoleParamsInt32FromDB(client, strDayID);
            int currCount = Global.GetRoleParamsInt32FromDB(client, strCount);

            // 不是今天设置成1
            if (dayID != currDayID)
            {
                currCount = 1;
            }
            // 增加
            else
            {
                currCount += addCount;
            }

            // 存储
            Global.SaveRoleParamsStringToDB(client, strDayID, currDayID.ToString(), true);
            Global.SaveRoleParamsStringToDB(client, strCount, currCount.ToString(), true);
            return currCount;
        }

        /// <summary>
        /// 取得交易统计的计数
        /// </summary>
        public static int GetTradeCount(GameClient client, string strDayID, string strCount)
        {
            int currDayID = Global.GetOffsetDayNow();
            int dayID = Global.GetRoleParamsInt32FromDB(client, strDayID);
            int currCount = Global.GetRoleParamsInt32FromDB(client, strCount);

            // 不是今天设置成1
            if (dayID != currDayID)
            {
                return 0;
            }
            return currCount;
        }

#endregion

        /// <summary>
        /// 取得一个json串
        /// </summary>
        public static string GetJson(Dictionary<string, string> jsonDict)
        {
            if (null == jsonDict || jsonDict.Count <= 0)
            {
                return "";
            }

            string strResult = "{";
            bool bFrist = true;
            foreach (var item in jsonDict)
            {
                if (!bFrist)
                {
                    strResult += ",";
                }

                strResult += string.Format("\"{0}\":\"{1}\"", item.Key, item.Value);

                bFrist = false;
            }
            strResult += "}";

            return strResult;
        }

        public static string doPost(string url, string body, int timeout = 0/*超时时间*/)
        {
            string encodingName = "utf-8";
            string str = "";
            if ((url == null) || (url == ""))
            {
                return null;
            }
            WebRequest request = WebRequest.Create(url);
            request.Method = "POST";
            request.ContentType = "application/x-www-form-urlencoded";
            if (timeout > 0)
            {
                request.Timeout = timeout;
            }

            byte[] bytes = null;
            if (body == null)
            {
                request.ContentLength = 0L;
            }
            else
            {
                try
                {
                    bytes = Encoding.Default.GetBytes(body);
                    request.ContentLength = bytes.Length;
                    Stream requestStream = request.GetRequestStream();
                    requestStream.Write(bytes, 0, bytes.Length);
                    requestStream.Close();
                }
                catch (Exception e)
                {
                    DataHelper.WriteFormatExceptionLog(e, "doPost", false);
                    return null;
                }
            }

            try
            {
                Stream responseStream = request.GetResponse().GetResponseStream();
                byte[] buffer = new byte[0x200];
                for (int j = responseStream.Read(buffer, 0, 0x200); j > 0; j = responseStream.Read(buffer, 0, 0x200))
                {
                    Encoding encoding = Encoding.GetEncoding(encodingName);
                    str = str + encoding.GetString(buffer, 0, j);
                }
                return str;
            }
            catch (Exception exception2)
            {
                DataHelper.WriteFormatExceptionLog(exception2, "doPost", false);
                return null;
            }

            return str;
        }

        /// <summary>
        /// 根据职业检查是否可以发放奖励 [XSea 2015/5/19]
        /// </summary>
        /// <param name="client">角色</param>
        /// <param name="nMagicID">技能id</param>
        /// <returns></returns>
        public static bool IsCanGiveRewardByOccupation(GameClient client, int goodsId)
        {
            // 判空
            if (null == client)
                return false;

            // 物品不存在 不可发放
            SystemXmlItem systemGoods = null;
            if (!GameManager.SystemGoods.SystemXmlItemDict.TryGetValue(goodsId, out systemGoods))
                return false;

            int nOccu = CalcOriginalOccupationID(client.ClientData.Occupation); // 角色职业
            int nGoodsOccu = Global.GetMainOccupationByGoodsID(goodsId); //物品主职业

            // -1等于物品无限制 通用
            if (nGoodsOccu == -1)
                return true;

            // 检查物品与主职业是否匹配
            if (Global.IsRoleOccupationMatchGoods(nOccu, goodsId))
            {
                // 物品与职业匹配，是魔剑士，则针对力智2选1
                if (GameManager.MagicSwordMgr.IsMagicSword(nOccu))
                {
                    // 物品类型与魔剑士类型匹配 可发放
                    if (GameManager.MagicSwordMgr.IsCanAward2MagicSword(client, goodsId))
                        return true;
                    else // 物品类型与魔剑士类型不匹配 不可发放
                        return false;
                }
                else // 物品与职业匹配，不是魔剑士 可发放
                    return true;
            }
            else if (GameManager.MagicSwordMgr.IsMagicSword(nOccu))
            {
                // 找该武器是否为魔剑士可用大天使武器
                if (GameManager.MagicSwordMgr.IsMagicSwordAngelWeapon(client, goodsId))
                {
                    return true;
                }
            }

            // 物品与职业不匹配 不可发放
            return false;
        }

#region 跨服相关

        /// <summary>
        /// 获取跨服登录信息
        /// </summary>
        /// <param name="client"></param>
        /// <returns></returns>
        public static KuaFuServerLoginData GetClientKuaFuServerLoginData(GameClient client)
        {
            TMSKSocket clientSocket = client.ClientSocket;
            if (null != clientSocket)
            {
                if (null != clientSocket.ClientKuaFuServerLoginData)
                {
                    return clientSocket.ClientKuaFuServerLoginData;
                }
            }

            return new KuaFuServerLoginData();
        }

        /// <summary>
        /// 获取跨服登录信息
        /// </summary>
        /// <param name="clientSocket"></param>
        /// <returns></returns>
        public static KuaFuServerLoginData GetClientKuaFuServerLoginData(TMSKSocket clientSocket)
        {
            if (null != clientSocket)
            {
                if (null != clientSocket.ClientKuaFuServerLoginData)
                {
                    return clientSocket.ClientKuaFuServerLoginData;
                }
            }

            return new KuaFuServerLoginData();
        }

#endregion 跨服相关

#region 玩家的登陆记录

        // 记录玩家x天内登陆的记录
        private static int RoleLoginRecordDayCount = 50;

        /// <summary>
        /// 更新角色的登陆记录
        /// </summary>
        public static void UpdateRoleLoginRecord(GameClient client)
        {
            int currDayID = Global.GetOffsetDayNow();

            string strParam = Global.GetRoleParamByName(client, RoleParamName.RoleLoginRecorde);

            int recordDayID = 0;
            string strRecord = "";

            string[] strFields = null == strParam ? null : strParam.Split(',');
            if (null != strFields && strFields.Length == 2)
            {
                recordDayID = Convert.ToInt32(strFields[0]);
                strRecord = strFields[1];
            }

            // 今天已经更新过了
            if (recordDayID == currDayID)
            {
                return;
            }

            if (recordDayID > 0)
            {
                // 把上次记录和今天之间设置成未登录0
                for (int i = recordDayID + 1; i < currDayID; i++)
                {
                    strRecord = "0" + strRecord;
                }
            }

            // 把今天设成已经登陆1
            strRecord = "1" + strRecord;

            // 只保留x天的记录
            if (strRecord.Length > RoleLoginRecordDayCount)
            {
                strRecord = strRecord.Substring(0, RoleLoginRecordDayCount);
            }

            string result = string.Format("{0},{1}", currDayID, strRecord);

            // 存储
            Global.SaveRoleParamsStringToDB(client, RoleParamName.RoleLoginRecorde, result, true);
        }

        /// <summary>
        /// 检查玩家在某段时间内是否登陆
        /// 如果输入的时间超过记录范围，默认没登陆过
        /// </summary>
        public static bool CheckRoleIsLoginByTime(GameClient client, DateTime beginTime, DateTime endTime)
        {
            int beginDayID = Global.GetOffsetDay(beginTime);
            int endDayID = Global.GetOffsetDay(endTime);
            // 开服日期
            int startDayID = Global.GetOffsetDay(Global.GetKaiFuTime());

            string strParam = Global.GetRoleParamByName(client, RoleParamName.RoleLoginRecorde);

            int recordDayID = 0;
            string strRecord = "";

            string[] strFields = null == strParam ? null : strParam.Split(',');
            if (null != strFields && strFields.Length == 2)
            {
                recordDayID = Convert.ToInt32(strFields[0]);
                strRecord = strFields[1];
            }

            int recordDayCount = strRecord.Length;

            if (recordDayCount <= 0)
                return false;

            for (int i = beginDayID; i <= endDayID && i <= recordDayID; ++i)
            {
                // 如果要判断的这天 在开服日期之前，就认为他登陆过了
                if (i < startDayID)
                {
                    return true;
                }

                // 这天的索引
                int index = recordDayID - i;
                if (index >= recordDayCount)
                {
                    continue;
                }

                if ('1' == strRecord[index])
                {
                    return true;
                }
            }

            return false;
        }

#endregion

        /// <summary>
        /// 从szFileds转化得到GoodsData数据
        /// </summary>
        /// <param name="szFields"></param>
        /// <param name="start"></param>
        /// <returns></returns>
        public static GoodsData ParseGoodsFromStr_7(string[] szFields, int start)
        {
            if (szFields == null) return null;
            if (szFields.Length - start != 7) return null;

            int[] iArray = Global.StringArray2IntArray(szFields, start, 7);
            if (iArray == null) return null;

            return Global.GetNewGoodsData(iArray[0], iArray[1], 0, iArray[3], iArray[2], 0, iArray[5], 0, iArray[6], iArray[4], 0);
        }

#region 更新玩家二式技能等级
        public static void RefreshSecondSkillLevel(GameClient client, int magicCode)
        {
            SkillData skillData = Global.GetSkillDataByID(client, magicCode);
            if (null == skillData)
            {
                return;
            }

            for (int i = 0; i < 5; i++)
            {
                // 先看找没找到配置
                SystemXmlItem systemMagic = null;
                if (!GameManager.SystemMagicsMgr.SystemXmlItemDict.TryGetValue(magicCode, out systemMagic))
                {
                    break;
                }

                int nNextMagicID = systemMagic.GetIntValue("NextMagicID");
                // 没有后置技能就break
                if (nNextMagicID <= 0)
                {
                    break;
                }

                SkillData NextSkillData = Global.GetSkillDataByID(client, nNextMagicID);
                if (null != NextSkillData)
                {
                    NextSkillData.SkillLevel = skillData.SkillLevel;
                }

                magicCode = nNextMagicID;
            }
        }
#endregion

#region 执行自动原地复活
        /// <summary>
        /// 执行自动原地复活 [XSea 2015/6/26]
        /// </summary>
        /// <param name="client">角色</param>
        /// <returns></returns>
        public static bool AutoRevive(GameClient client)
        {
            if (null == client)
                return false;

            long lNowTicks = TimeUtil.NOW(); // 毫秒
            long lLastTicks = GetRoleParamsInt64FromDB(client, RoleParamName.LastAutoReviveTicks); // 最后自动重生时间 毫秒
            // 先检查自动原地复活cd
            if (lLastTicks > 0 && lNowTicks - lLastTicks < MerlinSystemParamsConfigData._ReviveCDTime * 1000)
                return false;

            // 再检查自动原地复活几率
            int nRevivePercent = (int)(RoleAlgorithm.GetAutoRevivePercent(client) * 10000);

            // 几率 = 0
            if (nRevivePercent <= 0)
                return false;

            else // 检查几率
            {
                int nRandom = GetRandomNumber(0, 10001);

                // 没触发
                if (nRandom > nRevivePercent)
                    return false;
            }
            // 最后检查自动原地复活地图
            if (!IsAutoReviveMap(client.ClientData.MapCode))
                return false;

            // 记录复活时间
            SaveRoleParamsInt64ValueToDB(client, RoleParamName.LastAutoReviveTicks, lNowTicks, true);

            // 都通过 执行自动原地复活
            ClientRealive(client, client.ClientData.PosX, client.ClientData.PosY, client.ClientData.RoleDirection);

            return true;
        }
#endregion


        public static bool CancelTask(GameClient client, int dbID, int taskID)
        {
            string cmd2db = StringUtil.substitute("{0}:{1}:{2}", client.ClientData.RoleID, dbID, taskID);
            string[] dbFields = Global.ExecuteDBCmd((int)TCPGameServerCmds.CMD_SPR_ABANDONTASK, cmd2db, client.ServerId);
            if (null == dbFields || dbFields.Length < 1 || dbFields[0] == "-1")
                return false;

            //添加到角色的列表中
            if (null != client.ClientData.TaskDataList)
            {
                //直接清空任务道具
                ProcessTask.ClearTaskGoods(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, taskID);

                lock (client.ClientData.TaskDataList)
                {
                    for (int i = 0; i < client.ClientData.TaskDataList.Count; i++)
                    {
                        if (client.ClientData.TaskDataList[i].DoingTaskID == taskID)
                        {
                            client.ClientData.TaskDataList.RemoveAt(i);
                            break;
                        }
                    }
                }
            }

            //修改目标NPC的状态
            SystemXmlItem systemTask = null;
            if (GameManager.SystemTasksMgr.SystemXmlItemDict.TryGetValue(taskID, out systemTask))
            {
                int state = 0;
                int sourceNPC = systemTask.GetIntValue("SourceNPC");
                if (-1 != sourceNPC)
                {
                    // NPC的任务状态更新通知
                    state = Global.ComputeNPCTaskState(client, client.ClientData.TaskDataList, sourceNPC);
                    GameManager.ClientMgr.NotifyUpdateNPCTaskSate(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, (sourceNPC + SpriteBaseIds.NpcBaseId), state);
                }

                int destNPC = systemTask.GetIntValue("DestNPC");
                if (-1 != destNPC && sourceNPC != destNPC)
                {
                    state = Global.ComputeNPCTaskState(client, client.ClientData.TaskDataList, destNPC);
                    GameManager.ClientMgr.NotifyUpdateNPCTaskSate(Global._TCPManager.MySocketListener, Global._TCPManager.TcpOutPacketPool, client, (destNPC + SpriteBaseIds.NpcBaseId), state);
                }

                GameManager.ClientMgr.NotifyDailyTaskData(client);
            }

            return true;
        }

        public static RoleData4Selector RoleDataEx2RoleData4Selector(RoleDataEx roledata)
        {
            if (roledata == null) return null;

            RoleDataMini rdMini = ClientDataToRoleDataMini(new SafeClientData() { RoleData = roledata });
            RoleData4Selector sel = new RoleData4Selector();
            sel.RoleID = rdMini.RoleID;
            sel.RoleName = rdMini.RoleName;
            sel.RoleSex = rdMini.RoleSex;
            sel.Occupation = rdMini.Occupation;
            sel.Level = rdMini.Level;
            sel.Faction = rdMini.Faction;
            sel.OtherName = rdMini.OtherName;
            sel.GoodsDataList = rdMini.GoodsDataList;
            sel.MyWingData = rdMini.MyWingData;
            sel.CombatForce = roledata.CombatForce;
            sel.AdmiredCount = roledata.AdmiredCount;
            //  sel.FashionWingsID = 不处理
            sel.SettingBitFlags = rdMini.SettingBitFlags;

            return sel;
        }
    }
}
